{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/varaint/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/varaint/source/favicon.svg","path":"favicon.svg","modified":0,"renderable":1},{"_id":"themes/varaint/source/favicon1.png","path":"favicon1.png","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/module.js","path":"js/module.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/fonts/din.otf","path":"css/fonts/din.otf","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-aea.js","path":"js/google-code-prettify/lang-aea.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-agc.js","path":"js/google-code-prettify/lang-agc.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-basic.js","path":"js/google-code-prettify/lang-basic.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-cl.js","path":"js/google-code-prettify/lang-cl.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-apollo.js","path":"js/google-code-prettify/lang-apollo.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-clj.js","path":"js/google-code-prettify/lang-clj.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-css.js","path":"js/google-code-prettify/lang-css.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-cbm.js","path":"js/google-code-prettify/lang-cbm.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-dart.js","path":"js/google-code-prettify/lang-dart.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-el.js","path":"js/google-code-prettify/lang-el.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-erl.js","path":"js/google-code-prettify/lang-erl.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-erlang.js","path":"js/google-code-prettify/lang-erlang.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-go.js","path":"js/google-code-prettify/lang-go.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-fs.js","path":"js/google-code-prettify/lang-fs.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lasso.js","path":"js/google-code-prettify/lang-lasso.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-hs.js","path":"js/google-code-prettify/lang-hs.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-latex.js","path":"js/google-code-prettify/lang-latex.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-Splus.js","path":"js/google-code-prettify/lang-Splus.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lassoscript.js","path":"js/google-code-prettify/lang-lassoscript.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lisp.js","path":"js/google-code-prettify/lang-lisp.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lgt.js","path":"js/google-code-prettify/lang-lgt.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ll.js","path":"js/google-code-prettify/lang-ll.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-logtalk.js","path":"js/google-code-prettify/lang-logtalk.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lsp.js","path":"js/google-code-prettify/lang-lsp.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-llvm.js","path":"js/google-code-prettify/lang-llvm.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lua.js","path":"js/google-code-prettify/lang-lua.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ls.js","path":"js/google-code-prettify/lang-ls.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ml.js","path":"js/google-code-prettify/lang-ml.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-matlab.js","path":"js/google-code-prettify/lang-matlab.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-n.js","path":"js/google-code-prettify/lang-n.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-mumps.js","path":"js/google-code-prettify/lang-mumps.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-pascal.js","path":"js/google-code-prettify/lang-pascal.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-nemerle.js","path":"js/google-code-prettify/lang-nemerle.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rkt.js","path":"js/google-code-prettify/lang-rkt.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rust.js","path":"js/google-code-prettify/lang-rust.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-s.js","path":"js/google-code-prettify/lang-s.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-proto.js","path":"js/google-code-prettify/lang-proto.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-scala.js","path":"js/google-code-prettify/lang-scala.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rd.js","path":"js/google-code-prettify/lang-rd.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-sql.js","path":"js/google-code-prettify/lang-sql.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-r.js","path":"js/google-code-prettify/lang-r.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ss.js","path":"js/google-code-prettify/lang-ss.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-scm.js","path":"js/google-code-prettify/lang-scm.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vb.js","path":"js/google-code-prettify/lang-vb.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-swift.js","path":"js/google-code-prettify/lang-swift.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-tcl.js","path":"js/google-code-prettify/lang-tcl.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vhd.js","path":"js/google-code-prettify/lang-vhd.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-tex.js","path":"js/google-code-prettify/lang-tex.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vbs.js","path":"js/google-code-prettify/lang-vbs.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vhdl.js","path":"js/google-code-prettify/lang-vhdl.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-wiki.js","path":"js/google-code-prettify/lang-wiki.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-yaml.js","path":"js/google-code-prettify/lang-yaml.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-xq.js","path":"js/google-code-prettify/lang-xq.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-xquery.js","path":"js/google-code-prettify/lang-xquery.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/prettify.css","path":"js/google-code-prettify/prettify.css","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/prettify.js","path":"js/google-code-prettify/prettify.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-yml.js","path":"js/google-code-prettify/lang-yml.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/run_prettify.js","path":"js/google-code-prettify/run_prettify.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/tomorrow-night-eighties.min.css","path":"js/google-code-prettify/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.eot","path":"css/fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.svg","path":"css/fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.ttf","path":"css/fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.woff","path":"css/fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/1.jpg","path":"banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/lib.js","path":"js/lib.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/5.jpg","path":"banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/2.jpg","path":"banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/3.jpg","path":"banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/4.jpg","path":"banner/4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"a7169226e85e1b58a4eac43a6b2fd63a140c4f26","modified":1481384508000},{"_id":"source/.project","hash":"4679bdfe179f3c66a07355e14fb628178a3c7e6e","modified":1481640559000},{"_id":"themes/varaint/.DS_Store","hash":"07484dfa2c12067a241ce0986892b62703fd98a6","modified":1493732825000},{"_id":"source/.DS_Store","hash":"fd372de4de149d2545fa310d85575d313cd2a63b","modified":1485772474000},{"_id":"themes/varaint/_config.yml","hash":"9e62d0d1a3472d29785f3d80c5797e0604a22e0e","modified":1493734646000},{"_id":"themes/varaint/README.md","hash":"e165ab166ec9ceda2e3a369f00514602c3532d75","modified":1487687670000},{"_id":"source/about/about.md","hash":"d918ea347c2d46c29ce64dd25abec82730169cac","modified":1493728428000},{"_id":"source/_posts/ES6与ES5.md","hash":"e1d1e0bea2afff1b484b35c93ef81abaced4be6c","modified":1487567608000},{"_id":"source/_posts/.DS_Store","hash":"97d713e55a25caa29822459d1cb0b00fdc404cec","modified":1485169741000},{"_id":"source/_posts/TypeScript中的OOP.md","hash":"0699265049a9d6a663ab09fcf4c9b052ff807216","modified":1490324266000},{"_id":"source/_posts/css布局.md","hash":"5a9548c6faa3c7ed8d46844dbac1928d4113100e","modified":1485427932000},{"_id":"source/_posts/JavaScript实例应用.md","hash":"bcf2b9b68d9fe58d34a8865802465fd77291b892","modified":1491529107000},{"_id":"source/_posts/react学习.md","hash":"125991a525f6d9a671647288a04fc1f52fa584fc","modified":1493918747000},{"_id":"source/_posts/js中的arguments.md","hash":"dd682f372590d62eaf196158898c9066a0eb3795","modified":1485169828000},{"_id":"source/_posts/mongodb的一些操作.md","hash":"2b7c33ed21c1d2592288e8b953e58c20ba09e5f5","modified":1491017750000},{"_id":"source/_posts/three-js入门.md","hash":"64fb1ef860612cce07a486dae06ea5c7c5a35023","modified":1489114471000},{"_id":"source/_posts/mongodb初探.md","hash":"c547eb5d7e3af5c7f7ea3b664de99413fdc13487","modified":1485273810000},{"_id":"source/_posts/基于websocket实现服务器浏览器持续通信.md","hash":"07a89bc138ec41de5b15fce48607d346893712b8","modified":1482154306000},{"_id":"source/_posts/第一篇博客.md","hash":"917edce992584c50e153c5e2504b0f68d580b305","modified":1479744312000},{"_id":"source/_posts/五一青岛游.md","hash":"e22aaa595bc645d5fe312d0d7bc1124365e71b8c","modified":1493564742000},{"_id":"source/_posts/translate-koa2.md","hash":"669f78c9e4318ac3001555bfff0b898227ec5df4","modified":1491306390000},{"_id":"source/_posts/记录第一次搭建hexo.md","hash":"2ec7bcd25e1ac9ca8588e53a948f5e4634a9f2a1","modified":1479812600000},{"_id":"source/categories/index.md","hash":"4cd81f62bc5c4fd51d29c61081a6f3936479fc49","modified":1479658142000},{"_id":"source/tags/index.md","hash":"cf63aadf6e84d3583ef397ee6daebdea3b082c10","modified":1479744718000},{"_id":"themes/varaint/scripts/paging.js","hash":"81d67ff0e9e78f44b84ff042a7c0ab365ebfa7dd","modified":1487687670000},{"_id":"themes/varaint/source/.DS_Store","hash":"1cb77aae52c7eb876be1258dc5ca75bcadfd1c16","modified":1493734173000},{"_id":"themes/varaint/layout/index.ejs","hash":"9f5f9e9a9eeb297782e34dfd10d608ee0ebd9a0b","modified":1487687670000},{"_id":"themes/varaint/source/favicon.png","hash":"a7169226e85e1b58a4eac43a6b2fd63a140c4f26","modified":1481384508000},{"_id":"themes/varaint/layout/layout.ejs","hash":"d700ac5cc73361d54616525ab30ba9cd3939d299","modified":1487687670000},{"_id":"themes/varaint/source/favicon.svg","hash":"b12867228c15df5638c2edc4bf4ed7c21b31f163","modified":1485171522000},{"_id":"themes/varaint/layout/post.ejs","hash":"596a512dde277b33ec091e101f35c0acb08544fe","modified":1487687670000},{"_id":"themes/varaint/source/favicon1.png","hash":"e9fc8fabc76fa6aaf3c2fb71535b04400f0e06a8","modified":1487687670000},{"_id":"themes/varaint/layout/_partial/article.ejs","hash":"3fa1cb4118ae05718a19637785575eebef4c616e","modified":1487687670000},{"_id":"themes/varaint/layout/_partial/archive.ejs","hash":"5943b5bce733e6fc38b5e9d21492315dec167cbe","modified":1487687670000},{"_id":"themes/varaint/layout/_partial/author.ejs","hash":"ef624addd7914c0ceae7d394ad64fe04a1010693","modified":1487687670000},{"_id":"themes/varaint/layout/_partial/banner.ejs","hash":"49ced60b9d231aed216cd77da7013a7357e74152","modified":1487687670000},{"_id":"themes/varaint/layout/_partial/footer.ejs","hash":"c3cabae8d20ff8f3bfaa726bf1550b35e6fe4736","modified":1493734602000},{"_id":"themes/varaint/layout/_partial/header.ejs","hash":"0190f18687c44e63a08349a2a7a17bcca6a542ec","modified":1487687670000},{"_id":"themes/varaint/layout/_partial/head.ejs","hash":"f5af720d2775dd2f212a0d68045d972247205db9","modified":1493734619000},{"_id":"themes/varaint/layout/_partial/search.ejs","hash":"a8b8b5057fedf31a907c0147edef2a2511b8754b","modified":1487687670000},{"_id":"themes/varaint/layout/_widget/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1487687670000},{"_id":"themes/varaint/layout/_partial/sidebar.ejs","hash":"92d052fe1076f7fd425639fc4c251fc34323c7c1","modified":1487687670000},{"_id":"themes/varaint/layout/_widget/date.ejs","hash":"9d012a767db8ef232d30bc54db58df6f54b828af","modified":1487687670000},{"_id":"themes/varaint/source/banner/.DS_Store","hash":"8366701ab5d848093491e768c1fb88ece0299f56","modified":1493732800000},{"_id":"themes/varaint/source/css/_font.styl","hash":"66e0478c8cc77efb061e587a1b84d4e3ea8902df","modified":1487687670000},{"_id":"themes/varaint/source/css/_var.styl","hash":"930cd91ab1b020a59303312536238bc040260f66","modified":1487687670000},{"_id":"themes/varaint/source/css/style.styl","hash":"f867044b8e05c81e4594e0c1aaa70a539c579071","modified":1487687670000},{"_id":"themes/varaint/source/js/.DS_Store","hash":"94d6b0cc2e48f980721d5f063a9af89d11fb3ba7","modified":1493732716000},{"_id":"themes/varaint/source/js/module.js","hash":"cee61899e919ebe29fd9c18f6880a335cee8bdfc","modified":1487687670000},{"_id":"themes/varaint/source/js/script.js","hash":"5923cdc0852b83c1c6fe55c6e58424204e57edec","modified":1487687670000},{"_id":"themes/varaint/layout/_partial/post/duoshuo-comment.ejs","hash":"11f7ab676f0125d0dbfbea3eff612cb63b999dcb","modified":1487687670000},{"_id":"themes/varaint/layout/_partial/post/share.ejs","hash":"e56cc398a4652ba28439f2ed496834886a0442fa","modified":1487687670000},{"_id":"themes/varaint/layout/_partial/post/disqus-comment.ejs","hash":"2eff8228047dfd6b00345fee455c9f3de6a741e9","modified":1487687670000},{"_id":"themes/varaint/source/css/_partial/archive.styl","hash":"310c2b49bff77404c1bffbe5a1567af795816596","modified":1487687670000},{"_id":"themes/varaint/source/css/_partial/article.styl","hash":"9470f37356cec2e384b86658226c8075928c58c4","modified":1487687670000},{"_id":"themes/varaint/source/css/_partial/author.styl","hash":"cab911a74ea31000b37f5c11d02473412a5aaec7","modified":1487687670000},{"_id":"themes/varaint/source/css/_partial/banner.styl","hash":"8f9ce6107c966972c4ec7ceb99fd7a391a8b7260","modified":1487687670000},{"_id":"themes/varaint/source/css/_partial/footer.styl","hash":"45a2ea849690abb158cdf59ad1f82eda1af2f5eb","modified":1487687670000},{"_id":"themes/varaint/source/css/_partial/header.styl","hash":"a3fad4f045270f5a2f9fff5feb44ae0c1caef51e","modified":1487687670000},{"_id":"themes/varaint/source/css/_partial/sidebar.styl","hash":"ce695db24414b36bbbb27828db5fdadacce9b77d","modified":1487687670000},{"_id":"themes/varaint/source/css/_partial/search.styl","hash":"5b0dae4961ba27f48cd7eec7183673efe6a69a4b","modified":1487687670000},{"_id":"themes/varaint/source/css/fonts/din.otf","hash":"db6c925f4906e671f86d43fe5cb750dea99adddb","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-aea.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-agc.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-basic.js","hash":"efeefe1f0d1f20b66d2cb0635b8f0c7fcfe7ff0a","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-cl.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-apollo.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-clj.js","hash":"a2c893fc1b79d9c3aed59e22bcf3769bb5563b5c","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-css.js","hash":"22160ffbcd219c018c3dbef745da29cc334c6e8c","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-cbm.js","hash":"efeefe1f0d1f20b66d2cb0635b8f0c7fcfe7ff0a","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-dart.js","hash":"be57991fbb09bd187be3cb0218bd5e9c997eea5b","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-el.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-erl.js","hash":"d3ba7d0376ff6f95f5785341653c24166d4ef8e4","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-erlang.js","hash":"d3ba7d0376ff6f95f5785341653c24166d4ef8e4","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-go.js","hash":"640ffa4b3f9c5aee9414962645b9a7f0f49dd555","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-fs.js","hash":"fe6b2569654df7a1861bb2518a2ac443603d471f","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lasso.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-hs.js","hash":"3158902af4476578fc61eb9e47c679e663a77342","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-latex.js","hash":"57371d546cb8e1c105985a59ed135a1b97944d17","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-Splus.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lassoscript.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lisp.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lgt.js","hash":"a8ca762427547d5968153b6afe1e3ee02520886a","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ll.js","hash":"91b28e339c9b32bfe61fc6ae6eba166936ee38fb","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-logtalk.js","hash":"a8ca762427547d5968153b6afe1e3ee02520886a","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lsp.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-llvm.js","hash":"91b28e339c9b32bfe61fc6ae6eba166936ee38fb","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lua.js","hash":"60a3dccac2fe79b0e1c38dec6be79a6ae51883fa","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ls.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ml.js","hash":"fe6b2569654df7a1861bb2518a2ac443603d471f","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-matlab.js","hash":"94c8fd7c44194dd3b1a444a3fc7c2b7fd09d9d6a","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-n.js","hash":"65e144772759352d3b8c612219d5d817735cc7a0","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-mumps.js","hash":"a6002126b8dfc84a167040a024aad9b6b4e406ee","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-pascal.js","hash":"6630a2845b3a0951cbd4b2b8f69d538e0845a53e","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-nemerle.js","hash":"65e144772759352d3b8c612219d5d817735cc7a0","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rkt.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rust.js","hash":"4e91bf396678821d7124e45478f77662912f68a6","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-s.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-proto.js","hash":"76ab0965b0e47de76cb5293ceafc7e5ca1588380","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-scala.js","hash":"cf07e43b333938964236f455826c335fc806aaa5","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rd.js","hash":"f2c5bbaca8b6a00737dbdd30d26ea84a0c9db9bc","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-sql.js","hash":"483cc0f4bd0773f6e7377f48b7a028d83790dd1b","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-r.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ss.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-scm.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vb.js","hash":"1f5344a5051aa3800193b8031dab4acbe3e341cb","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-swift.js","hash":"96ecf47954b110d6f46afde474dca4a8a36de641","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-tcl.js","hash":"38c918e9a43c8975074302305b8b8e5f30d513dc","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vhd.js","hash":"09c27f0ced7244e8ece3ab043bf8aa3028cc2927","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-tex.js","hash":"57371d546cb8e1c105985a59ed135a1b97944d17","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vbs.js","hash":"1f5344a5051aa3800193b8031dab4acbe3e341cb","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vhdl.js","hash":"09c27f0ced7244e8ece3ab043bf8aa3028cc2927","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-wiki.js","hash":"c4090580e86c5040709e6b8fd63b661f978149a6","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-yaml.js","hash":"5aaea285d2e08556c0a754d637d912ed82734d8e","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-xq.js","hash":"52c4ad346f115881a250652f1d98f35826f4f239","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-xquery.js","hash":"52c4ad346f115881a250652f1d98f35826f4f239","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/prettify.css","hash":"8e1c89c9a44e0e837551bdfe250a672d6c21f2b7","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/prettify.js","hash":"8f3a565f0a190aa9df6c9e6e0cb2c3c2445bfa55","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-yml.js","hash":"5aaea285d2e08556c0a754d637d912ed82734d8e","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/run_prettify.js","hash":"face8177a6804506c67c5644c00f3c6e0e50f02b","modified":1487687670000},{"_id":"themes/varaint/source/js/google-code-prettify/tomorrow-night-eighties.min.css","hash":"f654ece8ef13e740f844ce593912e040e3f21e5f","modified":1487687670000},{"_id":"themes/varaint/source/css/_partial/post/share.styl","hash":"7e7ce553e746b788fe723eb33028e9f3b5a5fb3c","modified":1487687670000},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.eot","hash":"1f90b84b9d3afe27303ce73196f9786efc42953b","modified":1487687670000},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.svg","hash":"73321f0798240e541a0f3f468bb6828feeb64fa0","modified":1487687670000},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.ttf","hash":"cc36ce4748a2294a915a467a6b4feb046b1aaeb1","modified":1487687670000},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.woff","hash":"130d610313a6bcdb1d3dd1451b53087a2c2a56e9","modified":1487687670000},{"_id":"themes/varaint/source/banner/1.jpg","hash":"8028af3adf981dff3f38252ef8d00330291198f4","modified":1491383778000},{"_id":"themes/varaint/source/js/lib.js","hash":"d1f3a62d0d91c3000e9b351e41ad441f0632f8b9","modified":1487687670000},{"_id":"themes/varaint/source/banner/5.jpg","hash":"272dc5e2eac84b882ad8f10fff8fd929774f2ae2","modified":1491384131000},{"_id":"themes/varaint/source/banner/2.jpg","hash":"fabaa1cfc2d98eb46c275bd479c09d67d36f3084","modified":1491383491000},{"_id":"themes/varaint/source/banner/3.jpg","hash":"0288742e73b297a6fb876a5940e2c5b246d4d508","modified":1486530834000},{"_id":"themes/varaint/source/banner/4.jpg","hash":"749369b3180ad319cab78e6b3f34f717939b32b2","modified":1486530719000},{"_id":"public/about/about.html","hash":"bf9c07bf2250bc8d207033d0a3f3a244aaa5ec6f","modified":1493918844829},{"_id":"public/categories/index.html","hash":"413e278ab16085d0963920d567edd3ef76c2cd2c","modified":1493918844830},{"_id":"public/tags/index.html","hash":"4926a6da2132ea6286ede7b47ddd3acfde2f0514","modified":1493918844830},{"_id":"public/2017/04/25/五一青岛游/index.html","hash":"8c11e742dbd0ecfac3ceac1ae4a2e5ed5da1e906","modified":1493918844830},{"_id":"public/2017/04/23/react学习/index.html","hash":"74859ad38b265c11304c988ef616575b9dd9c83f","modified":1493918844830},{"_id":"public/2017/04/07/JavaScript实例应用/index.html","hash":"4fe2e11aa7a4fa6f09223a56e2582fd7aca8deee","modified":1493918844830},{"_id":"public/2017/03/30/mongodb的一些操作/index.html","hash":"fa22775f3c6ea9c4347472b2af6b0c14c288ace1","modified":1493918844830},{"_id":"public/2017/03/23/TypeScript中的OOP/index.html","hash":"297aa0ef420ad8ee78d7e3cde365685a787d8b16","modified":1493918844830},{"_id":"public/2017/03/06/three-js入门/index.html","hash":"4c592f2775d4a3aca45d57be34914f0453d722c0","modified":1493918844830},{"_id":"public/2017/02/18/ES6与ES5/index.html","hash":"31ad24e08dedaa7f2a526623fbfa40bd6decaeee","modified":1493918844830},{"_id":"public/2017/01/25/css布局/index.html","hash":"9444ca80ad8dc72463f850ff40fa8742ec239a00","modified":1493918844830},{"_id":"public/2017/01/24/mongodb初探/index.html","hash":"d706d0c8f7759611132526a7985fb279d2c27f28","modified":1493918844830},{"_id":"public/2016/12/09/js中的arguments/index.html","hash":"19584fac5b0628b952ef7a1215b32f78a2b5f556","modified":1493918844830},{"_id":"public/2016/11/22/记录第一次搭建hexo/index.html","hash":"95c8203cf7336f1561e92839f8a58cff1a8e893b","modified":1493918844830},{"_id":"public/2016/11/21/第一篇博客/index.html","hash":"e9fb5a15d5e411541acb045a81be3994ecf12abc","modified":1493918844830},{"_id":"public/archives/index.html","hash":"6c804f38d831393d8aedcf6a0bb63572e045dc3b","modified":1493918844831},{"_id":"public/archives/page/2/index.html","hash":"065675d691bb1f1359d4130162e63deba38cdf9d","modified":1493918844831},{"_id":"public/archives/2016/index.html","hash":"1230ecd6721c51ba6b2cde7ac34bd9cb8a548c36","modified":1493918844831},{"_id":"public/archives/2016/11/index.html","hash":"15910a76f15248f47490711a89fbe0825f5a8d1e","modified":1493918844831},{"_id":"public/archives/2016/12/index.html","hash":"486bde09364e2d788115262f18c92aa635c89f9f","modified":1493918844831},{"_id":"public/archives/2017/index.html","hash":"3d9ea4a249e952fb03481ec1a653f7ddbebec069","modified":1493918844831},{"_id":"public/archives/2017/01/index.html","hash":"e0bc676201bb43caaa84a6d33fca6a16d413f9d1","modified":1493918844831},{"_id":"public/archives/2017/03/index.html","hash":"12916308d1378e5ef784ee9fc417640b771c4cf4","modified":1493918844831},{"_id":"public/archives/2017/02/index.html","hash":"7a83181da5c5aa1d43a9f404e48e71bcd789fe80","modified":1493918844831},{"_id":"public/archives/2017/04/index.html","hash":"9eaa3d14700383ad036f019c8d4c6917c6f17f1d","modified":1493918844831},{"_id":"public/index.html","hash":"6fe178934e3ae4416bf166bbb4908686459aef9c","modified":1493918844831},{"_id":"public/page/2/index.html","hash":"a6d723671a7d017767b7ca6675e2cc03da516f78","modified":1493918844831},{"_id":"public/page/3/index.html","hash":"af92ae31b13948d2148b5dd12341520db3045083","modified":1493918844831},{"_id":"public/page/4/index.html","hash":"bffa133d29d49a7b520bb76220ea9d637327e3f7","modified":1493918844831},{"_id":"public/page/5/index.html","hash":"2c54005186324c84811f13c9de27c5f200690fdf","modified":1493918844831},{"_id":"public/tags/javascript/index.html","hash":"ba73bee31ea9c62f9ec8d7dadcb8ebba733b4389","modified":1493918844831},{"_id":"public/tags/ES6/index.html","hash":"25ae38ae4a867035ad8fca408c0219648075d814","modified":1493918844831},{"_id":"public/tags/ES5/index.html","hash":"81853183643e07f7a75e4c8ab5240105997228b8","modified":1493918844831},{"_id":"public/tags/JavaScript/index.html","hash":"4022d071288ad23b5e78b2526ccdaa92a9929ed0","modified":1493918844831},{"_id":"public/tags/react/index.html","hash":"81c753abd8a570a250592e88848a0c74f125901c","modified":1493918844831},{"_id":"public/tags/node/index.html","hash":"83e09e9e2c4d8daee9c4f22e6b408dad7ff4d299","modified":1493918844831},{"_id":"public/tags/Xunfeng/index.html","hash":"c81f63a333163682e52470a1c6ec765b3646ec2a","modified":1493918844831},{"_id":"public/tags/黑天很黑/index.html","hash":"02f0db0fd306d104840206a25b8b63c7c131ff75","modified":1493918844831},{"_id":"public/tags/koa2/index.html","hash":"f0bb184ae54f65b1863f139426adb3830003c5fb","modified":1493918844831},{"_id":"public/tags/搭建hexo/index.html","hash":"063880653ca98e72f195d968d1c71986e1e30392","modified":1493918844831},{"_id":"public/tags/git/index.html","hash":"d67f009206b959d1f3baea918c71ccd70c72f28e","modified":1493918844831},{"_id":"public/2017/04/03/translate-koa2/index.html","hash":"741a792fc7440db50360bf9d59e60b7bd20c32c1","modified":1493918844831},{"_id":"public/2016/12/10/基于websocket实现服务器浏览器持续通信/index.html","hash":"0b3fe47af42cef45661db3273293ce80a784c318","modified":1493918844831},{"_id":"public/favicon.ico","hash":"a7169226e85e1b58a4eac43a6b2fd63a140c4f26","modified":1493918844837},{"_id":"public/favicon.svg","hash":"b12867228c15df5638c2edc4bf4ed7c21b31f163","modified":1493918844837},{"_id":"public/favicon1.png","hash":"e9fc8fabc76fa6aaf3c2fb71535b04400f0e06a8","modified":1493918844837},{"_id":"public/favicon.png","hash":"a7169226e85e1b58a4eac43a6b2fd63a140c4f26","modified":1493918844837},{"_id":"public/css/fonts/din.otf","hash":"db6c925f4906e671f86d43fe5cb750dea99adddb","modified":1493918844837},{"_id":"public/css/fonts/iconfont/iconfont.eot","hash":"1f90b84b9d3afe27303ce73196f9786efc42953b","modified":1493918844837},{"_id":"public/css/fonts/iconfont/iconfont.svg","hash":"73321f0798240e541a0f3f468bb6828feeb64fa0","modified":1493918844837},{"_id":"public/css/fonts/iconfont/iconfont.ttf","hash":"cc36ce4748a2294a915a467a6b4feb046b1aaeb1","modified":1493918844837},{"_id":"public/css/fonts/iconfont/iconfont.woff","hash":"130d610313a6bcdb1d3dd1451b53087a2c2a56e9","modified":1493918844837},{"_id":"public/js/module.js","hash":"cee61899e919ebe29fd9c18f6880a335cee8bdfc","modified":1493918845179},{"_id":"public/js/script.js","hash":"5923cdc0852b83c1c6fe55c6e58424204e57edec","modified":1493918845180},{"_id":"public/js/google-code-prettify/lang-aea.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1493918845180},{"_id":"public/js/google-code-prettify/lang-agc.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1493918845182},{"_id":"public/js/google-code-prettify/lang-basic.js","hash":"efeefe1f0d1f20b66d2cb0635b8f0c7fcfe7ff0a","modified":1493918845182},{"_id":"public/js/google-code-prettify/lang-cl.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1493918845182},{"_id":"public/js/google-code-prettify/lang-apollo.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1493918845182},{"_id":"public/js/google-code-prettify/lang-clj.js","hash":"a2c893fc1b79d9c3aed59e22bcf3769bb5563b5c","modified":1493918845182},{"_id":"public/js/google-code-prettify/lang-css.js","hash":"22160ffbcd219c018c3dbef745da29cc334c6e8c","modified":1493918845182},{"_id":"public/js/google-code-prettify/lang-cbm.js","hash":"efeefe1f0d1f20b66d2cb0635b8f0c7fcfe7ff0a","modified":1493918845182},{"_id":"public/js/google-code-prettify/lang-dart.js","hash":"be57991fbb09bd187be3cb0218bd5e9c997eea5b","modified":1493918845182},{"_id":"public/js/google-code-prettify/lang-el.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1493918845182},{"_id":"public/js/google-code-prettify/lang-erl.js","hash":"d3ba7d0376ff6f95f5785341653c24166d4ef8e4","modified":1493918845182},{"_id":"public/js/google-code-prettify/lang-erlang.js","hash":"d3ba7d0376ff6f95f5785341653c24166d4ef8e4","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-go.js","hash":"640ffa4b3f9c5aee9414962645b9a7f0f49dd555","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-fs.js","hash":"fe6b2569654df7a1861bb2518a2ac443603d471f","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-lasso.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-hs.js","hash":"3158902af4476578fc61eb9e47c679e663a77342","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-latex.js","hash":"57371d546cb8e1c105985a59ed135a1b97944d17","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-Splus.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-lisp.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-lassoscript.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-lgt.js","hash":"a8ca762427547d5968153b6afe1e3ee02520886a","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-ll.js","hash":"91b28e339c9b32bfe61fc6ae6eba166936ee38fb","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-logtalk.js","hash":"a8ca762427547d5968153b6afe1e3ee02520886a","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-lsp.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1493918845183},{"_id":"public/js/google-code-prettify/lang-llvm.js","hash":"91b28e339c9b32bfe61fc6ae6eba166936ee38fb","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-lua.js","hash":"60a3dccac2fe79b0e1c38dec6be79a6ae51883fa","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-ls.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-ml.js","hash":"fe6b2569654df7a1861bb2518a2ac443603d471f","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-n.js","hash":"65e144772759352d3b8c612219d5d817735cc7a0","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-mumps.js","hash":"a6002126b8dfc84a167040a024aad9b6b4e406ee","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-pascal.js","hash":"6630a2845b3a0951cbd4b2b8f69d538e0845a53e","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-nemerle.js","hash":"65e144772759352d3b8c612219d5d817735cc7a0","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-rkt.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-rust.js","hash":"4e91bf396678821d7124e45478f77662912f68a6","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-s.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-proto.js","hash":"76ab0965b0e47de76cb5293ceafc7e5ca1588380","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-scala.js","hash":"cf07e43b333938964236f455826c335fc806aaa5","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-rd.js","hash":"f2c5bbaca8b6a00737dbdd30d26ea84a0c9db9bc","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-sql.js","hash":"483cc0f4bd0773f6e7377f48b7a028d83790dd1b","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-r.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-ss.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-scm.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-vb.js","hash":"1f5344a5051aa3800193b8031dab4acbe3e341cb","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-swift.js","hash":"96ecf47954b110d6f46afde474dca4a8a36de641","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-tcl.js","hash":"38c918e9a43c8975074302305b8b8e5f30d513dc","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-vhd.js","hash":"09c27f0ced7244e8ece3ab043bf8aa3028cc2927","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-tex.js","hash":"57371d546cb8e1c105985a59ed135a1b97944d17","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-vbs.js","hash":"1f5344a5051aa3800193b8031dab4acbe3e341cb","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-vhdl.js","hash":"09c27f0ced7244e8ece3ab043bf8aa3028cc2927","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-wiki.js","hash":"c4090580e86c5040709e6b8fd63b661f978149a6","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-yaml.js","hash":"5aaea285d2e08556c0a754d637d912ed82734d8e","modified":1493918845184},{"_id":"public/js/google-code-prettify/prettify.css","hash":"8e1c89c9a44e0e837551bdfe250a672d6c21f2b7","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-yml.js","hash":"5aaea285d2e08556c0a754d637d912ed82734d8e","modified":1493918845184},{"_id":"public/js/google-code-prettify/prettify.js","hash":"8f3a565f0a190aa9df6c9e6e0cb2c3c2445bfa55","modified":1493918845184},{"_id":"public/js/google-code-prettify/tomorrow-night-eighties.min.css","hash":"f654ece8ef13e740f844ce593912e040e3f21e5f","modified":1493918845184},{"_id":"public/css/style.css","hash":"5a451ab93fd95758d2391e97196811e7316980ad","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-matlab.js","hash":"94c8fd7c44194dd3b1a444a3fc7c2b7fd09d9d6a","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-xq.js","hash":"52c4ad346f115881a250652f1d98f35826f4f239","modified":1493918845184},{"_id":"public/js/google-code-prettify/lang-xquery.js","hash":"52c4ad346f115881a250652f1d98f35826f4f239","modified":1493918845184},{"_id":"public/js/google-code-prettify/run_prettify.js","hash":"face8177a6804506c67c5644c00f3c6e0e50f02b","modified":1493918845185},{"_id":"public/js/lib.js","hash":"d1f3a62d0d91c3000e9b351e41ad441f0632f8b9","modified":1493918845185},{"_id":"public/banner/1.jpg","hash":"8028af3adf981dff3f38252ef8d00330291198f4","modified":1493918845197},{"_id":"public/banner/5.jpg","hash":"272dc5e2eac84b882ad8f10fff8fd929774f2ae2","modified":1493918845212},{"_id":"public/banner/2.jpg","hash":"fabaa1cfc2d98eb46c275bd479c09d67d36f3084","modified":1493918845215},{"_id":"public/banner/3.jpg","hash":"0288742e73b297a6fb876a5940e2c5b246d4d508","modified":1493918845387},{"_id":"public/banner/4.jpg","hash":"749369b3180ad319cab78e6b3f34f717939b32b2","modified":1493918845401}],"Category":[],"Data":[],"Page":[{"title":"About XunFeng","_content":"有的人心里，\n藏着一片幽暗森林；\n有的人心里，\n留着一个光亮出口。\n<!--more-->\n\n<blockquote class=\"blockquote-center\">学会遗忘</blockquote>","source":"about/about.md","raw":"---\ntitle: About XunFeng\n---\n有的人心里，\n藏着一片幽暗森林；\n有的人心里，\n留着一个光亮出口。\n<!--more-->\n\n<blockquote class=\"blockquote-center\">学会遗忘</blockquote>","date":"2017-05-02T12:33:48.000Z","updated":"2017-05-02T12:33:48.000Z","path":"about/about.html","comments":1,"layout":"page","_id":"cj2aooqht0000zlwpsavsnl9d","content":"<p>有的人心里，<br>藏着一片幽暗森林；<br>有的人心里，<br>留着一个光亮出口。<br><a id=\"more\"></a></p>\n<blockquote class=\"blockquote-center\">学会遗忘</blockquote>","excerpt":"<p>有的人心里，<br>藏着一片幽暗森林；<br>有的人心里，<br>留着一个光亮出口。<br>","more":"</p>\n<blockquote class=\"blockquote-center\">学会遗忘</blockquote>"},{"title":"categories","date":"2016-11-20T16:08:38.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-21 00:08:38\ntype: \"categories\"\n---\n","updated":"2016-11-20T16:09:02.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj2aooqhy0002zlwpdgkey4nr","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-11-20T16:07:39.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-21 00:07:39\ntype: \"tags\"\n---\n","updated":"2016-11-21T16:11:58.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj2aooqi80005zlwpo4oq5mel","content":"","excerpt":"","more":""}],"Post":[{"title":"ES6的学习（一）","date":"2017-02-18T14:03:07.000Z","_content":"\n关于ES6的学习\n<!--more-->\n\n### ES5 => ES6\n---\n##### 箭头函数\n- 与函数表达式相比，箭头函数有更短的语法。\n\n```\n\tfunction (i) { return i * 2} //ES5\n\t(i) => i * 2\t//ES6\n```\n复杂时需要`{}`包裹\n```\n\tfunction (i, j) {\n\t\ti++\n\t\tj++\n\t\treturn i + j\n\t}  // ES5\n\t(i, j) => {i++, j++, return i + j} // ES6\n```\n- 箭头函数没有自身的this，从外层继承this。\n- 箭头函数通常是匿名的。\n\n\n ##### 块级作用域\n - ES5中只有全局作用域与函数作用域,因此内层变量将会覆盖外层变量\n - let 提供块级作用域,let命名的变量只在当前块内起作用\n - const 声明的是常量，不可更改\n\n```\n  var a = 1\n  var b = 2\n  var c = 3\n  if (true) {\n    var a = 10  // 函数作用域\n    let b = 20  // if块内的作用域\n        c = 30  // es5解决方法\n    console.log('a:' + a)\n    console.log('b:' + b)\n    console.log('c:' + c)\n  }\n  console.log('a:' + a)\n  console.log('b:' + b)\n  console.log('c:' + c)\n```\nvar声明的变量在循环时新值会覆盖旧值，导致输出的变量都为最终值\n```\nvar a = []\nfor (var i = 0; i < 9; i++) {\n  a[i] = function () {\n\t\tconsole.log(i)\n\t}\n}\na[2](); // 9\n```\nES5中利用闭包解决这一问题\n```\nfunction test (index) {\n\t\tvar testback = function () {\n\t\t\tconsole.log(index)\n\t\t}\n\t\treturn testback\n}\nvar a = []\nfor (var i = 0; i < 9; i++) {\n  a[i] = test(i)\n}\na[2]()\n```\nES6中仅仅使用let即可解决\n```\nvar a = []\nfor (let i = 0; i < 9; i++) {\n  a[i] = function () {\n\t\tconsole.log(i)\n\t}\n}\na[2](); // 2\n```\nconst声明常量\n```\nconst a = 1\na = 10\nconsole.log(a)\n```\n\n##### 模版字符串\n- ES5中，当需要插入大量html文档时需要引用template插件或是用大量‘+’连接\n- 模版字符串可直接用'``'标识起始\n- 模板字符串可以包含嵌入式表达式,对象字面量,甚至是函数\n\n```\nvar myName = 'xunfeng'\nconsole.log(`your name is ${myName}`) // your name is xunfeng\n\nvar people = {\n  name: 'xunfeng',\n  age: 20\n}\nconsole.log(`your name is ${people.name}, your age is ${people.age}`)\n// your name is xunfeng, your age is 20\n\nfunction fn () {\n  return 'function'\n}\nconsole.log(`可以嵌套函数：${fn()}`)\n```\n- 模板字符串可以在表达式内进行数学运算\n\n```\nvar a = 10\nvar b = 20\nconsole.log(`a+b=${a+b}`) //a+b=30\n```\n- 模板字符串内保留空格，不需要换行符即可换行\n\n```\nconsole.log(`第一行\n第二行`)\n// 第一行\n// 第二行\n```\n\n#####  数值扩展 Numeric Literals\n- 支持二进制(0b)和八进制(0o)新写法\n\n```\n0b111110111 === 503 // true\n0o767 === 503 // true\n\n将二进制或八进制转换成十进制\nNumber('0b111')  // 7\nNumber('0o10')  // 8\n```\n- 新的方法\n\n```\nNumber.isFinite() // 检查一个数值是否为有限\nNumber.isNaN()  // 检查一个数值是否为NaN\nNumber.isInteger()  // 检查一个数值是否为整数\nNumber.EPSILON  // 极小的常量，设定的误差范围\n```\n- Math对象的扩展\n\n```\nMath.trunc()  // 去除一个数的小数部分，返回整数部分\nMath.sign() // 判断一个数到底是正数、负数、还是零\nMath.cbrt() // 用于计算一个数的立方根\nMath.hypot() // 返回所有参数的平方和的平方根\nMath.expm1() // Math.expm1(x)返回ex - 1，即Math.exp(x) - 1\nMath.log1p() // Math.log1p(x)方法返回1 + x的自然对数\nMath.log10() // Math.log10(x)返回以10为底的x的对数\nMath.log2() // Math.log2(x)返回以2为底的x的对数\nMath.sinh(x) // 返回x的双曲正弦（hyperbolic sine）\nMath.cosh(x) // 返回x的双曲余弦（hyperbolic cosine）\nMath.tanh(x) // 返回x的双曲正切（hyperbolic tangent）\nMath.asinh(x) // 返回x的反双曲正弦（inverse hyperbolic sine）\nMath.acosh(x) // 返回x的反双曲余弦（inverse hyperbolic cosine）\nMath.atanh(x) // 返回x的反双曲正切（inverse hyperbolic tangent）\n```\n- 指数运算符 **\n\n```\nconsole.log(2 ** 3) // 8\n```\n\n##### 对象部分扩展\n- 变量和函数可直接作为对象的属性和方法\n\n```\n<!-- ES6 -->\nvar object = {\n  value: 42,\n  toString() {\n    return this.value\n  }\n}\nconsole.log(object.toString() === 42) // true\n\n<!-- ES5 -->\nvar object = {\n  value: 42,\n  toString: function toString() {\n    return this.value\n  }\n}\n\nconsole.log(object.toString() === 42) // true\n```\n- 计算属性名可以用变量当做对象的属性名\n\n```\nvar computed = 'calc'\nvar comFn = {\n  [computed + 'xun']: 'hi',\n  [computed + 'feng']: 'hello'\n}\nconsole.log(comFn['calcxun']) // hi\nconsole.log(comFn['calcfeng']) // hello\n```\n\n##### 解构\n- 允许从数组或对象中提取数据并对变量赋值\n\n```\nvar a = 1\nvar b = 2\nvar c = {a, b}\nconsole.log(c) // {a: 1, b: 2}\n\nvar c = {a: 1, b: 2}\nvar {a, b} = c\nconsole.log(a, b) // 1 2\n```\n\n##### 默认参数 default\n- ES6可以指定默认参数在arguments中\n\n```\nfunction myFn(mes = 'hello') {\n  console.log(mes)\n}\nmyFn(); // hello\nmyFn('hi'); // hi\n```\n\n##### 其他参数 rest\n- 允许将部分参数作为一个单独的数组\n\n```\nfunction myFn(a, ...b) {\n  var result = a\n   for(let i = 0; i<b.length; i++) {\n     result += b[i]\n   }\n   return result\n}\nconsole.log(myFn(1,2,3,4)) // 10\n```\n\n##### 迭代器 iterators && for of\n- 可以直接遍历容器的内容\n\n```\nvar a=['x', 'y', 'z']\nfor (let i of a){\n  console.log(i)  // x y z\n}\n```\n\n##### 类 classes\n- constructor(构造方法)\n创建实例对象时设定的属性\n- extends(继承)\nclass之间可以通过extends相互继承，相比于原形链更简洁易懂\n- super\n  在子类constructor中调用父类的constructor\n- getter && setter\n在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\n- static 静态方法\n不会被实例对象继承，只能通过类或类继承来调用\n\n```\nclass student {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n  getName () {\n    console.log(this.name)\n  }\n  get myAge() {\n    return this.age\n  }\n  set myAge(value) {\n    this._age = value\n  }\n  static bar() {\n    console.log('static')\n  }\n}\n// 创建实例对象\nvar xun = new student('xun', 20)\nxun.getName() // xun\nxun.bar() // TypeError: xun.bar is not a function. (In 'xun.bar()', 'xun.bar' is undefined)\nstudent.bar() // static\n// 继承\nclass Tom extends student {\n  constructor(name, age, sex) {\n    super(name, age)\n    this.sex = sex\n  }\n}\nvar tom = new Tom('tom', 20, 'man')\nconsole.log(tom)  // 实例对象属性\ntom.myAge = 22\nconsole.log(tom._age) // 22\nconsole.log(tom.myAge) // 20\n```\n\n##### 模块 modules\n- export 暴露对外接口\n- import 导入其他模块接口\n\n```\n<!-- export.js -->\n//命名导出\nexport var foo = ...\nexport let bar = ...\nexport const MY_CONST = ...\n\nexport function myFunc() {\n   ...\n}\nexport function* myGeneratorFunc() {\n   ...\n}\nexport class MyClass {\n   ...\n}\n// default 导出\nexport default 123\nexport default function (x) {\n   return x\n}\nexport default x => x;\nexport default class {\n   constructor(x, y) {\n       this.x = x\n       this.y = y\n   }\n};\n//也可以自己列出所有导出内容\nconst MY_CONST = ...\nfunction myFunc() {\n   ...\n}\n\nexport { MY_CONST, myFunc }\n//或者在导出的时候给他们改个名字\nexport { MY_CONST as THE_CONST, myFunc as theFunc }\n\n//还可以导出从其他地方导入的模块\nexport * from 'src/other_module'\nexport { foo, bar } from 'src/other_module'\nexport { foo as myFoo, bar } from 'src/other_module'\n\n<!-- import.js -->\n\n// Default exports and named exports\nimport theDefault, { named1, named2 } from 'src/mylib'\nimport theDefault from 'src/mylib'\nimport { named1, named2 } from 'src/mylib'\n\n// Renaming: import named1 as myNamed1\nimport { named1 as myNamed1, named2 } from 'src/mylib'\n\n// Importing the module as an object\n// (with one property per named export)\nimport * as mylib from 'src/mylib'\n\n// Only load the module, don’t import anything\nimport 'src/mylib'\n```\n\n##### 参考链接\n[30分钟掌握ES6/ES2015核心内容](http://www.jianshu.com/p/ebfeb687eb70)\n[ECMAScript 6 入门](http://es6.ruanyifeng.com/?search=Spread&x=0&y=0)\n[ ECMAScript 6 equivalents in ES5](https://github.com/addyosmani/es6-equivalents-in-es5/blob/master/README.md#classes)\n","source":"_posts/ES6与ES5.md","raw":"---\ntitle: ES6的学习（一）\ndate: 2017-02-18 22:03:07\ntags:\n  - javascript\n  - ES6\n  - ES5\n---\n\n关于ES6的学习\n<!--more-->\n\n### ES5 => ES6\n---\n##### 箭头函数\n- 与函数表达式相比，箭头函数有更短的语法。\n\n```\n\tfunction (i) { return i * 2} //ES5\n\t(i) => i * 2\t//ES6\n```\n复杂时需要`{}`包裹\n```\n\tfunction (i, j) {\n\t\ti++\n\t\tj++\n\t\treturn i + j\n\t}  // ES5\n\t(i, j) => {i++, j++, return i + j} // ES6\n```\n- 箭头函数没有自身的this，从外层继承this。\n- 箭头函数通常是匿名的。\n\n\n ##### 块级作用域\n - ES5中只有全局作用域与函数作用域,因此内层变量将会覆盖外层变量\n - let 提供块级作用域,let命名的变量只在当前块内起作用\n - const 声明的是常量，不可更改\n\n```\n  var a = 1\n  var b = 2\n  var c = 3\n  if (true) {\n    var a = 10  // 函数作用域\n    let b = 20  // if块内的作用域\n        c = 30  // es5解决方法\n    console.log('a:' + a)\n    console.log('b:' + b)\n    console.log('c:' + c)\n  }\n  console.log('a:' + a)\n  console.log('b:' + b)\n  console.log('c:' + c)\n```\nvar声明的变量在循环时新值会覆盖旧值，导致输出的变量都为最终值\n```\nvar a = []\nfor (var i = 0; i < 9; i++) {\n  a[i] = function () {\n\t\tconsole.log(i)\n\t}\n}\na[2](); // 9\n```\nES5中利用闭包解决这一问题\n```\nfunction test (index) {\n\t\tvar testback = function () {\n\t\t\tconsole.log(index)\n\t\t}\n\t\treturn testback\n}\nvar a = []\nfor (var i = 0; i < 9; i++) {\n  a[i] = test(i)\n}\na[2]()\n```\nES6中仅仅使用let即可解决\n```\nvar a = []\nfor (let i = 0; i < 9; i++) {\n  a[i] = function () {\n\t\tconsole.log(i)\n\t}\n}\na[2](); // 2\n```\nconst声明常量\n```\nconst a = 1\na = 10\nconsole.log(a)\n```\n\n##### 模版字符串\n- ES5中，当需要插入大量html文档时需要引用template插件或是用大量‘+’连接\n- 模版字符串可直接用'``'标识起始\n- 模板字符串可以包含嵌入式表达式,对象字面量,甚至是函数\n\n```\nvar myName = 'xunfeng'\nconsole.log(`your name is ${myName}`) // your name is xunfeng\n\nvar people = {\n  name: 'xunfeng',\n  age: 20\n}\nconsole.log(`your name is ${people.name}, your age is ${people.age}`)\n// your name is xunfeng, your age is 20\n\nfunction fn () {\n  return 'function'\n}\nconsole.log(`可以嵌套函数：${fn()}`)\n```\n- 模板字符串可以在表达式内进行数学运算\n\n```\nvar a = 10\nvar b = 20\nconsole.log(`a+b=${a+b}`) //a+b=30\n```\n- 模板字符串内保留空格，不需要换行符即可换行\n\n```\nconsole.log(`第一行\n第二行`)\n// 第一行\n// 第二行\n```\n\n#####  数值扩展 Numeric Literals\n- 支持二进制(0b)和八进制(0o)新写法\n\n```\n0b111110111 === 503 // true\n0o767 === 503 // true\n\n将二进制或八进制转换成十进制\nNumber('0b111')  // 7\nNumber('0o10')  // 8\n```\n- 新的方法\n\n```\nNumber.isFinite() // 检查一个数值是否为有限\nNumber.isNaN()  // 检查一个数值是否为NaN\nNumber.isInteger()  // 检查一个数值是否为整数\nNumber.EPSILON  // 极小的常量，设定的误差范围\n```\n- Math对象的扩展\n\n```\nMath.trunc()  // 去除一个数的小数部分，返回整数部分\nMath.sign() // 判断一个数到底是正数、负数、还是零\nMath.cbrt() // 用于计算一个数的立方根\nMath.hypot() // 返回所有参数的平方和的平方根\nMath.expm1() // Math.expm1(x)返回ex - 1，即Math.exp(x) - 1\nMath.log1p() // Math.log1p(x)方法返回1 + x的自然对数\nMath.log10() // Math.log10(x)返回以10为底的x的对数\nMath.log2() // Math.log2(x)返回以2为底的x的对数\nMath.sinh(x) // 返回x的双曲正弦（hyperbolic sine）\nMath.cosh(x) // 返回x的双曲余弦（hyperbolic cosine）\nMath.tanh(x) // 返回x的双曲正切（hyperbolic tangent）\nMath.asinh(x) // 返回x的反双曲正弦（inverse hyperbolic sine）\nMath.acosh(x) // 返回x的反双曲余弦（inverse hyperbolic cosine）\nMath.atanh(x) // 返回x的反双曲正切（inverse hyperbolic tangent）\n```\n- 指数运算符 **\n\n```\nconsole.log(2 ** 3) // 8\n```\n\n##### 对象部分扩展\n- 变量和函数可直接作为对象的属性和方法\n\n```\n<!-- ES6 -->\nvar object = {\n  value: 42,\n  toString() {\n    return this.value\n  }\n}\nconsole.log(object.toString() === 42) // true\n\n<!-- ES5 -->\nvar object = {\n  value: 42,\n  toString: function toString() {\n    return this.value\n  }\n}\n\nconsole.log(object.toString() === 42) // true\n```\n- 计算属性名可以用变量当做对象的属性名\n\n```\nvar computed = 'calc'\nvar comFn = {\n  [computed + 'xun']: 'hi',\n  [computed + 'feng']: 'hello'\n}\nconsole.log(comFn['calcxun']) // hi\nconsole.log(comFn['calcfeng']) // hello\n```\n\n##### 解构\n- 允许从数组或对象中提取数据并对变量赋值\n\n```\nvar a = 1\nvar b = 2\nvar c = {a, b}\nconsole.log(c) // {a: 1, b: 2}\n\nvar c = {a: 1, b: 2}\nvar {a, b} = c\nconsole.log(a, b) // 1 2\n```\n\n##### 默认参数 default\n- ES6可以指定默认参数在arguments中\n\n```\nfunction myFn(mes = 'hello') {\n  console.log(mes)\n}\nmyFn(); // hello\nmyFn('hi'); // hi\n```\n\n##### 其他参数 rest\n- 允许将部分参数作为一个单独的数组\n\n```\nfunction myFn(a, ...b) {\n  var result = a\n   for(let i = 0; i<b.length; i++) {\n     result += b[i]\n   }\n   return result\n}\nconsole.log(myFn(1,2,3,4)) // 10\n```\n\n##### 迭代器 iterators && for of\n- 可以直接遍历容器的内容\n\n```\nvar a=['x', 'y', 'z']\nfor (let i of a){\n  console.log(i)  // x y z\n}\n```\n\n##### 类 classes\n- constructor(构造方法)\n创建实例对象时设定的属性\n- extends(继承)\nclass之间可以通过extends相互继承，相比于原形链更简洁易懂\n- super\n  在子类constructor中调用父类的constructor\n- getter && setter\n在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\n- static 静态方法\n不会被实例对象继承，只能通过类或类继承来调用\n\n```\nclass student {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n  getName () {\n    console.log(this.name)\n  }\n  get myAge() {\n    return this.age\n  }\n  set myAge(value) {\n    this._age = value\n  }\n  static bar() {\n    console.log('static')\n  }\n}\n// 创建实例对象\nvar xun = new student('xun', 20)\nxun.getName() // xun\nxun.bar() // TypeError: xun.bar is not a function. (In 'xun.bar()', 'xun.bar' is undefined)\nstudent.bar() // static\n// 继承\nclass Tom extends student {\n  constructor(name, age, sex) {\n    super(name, age)\n    this.sex = sex\n  }\n}\nvar tom = new Tom('tom', 20, 'man')\nconsole.log(tom)  // 实例对象属性\ntom.myAge = 22\nconsole.log(tom._age) // 22\nconsole.log(tom.myAge) // 20\n```\n\n##### 模块 modules\n- export 暴露对外接口\n- import 导入其他模块接口\n\n```\n<!-- export.js -->\n//命名导出\nexport var foo = ...\nexport let bar = ...\nexport const MY_CONST = ...\n\nexport function myFunc() {\n   ...\n}\nexport function* myGeneratorFunc() {\n   ...\n}\nexport class MyClass {\n   ...\n}\n// default 导出\nexport default 123\nexport default function (x) {\n   return x\n}\nexport default x => x;\nexport default class {\n   constructor(x, y) {\n       this.x = x\n       this.y = y\n   }\n};\n//也可以自己列出所有导出内容\nconst MY_CONST = ...\nfunction myFunc() {\n   ...\n}\n\nexport { MY_CONST, myFunc }\n//或者在导出的时候给他们改个名字\nexport { MY_CONST as THE_CONST, myFunc as theFunc }\n\n//还可以导出从其他地方导入的模块\nexport * from 'src/other_module'\nexport { foo, bar } from 'src/other_module'\nexport { foo as myFoo, bar } from 'src/other_module'\n\n<!-- import.js -->\n\n// Default exports and named exports\nimport theDefault, { named1, named2 } from 'src/mylib'\nimport theDefault from 'src/mylib'\nimport { named1, named2 } from 'src/mylib'\n\n// Renaming: import named1 as myNamed1\nimport { named1 as myNamed1, named2 } from 'src/mylib'\n\n// Importing the module as an object\n// (with one property per named export)\nimport * as mylib from 'src/mylib'\n\n// Only load the module, don’t import anything\nimport 'src/mylib'\n```\n\n##### 参考链接\n[30分钟掌握ES6/ES2015核心内容](http://www.jianshu.com/p/ebfeb687eb70)\n[ECMAScript 6 入门](http://es6.ruanyifeng.com/?search=Spread&x=0&y=0)\n[ ECMAScript 6 equivalents in ES5](https://github.com/addyosmani/es6-equivalents-in-es5/blob/master/README.md#classes)\n","slug":"ES6与ES5","published":1,"updated":"2017-02-20T05:13:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqhv0001zlwpbpbz2pyc","content":"<p>关于ES6的学习<br><a id=\"more\"></a></p>\n<h3 id=\"ES5-gt-ES6\"><a href=\"#ES5-gt-ES6\" class=\"headerlink\" title=\"ES5 =&gt; ES6\"></a>ES5 =&gt; ES6</h3><hr>\n<h5 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h5><ul>\n<li>与函数表达式相比，箭头函数有更短的语法。</li>\n</ul>\n<pre><code>    function (i) { return i * 2} //ES5\n    (i) =&gt; i * 2    //ES6\n</code></pre><p>复杂时需要<code>{}</code>包裹</p>\n<pre><code>    function (i, j) {\n        i++\n        j++\n        return i + j\n    }  // ES5\n    (i, j) =&gt; {i++, j++, return i + j} // ES6\n</code></pre><ul>\n<li>箭头函数没有自身的this，从外层继承this。</li>\n<li>箭头函数通常是匿名的。</li>\n</ul>\n<h5 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h5><ul>\n<li>ES5中只有全局作用域与函数作用域,因此内层变量将会覆盖外层变量</li>\n<li>let 提供块级作用域,let命名的变量只在当前块内起作用</li>\n<li>const 声明的是常量，不可更改</li>\n</ul>\n<pre><code>  var a = 1\n  var b = 2\n  var c = 3\n  if (true) {\n    var a = 10  // 函数作用域\n    let b = 20  // if块内的作用域\n        c = 30  // es5解决方法\n    console.log(&#39;a:&#39; + a)\n    console.log(&#39;b:&#39; + b)\n    console.log(&#39;c:&#39; + c)\n  }\n  console.log(&#39;a:&#39; + a)\n  console.log(&#39;b:&#39; + b)\n  console.log(&#39;c:&#39; + c)\n</code></pre><p>var声明的变量在循环时新值会覆盖旧值，导致输出的变量都为最终值</p>\n<pre><code>var a = []\nfor (var i = 0; i &lt; 9; i++) {\n  a[i] = function () {\n        console.log(i)\n    }\n}\na[2](); // 9\n</code></pre><p>ES5中利用闭包解决这一问题</p>\n<pre><code>function test (index) {\n        var testback = function () {\n            console.log(index)\n        }\n        return testback\n}\nvar a = []\nfor (var i = 0; i &lt; 9; i++) {\n  a[i] = test(i)\n}\na[2]()\n</code></pre><p>ES6中仅仅使用let即可解决</p>\n<pre><code>var a = []\nfor (let i = 0; i &lt; 9; i++) {\n  a[i] = function () {\n        console.log(i)\n    }\n}\na[2](); // 2\n</code></pre><p>const声明常量</p>\n<pre><code>const a = 1\na = 10\nconsole.log(a)\n</code></pre><h5 id=\"模版字符串\"><a href=\"#模版字符串\" class=\"headerlink\" title=\"模版字符串\"></a>模版字符串</h5><ul>\n<li>ES5中，当需要插入大量html文档时需要引用template插件或是用大量‘+’连接</li>\n<li>模版字符串可直接用’``’标识起始</li>\n<li>模板字符串可以包含嵌入式表达式,对象字面量,甚至是函数</li>\n</ul>\n<pre><code>var myName = &#39;xunfeng&#39;\nconsole.log(`your name is ${myName}`) // your name is xunfeng\n\nvar people = {\n  name: &#39;xunfeng&#39;,\n  age: 20\n}\nconsole.log(`your name is ${people.name}, your age is ${people.age}`)\n// your name is xunfeng, your age is 20\n\nfunction fn () {\n  return &#39;function&#39;\n}\nconsole.log(`可以嵌套函数：${fn()}`)\n</code></pre><ul>\n<li>模板字符串可以在表达式内进行数学运算</li>\n</ul>\n<pre><code>var a = 10\nvar b = 20\nconsole.log(`a+b=${a+b}`) //a+b=30\n</code></pre><ul>\n<li>模板字符串内保留空格，不需要换行符即可换行</li>\n</ul>\n<pre><code>console.log(`第一行\n第二行`)\n// 第一行\n// 第二行\n</code></pre><h5 id=\"数值扩展-Numeric-Literals\"><a href=\"#数值扩展-Numeric-Literals\" class=\"headerlink\" title=\"数值扩展 Numeric Literals\"></a>数值扩展 Numeric Literals</h5><ul>\n<li>支持二进制(0b)和八进制(0o)新写法</li>\n</ul>\n<pre><code>0b111110111 === 503 // true\n0o767 === 503 // true\n\n将二进制或八进制转换成十进制\nNumber(&#39;0b111&#39;)  // 7\nNumber(&#39;0o10&#39;)  // 8\n</code></pre><ul>\n<li>新的方法</li>\n</ul>\n<pre><code>Number.isFinite() // 检查一个数值是否为有限\nNumber.isNaN()  // 检查一个数值是否为NaN\nNumber.isInteger()  // 检查一个数值是否为整数\nNumber.EPSILON  // 极小的常量，设定的误差范围\n</code></pre><ul>\n<li>Math对象的扩展</li>\n</ul>\n<pre><code>Math.trunc()  // 去除一个数的小数部分，返回整数部分\nMath.sign() // 判断一个数到底是正数、负数、还是零\nMath.cbrt() // 用于计算一个数的立方根\nMath.hypot() // 返回所有参数的平方和的平方根\nMath.expm1() // Math.expm1(x)返回ex - 1，即Math.exp(x) - 1\nMath.log1p() // Math.log1p(x)方法返回1 + x的自然对数\nMath.log10() // Math.log10(x)返回以10为底的x的对数\nMath.log2() // Math.log2(x)返回以2为底的x的对数\nMath.sinh(x) // 返回x的双曲正弦（hyperbolic sine）\nMath.cosh(x) // 返回x的双曲余弦（hyperbolic cosine）\nMath.tanh(x) // 返回x的双曲正切（hyperbolic tangent）\nMath.asinh(x) // 返回x的反双曲正弦（inverse hyperbolic sine）\nMath.acosh(x) // 返回x的反双曲余弦（inverse hyperbolic cosine）\nMath.atanh(x) // 返回x的反双曲正切（inverse hyperbolic tangent）\n</code></pre><ul>\n<li>指数运算符 **</li>\n</ul>\n<pre><code>console.log(2 ** 3) // 8\n</code></pre><h5 id=\"对象部分扩展\"><a href=\"#对象部分扩展\" class=\"headerlink\" title=\"对象部分扩展\"></a>对象部分扩展</h5><ul>\n<li>变量和函数可直接作为对象的属性和方法</li>\n</ul>\n<pre><code>&lt;!-- ES6 --&gt;\nvar object = {\n  value: 42,\n  toString() {\n    return this.value\n  }\n}\nconsole.log(object.toString() === 42) // true\n\n&lt;!-- ES5 --&gt;\nvar object = {\n  value: 42,\n  toString: function toString() {\n    return this.value\n  }\n}\n\nconsole.log(object.toString() === 42) // true\n</code></pre><ul>\n<li>计算属性名可以用变量当做对象的属性名</li>\n</ul>\n<pre><code>var computed = &#39;calc&#39;\nvar comFn = {\n  [computed + &#39;xun&#39;]: &#39;hi&#39;,\n  [computed + &#39;feng&#39;]: &#39;hello&#39;\n}\nconsole.log(comFn[&#39;calcxun&#39;]) // hi\nconsole.log(comFn[&#39;calcfeng&#39;]) // hello\n</code></pre><h5 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h5><ul>\n<li>允许从数组或对象中提取数据并对变量赋值</li>\n</ul>\n<pre><code>var a = 1\nvar b = 2\nvar c = {a, b}\nconsole.log(c) // {a: 1, b: 2}\n\nvar c = {a: 1, b: 2}\nvar {a, b} = c\nconsole.log(a, b) // 1 2\n</code></pre><h5 id=\"默认参数-default\"><a href=\"#默认参数-default\" class=\"headerlink\" title=\"默认参数 default\"></a>默认参数 default</h5><ul>\n<li>ES6可以指定默认参数在arguments中</li>\n</ul>\n<pre><code>function myFn(mes = &#39;hello&#39;) {\n  console.log(mes)\n}\nmyFn(); // hello\nmyFn(&#39;hi&#39;); // hi\n</code></pre><h5 id=\"其他参数-rest\"><a href=\"#其他参数-rest\" class=\"headerlink\" title=\"其他参数 rest\"></a>其他参数 rest</h5><ul>\n<li>允许将部分参数作为一个单独的数组</li>\n</ul>\n<pre><code>function myFn(a, ...b) {\n  var result = a\n   for(let i = 0; i&lt;b.length; i++) {\n     result += b[i]\n   }\n   return result\n}\nconsole.log(myFn(1,2,3,4)) // 10\n</code></pre><h5 id=\"迭代器-iterators-amp-amp-for-of\"><a href=\"#迭代器-iterators-amp-amp-for-of\" class=\"headerlink\" title=\"迭代器 iterators &amp;&amp; for of\"></a>迭代器 iterators &amp;&amp; for of</h5><ul>\n<li>可以直接遍历容器的内容</li>\n</ul>\n<pre><code>var a=[&#39;x&#39;, &#39;y&#39;, &#39;z&#39;]\nfor (let i of a){\n  console.log(i)  // x y z\n}\n</code></pre><h5 id=\"类-classes\"><a href=\"#类-classes\" class=\"headerlink\" title=\"类 classes\"></a>类 classes</h5><ul>\n<li>constructor(构造方法)<br>创建实例对象时设定的属性</li>\n<li>extends(继承)<br>class之间可以通过extends相互继承，相比于原形链更简洁易懂</li>\n<li>super<br>在子类constructor中调用父类的constructor</li>\n<li>getter &amp;&amp; setter<br>在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</li>\n<li>static 静态方法<br>不会被实例对象继承，只能通过类或类继承来调用</li>\n</ul>\n<pre><code>class student {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n  getName () {\n    console.log(this.name)\n  }\n  get myAge() {\n    return this.age\n  }\n  set myAge(value) {\n    this._age = value\n  }\n  static bar() {\n    console.log(&#39;static&#39;)\n  }\n}\n// 创建实例对象\nvar xun = new student(&#39;xun&#39;, 20)\nxun.getName() // xun\nxun.bar() // TypeError: xun.bar is not a function. (In &#39;xun.bar()&#39;, &#39;xun.bar&#39; is undefined)\nstudent.bar() // static\n// 继承\nclass Tom extends student {\n  constructor(name, age, sex) {\n    super(name, age)\n    this.sex = sex\n  }\n}\nvar tom = new Tom(&#39;tom&#39;, 20, &#39;man&#39;)\nconsole.log(tom)  // 实例对象属性\ntom.myAge = 22\nconsole.log(tom._age) // 22\nconsole.log(tom.myAge) // 20\n</code></pre><h5 id=\"模块-modules\"><a href=\"#模块-modules\" class=\"headerlink\" title=\"模块 modules\"></a>模块 modules</h5><ul>\n<li>export 暴露对外接口</li>\n<li>import 导入其他模块接口</li>\n</ul>\n<pre><code>&lt;!-- export.js --&gt;\n//命名导出\nexport var foo = ...\nexport let bar = ...\nexport const MY_CONST = ...\n\nexport function myFunc() {\n   ...\n}\nexport function* myGeneratorFunc() {\n   ...\n}\nexport class MyClass {\n   ...\n}\n// default 导出\nexport default 123\nexport default function (x) {\n   return x\n}\nexport default x =&gt; x;\nexport default class {\n   constructor(x, y) {\n       this.x = x\n       this.y = y\n   }\n};\n//也可以自己列出所有导出内容\nconst MY_CONST = ...\nfunction myFunc() {\n   ...\n}\n\nexport { MY_CONST, myFunc }\n//或者在导出的时候给他们改个名字\nexport { MY_CONST as THE_CONST, myFunc as theFunc }\n\n//还可以导出从其他地方导入的模块\nexport * from &#39;src/other_module&#39;\nexport { foo, bar } from &#39;src/other_module&#39;\nexport { foo as myFoo, bar } from &#39;src/other_module&#39;\n\n&lt;!-- import.js --&gt;\n\n// Default exports and named exports\nimport theDefault, { named1, named2 } from &#39;src/mylib&#39;\nimport theDefault from &#39;src/mylib&#39;\nimport { named1, named2 } from &#39;src/mylib&#39;\n\n// Renaming: import named1 as myNamed1\nimport { named1 as myNamed1, named2 } from &#39;src/mylib&#39;\n\n// Importing the module as an object\n// (with one property per named export)\nimport * as mylib from &#39;src/mylib&#39;\n\n// Only load the module, don’t import anything\nimport &#39;src/mylib&#39;\n</code></pre><h5 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h5><p><a href=\"http://www.jianshu.com/p/ebfeb687eb70\" target=\"_blank\" rel=\"external\">30分钟掌握ES6/ES2015核心内容</a><br><a href=\"http://es6.ruanyifeng.com/?search=Spread&amp;x=0&amp;y=0\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a><br><a href=\"https://github.com/addyosmani/es6-equivalents-in-es5/blob/master/README.md#classes\" target=\"_blank\" rel=\"external\"> ECMAScript 6 equivalents in ES5</a></p>\n","excerpt":"<p>关于ES6的学习<br>","more":"</p>\n<h3 id=\"ES5-gt-ES6\"><a href=\"#ES5-gt-ES6\" class=\"headerlink\" title=\"ES5 =&gt; ES6\"></a>ES5 =&gt; ES6</h3><hr>\n<h5 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h5><ul>\n<li>与函数表达式相比，箭头函数有更短的语法。</li>\n</ul>\n<pre><code>    function (i) { return i * 2} //ES5\n    (i) =&gt; i * 2    //ES6\n</code></pre><p>复杂时需要<code>{}</code>包裹</p>\n<pre><code>    function (i, j) {\n        i++\n        j++\n        return i + j\n    }  // ES5\n    (i, j) =&gt; {i++, j++, return i + j} // ES6\n</code></pre><ul>\n<li>箭头函数没有自身的this，从外层继承this。</li>\n<li>箭头函数通常是匿名的。</li>\n</ul>\n<h5 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h5><ul>\n<li>ES5中只有全局作用域与函数作用域,因此内层变量将会覆盖外层变量</li>\n<li>let 提供块级作用域,let命名的变量只在当前块内起作用</li>\n<li>const 声明的是常量，不可更改</li>\n</ul>\n<pre><code>  var a = 1\n  var b = 2\n  var c = 3\n  if (true) {\n    var a = 10  // 函数作用域\n    let b = 20  // if块内的作用域\n        c = 30  // es5解决方法\n    console.log(&#39;a:&#39; + a)\n    console.log(&#39;b:&#39; + b)\n    console.log(&#39;c:&#39; + c)\n  }\n  console.log(&#39;a:&#39; + a)\n  console.log(&#39;b:&#39; + b)\n  console.log(&#39;c:&#39; + c)\n</code></pre><p>var声明的变量在循环时新值会覆盖旧值，导致输出的变量都为最终值</p>\n<pre><code>var a = []\nfor (var i = 0; i &lt; 9; i++) {\n  a[i] = function () {\n        console.log(i)\n    }\n}\na[2](); // 9\n</code></pre><p>ES5中利用闭包解决这一问题</p>\n<pre><code>function test (index) {\n        var testback = function () {\n            console.log(index)\n        }\n        return testback\n}\nvar a = []\nfor (var i = 0; i &lt; 9; i++) {\n  a[i] = test(i)\n}\na[2]()\n</code></pre><p>ES6中仅仅使用let即可解决</p>\n<pre><code>var a = []\nfor (let i = 0; i &lt; 9; i++) {\n  a[i] = function () {\n        console.log(i)\n    }\n}\na[2](); // 2\n</code></pre><p>const声明常量</p>\n<pre><code>const a = 1\na = 10\nconsole.log(a)\n</code></pre><h5 id=\"模版字符串\"><a href=\"#模版字符串\" class=\"headerlink\" title=\"模版字符串\"></a>模版字符串</h5><ul>\n<li>ES5中，当需要插入大量html文档时需要引用template插件或是用大量‘+’连接</li>\n<li>模版字符串可直接用’``’标识起始</li>\n<li>模板字符串可以包含嵌入式表达式,对象字面量,甚至是函数</li>\n</ul>\n<pre><code>var myName = &#39;xunfeng&#39;\nconsole.log(`your name is ${myName}`) // your name is xunfeng\n\nvar people = {\n  name: &#39;xunfeng&#39;,\n  age: 20\n}\nconsole.log(`your name is ${people.name}, your age is ${people.age}`)\n// your name is xunfeng, your age is 20\n\nfunction fn () {\n  return &#39;function&#39;\n}\nconsole.log(`可以嵌套函数：${fn()}`)\n</code></pre><ul>\n<li>模板字符串可以在表达式内进行数学运算</li>\n</ul>\n<pre><code>var a = 10\nvar b = 20\nconsole.log(`a+b=${a+b}`) //a+b=30\n</code></pre><ul>\n<li>模板字符串内保留空格，不需要换行符即可换行</li>\n</ul>\n<pre><code>console.log(`第一行\n第二行`)\n// 第一行\n// 第二行\n</code></pre><h5 id=\"数值扩展-Numeric-Literals\"><a href=\"#数值扩展-Numeric-Literals\" class=\"headerlink\" title=\"数值扩展 Numeric Literals\"></a>数值扩展 Numeric Literals</h5><ul>\n<li>支持二进制(0b)和八进制(0o)新写法</li>\n</ul>\n<pre><code>0b111110111 === 503 // true\n0o767 === 503 // true\n\n将二进制或八进制转换成十进制\nNumber(&#39;0b111&#39;)  // 7\nNumber(&#39;0o10&#39;)  // 8\n</code></pre><ul>\n<li>新的方法</li>\n</ul>\n<pre><code>Number.isFinite() // 检查一个数值是否为有限\nNumber.isNaN()  // 检查一个数值是否为NaN\nNumber.isInteger()  // 检查一个数值是否为整数\nNumber.EPSILON  // 极小的常量，设定的误差范围\n</code></pre><ul>\n<li>Math对象的扩展</li>\n</ul>\n<pre><code>Math.trunc()  // 去除一个数的小数部分，返回整数部分\nMath.sign() // 判断一个数到底是正数、负数、还是零\nMath.cbrt() // 用于计算一个数的立方根\nMath.hypot() // 返回所有参数的平方和的平方根\nMath.expm1() // Math.expm1(x)返回ex - 1，即Math.exp(x) - 1\nMath.log1p() // Math.log1p(x)方法返回1 + x的自然对数\nMath.log10() // Math.log10(x)返回以10为底的x的对数\nMath.log2() // Math.log2(x)返回以2为底的x的对数\nMath.sinh(x) // 返回x的双曲正弦（hyperbolic sine）\nMath.cosh(x) // 返回x的双曲余弦（hyperbolic cosine）\nMath.tanh(x) // 返回x的双曲正切（hyperbolic tangent）\nMath.asinh(x) // 返回x的反双曲正弦（inverse hyperbolic sine）\nMath.acosh(x) // 返回x的反双曲余弦（inverse hyperbolic cosine）\nMath.atanh(x) // 返回x的反双曲正切（inverse hyperbolic tangent）\n</code></pre><ul>\n<li>指数运算符 **</li>\n</ul>\n<pre><code>console.log(2 ** 3) // 8\n</code></pre><h5 id=\"对象部分扩展\"><a href=\"#对象部分扩展\" class=\"headerlink\" title=\"对象部分扩展\"></a>对象部分扩展</h5><ul>\n<li>变量和函数可直接作为对象的属性和方法</li>\n</ul>\n<pre><code>&lt;!-- ES6 --&gt;\nvar object = {\n  value: 42,\n  toString() {\n    return this.value\n  }\n}\nconsole.log(object.toString() === 42) // true\n\n&lt;!-- ES5 --&gt;\nvar object = {\n  value: 42,\n  toString: function toString() {\n    return this.value\n  }\n}\n\nconsole.log(object.toString() === 42) // true\n</code></pre><ul>\n<li>计算属性名可以用变量当做对象的属性名</li>\n</ul>\n<pre><code>var computed = &#39;calc&#39;\nvar comFn = {\n  [computed + &#39;xun&#39;]: &#39;hi&#39;,\n  [computed + &#39;feng&#39;]: &#39;hello&#39;\n}\nconsole.log(comFn[&#39;calcxun&#39;]) // hi\nconsole.log(comFn[&#39;calcfeng&#39;]) // hello\n</code></pre><h5 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h5><ul>\n<li>允许从数组或对象中提取数据并对变量赋值</li>\n</ul>\n<pre><code>var a = 1\nvar b = 2\nvar c = {a, b}\nconsole.log(c) // {a: 1, b: 2}\n\nvar c = {a: 1, b: 2}\nvar {a, b} = c\nconsole.log(a, b) // 1 2\n</code></pre><h5 id=\"默认参数-default\"><a href=\"#默认参数-default\" class=\"headerlink\" title=\"默认参数 default\"></a>默认参数 default</h5><ul>\n<li>ES6可以指定默认参数在arguments中</li>\n</ul>\n<pre><code>function myFn(mes = &#39;hello&#39;) {\n  console.log(mes)\n}\nmyFn(); // hello\nmyFn(&#39;hi&#39;); // hi\n</code></pre><h5 id=\"其他参数-rest\"><a href=\"#其他参数-rest\" class=\"headerlink\" title=\"其他参数 rest\"></a>其他参数 rest</h5><ul>\n<li>允许将部分参数作为一个单独的数组</li>\n</ul>\n<pre><code>function myFn(a, ...b) {\n  var result = a\n   for(let i = 0; i&lt;b.length; i++) {\n     result += b[i]\n   }\n   return result\n}\nconsole.log(myFn(1,2,3,4)) // 10\n</code></pre><h5 id=\"迭代器-iterators-amp-amp-for-of\"><a href=\"#迭代器-iterators-amp-amp-for-of\" class=\"headerlink\" title=\"迭代器 iterators &amp;&amp; for of\"></a>迭代器 iterators &amp;&amp; for of</h5><ul>\n<li>可以直接遍历容器的内容</li>\n</ul>\n<pre><code>var a=[&#39;x&#39;, &#39;y&#39;, &#39;z&#39;]\nfor (let i of a){\n  console.log(i)  // x y z\n}\n</code></pre><h5 id=\"类-classes\"><a href=\"#类-classes\" class=\"headerlink\" title=\"类 classes\"></a>类 classes</h5><ul>\n<li>constructor(构造方法)<br>创建实例对象时设定的属性</li>\n<li>extends(继承)<br>class之间可以通过extends相互继承，相比于原形链更简洁易懂</li>\n<li>super<br>在子类constructor中调用父类的constructor</li>\n<li>getter &amp;&amp; setter<br>在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</li>\n<li>static 静态方法<br>不会被实例对象继承，只能通过类或类继承来调用</li>\n</ul>\n<pre><code>class student {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n  getName () {\n    console.log(this.name)\n  }\n  get myAge() {\n    return this.age\n  }\n  set myAge(value) {\n    this._age = value\n  }\n  static bar() {\n    console.log(&#39;static&#39;)\n  }\n}\n// 创建实例对象\nvar xun = new student(&#39;xun&#39;, 20)\nxun.getName() // xun\nxun.bar() // TypeError: xun.bar is not a function. (In &#39;xun.bar()&#39;, &#39;xun.bar&#39; is undefined)\nstudent.bar() // static\n// 继承\nclass Tom extends student {\n  constructor(name, age, sex) {\n    super(name, age)\n    this.sex = sex\n  }\n}\nvar tom = new Tom(&#39;tom&#39;, 20, &#39;man&#39;)\nconsole.log(tom)  // 实例对象属性\ntom.myAge = 22\nconsole.log(tom._age) // 22\nconsole.log(tom.myAge) // 20\n</code></pre><h5 id=\"模块-modules\"><a href=\"#模块-modules\" class=\"headerlink\" title=\"模块 modules\"></a>模块 modules</h5><ul>\n<li>export 暴露对外接口</li>\n<li>import 导入其他模块接口</li>\n</ul>\n<pre><code>&lt;!-- export.js --&gt;\n//命名导出\nexport var foo = ...\nexport let bar = ...\nexport const MY_CONST = ...\n\nexport function myFunc() {\n   ...\n}\nexport function* myGeneratorFunc() {\n   ...\n}\nexport class MyClass {\n   ...\n}\n// default 导出\nexport default 123\nexport default function (x) {\n   return x\n}\nexport default x =&gt; x;\nexport default class {\n   constructor(x, y) {\n       this.x = x\n       this.y = y\n   }\n};\n//也可以自己列出所有导出内容\nconst MY_CONST = ...\nfunction myFunc() {\n   ...\n}\n\nexport { MY_CONST, myFunc }\n//或者在导出的时候给他们改个名字\nexport { MY_CONST as THE_CONST, myFunc as theFunc }\n\n//还可以导出从其他地方导入的模块\nexport * from &#39;src/other_module&#39;\nexport { foo, bar } from &#39;src/other_module&#39;\nexport { foo as myFoo, bar } from &#39;src/other_module&#39;\n\n&lt;!-- import.js --&gt;\n\n// Default exports and named exports\nimport theDefault, { named1, named2 } from &#39;src/mylib&#39;\nimport theDefault from &#39;src/mylib&#39;\nimport { named1, named2 } from &#39;src/mylib&#39;\n\n// Renaming: import named1 as myNamed1\nimport { named1 as myNamed1, named2 } from &#39;src/mylib&#39;\n\n// Importing the module as an object\n// (with one property per named export)\nimport * as mylib from &#39;src/mylib&#39;\n\n// Only load the module, don’t import anything\nimport &#39;src/mylib&#39;\n</code></pre><h5 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h5><p><a href=\"http://www.jianshu.com/p/ebfeb687eb70\">30分钟掌握ES6/ES2015核心内容</a><br><a href=\"http://es6.ruanyifeng.com/?search=Spread&amp;x=0&amp;y=0\">ECMAScript 6 入门</a><br><a href=\"https://github.com/addyosmani/es6-equivalents-in-es5/blob/master/README.md#classes\"> ECMAScript 6 equivalents in ES5</a></p>"},{"title":"TypeScript中的OOP","date":"2017-03-23T14:27:15.000Z","_content":"学习TypeScript，向一个后端迈进！\n\n<!--more-->\n\n#### SOLID原则\n|en    |     en      |ch   |\n| ------------- |:-------------:| -----:|\n| SRP | The Single Responsibility Principle | 单一责任原则 |\n| OCP | The Open Closed Principle | 开放封闭原则 |\n| LSP | The Liskov Substitution Principle | 里氏替换原则 |\n| DIP | The Dependency Inversion Principle | 依赖倒置原则 |\n| ISP | The Interface Segregation Principle | 接口分离原则 |\n\n- 单一职责原则\n表明软件组件（函数，类，模块）必须专注于单一的任务，当这个类需要承当其他类型的责任的时候，就需要分解这个类。\n- 开放封闭原则\n表明软件设计时必须时刻考虑到（代码）可能的发展（扩展性），但是程序的发展必须最少地修改已有的代码。也就是扩展开放，修改封闭。\n- 里氏替换原则\n表明只要继承的是同一个接口，程序里任意一个类都可以被其他的类替换。替换后不需要其他额外的工作程序就能像原来一样运行。\n- 依赖倒置原则\n表明一个方法应该遵从依赖于抽象（接口）而不是一个实例（类）的概念。\n高层模块不应该依赖于低层模块，二者都应该依赖于抽象\n抽象不应该依赖于细节，细节应该依赖于抽象\n- 接口隔离原则\n不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好。\n\n\n#### 类\n","source":"_posts/TypeScript中的OOP.md","raw":"---\ntitle: TypeScript中的OOP\ndate: 2017-03-23 22:27:15\ntags:\n---\n学习TypeScript，向一个后端迈进！\n\n<!--more-->\n\n#### SOLID原则\n|en    |     en      |ch   |\n| ------------- |:-------------:| -----:|\n| SRP | The Single Responsibility Principle | 单一责任原则 |\n| OCP | The Open Closed Principle | 开放封闭原则 |\n| LSP | The Liskov Substitution Principle | 里氏替换原则 |\n| DIP | The Dependency Inversion Principle | 依赖倒置原则 |\n| ISP | The Interface Segregation Principle | 接口分离原则 |\n\n- 单一职责原则\n表明软件组件（函数，类，模块）必须专注于单一的任务，当这个类需要承当其他类型的责任的时候，就需要分解这个类。\n- 开放封闭原则\n表明软件设计时必须时刻考虑到（代码）可能的发展（扩展性），但是程序的发展必须最少地修改已有的代码。也就是扩展开放，修改封闭。\n- 里氏替换原则\n表明只要继承的是同一个接口，程序里任意一个类都可以被其他的类替换。替换后不需要其他额外的工作程序就能像原来一样运行。\n- 依赖倒置原则\n表明一个方法应该遵从依赖于抽象（接口）而不是一个实例（类）的概念。\n高层模块不应该依赖于低层模块，二者都应该依赖于抽象\n抽象不应该依赖于细节，细节应该依赖于抽象\n- 接口隔离原则\n不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好。\n\n\n#### 类\n","slug":"TypeScript中的OOP","published":1,"updated":"2017-03-24T02:57:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqi00003zlwpe8tsocs7","content":"<p>学习TypeScript，向一个后端迈进！</p>\n<a id=\"more\"></a>\n<h4 id=\"SOLID原则\"><a href=\"#SOLID原则\" class=\"headerlink\" title=\"SOLID原则\"></a>SOLID原则</h4><table>\n<thead>\n<tr>\n<th>en</th>\n<th style=\"text-align:center\">en</th>\n<th style=\"text-align:right\">ch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SRP</td>\n<td style=\"text-align:center\">The Single Responsibility Principle</td>\n<td style=\"text-align:right\">单一责任原则</td>\n</tr>\n<tr>\n<td>OCP</td>\n<td style=\"text-align:center\">The Open Closed Principle</td>\n<td style=\"text-align:right\">开放封闭原则</td>\n</tr>\n<tr>\n<td>LSP</td>\n<td style=\"text-align:center\">The Liskov Substitution Principle</td>\n<td style=\"text-align:right\">里氏替换原则</td>\n</tr>\n<tr>\n<td>DIP</td>\n<td style=\"text-align:center\">The Dependency Inversion Principle</td>\n<td style=\"text-align:right\">依赖倒置原则</td>\n</tr>\n<tr>\n<td>ISP</td>\n<td style=\"text-align:center\">The Interface Segregation Principle</td>\n<td style=\"text-align:right\">接口分离原则</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>单一职责原则<br>表明软件组件（函数，类，模块）必须专注于单一的任务，当这个类需要承当其他类型的责任的时候，就需要分解这个类。</li>\n<li>开放封闭原则<br>表明软件设计时必须时刻考虑到（代码）可能的发展（扩展性），但是程序的发展必须最少地修改已有的代码。也就是扩展开放，修改封闭。</li>\n<li>里氏替换原则<br>表明只要继承的是同一个接口，程序里任意一个类都可以被其他的类替换。替换后不需要其他额外的工作程序就能像原来一样运行。</li>\n<li>依赖倒置原则<br>表明一个方法应该遵从依赖于抽象（接口）而不是一个实例（类）的概念。<br>高层模块不应该依赖于低层模块，二者都应该依赖于抽象<br>抽象不应该依赖于细节，细节应该依赖于抽象</li>\n<li>接口隔离原则<br>不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好。</li>\n</ul>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4>","excerpt":"<p>学习TypeScript，向一个后端迈进！</p>","more":"<h4 id=\"SOLID原则\"><a href=\"#SOLID原则\" class=\"headerlink\" title=\"SOLID原则\"></a>SOLID原则</h4><table>\n<thead>\n<tr>\n<th>en</th>\n<th style=\"text-align:center\">en</th>\n<th style=\"text-align:right\">ch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SRP</td>\n<td style=\"text-align:center\">The Single Responsibility Principle</td>\n<td style=\"text-align:right\">单一责任原则</td>\n</tr>\n<tr>\n<td>OCP</td>\n<td style=\"text-align:center\">The Open Closed Principle</td>\n<td style=\"text-align:right\">开放封闭原则</td>\n</tr>\n<tr>\n<td>LSP</td>\n<td style=\"text-align:center\">The Liskov Substitution Principle</td>\n<td style=\"text-align:right\">里氏替换原则</td>\n</tr>\n<tr>\n<td>DIP</td>\n<td style=\"text-align:center\">The Dependency Inversion Principle</td>\n<td style=\"text-align:right\">依赖倒置原则</td>\n</tr>\n<tr>\n<td>ISP</td>\n<td style=\"text-align:center\">The Interface Segregation Principle</td>\n<td style=\"text-align:right\">接口分离原则</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>单一职责原则<br>表明软件组件（函数，类，模块）必须专注于单一的任务，当这个类需要承当其他类型的责任的时候，就需要分解这个类。</li>\n<li>开放封闭原则<br>表明软件设计时必须时刻考虑到（代码）可能的发展（扩展性），但是程序的发展必须最少地修改已有的代码。也就是扩展开放，修改封闭。</li>\n<li>里氏替换原则<br>表明只要继承的是同一个接口，程序里任意一个类都可以被其他的类替换。替换后不需要其他额外的工作程序就能像原来一样运行。</li>\n<li>依赖倒置原则<br>表明一个方法应该遵从依赖于抽象（接口）而不是一个实例（类）的概念。<br>高层模块不应该依赖于低层模块，二者都应该依赖于抽象<br>抽象不应该依赖于细节，细节应该依赖于抽象</li>\n<li>接口隔离原则<br>不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好。</li>\n</ul>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4>"},{"title":"css布局","date":"2017-01-25T13:58:24.000Z","_content":"开始复习复习\n\n<!--more-->\n\n#### css盒子模型\n原理：padding,border,margin三者构成一个盒子。\n\n![图片来自网络](https://sfault-image.b0.upaiyun.com/291/448/2914489531-57d7e11741de5_articlex)\n\nMargin(外边距) - 清除边框外的区域，外边距是透明的。\nBorder(边框) - 围绕在内边距和内容外的边框。\nPadding(内边距) - 清除内容周围的区域，内边距是透明的。\nContent(内容) - 盒子的内容，显示文本和图像。\n\n w3c标准：总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right\n\n IE标准：总宽度 = margin-left + width + margin-right\n\n#### css定位机制\n\n##### 普通流\n  - 元素的位置由元素在HTML文档中的位置决定，从左到右，自上而下。\n  \n  - 块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。\n  \n  - 行内框在一行中水平布置。可以使用水平内边距、边框和外边距调整它们的间距。但是，垂直内边距、边框和外边距不影响行内框的高度。由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。\n  \n##### 定位\n- 相对定位（reletive）\n\t\n\t元素保持其形状及其所占空间，相对于普通流中其他元素的偏移。\n\n- 绝对定位（absloute）\n\n\t相对于已定位的祖先元素，如果没有已定位的祖先元素则相对于最初的包含块。\n\t脱离普通流，覆盖在普通流定位之上\n\t\n- 固定定位（fixed）\n\n\t相对于浏览器窗口的绝对定位\n\t\n##### 浮动\n- 不在普通流中占据空间，但会对之后的浮动元素产生空间占位影响\n\n\n\t\n#### 布局\n\n##### 常见布局\n\n- 单列水平居中布局, 一列定宽一列自适应布局, 两列定宽一列自适应布局, 两侧定宽中间自适应三列布局。\n\n- 圣杯与双飞翼是常见的三列布局，左右两列宽度固定，中列自适应。\n\n##### 圣杯布局\n\n- 为了给两边侧栏空出位置，给container元素设置padding\n\n- 左右两个div用相对定位并分配left，right属性，用负边距消除占位\n\n- main div设置100%宽度\n\n\n```\n<div class=\"container\">\n\t<div class=\"main\"></div>\n\t<div class=\"left\"></div>\n\t<div class=\"right\"></div>\n</div>\n```\n\n```\nbody {\n\tpadding: 0;\n\tmargin: 0;\n    min-width: 600px; /* 2*left + right */\n}\n.container {\n    padding-left: 200px;\n    padding-right: 200px;\n}\n.main {\n    float: left;\n    width: 100%;\n    height: 300px;\n    background-color: red;\n}\n.left {\n    position: relative;\n    left: -200px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -100%;\n    background-color: blue;\n}\n.right {\n    position: relative;\n    right: -210px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -200px;\n    background-color: green;\n}\n```\n\n##### 双飞翼布局\n\n- 三列左浮动\n- 为了不让main内容被遮挡，给其设置padding\n- 用负边距给左右两列定位，消除占位\n\n```\n<div class=\"main-con\">\n\t<div class=\"main\"></div>\n</div>\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n```\n\n```\n.main-con {\n\tfloat: left;\n\twidth: 100%;\n}\n\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tmargin-right: 210px;\n\tbackground-color: red;\n}\n\n.left {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -100%;\n\tbackground-color: blue;\n}\n\n.right {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -200px;\n\tbackground-color: green;\n}\n```\n\n##### 两者异同\n\n- 两者都把主栏放在文档流最前面，优先加载。\n \n- 两者都是三列浮动，然后通过负边距定位消除占位形成三列布局\n\n- 中列main处理不同：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主栏嵌套在div后利用主列的左、右外边距定位。","source":"_posts/css布局.md","raw":"---\ntitle: css布局\ndate: 2017-01-25 21:58:24\ntags:\n---\n开始复习复习\n\n<!--more-->\n\n#### css盒子模型\n原理：padding,border,margin三者构成一个盒子。\n\n![图片来自网络](https://sfault-image.b0.upaiyun.com/291/448/2914489531-57d7e11741de5_articlex)\n\nMargin(外边距) - 清除边框外的区域，外边距是透明的。\nBorder(边框) - 围绕在内边距和内容外的边框。\nPadding(内边距) - 清除内容周围的区域，内边距是透明的。\nContent(内容) - 盒子的内容，显示文本和图像。\n\n w3c标准：总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right\n\n IE标准：总宽度 = margin-left + width + margin-right\n\n#### css定位机制\n\n##### 普通流\n  - 元素的位置由元素在HTML文档中的位置决定，从左到右，自上而下。\n  \n  - 块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。\n  \n  - 行内框在一行中水平布置。可以使用水平内边距、边框和外边距调整它们的间距。但是，垂直内边距、边框和外边距不影响行内框的高度。由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。\n  \n##### 定位\n- 相对定位（reletive）\n\t\n\t元素保持其形状及其所占空间，相对于普通流中其他元素的偏移。\n\n- 绝对定位（absloute）\n\n\t相对于已定位的祖先元素，如果没有已定位的祖先元素则相对于最初的包含块。\n\t脱离普通流，覆盖在普通流定位之上\n\t\n- 固定定位（fixed）\n\n\t相对于浏览器窗口的绝对定位\n\t\n##### 浮动\n- 不在普通流中占据空间，但会对之后的浮动元素产生空间占位影响\n\n\n\t\n#### 布局\n\n##### 常见布局\n\n- 单列水平居中布局, 一列定宽一列自适应布局, 两列定宽一列自适应布局, 两侧定宽中间自适应三列布局。\n\n- 圣杯与双飞翼是常见的三列布局，左右两列宽度固定，中列自适应。\n\n##### 圣杯布局\n\n- 为了给两边侧栏空出位置，给container元素设置padding\n\n- 左右两个div用相对定位并分配left，right属性，用负边距消除占位\n\n- main div设置100%宽度\n\n\n```\n<div class=\"container\">\n\t<div class=\"main\"></div>\n\t<div class=\"left\"></div>\n\t<div class=\"right\"></div>\n</div>\n```\n\n```\nbody {\n\tpadding: 0;\n\tmargin: 0;\n    min-width: 600px; /* 2*left + right */\n}\n.container {\n    padding-left: 200px;\n    padding-right: 200px;\n}\n.main {\n    float: left;\n    width: 100%;\n    height: 300px;\n    background-color: red;\n}\n.left {\n    position: relative;\n    left: -200px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -100%;\n    background-color: blue;\n}\n.right {\n    position: relative;\n    right: -210px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -200px;\n    background-color: green;\n}\n```\n\n##### 双飞翼布局\n\n- 三列左浮动\n- 为了不让main内容被遮挡，给其设置padding\n- 用负边距给左右两列定位，消除占位\n\n```\n<div class=\"main-con\">\n\t<div class=\"main\"></div>\n</div>\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n```\n\n```\n.main-con {\n\tfloat: left;\n\twidth: 100%;\n}\n\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tmargin-right: 210px;\n\tbackground-color: red;\n}\n\n.left {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -100%;\n\tbackground-color: blue;\n}\n\n.right {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -200px;\n\tbackground-color: green;\n}\n```\n\n##### 两者异同\n\n- 两者都把主栏放在文档流最前面，优先加载。\n \n- 两者都是三列浮动，然后通过负边距定位消除占位形成三列布局\n\n- 中列main处理不同：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主栏嵌套在div后利用主列的左、右外边距定位。","slug":"css布局","published":1,"updated":"2017-01-26T10:52:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqi80006zlwp1cbed8zy","content":"<p>开始复习复习</p>\n<a id=\"more\"></a>\n<h4 id=\"css盒子模型\"><a href=\"#css盒子模型\" class=\"headerlink\" title=\"css盒子模型\"></a>css盒子模型</h4><p>原理：padding,border,margin三者构成一个盒子。</p>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/291/448/2914489531-57d7e11741de5_articlex\" alt=\"图片来自网络\"></p>\n<p>Margin(外边距) - 清除边框外的区域，外边距是透明的。<br>Border(边框) - 围绕在内边距和内容外的边框。<br>Padding(内边距) - 清除内容周围的区域，内边距是透明的。<br>Content(内容) - 盒子的内容，显示文本和图像。</p>\n<p> w3c标准：总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</p>\n<p> IE标准：总宽度 = margin-left + width + margin-right</p>\n<h4 id=\"css定位机制\"><a href=\"#css定位机制\" class=\"headerlink\" title=\"css定位机制\"></a>css定位机制</h4><h5 id=\"普通流\"><a href=\"#普通流\" class=\"headerlink\" title=\"普通流\"></a>普通流</h5><ul>\n<li><p>元素的位置由元素在HTML文档中的位置决定，从左到右，自上而下。</p>\n</li>\n<li><p>块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。</p>\n</li>\n<li><p>行内框在一行中水平布置。可以使用水平内边距、边框和外边距调整它们的间距。但是，垂直内边距、边框和外边距不影响行内框的高度。由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。</p>\n</li>\n</ul>\n<h5 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h5><ul>\n<li><p>相对定位（reletive）</p>\n<p>  元素保持其形状及其所占空间，相对于普通流中其他元素的偏移。</p>\n</li>\n<li><p>绝对定位（absloute）</p>\n<p>  相对于已定位的祖先元素，如果没有已定位的祖先元素则相对于最初的包含块。<br>  脱离普通流，覆盖在普通流定位之上</p>\n</li>\n<li><p>固定定位（fixed）</p>\n<p>  相对于浏览器窗口的绝对定位</p>\n</li>\n</ul>\n<h5 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h5><ul>\n<li>不在普通流中占据空间，但会对之后的浮动元素产生空间占位影响</li>\n</ul>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><h5 id=\"常见布局\"><a href=\"#常见布局\" class=\"headerlink\" title=\"常见布局\"></a>常见布局</h5><ul>\n<li><p>单列水平居中布局, 一列定宽一列自适应布局, 两列定宽一列自适应布局, 两侧定宽中间自适应三列布局。</p>\n</li>\n<li><p>圣杯与双飞翼是常见的三列布局，左右两列宽度固定，中列自适应。</p>\n</li>\n</ul>\n<h5 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h5><ul>\n<li><p>为了给两边侧栏空出位置，给container元素设置padding</p>\n</li>\n<li><p>左右两个div用相对定位并分配left，right属性，用负边距消除占位</p>\n</li>\n<li><p>main div设置100%宽度</p>\n</li>\n</ul>\n<pre><code>&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><pre><code>body {\n    padding: 0;\n    margin: 0;\n    min-width: 600px; /* 2*left + right */\n}\n.container {\n    padding-left: 200px;\n    padding-right: 200px;\n}\n.main {\n    float: left;\n    width: 100%;\n    height: 300px;\n    background-color: red;\n}\n.left {\n    position: relative;\n    left: -200px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -100%;\n    background-color: blue;\n}\n.right {\n    position: relative;\n    right: -210px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -200px;\n    background-color: green;\n}\n</code></pre><h5 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h5><ul>\n<li>三列左浮动</li>\n<li>为了不让main内容被遮挡，给其设置padding</li>\n<li>用负边距给左右两列定位，消除占位</li>\n</ul>\n<pre><code>&lt;div class=&quot;main-con&quot;&gt;\n    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n</code></pre><pre><code>.main-con {\n    float: left;\n    width: 100%;\n}\n\n.main {\n    height: 300px;\n    margin-left: 210px;\n    margin-right: 210px;\n    background-color: red;\n}\n\n.left {\n    float: left;\n    width: 200px;\n    height: 300px;\n    margin-left: -100%;\n    background-color: blue;\n}\n\n.right {\n    float: left;\n    width: 200px;\n    height: 300px;\n    margin-left: -200px;\n    background-color: green;\n}\n</code></pre><h5 id=\"两者异同\"><a href=\"#两者异同\" class=\"headerlink\" title=\"两者异同\"></a>两者异同</h5><ul>\n<li><p>两者都把主栏放在文档流最前面，优先加载。</p>\n</li>\n<li><p>两者都是三列浮动，然后通过负边距定位消除占位形成三列布局</p>\n</li>\n<li><p>中列main处理不同：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主栏嵌套在div后利用主列的左、右外边距定位。</p>\n</li>\n</ul>\n","excerpt":"<p>开始复习复习</p>","more":"<h4 id=\"css盒子模型\"><a href=\"#css盒子模型\" class=\"headerlink\" title=\"css盒子模型\"></a>css盒子模型</h4><p>原理：padding,border,margin三者构成一个盒子。</p>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/291/448/2914489531-57d7e11741de5_articlex\" alt=\"图片来自网络\"></p>\n<p>Margin(外边距) - 清除边框外的区域，外边距是透明的。<br>Border(边框) - 围绕在内边距和内容外的边框。<br>Padding(内边距) - 清除内容周围的区域，内边距是透明的。<br>Content(内容) - 盒子的内容，显示文本和图像。</p>\n<p> w3c标准：总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</p>\n<p> IE标准：总宽度 = margin-left + width + margin-right</p>\n<h4 id=\"css定位机制\"><a href=\"#css定位机制\" class=\"headerlink\" title=\"css定位机制\"></a>css定位机制</h4><h5 id=\"普通流\"><a href=\"#普通流\" class=\"headerlink\" title=\"普通流\"></a>普通流</h5><ul>\n<li><p>元素的位置由元素在HTML文档中的位置决定，从左到右，自上而下。</p>\n</li>\n<li><p>块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。</p>\n</li>\n<li><p>行内框在一行中水平布置。可以使用水平内边距、边框和外边距调整它们的间距。但是，垂直内边距、边框和外边距不影响行内框的高度。由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。</p>\n</li>\n</ul>\n<h5 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h5><ul>\n<li><p>相对定位（reletive）</p>\n<p>  元素保持其形状及其所占空间，相对于普通流中其他元素的偏移。</p>\n</li>\n<li><p>绝对定位（absloute）</p>\n<p>  相对于已定位的祖先元素，如果没有已定位的祖先元素则相对于最初的包含块。<br>  脱离普通流，覆盖在普通流定位之上</p>\n</li>\n<li><p>固定定位（fixed）</p>\n<p>  相对于浏览器窗口的绝对定位</p>\n</li>\n</ul>\n<h5 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h5><ul>\n<li>不在普通流中占据空间，但会对之后的浮动元素产生空间占位影响</li>\n</ul>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><h5 id=\"常见布局\"><a href=\"#常见布局\" class=\"headerlink\" title=\"常见布局\"></a>常见布局</h5><ul>\n<li><p>单列水平居中布局, 一列定宽一列自适应布局, 两列定宽一列自适应布局, 两侧定宽中间自适应三列布局。</p>\n</li>\n<li><p>圣杯与双飞翼是常见的三列布局，左右两列宽度固定，中列自适应。</p>\n</li>\n</ul>\n<h5 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h5><ul>\n<li><p>为了给两边侧栏空出位置，给container元素设置padding</p>\n</li>\n<li><p>左右两个div用相对定位并分配left，right属性，用负边距消除占位</p>\n</li>\n<li><p>main div设置100%宽度</p>\n</li>\n</ul>\n<pre><code>&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><pre><code>body {\n    padding: 0;\n    margin: 0;\n    min-width: 600px; /* 2*left + right */\n}\n.container {\n    padding-left: 200px;\n    padding-right: 200px;\n}\n.main {\n    float: left;\n    width: 100%;\n    height: 300px;\n    background-color: red;\n}\n.left {\n    position: relative;\n    left: -200px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -100%;\n    background-color: blue;\n}\n.right {\n    position: relative;\n    right: -210px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -200px;\n    background-color: green;\n}\n</code></pre><h5 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h5><ul>\n<li>三列左浮动</li>\n<li>为了不让main内容被遮挡，给其设置padding</li>\n<li>用负边距给左右两列定位，消除占位</li>\n</ul>\n<pre><code>&lt;div class=&quot;main-con&quot;&gt;\n    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n</code></pre><pre><code>.main-con {\n    float: left;\n    width: 100%;\n}\n\n.main {\n    height: 300px;\n    margin-left: 210px;\n    margin-right: 210px;\n    background-color: red;\n}\n\n.left {\n    float: left;\n    width: 200px;\n    height: 300px;\n    margin-left: -100%;\n    background-color: blue;\n}\n\n.right {\n    float: left;\n    width: 200px;\n    height: 300px;\n    margin-left: -200px;\n    background-color: green;\n}\n</code></pre><h5 id=\"两者异同\"><a href=\"#两者异同\" class=\"headerlink\" title=\"两者异同\"></a>两者异同</h5><ul>\n<li><p>两者都把主栏放在文档流最前面，优先加载。</p>\n</li>\n<li><p>两者都是三列浮动，然后通过负边距定位消除占位形成三列布局</p>\n</li>\n<li><p>中列main处理不同：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主栏嵌套在div后利用主列的左、右外边距定位。</p>\n</li>\n</ul>"},{"title":"JavaScript实例应用","date":"2017-04-07T01:20:36.000Z","_content":"\n记笔记！记笔记！记笔记！\n<!--more-->\n\n\n### JavaScript实例应用\n\n#### JavaScript基本模块\n\n##### 从字符串中总提取一个列表\n```\nvar test = `This is a list of items: right, left, top, bottom.`\nvar start = test.indexOf(':')\nvar end = test.indexOf('.', start+1)\nvar testStr = test.substring(start+1, end).split(',')\n```\n","source":"_posts/JavaScript实例应用.md","raw":"---\ntitle: JavaScript实例应用\ndate: 2017-04-07 09:20:36\ntags:\n  - JavaScript\n---\n\n记笔记！记笔记！记笔记！\n<!--more-->\n\n\n### JavaScript实例应用\n\n#### JavaScript基本模块\n\n##### 从字符串中总提取一个列表\n```\nvar test = `This is a list of items: right, left, top, bottom.`\nvar start = test.indexOf(':')\nvar end = test.indexOf('.', start+1)\nvar testStr = test.substring(start+1, end).split(',')\n```\n","slug":"JavaScript实例应用","published":1,"updated":"2017-04-07T01:38:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqia0007zlwpgt2t33i5","content":"<p>记笔记！记笔记！记笔记！<br><a id=\"more\"></a></p>\n<h3 id=\"JavaScript实例应用\"><a href=\"#JavaScript实例应用\" class=\"headerlink\" title=\"JavaScript实例应用\"></a>JavaScript实例应用</h3><h4 id=\"JavaScript基本模块\"><a href=\"#JavaScript基本模块\" class=\"headerlink\" title=\"JavaScript基本模块\"></a>JavaScript基本模块</h4><h5 id=\"从字符串中总提取一个列表\"><a href=\"#从字符串中总提取一个列表\" class=\"headerlink\" title=\"从字符串中总提取一个列表\"></a>从字符串中总提取一个列表</h5><pre><code>var test = `This is a list of items: right, left, top, bottom.`\nvar start = test.indexOf(&#39;:&#39;)\nvar end = test.indexOf(&#39;.&#39;, start+1)\nvar testStr = test.substring(start+1, end).split(&#39;,&#39;)\n</code></pre>","excerpt":"<p>记笔记！记笔记！记笔记！<br>","more":"</p>\n<h3 id=\"JavaScript实例应用\"><a href=\"#JavaScript实例应用\" class=\"headerlink\" title=\"JavaScript实例应用\"></a>JavaScript实例应用</h3><h4 id=\"JavaScript基本模块\"><a href=\"#JavaScript基本模块\" class=\"headerlink\" title=\"JavaScript基本模块\"></a>JavaScript基本模块</h4><h5 id=\"从字符串中总提取一个列表\"><a href=\"#从字符串中总提取一个列表\" class=\"headerlink\" title=\"从字符串中总提取一个列表\"></a>从字符串中总提取一个列表</h5><pre><code>var test = `This is a list of items: right, left, top, bottom.`\nvar start = test.indexOf(&#39;:&#39;)\nvar end = test.indexOf(&#39;.&#39;, start+1)\nvar testStr = test.substring(start+1, end).split(&#39;,&#39;)\n</code></pre>"},{"title":"react学习","date":"2017-04-23T01:38:19.000Z","_content":"愿这次笔记能记好。\n\n<!--more-->\n\n# <strong class=\"title\">React</strong>\n\n## <strong class=\"title\">创建项目</strong>\n\n``` shell\n$ git clone -o react-starter-kit -b master --single-branch       https://github.com/kriasoft/react-starter-kit.git myapp\n$ cd myapp\n$ yarn install\n$ yarn start\n```\n\n<!--## jsx-->\n\n\n\n### <strong class=\"title\">redux(一种架构模式)</strong>\n不同的组件之间需要共享读写一些数据。\n\n### <strong class=\"title\">dispatch</strong>\n定义 dispatch 专门负责数据的修改:\n``` js\nfunction dispatch (action) {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      usrState.name = action.name;\n      break;\n    case 'UPDATE_USER_AGE':\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n```\n\n对数据的操作必须通过dispatch函数，\n`action`是一个对象，包含`type`,`data`等内容。\n\n``` js\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\ndispacth(params);\n// 修改了name\n```\n\n所有的全局变量数据必须先通过 dispatch, 并且必须用 action 通过 switch 确定修改什么。\n因此，无需再担心共享数据状态修改的问题。\n\n\n### <strong class=\"title\">store 构建state/dispatch 的集合</strong>\n\n`createStore`\n``` js\nfunction createStore (state, stateChanger) {\n  const getState = () => state\n  const dispatch = (action) => stateChanger(state, action)\n  return {getState, dispatch}\n}\n```\n`state`：应用程序状态。\n`stateChanger`:变化方法。\n`getState`:获取state的数据。\n`dispatch`:修改数据，接收action。\n\n如下修改数据生成的方式\n``` js\nlet usrState = {\n  name: 'xun',\n  age: 18\n};\n\nconst renderApp = (user) => {\n  const userDOM = document.getElementById('user');\n  userDOM.innerHTML = `${user.name},age:${user.age}`;\n};\n\nconst createStore = (state, stateChanger) => {\n  const getState = () => state;\n  const dispatch = (action) => stateChanger(state, action);\n  return {getState, dispatch};\n};\n\nconst stateChanger = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      usrState.name = action.name;\n      break;\n    case 'UPDATE_USER_AGE':\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n```\n通过`store.dispatch`修改数据\n通过`store.getState`获取数据\n\n### <strong class=\"title\">监控数据变化</strong>\n上面的代码如果不手动renderApp的话，页面数据不会更新，因此需要自动渲染数据。\n修改`createStore`\n``` js\nconst createStore = (state, stateChanger) => {\n  const listeners = [];\n  const subscribe = (listener) => listeners.push(listener);\n  const getState = () => state;\n  const dispatch = (action) => {\n    stateChanger(state, action);\n    listeners.forEach((listener) => listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n```\n通过`store.subscribe(listener)`传入监听函数，并存入数组中\n初始化时把`renderApp`传入数组中\n``` js\nconst store = createStore(appState, stateChanger)\nstore.subscribe(() => renderApp(store.getState()))\n\nrenderApp(store.getState()) // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n// 自动更新数据...\n```\n\n### <strong class=\"title\">纯函数</strong>\n- 函数的返回结果只依赖于它的参数\n- 执行过程中不产生任何副作用\n\n### <strong class=\"title\">共享结构的对象,优化性能</strong>\n更新时，部分属性无改变，但仍旧重新渲染，耗费性能。\n`解决方案`:在渲染函数执行之前判断传入的新数据和已有的数据是否相同。\n``` js\nconst obj = { a: 1, b: 2}\nconst obj2 = { ...obj, b: 3, c: 4 } // => { a: 1, b: 3, c: 4 }\n```\n`obj2`潜复制`obj`,并能覆盖，拓展。为新旧数据对比提供支持。\n\n``` js\nlet usrState = {\n  name: 'xun',\n  age: 18\n};\n\nconst createStore = (state, stateChanger) => {\n  const listeners = [];\n  const subscribe = (listener) => listeners.push(listener);\n  const getState = () => state;\n  const dispatch = (action) => {\n    state = stateChanger(state, action);  // 覆盖原对象\n    listeners.forEach((listener) => listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n\nconst renderApp = (newAppState, oldAppState = {}) => { // 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = {}\n  if (newAppState === oldAppState) return; // 数据没有变化就不渲染了\n  console.log('render app...');\n  renderName(newAppState.name, oldAppState.name);\n  renderAge(newAppState.age, oldAppState.age);\n};\n\nconst renderName = (newName, oldName = {}) => {\n  if (newName === oldName) return; // 数据没有变化就不渲染了\n  console.log('render name...');\n  const nameDom = document.getElementById('name');\n  nameDom.innerHTML = newName.name;\n};\nconst renderAge = (newAge, oldAge = {}) => {\n  if (newAge === oldAge) return; // 数据没有变化就不渲染了\n  console.log('render age...');\n  const ageDom = document.getElementById('age');\n  ageDom.innerHTML = newAge.age;\n};\n\nconst stateChanger = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      return {\n        ...state,\n        name: action.name\n      }\n      break;\n    case 'UPDATE_USER_AGE':\n      return {\n        ...state,\n        age: action.age\n      }\n      break;\n    default:\n      return state;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\nlet oldState = store.getState(); // 缓存oldState\n\nstore.subscribe(() => {\n  const newState = store.getState(); // 数据可能变化，获取新的 state\n  renderApp(newState, oldState); // 把新旧的 state 传进去渲染\n  oldState = newState; // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n});\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n```\n\n### <strong class=\"title\">REDUX的套路</strong>\n\n``` js\n/ 定一个 reducer\nfunction reducer (state, action) {\n  /* 初始化 state 和 switch case */\n}\n\n// 生成 store\nconst store = createStore(reducer)\n\n// 监听数据变化重新渲染页面\nstore.subscribe(() => renderApp(store.getState()))\n\n// 首次渲染页面\nrenderApp(store.getState()) \n\n// 后面可以随意 dispatch 了，页面自动更新\nstore.dispatch(...)\n```\n<style>\n.title {\n  color: RGBA(92, 201, 245, 1.00);\n}\n</style>","source":"_posts/react学习.md","raw":"---\ntitle: react学习\ndate: 2017-04-23 09:38:19\ntags: \n  - react\n  - javascript\n---\n愿这次笔记能记好。\n\n<!--more-->\n\n# <strong class=\"title\">React</strong>\n\n## <strong class=\"title\">创建项目</strong>\n\n``` shell\n$ git clone -o react-starter-kit -b master --single-branch       https://github.com/kriasoft/react-starter-kit.git myapp\n$ cd myapp\n$ yarn install\n$ yarn start\n```\n\n<!--## jsx-->\n\n\n\n### <strong class=\"title\">redux(一种架构模式)</strong>\n不同的组件之间需要共享读写一些数据。\n\n### <strong class=\"title\">dispatch</strong>\n定义 dispatch 专门负责数据的修改:\n``` js\nfunction dispatch (action) {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      usrState.name = action.name;\n      break;\n    case 'UPDATE_USER_AGE':\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n```\n\n对数据的操作必须通过dispatch函数，\n`action`是一个对象，包含`type`,`data`等内容。\n\n``` js\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\ndispacth(params);\n// 修改了name\n```\n\n所有的全局变量数据必须先通过 dispatch, 并且必须用 action 通过 switch 确定修改什么。\n因此，无需再担心共享数据状态修改的问题。\n\n\n### <strong class=\"title\">store 构建state/dispatch 的集合</strong>\n\n`createStore`\n``` js\nfunction createStore (state, stateChanger) {\n  const getState = () => state\n  const dispatch = (action) => stateChanger(state, action)\n  return {getState, dispatch}\n}\n```\n`state`：应用程序状态。\n`stateChanger`:变化方法。\n`getState`:获取state的数据。\n`dispatch`:修改数据，接收action。\n\n如下修改数据生成的方式\n``` js\nlet usrState = {\n  name: 'xun',\n  age: 18\n};\n\nconst renderApp = (user) => {\n  const userDOM = document.getElementById('user');\n  userDOM.innerHTML = `${user.name},age:${user.age}`;\n};\n\nconst createStore = (state, stateChanger) => {\n  const getState = () => state;\n  const dispatch = (action) => stateChanger(state, action);\n  return {getState, dispatch};\n};\n\nconst stateChanger = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      usrState.name = action.name;\n      break;\n    case 'UPDATE_USER_AGE':\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n```\n通过`store.dispatch`修改数据\n通过`store.getState`获取数据\n\n### <strong class=\"title\">监控数据变化</strong>\n上面的代码如果不手动renderApp的话，页面数据不会更新，因此需要自动渲染数据。\n修改`createStore`\n``` js\nconst createStore = (state, stateChanger) => {\n  const listeners = [];\n  const subscribe = (listener) => listeners.push(listener);\n  const getState = () => state;\n  const dispatch = (action) => {\n    stateChanger(state, action);\n    listeners.forEach((listener) => listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n```\n通过`store.subscribe(listener)`传入监听函数，并存入数组中\n初始化时把`renderApp`传入数组中\n``` js\nconst store = createStore(appState, stateChanger)\nstore.subscribe(() => renderApp(store.getState()))\n\nrenderApp(store.getState()) // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n// 自动更新数据...\n```\n\n### <strong class=\"title\">纯函数</strong>\n- 函数的返回结果只依赖于它的参数\n- 执行过程中不产生任何副作用\n\n### <strong class=\"title\">共享结构的对象,优化性能</strong>\n更新时，部分属性无改变，但仍旧重新渲染，耗费性能。\n`解决方案`:在渲染函数执行之前判断传入的新数据和已有的数据是否相同。\n``` js\nconst obj = { a: 1, b: 2}\nconst obj2 = { ...obj, b: 3, c: 4 } // => { a: 1, b: 3, c: 4 }\n```\n`obj2`潜复制`obj`,并能覆盖，拓展。为新旧数据对比提供支持。\n\n``` js\nlet usrState = {\n  name: 'xun',\n  age: 18\n};\n\nconst createStore = (state, stateChanger) => {\n  const listeners = [];\n  const subscribe = (listener) => listeners.push(listener);\n  const getState = () => state;\n  const dispatch = (action) => {\n    state = stateChanger(state, action);  // 覆盖原对象\n    listeners.forEach((listener) => listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n\nconst renderApp = (newAppState, oldAppState = {}) => { // 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = {}\n  if (newAppState === oldAppState) return; // 数据没有变化就不渲染了\n  console.log('render app...');\n  renderName(newAppState.name, oldAppState.name);\n  renderAge(newAppState.age, oldAppState.age);\n};\n\nconst renderName = (newName, oldName = {}) => {\n  if (newName === oldName) return; // 数据没有变化就不渲染了\n  console.log('render name...');\n  const nameDom = document.getElementById('name');\n  nameDom.innerHTML = newName.name;\n};\nconst renderAge = (newAge, oldAge = {}) => {\n  if (newAge === oldAge) return; // 数据没有变化就不渲染了\n  console.log('render age...');\n  const ageDom = document.getElementById('age');\n  ageDom.innerHTML = newAge.age;\n};\n\nconst stateChanger = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      return {\n        ...state,\n        name: action.name\n      }\n      break;\n    case 'UPDATE_USER_AGE':\n      return {\n        ...state,\n        age: action.age\n      }\n      break;\n    default:\n      return state;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\nlet oldState = store.getState(); // 缓存oldState\n\nstore.subscribe(() => {\n  const newState = store.getState(); // 数据可能变化，获取新的 state\n  renderApp(newState, oldState); // 把新旧的 state 传进去渲染\n  oldState = newState; // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n});\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n```\n\n### <strong class=\"title\">REDUX的套路</strong>\n\n``` js\n/ 定一个 reducer\nfunction reducer (state, action) {\n  /* 初始化 state 和 switch case */\n}\n\n// 生成 store\nconst store = createStore(reducer)\n\n// 监听数据变化重新渲染页面\nstore.subscribe(() => renderApp(store.getState()))\n\n// 首次渲染页面\nrenderApp(store.getState()) \n\n// 后面可以随意 dispatch 了，页面自动更新\nstore.dispatch(...)\n```\n<style>\n.title {\n  color: RGBA(92, 201, 245, 1.00);\n}\n</style>","slug":"react学习","published":1,"updated":"2017-05-04T17:25:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqic0008zlwpk2had5zc","content":"<p>愿这次笔记能记好。</p>\n<a id=\"more\"></a>\n<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a><strong class=\"title\">React</strong></h1><h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a><strong class=\"title\">创建项目</strong></h2><pre><code class=\"shell\">$ git clone -o react-starter-kit -b master --single-branch       https://github.com/kriasoft/react-starter-kit.git myapp\n$ cd myapp\n$ yarn install\n$ yarn start\n</code></pre>\n<!--## jsx-->\n<h3 id=\"redux-一种架构模式\"><a href=\"#redux-一种架构模式\" class=\"headerlink\" title=\"redux(一种架构模式)\"></a><strong class=\"title\">redux(一种架构模式)</strong></h3><p>不同的组件之间需要共享读写一些数据。</p>\n<h3 id=\"dispatch\"><a href=\"#dispatch\" class=\"headerlink\" title=\"dispatch\"></a><strong class=\"title\">dispatch</strong></h3><p>定义 dispatch 专门负责数据的修改:</p>\n<pre><code class=\"js\">function dispatch (action) {\n  switch (action.type) {\n    case &#39;UPDATE_USER_NAME&#39;:\n      usrState.name = action.name;\n      break;\n    case &#39;UPDATE_USER_AGE&#39;:\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n</code></pre>\n<p>对数据的操作必须通过dispatch函数，<br><code>action</code>是一个对象，包含<code>type</code>,<code>data</code>等内容。</p>\n<pre><code class=\"js\">const params = {type: &#39;UPDATE_USER_NAME&#39;, name: &#39;name&#39;};\ndispacth(params);\n// 修改了name\n</code></pre>\n<p>所有的全局变量数据必须先通过 dispatch, 并且必须用 action 通过 switch 确定修改什么。<br>因此，无需再担心共享数据状态修改的问题。</p>\n<h3 id=\"store-构建state-dispatch-的集合\"><a href=\"#store-构建state-dispatch-的集合\" class=\"headerlink\" title=\"store 构建state/dispatch 的集合\"></a><strong class=\"title\">store 构建state/dispatch 的集合</strong></h3><p><code>createStore</code></p>\n<pre><code class=\"js\">function createStore (state, stateChanger) {\n  const getState = () =&gt; state\n  const dispatch = (action) =&gt; stateChanger(state, action)\n  return {getState, dispatch}\n}\n</code></pre>\n<p><code>state</code>：应用程序状态。<br><code>stateChanger</code>:变化方法。<br><code>getState</code>:获取state的数据。<br><code>dispatch</code>:修改数据，接收action。</p>\n<p>如下修改数据生成的方式</p>\n<pre><code class=\"js\">let usrState = {\n  name: &#39;xun&#39;,\n  age: 18\n};\n\nconst renderApp = (user) =&gt; {\n  const userDOM = document.getElementById(&#39;user&#39;);\n  userDOM.innerHTML = `${user.name},age:${user.age}`;\n};\n\nconst createStore = (state, stateChanger) =&gt; {\n  const getState = () =&gt; state;\n  const dispatch = (action) =&gt; stateChanger(state, action);\n  return {getState, dispatch};\n};\n\nconst stateChanger = (state, action) =&gt; {\n  switch (action.type) {\n    case &#39;UPDATE_USER_NAME&#39;:\n      usrState.name = action.name;\n      break;\n    case &#39;UPDATE_USER_AGE&#39;:\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: &#39;UPDATE_USER_NAME&#39;, name: &#39;name&#39;};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n</code></pre>\n<p>通过<code>store.dispatch</code>修改数据<br>通过<code>store.getState</code>获取数据</p>\n<h3 id=\"监控数据变化\"><a href=\"#监控数据变化\" class=\"headerlink\" title=\"监控数据变化\"></a><strong class=\"title\">监控数据变化</strong></h3><p>上面的代码如果不手动renderApp的话，页面数据不会更新，因此需要自动渲染数据。<br>修改<code>createStore</code></p>\n<pre><code class=\"js\">const createStore = (state, stateChanger) =&gt; {\n  const listeners = [];\n  const subscribe = (listener) =&gt; listeners.push(listener);\n  const getState = () =&gt; state;\n  const dispatch = (action) =&gt; {\n    stateChanger(state, action);\n    listeners.forEach((listener) =&gt; listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n</code></pre>\n<p>通过<code>store.subscribe(listener)</code>传入监听函数，并存入数组中<br>初始化时把<code>renderApp</code>传入数组中</p>\n<pre><code class=\"js\">const store = createStore(appState, stateChanger)\nstore.subscribe(() =&gt; renderApp(store.getState()))\n\nrenderApp(store.getState()) // 首次渲染页面\n\nconst params = {type: &#39;UPDATE_USER_NAME&#39;, name: &#39;name&#39;};\nstore.dispatch(params);\n// 自动更新数据...\n</code></pre>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a><strong class=\"title\">纯函数</strong></h3><ul>\n<li>函数的返回结果只依赖于它的参数</li>\n<li>执行过程中不产生任何副作用</li>\n</ul>\n<h3 id=\"共享结构的对象-优化性能\"><a href=\"#共享结构的对象-优化性能\" class=\"headerlink\" title=\"共享结构的对象,优化性能\"></a><strong class=\"title\">共享结构的对象,优化性能</strong></h3><p>更新时，部分属性无改变，但仍旧重新渲染，耗费性能。<br><code>解决方案</code>:在渲染函数执行之前判断传入的新数据和已有的数据是否相同。</p>\n<pre><code class=\"js\">const obj = { a: 1, b: 2}\nconst obj2 = { ...obj, b: 3, c: 4 } // =&gt; { a: 1, b: 3, c: 4 }\n</code></pre>\n<p><code>obj2</code>潜复制<code>obj</code>,并能覆盖，拓展。为新旧数据对比提供支持。</p>\n<pre><code class=\"js\">let usrState = {\n  name: &#39;xun&#39;,\n  age: 18\n};\n\nconst createStore = (state, stateChanger) =&gt; {\n  const listeners = [];\n  const subscribe = (listener) =&gt; listeners.push(listener);\n  const getState = () =&gt; state;\n  const dispatch = (action) =&gt; {\n    state = stateChanger(state, action);  // 覆盖原对象\n    listeners.forEach((listener) =&gt; listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n\nconst renderApp = (newAppState, oldAppState = {}) =&gt; { // 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = {}\n  if (newAppState === oldAppState) return; // 数据没有变化就不渲染了\n  console.log(&#39;render app...&#39;);\n  renderName(newAppState.name, oldAppState.name);\n  renderAge(newAppState.age, oldAppState.age);\n};\n\nconst renderName = (newName, oldName = {}) =&gt; {\n  if (newName === oldName) return; // 数据没有变化就不渲染了\n  console.log(&#39;render name...&#39;);\n  const nameDom = document.getElementById(&#39;name&#39;);\n  nameDom.innerHTML = newName.name;\n};\nconst renderAge = (newAge, oldAge = {}) =&gt; {\n  if (newAge === oldAge) return; // 数据没有变化就不渲染了\n  console.log(&#39;render age...&#39;);\n  const ageDom = document.getElementById(&#39;age&#39;);\n  ageDom.innerHTML = newAge.age;\n};\n\nconst stateChanger = (state, action) =&gt; {\n  switch (action.type) {\n    case &#39;UPDATE_USER_NAME&#39;:\n      return {\n        ...state,\n        name: action.name\n      }\n      break;\n    case &#39;UPDATE_USER_AGE&#39;:\n      return {\n        ...state,\n        age: action.age\n      }\n      break;\n    default:\n      return state;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\nlet oldState = store.getState(); // 缓存oldState\n\nstore.subscribe(() =&gt; {\n  const newState = store.getState(); // 数据可能变化，获取新的 state\n  renderApp(newState, oldState); // 把新旧的 state 传进去渲染\n  oldState = newState; // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n});\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: &#39;UPDATE_USER_NAME&#39;, name: &#39;name&#39;};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n</code></pre>\n<h3 id=\"REDUX的套路\"><a href=\"#REDUX的套路\" class=\"headerlink\" title=\"REDUX的套路\"></a><strong class=\"title\">REDUX的套路</strong></h3><pre><code class=\"js\">/ 定一个 reducer\nfunction reducer (state, action) {\n  /* 初始化 state 和 switch case */\n}\n\n// 生成 store\nconst store = createStore(reducer)\n\n// 监听数据变化重新渲染页面\nstore.subscribe(() =&gt; renderApp(store.getState()))\n\n// 首次渲染页面\nrenderApp(store.getState()) \n\n// 后面可以随意 dispatch 了，页面自动更新\nstore.dispatch(...)\n</code></pre>\n<style>\n.title {\n  color: RGBA(92, 201, 245, 1.00);\n}\n</style>","excerpt":"<p>愿这次笔记能记好。</p>","more":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a><strong class=\"title\">React</strong></h1><h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a><strong class=\"title\">创建项目</strong></h2><pre><code class=\"shell\">$ git clone -o react-starter-kit -b master --single-branch       https://github.com/kriasoft/react-starter-kit.git myapp\n$ cd myapp\n$ yarn install\n$ yarn start\n</code></pre>\n<!--## jsx-->\n<h3 id=\"redux-一种架构模式\"><a href=\"#redux-一种架构模式\" class=\"headerlink\" title=\"redux(一种架构模式)\"></a><strong class=\"title\">redux(一种架构模式)</strong></h3><p>不同的组件之间需要共享读写一些数据。</p>\n<h3 id=\"dispatch\"><a href=\"#dispatch\" class=\"headerlink\" title=\"dispatch\"></a><strong class=\"title\">dispatch</strong></h3><p>定义 dispatch 专门负责数据的修改:</p>\n<pre><code class=\"js\">function dispatch (action) {\n  switch (action.type) {\n    case &#39;UPDATE_USER_NAME&#39;:\n      usrState.name = action.name;\n      break;\n    case &#39;UPDATE_USER_AGE&#39;:\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n</code></pre>\n<p>对数据的操作必须通过dispatch函数，<br><code>action</code>是一个对象，包含<code>type</code>,<code>data</code>等内容。</p>\n<pre><code class=\"js\">const params = {type: &#39;UPDATE_USER_NAME&#39;, name: &#39;name&#39;};\ndispacth(params);\n// 修改了name\n</code></pre>\n<p>所有的全局变量数据必须先通过 dispatch, 并且必须用 action 通过 switch 确定修改什么。<br>因此，无需再担心共享数据状态修改的问题。</p>\n<h3 id=\"store-构建state-dispatch-的集合\"><a href=\"#store-构建state-dispatch-的集合\" class=\"headerlink\" title=\"store 构建state/dispatch 的集合\"></a><strong class=\"title\">store 构建state/dispatch 的集合</strong></h3><p><code>createStore</code></p>\n<pre><code class=\"js\">function createStore (state, stateChanger) {\n  const getState = () =&gt; state\n  const dispatch = (action) =&gt; stateChanger(state, action)\n  return {getState, dispatch}\n}\n</code></pre>\n<p><code>state</code>：应用程序状态。<br><code>stateChanger</code>:变化方法。<br><code>getState</code>:获取state的数据。<br><code>dispatch</code>:修改数据，接收action。</p>\n<p>如下修改数据生成的方式</p>\n<pre><code class=\"js\">let usrState = {\n  name: &#39;xun&#39;,\n  age: 18\n};\n\nconst renderApp = (user) =&gt; {\n  const userDOM = document.getElementById(&#39;user&#39;);\n  userDOM.innerHTML = `${user.name},age:${user.age}`;\n};\n\nconst createStore = (state, stateChanger) =&gt; {\n  const getState = () =&gt; state;\n  const dispatch = (action) =&gt; stateChanger(state, action);\n  return {getState, dispatch};\n};\n\nconst stateChanger = (state, action) =&gt; {\n  switch (action.type) {\n    case &#39;UPDATE_USER_NAME&#39;:\n      usrState.name = action.name;\n      break;\n    case &#39;UPDATE_USER_AGE&#39;:\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: &#39;UPDATE_USER_NAME&#39;, name: &#39;name&#39;};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n</code></pre>\n<p>通过<code>store.dispatch</code>修改数据<br>通过<code>store.getState</code>获取数据</p>\n<h3 id=\"监控数据变化\"><a href=\"#监控数据变化\" class=\"headerlink\" title=\"监控数据变化\"></a><strong class=\"title\">监控数据变化</strong></h3><p>上面的代码如果不手动renderApp的话，页面数据不会更新，因此需要自动渲染数据。<br>修改<code>createStore</code></p>\n<pre><code class=\"js\">const createStore = (state, stateChanger) =&gt; {\n  const listeners = [];\n  const subscribe = (listener) =&gt; listeners.push(listener);\n  const getState = () =&gt; state;\n  const dispatch = (action) =&gt; {\n    stateChanger(state, action);\n    listeners.forEach((listener) =&gt; listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n</code></pre>\n<p>通过<code>store.subscribe(listener)</code>传入监听函数，并存入数组中<br>初始化时把<code>renderApp</code>传入数组中</p>\n<pre><code class=\"js\">const store = createStore(appState, stateChanger)\nstore.subscribe(() =&gt; renderApp(store.getState()))\n\nrenderApp(store.getState()) // 首次渲染页面\n\nconst params = {type: &#39;UPDATE_USER_NAME&#39;, name: &#39;name&#39;};\nstore.dispatch(params);\n// 自动更新数据...\n</code></pre>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a><strong class=\"title\">纯函数</strong></h3><ul>\n<li>函数的返回结果只依赖于它的参数</li>\n<li>执行过程中不产生任何副作用</li>\n</ul>\n<h3 id=\"共享结构的对象-优化性能\"><a href=\"#共享结构的对象-优化性能\" class=\"headerlink\" title=\"共享结构的对象,优化性能\"></a><strong class=\"title\">共享结构的对象,优化性能</strong></h3><p>更新时，部分属性无改变，但仍旧重新渲染，耗费性能。<br><code>解决方案</code>:在渲染函数执行之前判断传入的新数据和已有的数据是否相同。</p>\n<pre><code class=\"js\">const obj = { a: 1, b: 2}\nconst obj2 = { ...obj, b: 3, c: 4 } // =&gt; { a: 1, b: 3, c: 4 }\n</code></pre>\n<p><code>obj2</code>潜复制<code>obj</code>,并能覆盖，拓展。为新旧数据对比提供支持。</p>\n<pre><code class=\"js\">let usrState = {\n  name: &#39;xun&#39;,\n  age: 18\n};\n\nconst createStore = (state, stateChanger) =&gt; {\n  const listeners = [];\n  const subscribe = (listener) =&gt; listeners.push(listener);\n  const getState = () =&gt; state;\n  const dispatch = (action) =&gt; {\n    state = stateChanger(state, action);  // 覆盖原对象\n    listeners.forEach((listener) =&gt; listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n\nconst renderApp = (newAppState, oldAppState = {}) =&gt; { // 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = {}\n  if (newAppState === oldAppState) return; // 数据没有变化就不渲染了\n  console.log(&#39;render app...&#39;);\n  renderName(newAppState.name, oldAppState.name);\n  renderAge(newAppState.age, oldAppState.age);\n};\n\nconst renderName = (newName, oldName = {}) =&gt; {\n  if (newName === oldName) return; // 数据没有变化就不渲染了\n  console.log(&#39;render name...&#39;);\n  const nameDom = document.getElementById(&#39;name&#39;);\n  nameDom.innerHTML = newName.name;\n};\nconst renderAge = (newAge, oldAge = {}) =&gt; {\n  if (newAge === oldAge) return; // 数据没有变化就不渲染了\n  console.log(&#39;render age...&#39;);\n  const ageDom = document.getElementById(&#39;age&#39;);\n  ageDom.innerHTML = newAge.age;\n};\n\nconst stateChanger = (state, action) =&gt; {\n  switch (action.type) {\n    case &#39;UPDATE_USER_NAME&#39;:\n      return {\n        ...state,\n        name: action.name\n      }\n      break;\n    case &#39;UPDATE_USER_AGE&#39;:\n      return {\n        ...state,\n        age: action.age\n      }\n      break;\n    default:\n      return state;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\nlet oldState = store.getState(); // 缓存oldState\n\nstore.subscribe(() =&gt; {\n  const newState = store.getState(); // 数据可能变化，获取新的 state\n  renderApp(newState, oldState); // 把新旧的 state 传进去渲染\n  oldState = newState; // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n});\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: &#39;UPDATE_USER_NAME&#39;, name: &#39;name&#39;};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n</code></pre>\n<h3 id=\"REDUX的套路\"><a href=\"#REDUX的套路\" class=\"headerlink\" title=\"REDUX的套路\"></a><strong class=\"title\">REDUX的套路</strong></h3><pre><code class=\"js\">/ 定一个 reducer\nfunction reducer (state, action) {\n  /* 初始化 state 和 switch case */\n}\n\n// 生成 store\nconst store = createStore(reducer)\n\n// 监听数据变化重新渲染页面\nstore.subscribe(() =&gt; renderApp(store.getState()))\n\n// 首次渲染页面\nrenderApp(store.getState()) \n\n// 后面可以随意 dispatch 了，页面自动更新\nstore.dispatch(...)\n</code></pre>\n<style>\n.title {\n  color: RGBA(92, 201, 245, 1.00);\n}\n</style>"},{"title":"js中的arguments","date":"2016-12-09T07:42:27.000Z","_content":"开始复习javascript的一些基础。\n\n<!--more-->\n# argument\n  是当前函数的一个内置属性，在函数代码中，使用特殊对象 arguments，开发者无需明确指出参数名，就能访问它们。\n\n- 无需明确参数即可重写函数\n- 可检测调用参数的个数\n- arguments对象的长度是由实参个数而不是形参个数决定的，没有调用的参数不能被获取\n```\n\t\tvar arr= function(a,b,c){\n\t\t\t a+=5;\n\t\t\t b+=1;\n\t\t\t console.log(arguments[0]);\t\t\t\t\t//输出 10\n\t\t\t console.log(arguments[1]);\t\t\t\t\t//输出undefined\t\n\t\t\t console.log(arguments);\t\t\t\t\t   //输出[10]\t\t\t\t\n\t\t\t console.log(arguments.length);\t\t\t\t//输出1\n\t\t};\n\t\tarr(5);\n```\n- 函数重载：函数返回值不同或形参个数不同。\njs的函数声明没有返回值类型\nJavaScript中形参的个数严格意义上来讲只是为了方便在函数中的变量操作，实际上实参已经存储在arguments对象中了\n用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载\n```\n\t\tvar arr= function(a,b,c){\n\t\t\tif(arguments.length==1){\n\t\t\t\tconsole.log(arguments[0]+1);\n\t\t\t}\n\t\t\telse if(arguments.length>1){\n\t\t\t\tfor(var i=0;i<arguments.length;i++){\n\t\t\t\t\tconsole.log(i+\":\"+arguments[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tarr(5);        //输出6\n\t\tarr(5,6,7);  //输出0：5，1：6，2：7\n```\n- arguments.callee\n返回此arguments对象所在的当前函数引用,递归中代替函数本身\n```\n\t\tvar arr= function(a){\n\t\t\tif(a==1){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn  a + arguments.callee(--a);\n\t\t\t}\n\t};\n\t\tb=arr(6);\n\t\tconsole.log(b); //输出21\n```","source":"_posts/js中的arguments.md","raw":"---\ntitle: js中的arguments\ndate: 2016-12-09 15:42:27\ntags:\n  - javascript\n---\n开始复习javascript的一些基础。\n\n<!--more-->\n# argument\n  是当前函数的一个内置属性，在函数代码中，使用特殊对象 arguments，开发者无需明确指出参数名，就能访问它们。\n\n- 无需明确参数即可重写函数\n- 可检测调用参数的个数\n- arguments对象的长度是由实参个数而不是形参个数决定的，没有调用的参数不能被获取\n```\n\t\tvar arr= function(a,b,c){\n\t\t\t a+=5;\n\t\t\t b+=1;\n\t\t\t console.log(arguments[0]);\t\t\t\t\t//输出 10\n\t\t\t console.log(arguments[1]);\t\t\t\t\t//输出undefined\t\n\t\t\t console.log(arguments);\t\t\t\t\t   //输出[10]\t\t\t\t\n\t\t\t console.log(arguments.length);\t\t\t\t//输出1\n\t\t};\n\t\tarr(5);\n```\n- 函数重载：函数返回值不同或形参个数不同。\njs的函数声明没有返回值类型\nJavaScript中形参的个数严格意义上来讲只是为了方便在函数中的变量操作，实际上实参已经存储在arguments对象中了\n用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载\n```\n\t\tvar arr= function(a,b,c){\n\t\t\tif(arguments.length==1){\n\t\t\t\tconsole.log(arguments[0]+1);\n\t\t\t}\n\t\t\telse if(arguments.length>1){\n\t\t\t\tfor(var i=0;i<arguments.length;i++){\n\t\t\t\t\tconsole.log(i+\":\"+arguments[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tarr(5);        //输出6\n\t\tarr(5,6,7);  //输出0：5，1：6，2：7\n```\n- arguments.callee\n返回此arguments对象所在的当前函数引用,递归中代替函数本身\n```\n\t\tvar arr= function(a){\n\t\t\tif(a==1){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn  a + arguments.callee(--a);\n\t\t\t}\n\t};\n\t\tb=arr(6);\n\t\tconsole.log(b); //输出21\n```","slug":"js中的arguments","published":1,"updated":"2017-01-23T11:10:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqie000azlwpktd90l6c","content":"<p>开始复习javascript的一些基础。</p>\n<a id=\"more\"></a>\n<h1 id=\"argument\"><a href=\"#argument\" class=\"headerlink\" title=\"argument\"></a>argument</h1><p>  是当前函数的一个内置属性，在函数代码中，使用特殊对象 arguments，开发者无需明确指出参数名，就能访问它们。</p>\n<ul>\n<li>无需明确参数即可重写函数</li>\n<li>可检测调用参数的个数</li>\n<li>arguments对象的长度是由实参个数而不是形参个数决定的，没有调用的参数不能被获取<pre><code>      var arr= function(a,b,c){\n           a+=5;\n           b+=1;\n           console.log(arguments[0]);                    //输出 10\n           console.log(arguments[1]);                    //输出undefined    \n           console.log(arguments);                       //输出[10]                \n           console.log(arguments.length);                //输出1\n      };\n      arr(5);\n</code></pre></li>\n<li>函数重载：函数返回值不同或形参个数不同。<br>js的函数声明没有返回值类型<br>JavaScript中形参的个数严格意义上来讲只是为了方便在函数中的变量操作，实际上实参已经存储在arguments对象中了<br>用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载<pre><code>      var arr= function(a,b,c){\n          if(arguments.length==1){\n              console.log(arguments[0]+1);\n          }\n          else if(arguments.length&gt;1){\n              for(var i=0;i&lt;arguments.length;i++){\n                  console.log(i+&quot;:&quot;+arguments[i]);\n              }\n          }\n      };\n      arr(5);        //输出6\n      arr(5,6,7);  //输出0：5，1：6，2：7\n</code></pre></li>\n<li>arguments.callee<br>返回此arguments对象所在的当前函数引用,递归中代替函数本身<pre><code>      var arr= function(a){\n          if(a==1){\n              return 1;\n          }\n          else {\n              return  a + arguments.callee(--a);\n          }\n  };\n      b=arr(6);\n      console.log(b); //输出21\n</code></pre></li>\n</ul>\n","excerpt":"<p>开始复习javascript的一些基础。</p>","more":"<h1 id=\"argument\"><a href=\"#argument\" class=\"headerlink\" title=\"argument\"></a>argument</h1><p>  是当前函数的一个内置属性，在函数代码中，使用特殊对象 arguments，开发者无需明确指出参数名，就能访问它们。</p>\n<ul>\n<li>无需明确参数即可重写函数</li>\n<li>可检测调用参数的个数</li>\n<li>arguments对象的长度是由实参个数而不是形参个数决定的，没有调用的参数不能被获取<pre><code>      var arr= function(a,b,c){\n           a+=5;\n           b+=1;\n           console.log(arguments[0]);                    //输出 10\n           console.log(arguments[1]);                    //输出undefined    \n           console.log(arguments);                       //输出[10]                \n           console.log(arguments.length);                //输出1\n      };\n      arr(5);\n</code></pre></li>\n<li>函数重载：函数返回值不同或形参个数不同。<br>js的函数声明没有返回值类型<br>JavaScript中形参的个数严格意义上来讲只是为了方便在函数中的变量操作，实际上实参已经存储在arguments对象中了<br>用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载<pre><code>      var arr= function(a,b,c){\n          if(arguments.length==1){\n              console.log(arguments[0]+1);\n          }\n          else if(arguments.length&gt;1){\n              for(var i=0;i&lt;arguments.length;i++){\n                  console.log(i+&quot;:&quot;+arguments[i]);\n              }\n          }\n      };\n      arr(5);        //输出6\n      arr(5,6,7);  //输出0：5，1：6，2：7\n</code></pre></li>\n<li>arguments.callee<br>返回此arguments对象所在的当前函数引用,递归中代替函数本身<pre><code>      var arr= function(a){\n          if(a==1){\n              return 1;\n          }\n          else {\n              return  a + arguments.callee(--a);\n          }\n  };\n      b=arr(6);\n      console.log(b); //输出21\n</code></pre></li>\n</ul>"},{"title":"mongodb的一些操作","date":"2017-03-30T02:50:52.000Z","_content":"\n我要学习！！\n<!--more-->\n\n### Collection集合中的基本操作\n1.查看帮助\n```\ndb.test.help()\n```\n2.查询当前集合的数据条数\n```\ndb.test.count()\n```\n3.查看数据空间大小\n```\ndb.test.dataSize()\n```\n4.得到当前聚合所在的db\n```\ndb.test.getDB()\n```\n5.得到当前聚合的状态\n```\ndb.test.stats()\n```\n6.聚合集合总大小\n```\ndb.test.totalSize()\n```\n7.聚合集合存储空间大小\n```\ndb.test.storageSize()\n```\n8.shard版本信息\n```\ndb.test.getShardVersion()\n```\n9.聚合集合重命名\n```\ndb.test.renameCollection('newName')\n```\n10.删除当前聚集集合\n```\ndb.test.drop()\n```\n\n\n### 聚集集合查询\n1.查询所有记录\n```\ndb.test.find()\n// 默认每页显示20条记录，可用 it 迭代查询下一页数据\n// 可以用 DBquery.shellBatchSize = 50 更改每页数据\n```\n2.查询过滤指定键中含有的重复数据\n```\ndb.test.distinct(\"name\")\n```\n3.查询 title = 指定值的数据\n```\ndb.test.find({title:\"xuncs\"})\n```\n4.查询 age > 18 的数据\n```\ndb.test.find({age:{$gt:18}})\n```\n5.查询 age < 18 的数据\n```\ndb.test.find({age:{$lt:18}})\n```\n6.查询 age >= 18 的数据\n```\ndb.test.find({age:{$gte:18}})\n```\n7.查询 age <= 18 的数据\n```\ndb.test.find({age:{$lte:18}})\n```\n8.查询 age > 18&& age < 24\n```\ndb.test.find({age:{$gt:18,$lt:24}})\n```\n9.查询 title中包含 xun 的数据\n```\ndb.xuncs.find({title:/xun/})\n```\n10.查询 title 中以 xun 开头的数据\n```\ndb.xuncs.find({title:/^xun/})\n```\n11.查询指定列, title，date数据\n```\ndb.xuncs.find({},{title: 1,date: 1})\n```\n12.查询指定列 且有要求查询\n```\ndb.xuncs.find({age:{$gt: 15}}, {age: 1})\n```\n13.排序\n```\ndb.xuncs.find().sort({age: 1})  // 升序\ndb.xuncs.find().sort({age: -1}) // 降序\n```\n14.查询指定数据\n```\ndb.xuncs.find()({title: 'xuncs'}) // 查询title = 'xuncs' 的data\n```\n15.查询前n条数据\n```\ndb.xuncs.find().limit(n)\n```\n16.查询n条之后的数据\n```\ndb.xuncs.find().skip(n)\n```\n17.查询n-m之间的数据\n```\ndb.xuncs.find().limit(m).skip(n)\n```\n18.or与查询\n```\ndb.xuncs.find({$or:[{age: 18},{age: 28}]})  // 查询 age = 18 || age = 28\n```\n19.查询第一条数据\n```\ndb.xuncs.findOne()\n```\n20.查询某个结果集的记录条数\n```\ndb.xuncs.find({age: {$gte:18}}).count()\n```\n21.查询某列含有该键值的数据\n```\ndb.xuncs.find({title: {$exists: true}})\n```\n\n\n### 索引\n1.创建索引\n```\ndb.xuncs.ensureIndex({title: 1})\ndb.xuncs.ensureIndex({title: 1, ts: -1})\n```\n2.查询当前聚合集合所有索引\n```\ndb.xuncs.getIdexes()\n```\n3.查看总索引记录大小\n```\ndb.xuncs.totalIndexSize()\n```\n4.读取当前集合的所有index信息\n```\ndb.xuncs.reIndex()\n```\n5.删除指定索引\n```\ndb.xuncs.dropIndex('title_1')\n```\n6.删除所有索引\n```\ndb.xuncs.dropIndexes()\n```\n\n### 增删改\n1.添加\n```\ndb.xuncs.save({title: 'xuncs', age: 18, sex: true, date: new Date()})\ndb.xuncs.insert({title: \"insert\"})\ndb.xuncs.batchInsert([{'title': 'batch1'},{'title': 'batch2'}])  // 批量添加\n```\n2.修改\n```\ndb.xuncs.update({title: 'xuncs'}, {$set: {age: 20}})\n// 修改数据中第一条title = 'xuncs'的age为20\ndb.xuncs.update({title: 'xuncs'}, {$set: {age: 22}}, false, true)\n// 修改数据中所有条目title = 'xuncs'的age为22\ndb.xuncs.update({title: 'xuncs'}, {$inc: {age: 50}})\n// $inc 增加\n```\n3.删除\n```\ndb.xuncs.remove // 删除xuncs集合中所有文档\ndb.xuncs.remove({age: 18})\n```\n4.查询修改删除\n```\ndb.xuncs.findAndModify({\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  update: {$set: {name: 'aaa'}, $inc: {age:2}}\n})\ndb.runCommand({ findandmodify: \"xuncs\",\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  /*update: {$set: {name: 'aaa'}, $inc: {age:2}}*/\n  remove: true\n})\n// update与remove中有一个必须参数，其他参数可选\n```\n","source":"_posts/mongodb的一些操作.md","raw":"---\ntitle: mongodb的一些操作\ndate: 2017-03-30 10:50:52\ntags:\n---\n\n我要学习！！\n<!--more-->\n\n### Collection集合中的基本操作\n1.查看帮助\n```\ndb.test.help()\n```\n2.查询当前集合的数据条数\n```\ndb.test.count()\n```\n3.查看数据空间大小\n```\ndb.test.dataSize()\n```\n4.得到当前聚合所在的db\n```\ndb.test.getDB()\n```\n5.得到当前聚合的状态\n```\ndb.test.stats()\n```\n6.聚合集合总大小\n```\ndb.test.totalSize()\n```\n7.聚合集合存储空间大小\n```\ndb.test.storageSize()\n```\n8.shard版本信息\n```\ndb.test.getShardVersion()\n```\n9.聚合集合重命名\n```\ndb.test.renameCollection('newName')\n```\n10.删除当前聚集集合\n```\ndb.test.drop()\n```\n\n\n### 聚集集合查询\n1.查询所有记录\n```\ndb.test.find()\n// 默认每页显示20条记录，可用 it 迭代查询下一页数据\n// 可以用 DBquery.shellBatchSize = 50 更改每页数据\n```\n2.查询过滤指定键中含有的重复数据\n```\ndb.test.distinct(\"name\")\n```\n3.查询 title = 指定值的数据\n```\ndb.test.find({title:\"xuncs\"})\n```\n4.查询 age > 18 的数据\n```\ndb.test.find({age:{$gt:18}})\n```\n5.查询 age < 18 的数据\n```\ndb.test.find({age:{$lt:18}})\n```\n6.查询 age >= 18 的数据\n```\ndb.test.find({age:{$gte:18}})\n```\n7.查询 age <= 18 的数据\n```\ndb.test.find({age:{$lte:18}})\n```\n8.查询 age > 18&& age < 24\n```\ndb.test.find({age:{$gt:18,$lt:24}})\n```\n9.查询 title中包含 xun 的数据\n```\ndb.xuncs.find({title:/xun/})\n```\n10.查询 title 中以 xun 开头的数据\n```\ndb.xuncs.find({title:/^xun/})\n```\n11.查询指定列, title，date数据\n```\ndb.xuncs.find({},{title: 1,date: 1})\n```\n12.查询指定列 且有要求查询\n```\ndb.xuncs.find({age:{$gt: 15}}, {age: 1})\n```\n13.排序\n```\ndb.xuncs.find().sort({age: 1})  // 升序\ndb.xuncs.find().sort({age: -1}) // 降序\n```\n14.查询指定数据\n```\ndb.xuncs.find()({title: 'xuncs'}) // 查询title = 'xuncs' 的data\n```\n15.查询前n条数据\n```\ndb.xuncs.find().limit(n)\n```\n16.查询n条之后的数据\n```\ndb.xuncs.find().skip(n)\n```\n17.查询n-m之间的数据\n```\ndb.xuncs.find().limit(m).skip(n)\n```\n18.or与查询\n```\ndb.xuncs.find({$or:[{age: 18},{age: 28}]})  // 查询 age = 18 || age = 28\n```\n19.查询第一条数据\n```\ndb.xuncs.findOne()\n```\n20.查询某个结果集的记录条数\n```\ndb.xuncs.find({age: {$gte:18}}).count()\n```\n21.查询某列含有该键值的数据\n```\ndb.xuncs.find({title: {$exists: true}})\n```\n\n\n### 索引\n1.创建索引\n```\ndb.xuncs.ensureIndex({title: 1})\ndb.xuncs.ensureIndex({title: 1, ts: -1})\n```\n2.查询当前聚合集合所有索引\n```\ndb.xuncs.getIdexes()\n```\n3.查看总索引记录大小\n```\ndb.xuncs.totalIndexSize()\n```\n4.读取当前集合的所有index信息\n```\ndb.xuncs.reIndex()\n```\n5.删除指定索引\n```\ndb.xuncs.dropIndex('title_1')\n```\n6.删除所有索引\n```\ndb.xuncs.dropIndexes()\n```\n\n### 增删改\n1.添加\n```\ndb.xuncs.save({title: 'xuncs', age: 18, sex: true, date: new Date()})\ndb.xuncs.insert({title: \"insert\"})\ndb.xuncs.batchInsert([{'title': 'batch1'},{'title': 'batch2'}])  // 批量添加\n```\n2.修改\n```\ndb.xuncs.update({title: 'xuncs'}, {$set: {age: 20}})\n// 修改数据中第一条title = 'xuncs'的age为20\ndb.xuncs.update({title: 'xuncs'}, {$set: {age: 22}}, false, true)\n// 修改数据中所有条目title = 'xuncs'的age为22\ndb.xuncs.update({title: 'xuncs'}, {$inc: {age: 50}})\n// $inc 增加\n```\n3.删除\n```\ndb.xuncs.remove // 删除xuncs集合中所有文档\ndb.xuncs.remove({age: 18})\n```\n4.查询修改删除\n```\ndb.xuncs.findAndModify({\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  update: {$set: {name: 'aaa'}, $inc: {age:2}}\n})\ndb.runCommand({ findandmodify: \"xuncs\",\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  /*update: {$set: {name: 'aaa'}, $inc: {age:2}}*/\n  remove: true\n})\n// update与remove中有一个必须参数，其他参数可选\n```\n","slug":"mongodb的一些操作","published":1,"updated":"2017-04-01T03:35:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqig000bzlwpx63uhhpy","content":"<p>我要学习！！<br><a id=\"more\"></a></p>\n<h3 id=\"Collection集合中的基本操作\"><a href=\"#Collection集合中的基本操作\" class=\"headerlink\" title=\"Collection集合中的基本操作\"></a>Collection集合中的基本操作</h3><p>1.查看帮助</p>\n<pre><code>db.test.help()\n</code></pre><p>2.查询当前集合的数据条数</p>\n<pre><code>db.test.count()\n</code></pre><p>3.查看数据空间大小</p>\n<pre><code>db.test.dataSize()\n</code></pre><p>4.得到当前聚合所在的db</p>\n<pre><code>db.test.getDB()\n</code></pre><p>5.得到当前聚合的状态</p>\n<pre><code>db.test.stats()\n</code></pre><p>6.聚合集合总大小</p>\n<pre><code>db.test.totalSize()\n</code></pre><p>7.聚合集合存储空间大小</p>\n<pre><code>db.test.storageSize()\n</code></pre><p>8.shard版本信息</p>\n<pre><code>db.test.getShardVersion()\n</code></pre><p>9.聚合集合重命名</p>\n<pre><code>db.test.renameCollection(&#39;newName&#39;)\n</code></pre><p>10.删除当前聚集集合</p>\n<pre><code>db.test.drop()\n</code></pre><h3 id=\"聚集集合查询\"><a href=\"#聚集集合查询\" class=\"headerlink\" title=\"聚集集合查询\"></a>聚集集合查询</h3><p>1.查询所有记录</p>\n<pre><code>db.test.find()\n// 默认每页显示20条记录，可用 it 迭代查询下一页数据\n// 可以用 DBquery.shellBatchSize = 50 更改每页数据\n</code></pre><p>2.查询过滤指定键中含有的重复数据</p>\n<pre><code>db.test.distinct(&quot;name&quot;)\n</code></pre><p>3.查询 title = 指定值的数据</p>\n<pre><code>db.test.find({title:&quot;xuncs&quot;})\n</code></pre><p>4.查询 age &gt; 18 的数据</p>\n<pre><code>db.test.find({age:{$gt:18}})\n</code></pre><p>5.查询 age &lt; 18 的数据</p>\n<pre><code>db.test.find({age:{$lt:18}})\n</code></pre><p>6.查询 age &gt;= 18 的数据</p>\n<pre><code>db.test.find({age:{$gte:18}})\n</code></pre><p>7.查询 age &lt;= 18 的数据</p>\n<pre><code>db.test.find({age:{$lte:18}})\n</code></pre><p>8.查询 age &gt; 18&amp;&amp; age &lt; 24</p>\n<pre><code>db.test.find({age:{$gt:18,$lt:24}})\n</code></pre><p>9.查询 title中包含 xun 的数据</p>\n<pre><code>db.xuncs.find({title:/xun/})\n</code></pre><p>10.查询 title 中以 xun 开头的数据</p>\n<pre><code>db.xuncs.find({title:/^xun/})\n</code></pre><p>11.查询指定列, title，date数据</p>\n<pre><code>db.xuncs.find({},{title: 1,date: 1})\n</code></pre><p>12.查询指定列 且有要求查询</p>\n<pre><code>db.xuncs.find({age:{$gt: 15}}, {age: 1})\n</code></pre><p>13.排序</p>\n<pre><code>db.xuncs.find().sort({age: 1})  // 升序\ndb.xuncs.find().sort({age: -1}) // 降序\n</code></pre><p>14.查询指定数据</p>\n<pre><code>db.xuncs.find()({title: &#39;xuncs&#39;}) // 查询title = &#39;xuncs&#39; 的data\n</code></pre><p>15.查询前n条数据</p>\n<pre><code>db.xuncs.find().limit(n)\n</code></pre><p>16.查询n条之后的数据</p>\n<pre><code>db.xuncs.find().skip(n)\n</code></pre><p>17.查询n-m之间的数据</p>\n<pre><code>db.xuncs.find().limit(m).skip(n)\n</code></pre><p>18.or与查询</p>\n<pre><code>db.xuncs.find({$or:[{age: 18},{age: 28}]})  // 查询 age = 18 || age = 28\n</code></pre><p>19.查询第一条数据</p>\n<pre><code>db.xuncs.findOne()\n</code></pre><p>20.查询某个结果集的记录条数</p>\n<pre><code>db.xuncs.find({age: {$gte:18}}).count()\n</code></pre><p>21.查询某列含有该键值的数据</p>\n<pre><code>db.xuncs.find({title: {$exists: true}})\n</code></pre><h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>1.创建索引</p>\n<pre><code>db.xuncs.ensureIndex({title: 1})\ndb.xuncs.ensureIndex({title: 1, ts: -1})\n</code></pre><p>2.查询当前聚合集合所有索引</p>\n<pre><code>db.xuncs.getIdexes()\n</code></pre><p>3.查看总索引记录大小</p>\n<pre><code>db.xuncs.totalIndexSize()\n</code></pre><p>4.读取当前集合的所有index信息</p>\n<pre><code>db.xuncs.reIndex()\n</code></pre><p>5.删除指定索引</p>\n<pre><code>db.xuncs.dropIndex(&#39;title_1&#39;)\n</code></pre><p>6.删除所有索引</p>\n<pre><code>db.xuncs.dropIndexes()\n</code></pre><h3 id=\"增删改\"><a href=\"#增删改\" class=\"headerlink\" title=\"增删改\"></a>增删改</h3><p>1.添加</p>\n<pre><code>db.xuncs.save({title: &#39;xuncs&#39;, age: 18, sex: true, date: new Date()})\ndb.xuncs.insert({title: &quot;insert&quot;})\ndb.xuncs.batchInsert([{&#39;title&#39;: &#39;batch1&#39;},{&#39;title&#39;: &#39;batch2&#39;}])  // 批量添加\n</code></pre><p>2.修改</p>\n<pre><code>db.xuncs.update({title: &#39;xuncs&#39;}, {$set: {age: 20}})\n// 修改数据中第一条title = &#39;xuncs&#39;的age为20\ndb.xuncs.update({title: &#39;xuncs&#39;}, {$set: {age: 22}}, false, true)\n// 修改数据中所有条目title = &#39;xuncs&#39;的age为22\ndb.xuncs.update({title: &#39;xuncs&#39;}, {$inc: {age: 50}})\n// $inc 增加\n</code></pre><p>3.删除</p>\n<pre><code>db.xuncs.remove // 删除xuncs集合中所有文档\ndb.xuncs.remove({age: 18})\n</code></pre><p>4.查询修改删除</p>\n<pre><code>db.xuncs.findAndModify({\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  update: {$set: {name: &#39;aaa&#39;}, $inc: {age:2}}\n})\ndb.runCommand({ findandmodify: &quot;xuncs&quot;,\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  /*update: {$set: {name: &#39;aaa&#39;}, $inc: {age:2}}*/\n  remove: true\n})\n// update与remove中有一个必须参数，其他参数可选\n</code></pre>","excerpt":"<p>我要学习！！<br>","more":"</p>\n<h3 id=\"Collection集合中的基本操作\"><a href=\"#Collection集合中的基本操作\" class=\"headerlink\" title=\"Collection集合中的基本操作\"></a>Collection集合中的基本操作</h3><p>1.查看帮助</p>\n<pre><code>db.test.help()\n</code></pre><p>2.查询当前集合的数据条数</p>\n<pre><code>db.test.count()\n</code></pre><p>3.查看数据空间大小</p>\n<pre><code>db.test.dataSize()\n</code></pre><p>4.得到当前聚合所在的db</p>\n<pre><code>db.test.getDB()\n</code></pre><p>5.得到当前聚合的状态</p>\n<pre><code>db.test.stats()\n</code></pre><p>6.聚合集合总大小</p>\n<pre><code>db.test.totalSize()\n</code></pre><p>7.聚合集合存储空间大小</p>\n<pre><code>db.test.storageSize()\n</code></pre><p>8.shard版本信息</p>\n<pre><code>db.test.getShardVersion()\n</code></pre><p>9.聚合集合重命名</p>\n<pre><code>db.test.renameCollection(&#39;newName&#39;)\n</code></pre><p>10.删除当前聚集集合</p>\n<pre><code>db.test.drop()\n</code></pre><h3 id=\"聚集集合查询\"><a href=\"#聚集集合查询\" class=\"headerlink\" title=\"聚集集合查询\"></a>聚集集合查询</h3><p>1.查询所有记录</p>\n<pre><code>db.test.find()\n// 默认每页显示20条记录，可用 it 迭代查询下一页数据\n// 可以用 DBquery.shellBatchSize = 50 更改每页数据\n</code></pre><p>2.查询过滤指定键中含有的重复数据</p>\n<pre><code>db.test.distinct(&quot;name&quot;)\n</code></pre><p>3.查询 title = 指定值的数据</p>\n<pre><code>db.test.find({title:&quot;xuncs&quot;})\n</code></pre><p>4.查询 age &gt; 18 的数据</p>\n<pre><code>db.test.find({age:{$gt:18}})\n</code></pre><p>5.查询 age &lt; 18 的数据</p>\n<pre><code>db.test.find({age:{$lt:18}})\n</code></pre><p>6.查询 age &gt;= 18 的数据</p>\n<pre><code>db.test.find({age:{$gte:18}})\n</code></pre><p>7.查询 age &lt;= 18 的数据</p>\n<pre><code>db.test.find({age:{$lte:18}})\n</code></pre><p>8.查询 age &gt; 18&amp;&amp; age &lt; 24</p>\n<pre><code>db.test.find({age:{$gt:18,$lt:24}})\n</code></pre><p>9.查询 title中包含 xun 的数据</p>\n<pre><code>db.xuncs.find({title:/xun/})\n</code></pre><p>10.查询 title 中以 xun 开头的数据</p>\n<pre><code>db.xuncs.find({title:/^xun/})\n</code></pre><p>11.查询指定列, title，date数据</p>\n<pre><code>db.xuncs.find({},{title: 1,date: 1})\n</code></pre><p>12.查询指定列 且有要求查询</p>\n<pre><code>db.xuncs.find({age:{$gt: 15}}, {age: 1})\n</code></pre><p>13.排序</p>\n<pre><code>db.xuncs.find().sort({age: 1})  // 升序\ndb.xuncs.find().sort({age: -1}) // 降序\n</code></pre><p>14.查询指定数据</p>\n<pre><code>db.xuncs.find()({title: &#39;xuncs&#39;}) // 查询title = &#39;xuncs&#39; 的data\n</code></pre><p>15.查询前n条数据</p>\n<pre><code>db.xuncs.find().limit(n)\n</code></pre><p>16.查询n条之后的数据</p>\n<pre><code>db.xuncs.find().skip(n)\n</code></pre><p>17.查询n-m之间的数据</p>\n<pre><code>db.xuncs.find().limit(m).skip(n)\n</code></pre><p>18.or与查询</p>\n<pre><code>db.xuncs.find({$or:[{age: 18},{age: 28}]})  // 查询 age = 18 || age = 28\n</code></pre><p>19.查询第一条数据</p>\n<pre><code>db.xuncs.findOne()\n</code></pre><p>20.查询某个结果集的记录条数</p>\n<pre><code>db.xuncs.find({age: {$gte:18}}).count()\n</code></pre><p>21.查询某列含有该键值的数据</p>\n<pre><code>db.xuncs.find({title: {$exists: true}})\n</code></pre><h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>1.创建索引</p>\n<pre><code>db.xuncs.ensureIndex({title: 1})\ndb.xuncs.ensureIndex({title: 1, ts: -1})\n</code></pre><p>2.查询当前聚合集合所有索引</p>\n<pre><code>db.xuncs.getIdexes()\n</code></pre><p>3.查看总索引记录大小</p>\n<pre><code>db.xuncs.totalIndexSize()\n</code></pre><p>4.读取当前集合的所有index信息</p>\n<pre><code>db.xuncs.reIndex()\n</code></pre><p>5.删除指定索引</p>\n<pre><code>db.xuncs.dropIndex(&#39;title_1&#39;)\n</code></pre><p>6.删除所有索引</p>\n<pre><code>db.xuncs.dropIndexes()\n</code></pre><h3 id=\"增删改\"><a href=\"#增删改\" class=\"headerlink\" title=\"增删改\"></a>增删改</h3><p>1.添加</p>\n<pre><code>db.xuncs.save({title: &#39;xuncs&#39;, age: 18, sex: true, date: new Date()})\ndb.xuncs.insert({title: &quot;insert&quot;})\ndb.xuncs.batchInsert([{&#39;title&#39;: &#39;batch1&#39;},{&#39;title&#39;: &#39;batch2&#39;}])  // 批量添加\n</code></pre><p>2.修改</p>\n<pre><code>db.xuncs.update({title: &#39;xuncs&#39;}, {$set: {age: 20}})\n// 修改数据中第一条title = &#39;xuncs&#39;的age为20\ndb.xuncs.update({title: &#39;xuncs&#39;}, {$set: {age: 22}}, false, true)\n// 修改数据中所有条目title = &#39;xuncs&#39;的age为22\ndb.xuncs.update({title: &#39;xuncs&#39;}, {$inc: {age: 50}})\n// $inc 增加\n</code></pre><p>3.删除</p>\n<pre><code>db.xuncs.remove // 删除xuncs集合中所有文档\ndb.xuncs.remove({age: 18})\n</code></pre><p>4.查询修改删除</p>\n<pre><code>db.xuncs.findAndModify({\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  update: {$set: {name: &#39;aaa&#39;}, $inc: {age:2}}\n})\ndb.runCommand({ findandmodify: &quot;xuncs&quot;,\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  /*update: {$set: {name: &#39;aaa&#39;}, $inc: {age:2}}*/\n  remove: true\n})\n// update与remove中有一个必须参数，其他参数可选\n</code></pre>"},{"title":"three.js入门","date":"2017-03-06T15:03:49.000Z","_content":"非常想学习webGL和three.js，这次借着百度前端学院来学一波！\n\n<!--more-->\n\n## 起步\n直接引用 three.js\n\n### 三大组件\n场景 (scene)，相机 (camera)，渲染器 (renderer)\n\n#### scene\n场景是所有物体的容器\n```\nvar scene = new THREE.Scene();\n```\n\n#### camera\n相机决定了场景中那个角度的景色会显示出来,角度不同看到的景色也不同\n```\nvar camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);// 透视相机\n```\n\n#### renderer\n渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制\n```\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n```\n渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的\n\n- 添加物体到场景中\n\n```\nvar geometry = new THREE.CubeGeometry(1,1,1);\nvar material = new THREE.MeshBasicMaterial({color: 0x00ff00});\nvar cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n```\n\n- 渲染\n\n```\nrenderer.render(scene, camera);\n```\n\n### 画一条线\n\n#### 定义几何体\n\n```\nvar geometry = new THREE.Geometry();\n```\n几何体中的变量`vertices`可以存放点\n\n##### 定义线条的材质\n\n```\nTHREE.LineBasicMaterial(parameters)\nparameters: {\n  Color: '线条的颜色，用16进制来表示，默认的颜色是白色',\n  Linewidth: '线条的宽度，默认为1'，\n  Linecap: '线条两端的外观，默认是圆角端点',\n  Linejoin: '两个线条的连接点处的外观，默认是“round”，表示圆角',\n  VertexColors: '定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值',\n  Fog: '定义材质的颜色是否受全局雾效的影响'\n}\n```\n```\nvar material = new THREE.LineBasicMaterial( { vertexColors: true } )\n```\n\n#### 定义顶点颜色\n\n```\nvar color1 = new THREE.Color( 0x444444 );\nvar color2 = new THREE.Color( 0xFF0000 );\n```\n\n#### 定义顶点位置,存放到几何体geometry中\n\n```\nvar p1 = new THREE.Vector3( -100, 0, 100 );\nvar p2 = new THREE.Vector3( 100, 0, -100 );\ngeometry.vertices.push(p1);\ngeometry.vertices.push(p2);\n```\n\n#### 给顶点设置颜色\n\n```\ngeometry.colors.push( color1, color2 );\n```\n\n#### 定义一条线\n\n```\nvar line = new THREE.Line( geometry, material, THREE.LinePieces );\nscene.add(line);\n```\n\n#### 右手坐标系\nx轴正方向向右，y轴正方向向上，z轴由屏幕从里向外。\n\n#### 线条的深入理解\n","source":"_posts/three-js入门.md","raw":"---\ntitle: three.js入门\ndate: 2017-03-06 23:03:49\ntags:\n---\n非常想学习webGL和three.js，这次借着百度前端学院来学一波！\n\n<!--more-->\n\n## 起步\n直接引用 three.js\n\n### 三大组件\n场景 (scene)，相机 (camera)，渲染器 (renderer)\n\n#### scene\n场景是所有物体的容器\n```\nvar scene = new THREE.Scene();\n```\n\n#### camera\n相机决定了场景中那个角度的景色会显示出来,角度不同看到的景色也不同\n```\nvar camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);// 透视相机\n```\n\n#### renderer\n渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制\n```\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n```\n渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的\n\n- 添加物体到场景中\n\n```\nvar geometry = new THREE.CubeGeometry(1,1,1);\nvar material = new THREE.MeshBasicMaterial({color: 0x00ff00});\nvar cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n```\n\n- 渲染\n\n```\nrenderer.render(scene, camera);\n```\n\n### 画一条线\n\n#### 定义几何体\n\n```\nvar geometry = new THREE.Geometry();\n```\n几何体中的变量`vertices`可以存放点\n\n##### 定义线条的材质\n\n```\nTHREE.LineBasicMaterial(parameters)\nparameters: {\n  Color: '线条的颜色，用16进制来表示，默认的颜色是白色',\n  Linewidth: '线条的宽度，默认为1'，\n  Linecap: '线条两端的外观，默认是圆角端点',\n  Linejoin: '两个线条的连接点处的外观，默认是“round”，表示圆角',\n  VertexColors: '定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值',\n  Fog: '定义材质的颜色是否受全局雾效的影响'\n}\n```\n```\nvar material = new THREE.LineBasicMaterial( { vertexColors: true } )\n```\n\n#### 定义顶点颜色\n\n```\nvar color1 = new THREE.Color( 0x444444 );\nvar color2 = new THREE.Color( 0xFF0000 );\n```\n\n#### 定义顶点位置,存放到几何体geometry中\n\n```\nvar p1 = new THREE.Vector3( -100, 0, 100 );\nvar p2 = new THREE.Vector3( 100, 0, -100 );\ngeometry.vertices.push(p1);\ngeometry.vertices.push(p2);\n```\n\n#### 给顶点设置颜色\n\n```\ngeometry.colors.push( color1, color2 );\n```\n\n#### 定义一条线\n\n```\nvar line = new THREE.Line( geometry, material, THREE.LinePieces );\nscene.add(line);\n```\n\n#### 右手坐标系\nx轴正方向向右，y轴正方向向上，z轴由屏幕从里向外。\n\n#### 线条的深入理解\n","slug":"three-js入门","published":1,"updated":"2017-03-10T02:54:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqih000ezlwpm1tyxfx5","content":"<p>非常想学习webGL和three.js，这次借着百度前端学院来学一波！</p>\n<a id=\"more\"></a>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p>直接引用 three.js</p>\n<h3 id=\"三大组件\"><a href=\"#三大组件\" class=\"headerlink\" title=\"三大组件\"></a>三大组件</h3><p>场景 (scene)，相机 (camera)，渲染器 (renderer)</p>\n<h4 id=\"scene\"><a href=\"#scene\" class=\"headerlink\" title=\"scene\"></a>scene</h4><p>场景是所有物体的容器</p>\n<pre><code>var scene = new THREE.Scene();\n</code></pre><h4 id=\"camera\"><a href=\"#camera\" class=\"headerlink\" title=\"camera\"></a>camera</h4><p>相机决定了场景中那个角度的景色会显示出来,角度不同看到的景色也不同</p>\n<pre><code>var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);// 透视相机\n</code></pre><h4 id=\"renderer\"><a href=\"#renderer\" class=\"headerlink\" title=\"renderer\"></a>renderer</h4><p>渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制</p>\n<pre><code>var renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n</code></pre><p>渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的</p>\n<ul>\n<li>添加物体到场景中</li>\n</ul>\n<pre><code>var geometry = new THREE.CubeGeometry(1,1,1);\nvar material = new THREE.MeshBasicMaterial({color: 0x00ff00});\nvar cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n</code></pre><ul>\n<li>渲染</li>\n</ul>\n<pre><code>renderer.render(scene, camera);\n</code></pre><h3 id=\"画一条线\"><a href=\"#画一条线\" class=\"headerlink\" title=\"画一条线\"></a>画一条线</h3><h4 id=\"定义几何体\"><a href=\"#定义几何体\" class=\"headerlink\" title=\"定义几何体\"></a>定义几何体</h4><pre><code>var geometry = new THREE.Geometry();\n</code></pre><p>几何体中的变量<code>vertices</code>可以存放点</p>\n<h5 id=\"定义线条的材质\"><a href=\"#定义线条的材质\" class=\"headerlink\" title=\"定义线条的材质\"></a>定义线条的材质</h5><pre><code>THREE.LineBasicMaterial(parameters)\nparameters: {\n  Color: &#39;线条的颜色，用16进制来表示，默认的颜色是白色&#39;,\n  Linewidth: &#39;线条的宽度，默认为1&#39;，\n  Linecap: &#39;线条两端的外观，默认是圆角端点&#39;,\n  Linejoin: &#39;两个线条的连接点处的外观，默认是“round”，表示圆角&#39;,\n  VertexColors: &#39;定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值&#39;,\n  Fog: &#39;定义材质的颜色是否受全局雾效的影响&#39;\n}\n</code></pre><pre><code>var material = new THREE.LineBasicMaterial( { vertexColors: true } )\n</code></pre><h4 id=\"定义顶点颜色\"><a href=\"#定义顶点颜色\" class=\"headerlink\" title=\"定义顶点颜色\"></a>定义顶点颜色</h4><pre><code>var color1 = new THREE.Color( 0x444444 );\nvar color2 = new THREE.Color( 0xFF0000 );\n</code></pre><h4 id=\"定义顶点位置-存放到几何体geometry中\"><a href=\"#定义顶点位置-存放到几何体geometry中\" class=\"headerlink\" title=\"定义顶点位置,存放到几何体geometry中\"></a>定义顶点位置,存放到几何体geometry中</h4><pre><code>var p1 = new THREE.Vector3( -100, 0, 100 );\nvar p2 = new THREE.Vector3( 100, 0, -100 );\ngeometry.vertices.push(p1);\ngeometry.vertices.push(p2);\n</code></pre><h4 id=\"给顶点设置颜色\"><a href=\"#给顶点设置颜色\" class=\"headerlink\" title=\"给顶点设置颜色\"></a>给顶点设置颜色</h4><pre><code>geometry.colors.push( color1, color2 );\n</code></pre><h4 id=\"定义一条线\"><a href=\"#定义一条线\" class=\"headerlink\" title=\"定义一条线\"></a>定义一条线</h4><pre><code>var line = new THREE.Line( geometry, material, THREE.LinePieces );\nscene.add(line);\n</code></pre><h4 id=\"右手坐标系\"><a href=\"#右手坐标系\" class=\"headerlink\" title=\"右手坐标系\"></a>右手坐标系</h4><p>x轴正方向向右，y轴正方向向上，z轴由屏幕从里向外。</p>\n<h4 id=\"线条的深入理解\"><a href=\"#线条的深入理解\" class=\"headerlink\" title=\"线条的深入理解\"></a>线条的深入理解</h4>","excerpt":"<p>非常想学习webGL和three.js，这次借着百度前端学院来学一波！</p>","more":"<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p>直接引用 three.js</p>\n<h3 id=\"三大组件\"><a href=\"#三大组件\" class=\"headerlink\" title=\"三大组件\"></a>三大组件</h3><p>场景 (scene)，相机 (camera)，渲染器 (renderer)</p>\n<h4 id=\"scene\"><a href=\"#scene\" class=\"headerlink\" title=\"scene\"></a>scene</h4><p>场景是所有物体的容器</p>\n<pre><code>var scene = new THREE.Scene();\n</code></pre><h4 id=\"camera\"><a href=\"#camera\" class=\"headerlink\" title=\"camera\"></a>camera</h4><p>相机决定了场景中那个角度的景色会显示出来,角度不同看到的景色也不同</p>\n<pre><code>var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);// 透视相机\n</code></pre><h4 id=\"renderer\"><a href=\"#renderer\" class=\"headerlink\" title=\"renderer\"></a>renderer</h4><p>渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制</p>\n<pre><code>var renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n</code></pre><p>渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的</p>\n<ul>\n<li>添加物体到场景中</li>\n</ul>\n<pre><code>var geometry = new THREE.CubeGeometry(1,1,1);\nvar material = new THREE.MeshBasicMaterial({color: 0x00ff00});\nvar cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n</code></pre><ul>\n<li>渲染</li>\n</ul>\n<pre><code>renderer.render(scene, camera);\n</code></pre><h3 id=\"画一条线\"><a href=\"#画一条线\" class=\"headerlink\" title=\"画一条线\"></a>画一条线</h3><h4 id=\"定义几何体\"><a href=\"#定义几何体\" class=\"headerlink\" title=\"定义几何体\"></a>定义几何体</h4><pre><code>var geometry = new THREE.Geometry();\n</code></pre><p>几何体中的变量<code>vertices</code>可以存放点</p>\n<h5 id=\"定义线条的材质\"><a href=\"#定义线条的材质\" class=\"headerlink\" title=\"定义线条的材质\"></a>定义线条的材质</h5><pre><code>THREE.LineBasicMaterial(parameters)\nparameters: {\n  Color: &#39;线条的颜色，用16进制来表示，默认的颜色是白色&#39;,\n  Linewidth: &#39;线条的宽度，默认为1&#39;，\n  Linecap: &#39;线条两端的外观，默认是圆角端点&#39;,\n  Linejoin: &#39;两个线条的连接点处的外观，默认是“round”，表示圆角&#39;,\n  VertexColors: &#39;定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值&#39;,\n  Fog: &#39;定义材质的颜色是否受全局雾效的影响&#39;\n}\n</code></pre><pre><code>var material = new THREE.LineBasicMaterial( { vertexColors: true } )\n</code></pre><h4 id=\"定义顶点颜色\"><a href=\"#定义顶点颜色\" class=\"headerlink\" title=\"定义顶点颜色\"></a>定义顶点颜色</h4><pre><code>var color1 = new THREE.Color( 0x444444 );\nvar color2 = new THREE.Color( 0xFF0000 );\n</code></pre><h4 id=\"定义顶点位置-存放到几何体geometry中\"><a href=\"#定义顶点位置-存放到几何体geometry中\" class=\"headerlink\" title=\"定义顶点位置,存放到几何体geometry中\"></a>定义顶点位置,存放到几何体geometry中</h4><pre><code>var p1 = new THREE.Vector3( -100, 0, 100 );\nvar p2 = new THREE.Vector3( 100, 0, -100 );\ngeometry.vertices.push(p1);\ngeometry.vertices.push(p2);\n</code></pre><h4 id=\"给顶点设置颜色\"><a href=\"#给顶点设置颜色\" class=\"headerlink\" title=\"给顶点设置颜色\"></a>给顶点设置颜色</h4><pre><code>geometry.colors.push( color1, color2 );\n</code></pre><h4 id=\"定义一条线\"><a href=\"#定义一条线\" class=\"headerlink\" title=\"定义一条线\"></a>定义一条线</h4><pre><code>var line = new THREE.Line( geometry, material, THREE.LinePieces );\nscene.add(line);\n</code></pre><h4 id=\"右手坐标系\"><a href=\"#右手坐标系\" class=\"headerlink\" title=\"右手坐标系\"></a>右手坐标系</h4><p>x轴正方向向右，y轴正方向向上，z轴由屏幕从里向外。</p>\n<h4 id=\"线条的深入理解\"><a href=\"#线条的深入理解\" class=\"headerlink\" title=\"线条的深入理解\"></a>线条的深入理解</h4>"},{"title":"mongodb初探","date":"2017-01-24T03:56:04.000Z","_content":"初探mongodb\n\n<!--more-->\n\n# mongodb\n基于分布式文件储存的数据库，支持的数据结构非常松散，类似json的bson格式，可以储存比较复杂的数据类型。\n\n### 特点\n- 面向集合存储，易存储对象类型的数据\n- 支持动态查询\n- 支持完全索引，包含内部对象，对任何属性都可索引\n- 支持复制和故障恢复\n- 使用高效的二进制数据存储，包括大型对象（如视频等）\n- 自动处理碎片，以支持云计算层次的扩展性\n\n### 应用平台\n- 大数据\n- 内容管理和交付\n- 移动和社交基础设施\n- 用户数据管理\n- 数据平台\n\n### Mac下安装mongodb\n- [官网](https://www.mongodb.com) 下载最新版本，我使用的是3.4.1\n- 解压后放倒/usr/local/mongodb目录下\n\n```\ncp -r mongodb-osx-x86_64-3.4.1 /usr/local/mongodb  \n```\n- 在该目录下建立子目录data/db存放数据，log存放日志\n\n```\nsudo mkdir data/db\nsudo mkdir log\n```\n- 进入子目录bin创建配置文件\n\n```\ncd bin\nvim mongodb.conf \n    // 编写配置文件\nport=27017    // 数据库服务使用端口\ndbpath=/usr/local/mongodb/data/db  // 数据存放的文件位置\nlogpath=/usr/local/mongodb/log/mongodb.log    // 日志文件的存放位置\nfork = true    // 后台守护进程运行\n```\n- 启动\n第一个窗口\n```\n./mongod -f mongodb.conf  \n```\n第二个窗口\n```\n./mongo\n```\n\n","source":"_posts/mongodb初探.md","raw":"---\ntitle: mongodb初探\ndate: 2017-01-24 11:56:04\ntags:\n---\n初探mongodb\n\n<!--more-->\n\n# mongodb\n基于分布式文件储存的数据库，支持的数据结构非常松散，类似json的bson格式，可以储存比较复杂的数据类型。\n\n### 特点\n- 面向集合存储，易存储对象类型的数据\n- 支持动态查询\n- 支持完全索引，包含内部对象，对任何属性都可索引\n- 支持复制和故障恢复\n- 使用高效的二进制数据存储，包括大型对象（如视频等）\n- 自动处理碎片，以支持云计算层次的扩展性\n\n### 应用平台\n- 大数据\n- 内容管理和交付\n- 移动和社交基础设施\n- 用户数据管理\n- 数据平台\n\n### Mac下安装mongodb\n- [官网](https://www.mongodb.com) 下载最新版本，我使用的是3.4.1\n- 解压后放倒/usr/local/mongodb目录下\n\n```\ncp -r mongodb-osx-x86_64-3.4.1 /usr/local/mongodb  \n```\n- 在该目录下建立子目录data/db存放数据，log存放日志\n\n```\nsudo mkdir data/db\nsudo mkdir log\n```\n- 进入子目录bin创建配置文件\n\n```\ncd bin\nvim mongodb.conf \n    // 编写配置文件\nport=27017    // 数据库服务使用端口\ndbpath=/usr/local/mongodb/data/db  // 数据存放的文件位置\nlogpath=/usr/local/mongodb/log/mongodb.log    // 日志文件的存放位置\nfork = true    // 后台守护进程运行\n```\n- 启动\n第一个窗口\n```\n./mongod -f mongodb.conf  \n```\n第二个窗口\n```\n./mongo\n```\n\n","slug":"mongodb初探","published":1,"updated":"2017-01-24T16:03:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqij000fzlwpokognykn","content":"<p>初探mongodb</p>\n<a id=\"more\"></a>\n<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><p>基于分布式文件储存的数据库，支持的数据结构非常松散，类似json的bson格式，可以储存比较复杂的数据类型。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>面向集合存储，易存储对象类型的数据</li>\n<li>支持动态查询</li>\n<li>支持完全索引，包含内部对象，对任何属性都可索引</li>\n<li>支持复制和故障恢复</li>\n<li>使用高效的二进制数据存储，包括大型对象（如视频等）</li>\n<li>自动处理碎片，以支持云计算层次的扩展性</li>\n</ul>\n<h3 id=\"应用平台\"><a href=\"#应用平台\" class=\"headerlink\" title=\"应用平台\"></a>应用平台</h3><ul>\n<li>大数据</li>\n<li>内容管理和交付</li>\n<li>移动和社交基础设施</li>\n<li>用户数据管理</li>\n<li>数据平台</li>\n</ul>\n<h3 id=\"Mac下安装mongodb\"><a href=\"#Mac下安装mongodb\" class=\"headerlink\" title=\"Mac下安装mongodb\"></a>Mac下安装mongodb</h3><ul>\n<li><a href=\"https://www.mongodb.com\" target=\"_blank\" rel=\"external\">官网</a> 下载最新版本，我使用的是3.4.1</li>\n<li>解压后放倒/usr/local/mongodb目录下</li>\n</ul>\n<pre><code>cp -r mongodb-osx-x86_64-3.4.1 /usr/local/mongodb\n</code></pre><ul>\n<li>在该目录下建立子目录data/db存放数据，log存放日志</li>\n</ul>\n<pre><code>sudo mkdir data/db\nsudo mkdir log\n</code></pre><ul>\n<li>进入子目录bin创建配置文件</li>\n</ul>\n<pre><code>cd bin\nvim mongodb.conf \n    // 编写配置文件\nport=27017    // 数据库服务使用端口\ndbpath=/usr/local/mongodb/data/db  // 数据存放的文件位置\nlogpath=/usr/local/mongodb/log/mongodb.log    // 日志文件的存放位置\nfork = true    // 后台守护进程运行\n</code></pre><ul>\n<li>启动<br>第一个窗口<pre><code>./mongod -f mongodb.conf\n</code></pre>第二个窗口<pre><code>./mongo\n</code></pre></li>\n</ul>\n","excerpt":"<p>初探mongodb</p>","more":"<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><p>基于分布式文件储存的数据库，支持的数据结构非常松散，类似json的bson格式，可以储存比较复杂的数据类型。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>面向集合存储，易存储对象类型的数据</li>\n<li>支持动态查询</li>\n<li>支持完全索引，包含内部对象，对任何属性都可索引</li>\n<li>支持复制和故障恢复</li>\n<li>使用高效的二进制数据存储，包括大型对象（如视频等）</li>\n<li>自动处理碎片，以支持云计算层次的扩展性</li>\n</ul>\n<h3 id=\"应用平台\"><a href=\"#应用平台\" class=\"headerlink\" title=\"应用平台\"></a>应用平台</h3><ul>\n<li>大数据</li>\n<li>内容管理和交付</li>\n<li>移动和社交基础设施</li>\n<li>用户数据管理</li>\n<li>数据平台</li>\n</ul>\n<h3 id=\"Mac下安装mongodb\"><a href=\"#Mac下安装mongodb\" class=\"headerlink\" title=\"Mac下安装mongodb\"></a>Mac下安装mongodb</h3><ul>\n<li><a href=\"https://www.mongodb.com\">官网</a> 下载最新版本，我使用的是3.4.1</li>\n<li>解压后放倒/usr/local/mongodb目录下</li>\n</ul>\n<pre><code>cp -r mongodb-osx-x86_64-3.4.1 /usr/local/mongodb\n</code></pre><ul>\n<li>在该目录下建立子目录data/db存放数据，log存放日志</li>\n</ul>\n<pre><code>sudo mkdir data/db\nsudo mkdir log\n</code></pre><ul>\n<li>进入子目录bin创建配置文件</li>\n</ul>\n<pre><code>cd bin\nvim mongodb.conf \n    // 编写配置文件\nport=27017    // 数据库服务使用端口\ndbpath=/usr/local/mongodb/data/db  // 数据存放的文件位置\nlogpath=/usr/local/mongodb/log/mongodb.log    // 日志文件的存放位置\nfork = true    // 后台守护进程运行\n</code></pre><ul>\n<li>启动<br>第一个窗口<pre><code>./mongod -f mongodb.conf\n</code></pre>第二个窗口<pre><code>./mongo\n</code></pre></li>\n</ul>"},{"title":"基于websocket实现服务器浏览器持续通信","date":"2016-12-10T13:14:18.000Z","_content":"\n为了网络程序设计大作业，了解了http,websocket,node及其框架...\n<!--more-->\n\n### http协议\n  * HTTP是超文本传输协议，是客户端浏览器或其他程序与Web服务器之间的应用层通信协议\n * HTTP使用TCP/IP建立连接\n![](http://upload-images.jianshu.io/upload_images/3767061-36776499e489d972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/3767061-25b34aab5fc17bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n * TCP客户端和服务器通过TCP套接字接口通信\n\n![](http://upload-images.jianshu.io/upload_images/3767061-ff829f1fafae57a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### Websocket\n - Websocket是一个持久化的协议\n  http1.0的生命周期很短，一个request一个response完成后就结束\n http1.1增加了一个keep-alive，在一个http连接中可以发送多个request，接收多个response\n\n![](http://upload-images.jianshu.io/upload_images/3767061-b512a13ed3c4cd9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/3767061-92194c7aa3f952d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这是一个 websocket的request和 response\n\n - websocket解决了http的部分难题\n  * **被动性** 服务端可以主动推送信息给客户端，不需要客户端不断请求\n  * **持久性** 只需要一次握手，整个通信建立在一次连接中，避免了中介反复解析\n\n### 基于express和socket.io构建聊天室\n\n - express\n  安装\n  ```\n npm install express -g\n```\nserver.js引用模块\n```\nvar express = require('express'),\napp = express(),\nserver = require('http').createServer(app);  //创建服务\napp.use('/', express.static(__dirname + '/www')); //调用静态文件\n```\n\n- socket.IO\n  可以接受所有与服务器相连接的客户端发送的消息，也可向客户端主动发送消息。\n  安装\n```\n npm install socket.io\n```\n引用\n```\nvar io = require('socket.io').listen(server);\nserver.listen(process.env.PORT || 3000);  //监听端口\n```\n\n- connect\n```\nio.sockets.on('connection', function(socket) {   //建立连接\n    //新用户\n    socket.on('login', function(usrName,user) {\n        if (users.indexOf(usrName) > -1) {\n            socket.emit('usrExisted');\n        } else {\n            socket.userIndex = users.length;\n            socket.usrName = usrName;\n            socket.users = users;\n            users.push(usrName);\n            date = new Date().toTimeString().substr(0, 8);\n            console.log(date+\"/\"+usrName+'加入了聊天');\n            socket.emit('loginSuccess');\n            io.sockets.emit('system', usrName, users.length, 'login');\n            io.sockets.emit('cuList', users);\n        };\n    });\n    //用户离开\n    socket.on('disconnect', function(user) {\n        if (socket.usrName != null) {\n        \tsocket.users = users;\n            users.splice(socket.userIndex, 1);\n            date = new Date().toTimeString().substr(0, 8);\n            console.log(date+\"/\"+socket.usrName+'滚蛋了');\n            socket.broadcast.emit('system', socket.usrName, users.length, 'logout');\n\t\t\tio.sockets.emit('cuList', users);\n        }\n    });\n    //用户列表\n\t//新消息\n    socket.on('postMsg', function(msg, color) {\n    \tdate = new Date().toTimeString().substr(0, 8);\n    \tconsole.log(date+\"/\"+socket.usrName+'：'+msg);\n        socket.broadcast.emit('newMsg', socket.usrName, msg, color);\n    });\n    //新图片\n    socket.on('img', function(imgData, color) {\n    \tdate = new Date().toTimeString().substr(0, 8);\n    \tconsole.log(date+\"/\"+socket.usrName+'：'+imgData);\n        socket.broadcast.emit('newImg', socket.usrName, imgData, color);\n    });\n});\n```\n- 客户端js,html,css\n```\nwindow.onload = function() {\n    var webchat = new WebChat();\n    webchat.init();\n};\nvar WebChat = function() {\n    this.socket = null;\n};\nWebChat.prototype = {\n    init: function() {\n        var that = this;\n        this.socket = io.connect();\n        //建立连接\n        this.socket.on('connect', function() {\n        \t$('#info').text('大爷儿，进来玩玩');\n        \t$('#inModal').css('display','block');\n        \t$('#usrName').focus();\n        });\n        //昵称占用\n        this.socket.on('usrExisted', function() {\n            $('#info').text('昵称已被使用，请换一个试试！');\n        });\n        //登陆成功\n        this.socket.on('loginSuccess', function() {\n        \tdocument.title ='webchat | ' + $('#usrName').val();\n        \t$('#loginArea').css('display','none');\n        \t$('#messageInput').focus();\n        });\n        //用户列表\n        this.socket.on('cuList',function(users){\n        \tvar cuList = $('#right');\n        \tvar addStr = \"\";\n        \tconsole.log(users);\n        \tusers.forEach(function(user){\n        \t\taddStr += user + '<br/>';\n        \t});\n        \tcuList.html('用户列表<br/>'+addStr);\n        })\n        //连接失败\n        this.socket.on('error', function(err) {\n            if ($('#loginArea').style.display == 'none') {\n                $('#onlineCount').text('连接失败！');\n            } else {\n                $('#info').text('连接失败！');\n            }\n        });\n        //系统通知用户加入或离开\n        this.socket.on('system', function(usrName, userCount, type) {\n            var msg = usrName + (type == 'login' ? '来了' : '滚了');\n            that._displayNewMsg('system ', msg, 'red');\n            $('#onlineCount').text(userCount + (userCount > 1 ? ' users' : ' user') + ' online');\n        });\n        //发送消息\n        this.socket.on('newMsg', function(user, msg, color) {\n            that._displayNewMsg(user, msg, color);\n        });\n        //发送图片\n        this.socket.on('newImg', function(user, img, color) {\n            that._displayImage(user, img, color);\n        });\n        \n        //底层监听事件\n        \n        //登陆按钮\n        $('#loginBtn').on('click tap', function() {\n            var usrName = $('#usrName').val();\n            if ($.trim(usrName).length != 0) {\n                that.socket.emit('login', usrName);\n                that.socket.emit('cuList', users);\n            } else {\n                $('#usrName').focus();\n            };\n        });\n        //登陆监听enter\n        $('#usrName').on('keyup', function(e) {\n            if (e.keyCode == 13) {\n                var usrName = $('#usrName').val();\n                if ($.trim(usrName).length != 0) {\n                    that.socket.emit('login', usrName);\n                    that.socket.emit('cuList', users);\n                };\n            };\n        });\n        //bind发送按钮\n        $('#sendBtn').on('click tap', function() {\n            var messageInput = $('#messageInput'),\n                msg = messageInput.val(),\n                color = $('#colorStyle').val();\n            messageInput.val(' ');\n            messageInput.focus();\n            if ($.trim(msg).length != 0) {\n                that.socket.emit('postMsg', msg, color);\n                that._displayNewMsg('me', msg, color);\n                return;\n            };\n        });\n        //bind发送\n        $('#messageInput').on('keyup', function(e) {\n            var messageInput = $('#messageInput'),\n                msg = messageInput.val(),\n                color = $('#colorStyle').val();\n            if (e.keyCode == 13 && $.trim(msg).length != 0) {\n                messageInput.val(' ');\n                that.socket.emit('postMsg', msg, color);\n                that._displayNewMsg('me', msg, color);\n            };\n        });\n        //清空\n        $('#clearBtn').on('click tap', function() {\n            $('#winChat').html(\" \");\n        });\n        //发送图片\n        $('#imgSend').on('change', function() {\n            if (this.files.length != 0) {\n                var file = this.files[0],\n                    reader = new FileReader(),\n                    color = $('#colorStyle').val();\n                if (!reader) {\n                    that._displayNewMsg('system', '辣鸡浏览器不支持上传文件', 'red');\n                    this.val(' ');\n                    return;\n                };\n                //接收图片\n                reader.onload = function(e) {\n                    that.socket.emit('img', e.target.result, color);\n                    that._displayImage('me', e.target.result, color);\n                };\n                reader.readAsDataURL(file);\n            };\n        });\n        //图片包\n        this._initialLxh();\n        //按钮\n        $('#lxh').on('click tap', function(e) {\n            var lxhwrapper = $('#lxhWrapper');\n            lxhwrapper.css('display','block');\n            e.stopPropagation();\n        });\n        //二级图片栏\n        $('body').on('click', function(e) {\n            var lxhwrapper = $('#lxhWrapper');\n            if (e.target != lxhwrapper) {\n                lxhwrapper.css('display','none');\n            };\n        });\n        $('#lxhWrapper').on('click tap', function(e) {\n            var target = e.target;\n            if (target.nodeName.toLowerCase() == 'img') {\n                var messageInput = $('#messageInput');\n                messageInput.focus();\n                messageInput.val(messageInput.val() + '[lxh:' + target.title + ']');\n            };\n        });\n    },\n    \t//发送图片\n    _initialLxh: function() {\n        var lxhContainer = $('#lxhWrapper'),\n            docFragment = document.createDocumentFragment();\n        for (var i = 100; i > 0; i--) {\n            var lxhItem = document.createElement('img');\n            lxhItem.src = '../content/lxh/' + i + '.gif';\n            lxhItem.title = i;\n            docFragment.appendChild(lxhItem);\n        };\n        lxhContainer.append(docFragment);\n    },\n    _displayNewMsg: function(user, msg, color) {\n        var container = $('#winChat'),\n            msgToDisplay = $('<p></p>'),\n            date = new Date().toTimeString().substr(0, 8),\n            msg = this._showLxh(msg);\n        msgToDisplay.css('color',color || '#000');\n        msgToDisplay.html(user + '<span class=\"timespan\">(' + date + '): </span>' + msg);\n        container.append(msgToDisplay);\n        container.scrollTop = container.scrollHeight;\n    },\n    _displayImage: function(user, imgData, color) {\n        var container = $('#winChat'),\n            msgToDisplay = $('<p></p>'),\n            date = new Date().toTimeString().substr(0, 8);\n        msgToDisplay.css('color',color || '#000');\n        msgToDisplay.html(user + '<span class=\"timespan\">(' + date + '): </span> <br/>' + '<a href=\"' + imgData + '\" target=\"_blank\"><img src=\"' + imgData + '\"/></a>');\n        container.append(msgToDisplay);\n        container.scrollTop = container.scrollHeight;\n    },\n    _showLxh: function(msg) {\n        var match, \n        \tresult = msg,\n            reg = /\\[lxh:\\d+\\]/g,\n            lxhIndex,\n            totalLxhNum = $('#lxhWrapper').children().length;\n        while (match = reg.exec(msg)) {\n            lxhIndex = match[0].slice(5, -1);\n            console.log(lxhIndex);\n            if (lxhIndex > totalLxhNum) {\n                result = result.replace(match[0], '[X]');\n            } else {\n                result = result.replace(match[0], '<img class=\"lxh\" src=\"../content/lxh/' + lxhIndex + '.gif\" />');\n            };\n        };\n        return result;\n    }\n};\n```\n```\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"description\" content=\"webchat | a simple chat application built with node.js and websocket\">\n        <meta name=\"viewport\"content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>    \n       <title>webchat</title>\n        <link rel=\"stylesheet\" href=\"styles/main.css\">\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n        <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n    </head>\n    <body>\n        <div class=\"wrapper\">\n            <div class=\"banner\">\n                <div>WebChat</div>\n                <span id=\"onlineCount\"></span>\n            </div>\n            <div id=\"winChat\">\n            </div>\n            <div class=\"controls\" >\n                <div class=\"items\">\n                    <input id=\"colorStyle\" type=\"color\" placeHolder='#000' title=\"font color\" />\n                    <input id=\"lxh\" type=\"button\" value=\"lxh\" title=\"lxh\" />\n                    <label for=\"imgSend\" class=\"imgLabel\">\n                        <input type=\"button\" value=\"表情\" style=\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\" />\n                        <input id=\"imgSend\" type=\"file\" accept=\"image/gif\" value=\"表情\"  />\n                    </label>\n                    <input id=\"clearBtn\" type=\"button\" value=\"清空\" title=\"clear screen\" />\n                </div>\n                <input type=\"text\" id=\"messageInput\" placeHolder=\"enter to send\"/>\n                <input id=\"sendBtn\" type=\"button\" value=\"发送\">\n                <div id=\"lxhWrapper\">\n                </div>\n            </div>\n        </div>\n        <div class=\"right\" id=\"right\"></div>\n        <div id=\"loginArea\">\n            <p id=\"info\">正在连接服务器...</p>\n            <div id=\"inModal\">\n                <input type=\"text\" placeHolder=\"请输入昵称\" id=\"usrName\" />\n                <input type=\"button\" value=\"进入\" id=\"loginBtn\" />\n            </div>\n        </div>\n        <script src=\"scripts/jquery-2.1.0.js\"></script>\n        <script src=\"/socket.io/socket.io.js\"></script>\n        <script src=\"scripts/webchat.js\"></script>\n    </body>\n</html>\n```\n\n```\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"description\" content=\"webchat | a simple chat application built with node.js and websocket\">\n        <meta name=\"viewport\"content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>    \n       <title>webchat</title>\n        <link rel=\"stylesheet\" href=\"styles/main.css\">\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n        <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n    </head>\n    <body>\n        <div class=\"wrapper\">\n            <div class=\"banner\">\n                <div>WebChat</div>\n                <span id=\"onlineCount\"></span>\n            </div>\n            <div id=\"winChat\">\n            </div>\n            <div class=\"controls\" >\n                <div class=\"items\">\n                    <input id=\"colorStyle\" type=\"color\" placeHolder='#000' title=\"font color\" />\n                    <input id=\"lxh\" type=\"button\" value=\"lxh\" title=\"lxh\" />\n                    <label for=\"imgSend\" class=\"imgLabel\">\n                        <input type=\"button\" value=\"表情\" style=\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\" />\n                        <input id=\"imgSend\" type=\"file\" accept=\"image/gif\" value=\"表情\"  />\n                    </label>\n                    <input id=\"clearBtn\" type=\"button\" value=\"清空\" title=\"clear screen\" />\n                </div>\n                <input type=\"text\" id=\"messageInput\" placeHolder=\"enter to send\"/>\n                <input id=\"sendBtn\" type=\"button\" value=\"发送\">\n                <div id=\"lxhWrapper\">\n                </div>\n            </div>\n        </div>\n        <div class=\"right\" id=\"right\"></div>\n        <div id=\"loginArea\">\n            <p id=\"info\">正在连接服务器...</p>\n            <div id=\"inModal\">\n                <input type=\"text\" placeHolder=\"请输入昵称\" id=\"usrName\" />\n                <input type=\"button\" value=\"进入\" id=\"loginBtn\" />\n            </div>\n        </div>\n        <script src=\"scripts/jquery-2.1.0.js\"></script>\n        <script src=\"/socket.io/socket.io.js\"></script>\n        <script src=\"scripts/webchat.js\"></script>\n    </body>\n</html>\n```","source":"_posts/基于websocket实现服务器浏览器持续通信.md","raw":"---\ntitle: 基于websocket实现服务器浏览器持续通信\ndate: 2016-12-10 21:14:18\ntags:\n  - node\n  - javascript\n---\n\n为了网络程序设计大作业，了解了http,websocket,node及其框架...\n<!--more-->\n\n### http协议\n  * HTTP是超文本传输协议，是客户端浏览器或其他程序与Web服务器之间的应用层通信协议\n * HTTP使用TCP/IP建立连接\n![](http://upload-images.jianshu.io/upload_images/3767061-36776499e489d972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/3767061-25b34aab5fc17bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n * TCP客户端和服务器通过TCP套接字接口通信\n\n![](http://upload-images.jianshu.io/upload_images/3767061-ff829f1fafae57a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### Websocket\n - Websocket是一个持久化的协议\n  http1.0的生命周期很短，一个request一个response完成后就结束\n http1.1增加了一个keep-alive，在一个http连接中可以发送多个request，接收多个response\n\n![](http://upload-images.jianshu.io/upload_images/3767061-b512a13ed3c4cd9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/3767061-92194c7aa3f952d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这是一个 websocket的request和 response\n\n - websocket解决了http的部分难题\n  * **被动性** 服务端可以主动推送信息给客户端，不需要客户端不断请求\n  * **持久性** 只需要一次握手，整个通信建立在一次连接中，避免了中介反复解析\n\n### 基于express和socket.io构建聊天室\n\n - express\n  安装\n  ```\n npm install express -g\n```\nserver.js引用模块\n```\nvar express = require('express'),\napp = express(),\nserver = require('http').createServer(app);  //创建服务\napp.use('/', express.static(__dirname + '/www')); //调用静态文件\n```\n\n- socket.IO\n  可以接受所有与服务器相连接的客户端发送的消息，也可向客户端主动发送消息。\n  安装\n```\n npm install socket.io\n```\n引用\n```\nvar io = require('socket.io').listen(server);\nserver.listen(process.env.PORT || 3000);  //监听端口\n```\n\n- connect\n```\nio.sockets.on('connection', function(socket) {   //建立连接\n    //新用户\n    socket.on('login', function(usrName,user) {\n        if (users.indexOf(usrName) > -1) {\n            socket.emit('usrExisted');\n        } else {\n            socket.userIndex = users.length;\n            socket.usrName = usrName;\n            socket.users = users;\n            users.push(usrName);\n            date = new Date().toTimeString().substr(0, 8);\n            console.log(date+\"/\"+usrName+'加入了聊天');\n            socket.emit('loginSuccess');\n            io.sockets.emit('system', usrName, users.length, 'login');\n            io.sockets.emit('cuList', users);\n        };\n    });\n    //用户离开\n    socket.on('disconnect', function(user) {\n        if (socket.usrName != null) {\n        \tsocket.users = users;\n            users.splice(socket.userIndex, 1);\n            date = new Date().toTimeString().substr(0, 8);\n            console.log(date+\"/\"+socket.usrName+'滚蛋了');\n            socket.broadcast.emit('system', socket.usrName, users.length, 'logout');\n\t\t\tio.sockets.emit('cuList', users);\n        }\n    });\n    //用户列表\n\t//新消息\n    socket.on('postMsg', function(msg, color) {\n    \tdate = new Date().toTimeString().substr(0, 8);\n    \tconsole.log(date+\"/\"+socket.usrName+'：'+msg);\n        socket.broadcast.emit('newMsg', socket.usrName, msg, color);\n    });\n    //新图片\n    socket.on('img', function(imgData, color) {\n    \tdate = new Date().toTimeString().substr(0, 8);\n    \tconsole.log(date+\"/\"+socket.usrName+'：'+imgData);\n        socket.broadcast.emit('newImg', socket.usrName, imgData, color);\n    });\n});\n```\n- 客户端js,html,css\n```\nwindow.onload = function() {\n    var webchat = new WebChat();\n    webchat.init();\n};\nvar WebChat = function() {\n    this.socket = null;\n};\nWebChat.prototype = {\n    init: function() {\n        var that = this;\n        this.socket = io.connect();\n        //建立连接\n        this.socket.on('connect', function() {\n        \t$('#info').text('大爷儿，进来玩玩');\n        \t$('#inModal').css('display','block');\n        \t$('#usrName').focus();\n        });\n        //昵称占用\n        this.socket.on('usrExisted', function() {\n            $('#info').text('昵称已被使用，请换一个试试！');\n        });\n        //登陆成功\n        this.socket.on('loginSuccess', function() {\n        \tdocument.title ='webchat | ' + $('#usrName').val();\n        \t$('#loginArea').css('display','none');\n        \t$('#messageInput').focus();\n        });\n        //用户列表\n        this.socket.on('cuList',function(users){\n        \tvar cuList = $('#right');\n        \tvar addStr = \"\";\n        \tconsole.log(users);\n        \tusers.forEach(function(user){\n        \t\taddStr += user + '<br/>';\n        \t});\n        \tcuList.html('用户列表<br/>'+addStr);\n        })\n        //连接失败\n        this.socket.on('error', function(err) {\n            if ($('#loginArea').style.display == 'none') {\n                $('#onlineCount').text('连接失败！');\n            } else {\n                $('#info').text('连接失败！');\n            }\n        });\n        //系统通知用户加入或离开\n        this.socket.on('system', function(usrName, userCount, type) {\n            var msg = usrName + (type == 'login' ? '来了' : '滚了');\n            that._displayNewMsg('system ', msg, 'red');\n            $('#onlineCount').text(userCount + (userCount > 1 ? ' users' : ' user') + ' online');\n        });\n        //发送消息\n        this.socket.on('newMsg', function(user, msg, color) {\n            that._displayNewMsg(user, msg, color);\n        });\n        //发送图片\n        this.socket.on('newImg', function(user, img, color) {\n            that._displayImage(user, img, color);\n        });\n        \n        //底层监听事件\n        \n        //登陆按钮\n        $('#loginBtn').on('click tap', function() {\n            var usrName = $('#usrName').val();\n            if ($.trim(usrName).length != 0) {\n                that.socket.emit('login', usrName);\n                that.socket.emit('cuList', users);\n            } else {\n                $('#usrName').focus();\n            };\n        });\n        //登陆监听enter\n        $('#usrName').on('keyup', function(e) {\n            if (e.keyCode == 13) {\n                var usrName = $('#usrName').val();\n                if ($.trim(usrName).length != 0) {\n                    that.socket.emit('login', usrName);\n                    that.socket.emit('cuList', users);\n                };\n            };\n        });\n        //bind发送按钮\n        $('#sendBtn').on('click tap', function() {\n            var messageInput = $('#messageInput'),\n                msg = messageInput.val(),\n                color = $('#colorStyle').val();\n            messageInput.val(' ');\n            messageInput.focus();\n            if ($.trim(msg).length != 0) {\n                that.socket.emit('postMsg', msg, color);\n                that._displayNewMsg('me', msg, color);\n                return;\n            };\n        });\n        //bind发送\n        $('#messageInput').on('keyup', function(e) {\n            var messageInput = $('#messageInput'),\n                msg = messageInput.val(),\n                color = $('#colorStyle').val();\n            if (e.keyCode == 13 && $.trim(msg).length != 0) {\n                messageInput.val(' ');\n                that.socket.emit('postMsg', msg, color);\n                that._displayNewMsg('me', msg, color);\n            };\n        });\n        //清空\n        $('#clearBtn').on('click tap', function() {\n            $('#winChat').html(\" \");\n        });\n        //发送图片\n        $('#imgSend').on('change', function() {\n            if (this.files.length != 0) {\n                var file = this.files[0],\n                    reader = new FileReader(),\n                    color = $('#colorStyle').val();\n                if (!reader) {\n                    that._displayNewMsg('system', '辣鸡浏览器不支持上传文件', 'red');\n                    this.val(' ');\n                    return;\n                };\n                //接收图片\n                reader.onload = function(e) {\n                    that.socket.emit('img', e.target.result, color);\n                    that._displayImage('me', e.target.result, color);\n                };\n                reader.readAsDataURL(file);\n            };\n        });\n        //图片包\n        this._initialLxh();\n        //按钮\n        $('#lxh').on('click tap', function(e) {\n            var lxhwrapper = $('#lxhWrapper');\n            lxhwrapper.css('display','block');\n            e.stopPropagation();\n        });\n        //二级图片栏\n        $('body').on('click', function(e) {\n            var lxhwrapper = $('#lxhWrapper');\n            if (e.target != lxhwrapper) {\n                lxhwrapper.css('display','none');\n            };\n        });\n        $('#lxhWrapper').on('click tap', function(e) {\n            var target = e.target;\n            if (target.nodeName.toLowerCase() == 'img') {\n                var messageInput = $('#messageInput');\n                messageInput.focus();\n                messageInput.val(messageInput.val() + '[lxh:' + target.title + ']');\n            };\n        });\n    },\n    \t//发送图片\n    _initialLxh: function() {\n        var lxhContainer = $('#lxhWrapper'),\n            docFragment = document.createDocumentFragment();\n        for (var i = 100; i > 0; i--) {\n            var lxhItem = document.createElement('img');\n            lxhItem.src = '../content/lxh/' + i + '.gif';\n            lxhItem.title = i;\n            docFragment.appendChild(lxhItem);\n        };\n        lxhContainer.append(docFragment);\n    },\n    _displayNewMsg: function(user, msg, color) {\n        var container = $('#winChat'),\n            msgToDisplay = $('<p></p>'),\n            date = new Date().toTimeString().substr(0, 8),\n            msg = this._showLxh(msg);\n        msgToDisplay.css('color',color || '#000');\n        msgToDisplay.html(user + '<span class=\"timespan\">(' + date + '): </span>' + msg);\n        container.append(msgToDisplay);\n        container.scrollTop = container.scrollHeight;\n    },\n    _displayImage: function(user, imgData, color) {\n        var container = $('#winChat'),\n            msgToDisplay = $('<p></p>'),\n            date = new Date().toTimeString().substr(0, 8);\n        msgToDisplay.css('color',color || '#000');\n        msgToDisplay.html(user + '<span class=\"timespan\">(' + date + '): </span> <br/>' + '<a href=\"' + imgData + '\" target=\"_blank\"><img src=\"' + imgData + '\"/></a>');\n        container.append(msgToDisplay);\n        container.scrollTop = container.scrollHeight;\n    },\n    _showLxh: function(msg) {\n        var match, \n        \tresult = msg,\n            reg = /\\[lxh:\\d+\\]/g,\n            lxhIndex,\n            totalLxhNum = $('#lxhWrapper').children().length;\n        while (match = reg.exec(msg)) {\n            lxhIndex = match[0].slice(5, -1);\n            console.log(lxhIndex);\n            if (lxhIndex > totalLxhNum) {\n                result = result.replace(match[0], '[X]');\n            } else {\n                result = result.replace(match[0], '<img class=\"lxh\" src=\"../content/lxh/' + lxhIndex + '.gif\" />');\n            };\n        };\n        return result;\n    }\n};\n```\n```\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"description\" content=\"webchat | a simple chat application built with node.js and websocket\">\n        <meta name=\"viewport\"content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>    \n       <title>webchat</title>\n        <link rel=\"stylesheet\" href=\"styles/main.css\">\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n        <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n    </head>\n    <body>\n        <div class=\"wrapper\">\n            <div class=\"banner\">\n                <div>WebChat</div>\n                <span id=\"onlineCount\"></span>\n            </div>\n            <div id=\"winChat\">\n            </div>\n            <div class=\"controls\" >\n                <div class=\"items\">\n                    <input id=\"colorStyle\" type=\"color\" placeHolder='#000' title=\"font color\" />\n                    <input id=\"lxh\" type=\"button\" value=\"lxh\" title=\"lxh\" />\n                    <label for=\"imgSend\" class=\"imgLabel\">\n                        <input type=\"button\" value=\"表情\" style=\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\" />\n                        <input id=\"imgSend\" type=\"file\" accept=\"image/gif\" value=\"表情\"  />\n                    </label>\n                    <input id=\"clearBtn\" type=\"button\" value=\"清空\" title=\"clear screen\" />\n                </div>\n                <input type=\"text\" id=\"messageInput\" placeHolder=\"enter to send\"/>\n                <input id=\"sendBtn\" type=\"button\" value=\"发送\">\n                <div id=\"lxhWrapper\">\n                </div>\n            </div>\n        </div>\n        <div class=\"right\" id=\"right\"></div>\n        <div id=\"loginArea\">\n            <p id=\"info\">正在连接服务器...</p>\n            <div id=\"inModal\">\n                <input type=\"text\" placeHolder=\"请输入昵称\" id=\"usrName\" />\n                <input type=\"button\" value=\"进入\" id=\"loginBtn\" />\n            </div>\n        </div>\n        <script src=\"scripts/jquery-2.1.0.js\"></script>\n        <script src=\"/socket.io/socket.io.js\"></script>\n        <script src=\"scripts/webchat.js\"></script>\n    </body>\n</html>\n```\n\n```\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"description\" content=\"webchat | a simple chat application built with node.js and websocket\">\n        <meta name=\"viewport\"content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>    \n       <title>webchat</title>\n        <link rel=\"stylesheet\" href=\"styles/main.css\">\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n        <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n    </head>\n    <body>\n        <div class=\"wrapper\">\n            <div class=\"banner\">\n                <div>WebChat</div>\n                <span id=\"onlineCount\"></span>\n            </div>\n            <div id=\"winChat\">\n            </div>\n            <div class=\"controls\" >\n                <div class=\"items\">\n                    <input id=\"colorStyle\" type=\"color\" placeHolder='#000' title=\"font color\" />\n                    <input id=\"lxh\" type=\"button\" value=\"lxh\" title=\"lxh\" />\n                    <label for=\"imgSend\" class=\"imgLabel\">\n                        <input type=\"button\" value=\"表情\" style=\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\" />\n                        <input id=\"imgSend\" type=\"file\" accept=\"image/gif\" value=\"表情\"  />\n                    </label>\n                    <input id=\"clearBtn\" type=\"button\" value=\"清空\" title=\"clear screen\" />\n                </div>\n                <input type=\"text\" id=\"messageInput\" placeHolder=\"enter to send\"/>\n                <input id=\"sendBtn\" type=\"button\" value=\"发送\">\n                <div id=\"lxhWrapper\">\n                </div>\n            </div>\n        </div>\n        <div class=\"right\" id=\"right\"></div>\n        <div id=\"loginArea\">\n            <p id=\"info\">正在连接服务器...</p>\n            <div id=\"inModal\">\n                <input type=\"text\" placeHolder=\"请输入昵称\" id=\"usrName\" />\n                <input type=\"button\" value=\"进入\" id=\"loginBtn\" />\n            </div>\n        </div>\n        <script src=\"scripts/jquery-2.1.0.js\"></script>\n        <script src=\"/socket.io/socket.io.js\"></script>\n        <script src=\"scripts/webchat.js\"></script>\n    </body>\n</html>\n```","slug":"基于websocket实现服务器浏览器持续通信","published":1,"updated":"2016-12-19T13:31:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqil000hzlwppw91ddsb","content":"<p>为了网络程序设计大作业，了解了http,websocket,node及其框架…<br><a id=\"more\"></a></p>\n<h3 id=\"http协议\"><a href=\"#http协议\" class=\"headerlink\" title=\"http协议\"></a>http协议</h3><ul>\n<li>HTTP是超文本传输协议，是客户端浏览器或其他程序与Web服务器之间的应用层通信协议<ul>\n<li>HTTP使用TCP/IP建立连接<br><img src=\"http://upload-images.jianshu.io/upload_images/3767061-36776499e489d972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-25b34aab5fc17bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ul>\n<li>TCP客户端和服务器通过TCP套接字接口通信</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-ff829f1fafae57a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h3><ul>\n<li>Websocket是一个持久化的协议<br>http1.0的生命周期很短，一个request一个response完成后就结束<br>http1.1增加了一个keep-alive，在一个http连接中可以发送多个request，接收多个response</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-b512a13ed3c4cd9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-92194c7aa3f952d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>这是一个 websocket的request和 response</p>\n<ul>\n<li>websocket解决了http的部分难题<ul>\n<li><strong>被动性</strong> 服务端可以主动推送信息给客户端，不需要客户端不断请求</li>\n<li><strong>持久性</strong> 只需要一次握手，整个通信建立在一次连接中，避免了中介反复解析</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于express和socket-io构建聊天室\"><a href=\"#基于express和socket-io构建聊天室\" class=\"headerlink\" title=\"基于express和socket.io构建聊天室\"></a>基于express和socket.io构建聊天室</h3><ul>\n<li>express<br>安装<pre><code>npm install express -g\n</code></pre>server.js引用模块<pre><code>var express = require(&#39;express&#39;),\napp = express(),\nserver = require(&#39;http&#39;).createServer(app);  //创建服务\napp.use(&#39;/&#39;, express.static(__dirname + &#39;/www&#39;)); //调用静态文件\n</code></pre></li>\n</ul>\n<ul>\n<li><p>socket.IO<br>可以接受所有与服务器相连接的客户端发送的消息，也可向客户端主动发送消息。<br>安装</p>\n<pre><code>npm install socket.io\n</code></pre><p>引用</p>\n<pre><code>var io = require(&#39;socket.io&#39;).listen(server);\nserver.listen(process.env.PORT || 3000);  //监听端口\n</code></pre></li>\n<li><p>connect</p>\n<pre><code>io.sockets.on(&#39;connection&#39;, function(socket) {   //建立连接\n  //新用户\n  socket.on(&#39;login&#39;, function(usrName,user) {\n      if (users.indexOf(usrName) &gt; -1) {\n          socket.emit(&#39;usrExisted&#39;);\n      } else {\n          socket.userIndex = users.length;\n          socket.usrName = usrName;\n          socket.users = users;\n          users.push(usrName);\n          date = new Date().toTimeString().substr(0, 8);\n          console.log(date+&quot;/&quot;+usrName+&#39;加入了聊天&#39;);\n          socket.emit(&#39;loginSuccess&#39;);\n          io.sockets.emit(&#39;system&#39;, usrName, users.length, &#39;login&#39;);\n          io.sockets.emit(&#39;cuList&#39;, users);\n      };\n  });\n  //用户离开\n  socket.on(&#39;disconnect&#39;, function(user) {\n      if (socket.usrName != null) {\n          socket.users = users;\n          users.splice(socket.userIndex, 1);\n          date = new Date().toTimeString().substr(0, 8);\n          console.log(date+&quot;/&quot;+socket.usrName+&#39;滚蛋了&#39;);\n          socket.broadcast.emit(&#39;system&#39;, socket.usrName, users.length, &#39;logout&#39;);\n          io.sockets.emit(&#39;cuList&#39;, users);\n      }\n  });\n  //用户列表\n  //新消息\n  socket.on(&#39;postMsg&#39;, function(msg, color) {\n      date = new Date().toTimeString().substr(0, 8);\n      console.log(date+&quot;/&quot;+socket.usrName+&#39;：&#39;+msg);\n      socket.broadcast.emit(&#39;newMsg&#39;, socket.usrName, msg, color);\n  });\n  //新图片\n  socket.on(&#39;img&#39;, function(imgData, color) {\n      date = new Date().toTimeString().substr(0, 8);\n      console.log(date+&quot;/&quot;+socket.usrName+&#39;：&#39;+imgData);\n      socket.broadcast.emit(&#39;newImg&#39;, socket.usrName, imgData, color);\n  });\n});\n</code></pre></li>\n<li><p>客户端js,html,css</p>\n<pre><code>window.onload = function() {\n  var webchat = new WebChat();\n  webchat.init();\n};\nvar WebChat = function() {\n  this.socket = null;\n};\nWebChat.prototype = {\n  init: function() {\n      var that = this;\n      this.socket = io.connect();\n      //建立连接\n      this.socket.on(&#39;connect&#39;, function() {\n          $(&#39;#info&#39;).text(&#39;大爷儿，进来玩玩&#39;);\n          $(&#39;#inModal&#39;).css(&#39;display&#39;,&#39;block&#39;);\n          $(&#39;#usrName&#39;).focus();\n      });\n      //昵称占用\n      this.socket.on(&#39;usrExisted&#39;, function() {\n          $(&#39;#info&#39;).text(&#39;昵称已被使用，请换一个试试！&#39;);\n      });\n      //登陆成功\n      this.socket.on(&#39;loginSuccess&#39;, function() {\n          document.title =&#39;webchat | &#39; + $(&#39;#usrName&#39;).val();\n          $(&#39;#loginArea&#39;).css(&#39;display&#39;,&#39;none&#39;);\n          $(&#39;#messageInput&#39;).focus();\n      });\n      //用户列表\n      this.socket.on(&#39;cuList&#39;,function(users){\n          var cuList = $(&#39;#right&#39;);\n          var addStr = &quot;&quot;;\n          console.log(users);\n          users.forEach(function(user){\n              addStr += user + &#39;&lt;br/&gt;&#39;;\n          });\n          cuList.html(&#39;用户列表&lt;br/&gt;&#39;+addStr);\n      })\n      //连接失败\n      this.socket.on(&#39;error&#39;, function(err) {\n          if ($(&#39;#loginArea&#39;).style.display == &#39;none&#39;) {\n              $(&#39;#onlineCount&#39;).text(&#39;连接失败！&#39;);\n          } else {\n              $(&#39;#info&#39;).text(&#39;连接失败！&#39;);\n          }\n      });\n      //系统通知用户加入或离开\n      this.socket.on(&#39;system&#39;, function(usrName, userCount, type) {\n          var msg = usrName + (type == &#39;login&#39; ? &#39;来了&#39; : &#39;滚了&#39;);\n          that._displayNewMsg(&#39;system &#39;, msg, &#39;red&#39;);\n          $(&#39;#onlineCount&#39;).text(userCount + (userCount &gt; 1 ? &#39; users&#39; : &#39; user&#39;) + &#39; online&#39;);\n      });\n      //发送消息\n      this.socket.on(&#39;newMsg&#39;, function(user, msg, color) {\n          that._displayNewMsg(user, msg, color);\n      });\n      //发送图片\n      this.socket.on(&#39;newImg&#39;, function(user, img, color) {\n          that._displayImage(user, img, color);\n      });\n\n      //底层监听事件\n\n      //登陆按钮\n      $(&#39;#loginBtn&#39;).on(&#39;click tap&#39;, function() {\n          var usrName = $(&#39;#usrName&#39;).val();\n          if ($.trim(usrName).length != 0) {\n              that.socket.emit(&#39;login&#39;, usrName);\n              that.socket.emit(&#39;cuList&#39;, users);\n          } else {\n              $(&#39;#usrName&#39;).focus();\n          };\n      });\n      //登陆监听enter\n      $(&#39;#usrName&#39;).on(&#39;keyup&#39;, function(e) {\n          if (e.keyCode == 13) {\n              var usrName = $(&#39;#usrName&#39;).val();\n              if ($.trim(usrName).length != 0) {\n                  that.socket.emit(&#39;login&#39;, usrName);\n                  that.socket.emit(&#39;cuList&#39;, users);\n              };\n          };\n      });\n      //bind发送按钮\n      $(&#39;#sendBtn&#39;).on(&#39;click tap&#39;, function() {\n          var messageInput = $(&#39;#messageInput&#39;),\n              msg = messageInput.val(),\n              color = $(&#39;#colorStyle&#39;).val();\n          messageInput.val(&#39; &#39;);\n          messageInput.focus();\n          if ($.trim(msg).length != 0) {\n              that.socket.emit(&#39;postMsg&#39;, msg, color);\n              that._displayNewMsg(&#39;me&#39;, msg, color);\n              return;\n          };\n      });\n      //bind发送\n      $(&#39;#messageInput&#39;).on(&#39;keyup&#39;, function(e) {\n          var messageInput = $(&#39;#messageInput&#39;),\n              msg = messageInput.val(),\n              color = $(&#39;#colorStyle&#39;).val();\n          if (e.keyCode == 13 &amp;&amp; $.trim(msg).length != 0) {\n              messageInput.val(&#39; &#39;);\n              that.socket.emit(&#39;postMsg&#39;, msg, color);\n              that._displayNewMsg(&#39;me&#39;, msg, color);\n          };\n      });\n      //清空\n      $(&#39;#clearBtn&#39;).on(&#39;click tap&#39;, function() {\n          $(&#39;#winChat&#39;).html(&quot; &quot;);\n      });\n      //发送图片\n      $(&#39;#imgSend&#39;).on(&#39;change&#39;, function() {\n          if (this.files.length != 0) {\n              var file = this.files[0],\n                  reader = new FileReader(),\n                  color = $(&#39;#colorStyle&#39;).val();\n              if (!reader) {\n                  that._displayNewMsg(&#39;system&#39;, &#39;辣鸡浏览器不支持上传文件&#39;, &#39;red&#39;);\n                  this.val(&#39; &#39;);\n                  return;\n              };\n              //接收图片\n              reader.onload = function(e) {\n                  that.socket.emit(&#39;img&#39;, e.target.result, color);\n                  that._displayImage(&#39;me&#39;, e.target.result, color);\n              };\n              reader.readAsDataURL(file);\n          };\n      });\n      //图片包\n      this._initialLxh();\n      //按钮\n      $(&#39;#lxh&#39;).on(&#39;click tap&#39;, function(e) {\n          var lxhwrapper = $(&#39;#lxhWrapper&#39;);\n          lxhwrapper.css(&#39;display&#39;,&#39;block&#39;);\n          e.stopPropagation();\n      });\n      //二级图片栏\n      $(&#39;body&#39;).on(&#39;click&#39;, function(e) {\n          var lxhwrapper = $(&#39;#lxhWrapper&#39;);\n          if (e.target != lxhwrapper) {\n              lxhwrapper.css(&#39;display&#39;,&#39;none&#39;);\n          };\n      });\n      $(&#39;#lxhWrapper&#39;).on(&#39;click tap&#39;, function(e) {\n          var target = e.target;\n          if (target.nodeName.toLowerCase() == &#39;img&#39;) {\n              var messageInput = $(&#39;#messageInput&#39;);\n              messageInput.focus();\n              messageInput.val(messageInput.val() + &#39;[lxh:&#39; + target.title + &#39;]&#39;);\n          };\n      });\n  },\n      //发送图片\n  _initialLxh: function() {\n      var lxhContainer = $(&#39;#lxhWrapper&#39;),\n          docFragment = document.createDocumentFragment();\n      for (var i = 100; i &gt; 0; i--) {\n          var lxhItem = document.createElement(&#39;img&#39;);\n          lxhItem.src = &#39;../content/lxh/&#39; + i + &#39;.gif&#39;;\n          lxhItem.title = i;\n          docFragment.appendChild(lxhItem);\n      };\n      lxhContainer.append(docFragment);\n  },\n  _displayNewMsg: function(user, msg, color) {\n      var container = $(&#39;#winChat&#39;),\n          msgToDisplay = $(&#39;&lt;p&gt;&lt;/p&gt;&#39;),\n          date = new Date().toTimeString().substr(0, 8),\n          msg = this._showLxh(msg);\n      msgToDisplay.css(&#39;color&#39;,color || &#39;#000&#39;);\n      msgToDisplay.html(user + &#39;&lt;span class=&quot;timespan&quot;&gt;(&#39; + date + &#39;): &lt;/span&gt;&#39; + msg);\n      container.append(msgToDisplay);\n      container.scrollTop = container.scrollHeight;\n  },\n  _displayImage: function(user, imgData, color) {\n      var container = $(&#39;#winChat&#39;),\n          msgToDisplay = $(&#39;&lt;p&gt;&lt;/p&gt;&#39;),\n          date = new Date().toTimeString().substr(0, 8);\n      msgToDisplay.css(&#39;color&#39;,color || &#39;#000&#39;);\n      msgToDisplay.html(user + &#39;&lt;span class=&quot;timespan&quot;&gt;(&#39; + date + &#39;): &lt;/span&gt; &lt;br/&gt;&#39; + &#39;&lt;a href=&quot;&#39; + imgData + &#39;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;&#39; + imgData + &#39;&quot;/&gt;&lt;/a&gt;&#39;);\n      container.append(msgToDisplay);\n      container.scrollTop = container.scrollHeight;\n  },\n  _showLxh: function(msg) {\n      var match, \n          result = msg,\n          reg = /\\[lxh:\\d+\\]/g,\n          lxhIndex,\n          totalLxhNum = $(&#39;#lxhWrapper&#39;).children().length;\n      while (match = reg.exec(msg)) {\n          lxhIndex = match[0].slice(5, -1);\n          console.log(lxhIndex);\n          if (lxhIndex &gt; totalLxhNum) {\n              result = result.replace(match[0], &#39;[X]&#39;);\n          } else {\n              result = result.replace(match[0], &#39;&lt;img class=&quot;lxh&quot; src=&quot;../content/lxh/&#39; + lxhIndex + &#39;.gif&quot; /&gt;&#39;);\n          };\n      };\n      return result;\n  }\n};\n</code></pre><pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n      &lt;meta charset=&quot;utf-8&quot;&gt;\n      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;\n      &lt;meta name=&quot;description&quot; content=&quot;webchat | a simple chat application built with node.js and websocket&quot;&gt;\n      &lt;meta name=&quot;viewport&quot;content=&quot;width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;/&gt;    \n     &lt;title&gt;webchat&lt;/title&gt;\n      &lt;link rel=&quot;stylesheet&quot; href=&quot;styles/main.css&quot;&gt;\n      &lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;\n      &lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n      &lt;div class=&quot;wrapper&quot;&gt;\n          &lt;div class=&quot;banner&quot;&gt;\n              &lt;div&gt;WebChat&lt;/div&gt;\n              &lt;span id=&quot;onlineCount&quot;&gt;&lt;/span&gt;\n          &lt;/div&gt;\n          &lt;div id=&quot;winChat&quot;&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;controls&quot; &gt;\n              &lt;div class=&quot;items&quot;&gt;\n                  &lt;input id=&quot;colorStyle&quot; type=&quot;color&quot; placeHolder=&#39;#000&#39; title=&quot;font color&quot; /&gt;\n                  &lt;input id=&quot;lxh&quot; type=&quot;button&quot; value=&quot;lxh&quot; title=&quot;lxh&quot; /&gt;\n                  &lt;label for=&quot;imgSend&quot; class=&quot;imgLabel&quot;&gt;\n                      &lt;input type=&quot;button&quot; value=&quot;表情&quot; style=&quot;width: 60px;height: 30px;border: 0;margin: 0;padding: 0;&quot; /&gt;\n                      &lt;input id=&quot;imgSend&quot; type=&quot;file&quot; accept=&quot;image/gif&quot; value=&quot;表情&quot;  /&gt;\n                  &lt;/label&gt;\n                  &lt;input id=&quot;clearBtn&quot; type=&quot;button&quot; value=&quot;清空&quot; title=&quot;clear screen&quot; /&gt;\n              &lt;/div&gt;\n              &lt;input type=&quot;text&quot; id=&quot;messageInput&quot; placeHolder=&quot;enter to send&quot;/&gt;\n              &lt;input id=&quot;sendBtn&quot; type=&quot;button&quot; value=&quot;发送&quot;&gt;\n              &lt;div id=&quot;lxhWrapper&quot;&gt;\n              &lt;/div&gt;\n          &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;right&quot; id=&quot;right&quot;&gt;&lt;/div&gt;\n      &lt;div id=&quot;loginArea&quot;&gt;\n          &lt;p id=&quot;info&quot;&gt;正在连接服务器...&lt;/p&gt;\n          &lt;div id=&quot;inModal&quot;&gt;\n              &lt;input type=&quot;text&quot; placeHolder=&quot;请输入昵称&quot; id=&quot;usrName&quot; /&gt;\n              &lt;input type=&quot;button&quot; value=&quot;进入&quot; id=&quot;loginBtn&quot; /&gt;\n          &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;script src=&quot;scripts/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;\n      &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;\n      &lt;script src=&quot;scripts/webchat.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li>\n</ul>\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;\n        &lt;meta name=&quot;description&quot; content=&quot;webchat | a simple chat application built with node.js and websocket&quot;&gt;\n        &lt;meta name=&quot;viewport&quot;content=&quot;width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;/&gt;    \n       &lt;title&gt;webchat&lt;/title&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;styles/main.css&quot;&gt;\n        &lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;\n        &lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=&quot;wrapper&quot;&gt;\n            &lt;div class=&quot;banner&quot;&gt;\n                &lt;div&gt;WebChat&lt;/div&gt;\n                &lt;span id=&quot;onlineCount&quot;&gt;&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div id=&quot;winChat&quot;&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;controls&quot; &gt;\n                &lt;div class=&quot;items&quot;&gt;\n                    &lt;input id=&quot;colorStyle&quot; type=&quot;color&quot; placeHolder=&#39;#000&#39; title=&quot;font color&quot; /&gt;\n                    &lt;input id=&quot;lxh&quot; type=&quot;button&quot; value=&quot;lxh&quot; title=&quot;lxh&quot; /&gt;\n                    &lt;label for=&quot;imgSend&quot; class=&quot;imgLabel&quot;&gt;\n                        &lt;input type=&quot;button&quot; value=&quot;表情&quot; style=&quot;width: 60px;height: 30px;border: 0;margin: 0;padding: 0;&quot; /&gt;\n                        &lt;input id=&quot;imgSend&quot; type=&quot;file&quot; accept=&quot;image/gif&quot; value=&quot;表情&quot;  /&gt;\n                    &lt;/label&gt;\n                    &lt;input id=&quot;clearBtn&quot; type=&quot;button&quot; value=&quot;清空&quot; title=&quot;clear screen&quot; /&gt;\n                &lt;/div&gt;\n                &lt;input type=&quot;text&quot; id=&quot;messageInput&quot; placeHolder=&quot;enter to send&quot;/&gt;\n                &lt;input id=&quot;sendBtn&quot; type=&quot;button&quot; value=&quot;发送&quot;&gt;\n                &lt;div id=&quot;lxhWrapper&quot;&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;right&quot; id=&quot;right&quot;&gt;&lt;/div&gt;\n        &lt;div id=&quot;loginArea&quot;&gt;\n            &lt;p id=&quot;info&quot;&gt;正在连接服务器...&lt;/p&gt;\n            &lt;div id=&quot;inModal&quot;&gt;\n                &lt;input type=&quot;text&quot; placeHolder=&quot;请输入昵称&quot; id=&quot;usrName&quot; /&gt;\n                &lt;input type=&quot;button&quot; value=&quot;进入&quot; id=&quot;loginBtn&quot; /&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;script src=&quot;scripts/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;\n        &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;\n        &lt;script src=&quot;scripts/webchat.js&quot;&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","excerpt":"<p>为了网络程序设计大作业，了解了http,websocket,node及其框架…<br>","more":"</p>\n<h3 id=\"http协议\"><a href=\"#http协议\" class=\"headerlink\" title=\"http协议\"></a>http协议</h3><ul>\n<li>HTTP是超文本传输协议，是客户端浏览器或其他程序与Web服务器之间的应用层通信协议<ul>\n<li>HTTP使用TCP/IP建立连接<br><img src=\"http://upload-images.jianshu.io/upload_images/3767061-36776499e489d972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-25b34aab5fc17bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ul>\n<li>TCP客户端和服务器通过TCP套接字接口通信</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-ff829f1fafae57a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h3><ul>\n<li>Websocket是一个持久化的协议<br>http1.0的生命周期很短，一个request一个response完成后就结束<br>http1.1增加了一个keep-alive，在一个http连接中可以发送多个request，接收多个response</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-b512a13ed3c4cd9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-92194c7aa3f952d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>这是一个 websocket的request和 response</p>\n<ul>\n<li>websocket解决了http的部分难题<ul>\n<li><strong>被动性</strong> 服务端可以主动推送信息给客户端，不需要客户端不断请求</li>\n<li><strong>持久性</strong> 只需要一次握手，整个通信建立在一次连接中，避免了中介反复解析</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于express和socket-io构建聊天室\"><a href=\"#基于express和socket-io构建聊天室\" class=\"headerlink\" title=\"基于express和socket.io构建聊天室\"></a>基于express和socket.io构建聊天室</h3><ul>\n<li>express<br>安装<pre><code>npm install express -g\n</code></pre>server.js引用模块<pre><code>var express = require(&#39;express&#39;),\napp = express(),\nserver = require(&#39;http&#39;).createServer(app);  //创建服务\napp.use(&#39;/&#39;, express.static(__dirname + &#39;/www&#39;)); //调用静态文件\n</code></pre></li>\n</ul>\n<ul>\n<li><p>socket.IO<br>可以接受所有与服务器相连接的客户端发送的消息，也可向客户端主动发送消息。<br>安装</p>\n<pre><code>npm install socket.io\n</code></pre><p>引用</p>\n<pre><code>var io = require(&#39;socket.io&#39;).listen(server);\nserver.listen(process.env.PORT || 3000);  //监听端口\n</code></pre></li>\n<li><p>connect</p>\n<pre><code>io.sockets.on(&#39;connection&#39;, function(socket) {   //建立连接\n  //新用户\n  socket.on(&#39;login&#39;, function(usrName,user) {\n      if (users.indexOf(usrName) &gt; -1) {\n          socket.emit(&#39;usrExisted&#39;);\n      } else {\n          socket.userIndex = users.length;\n          socket.usrName = usrName;\n          socket.users = users;\n          users.push(usrName);\n          date = new Date().toTimeString().substr(0, 8);\n          console.log(date+&quot;/&quot;+usrName+&#39;加入了聊天&#39;);\n          socket.emit(&#39;loginSuccess&#39;);\n          io.sockets.emit(&#39;system&#39;, usrName, users.length, &#39;login&#39;);\n          io.sockets.emit(&#39;cuList&#39;, users);\n      };\n  });\n  //用户离开\n  socket.on(&#39;disconnect&#39;, function(user) {\n      if (socket.usrName != null) {\n          socket.users = users;\n          users.splice(socket.userIndex, 1);\n          date = new Date().toTimeString().substr(0, 8);\n          console.log(date+&quot;/&quot;+socket.usrName+&#39;滚蛋了&#39;);\n          socket.broadcast.emit(&#39;system&#39;, socket.usrName, users.length, &#39;logout&#39;);\n          io.sockets.emit(&#39;cuList&#39;, users);\n      }\n  });\n  //用户列表\n  //新消息\n  socket.on(&#39;postMsg&#39;, function(msg, color) {\n      date = new Date().toTimeString().substr(0, 8);\n      console.log(date+&quot;/&quot;+socket.usrName+&#39;：&#39;+msg);\n      socket.broadcast.emit(&#39;newMsg&#39;, socket.usrName, msg, color);\n  });\n  //新图片\n  socket.on(&#39;img&#39;, function(imgData, color) {\n      date = new Date().toTimeString().substr(0, 8);\n      console.log(date+&quot;/&quot;+socket.usrName+&#39;：&#39;+imgData);\n      socket.broadcast.emit(&#39;newImg&#39;, socket.usrName, imgData, color);\n  });\n});\n</code></pre></li>\n<li><p>客户端js,html,css</p>\n<pre><code>window.onload = function() {\n  var webchat = new WebChat();\n  webchat.init();\n};\nvar WebChat = function() {\n  this.socket = null;\n};\nWebChat.prototype = {\n  init: function() {\n      var that = this;\n      this.socket = io.connect();\n      //建立连接\n      this.socket.on(&#39;connect&#39;, function() {\n          $(&#39;#info&#39;).text(&#39;大爷儿，进来玩玩&#39;);\n          $(&#39;#inModal&#39;).css(&#39;display&#39;,&#39;block&#39;);\n          $(&#39;#usrName&#39;).focus();\n      });\n      //昵称占用\n      this.socket.on(&#39;usrExisted&#39;, function() {\n          $(&#39;#info&#39;).text(&#39;昵称已被使用，请换一个试试！&#39;);\n      });\n      //登陆成功\n      this.socket.on(&#39;loginSuccess&#39;, function() {\n          document.title =&#39;webchat | &#39; + $(&#39;#usrName&#39;).val();\n          $(&#39;#loginArea&#39;).css(&#39;display&#39;,&#39;none&#39;);\n          $(&#39;#messageInput&#39;).focus();\n      });\n      //用户列表\n      this.socket.on(&#39;cuList&#39;,function(users){\n          var cuList = $(&#39;#right&#39;);\n          var addStr = &quot;&quot;;\n          console.log(users);\n          users.forEach(function(user){\n              addStr += user + &#39;&lt;br/&gt;&#39;;\n          });\n          cuList.html(&#39;用户列表&lt;br/&gt;&#39;+addStr);\n      })\n      //连接失败\n      this.socket.on(&#39;error&#39;, function(err) {\n          if ($(&#39;#loginArea&#39;).style.display == &#39;none&#39;) {\n              $(&#39;#onlineCount&#39;).text(&#39;连接失败！&#39;);\n          } else {\n              $(&#39;#info&#39;).text(&#39;连接失败！&#39;);\n          }\n      });\n      //系统通知用户加入或离开\n      this.socket.on(&#39;system&#39;, function(usrName, userCount, type) {\n          var msg = usrName + (type == &#39;login&#39; ? &#39;来了&#39; : &#39;滚了&#39;);\n          that._displayNewMsg(&#39;system &#39;, msg, &#39;red&#39;);\n          $(&#39;#onlineCount&#39;).text(userCount + (userCount &gt; 1 ? &#39; users&#39; : &#39; user&#39;) + &#39; online&#39;);\n      });\n      //发送消息\n      this.socket.on(&#39;newMsg&#39;, function(user, msg, color) {\n          that._displayNewMsg(user, msg, color);\n      });\n      //发送图片\n      this.socket.on(&#39;newImg&#39;, function(user, img, color) {\n          that._displayImage(user, img, color);\n      });\n\n      //底层监听事件\n\n      //登陆按钮\n      $(&#39;#loginBtn&#39;).on(&#39;click tap&#39;, function() {\n          var usrName = $(&#39;#usrName&#39;).val();\n          if ($.trim(usrName).length != 0) {\n              that.socket.emit(&#39;login&#39;, usrName);\n              that.socket.emit(&#39;cuList&#39;, users);\n          } else {\n              $(&#39;#usrName&#39;).focus();\n          };\n      });\n      //登陆监听enter\n      $(&#39;#usrName&#39;).on(&#39;keyup&#39;, function(e) {\n          if (e.keyCode == 13) {\n              var usrName = $(&#39;#usrName&#39;).val();\n              if ($.trim(usrName).length != 0) {\n                  that.socket.emit(&#39;login&#39;, usrName);\n                  that.socket.emit(&#39;cuList&#39;, users);\n              };\n          };\n      });\n      //bind发送按钮\n      $(&#39;#sendBtn&#39;).on(&#39;click tap&#39;, function() {\n          var messageInput = $(&#39;#messageInput&#39;),\n              msg = messageInput.val(),\n              color = $(&#39;#colorStyle&#39;).val();\n          messageInput.val(&#39; &#39;);\n          messageInput.focus();\n          if ($.trim(msg).length != 0) {\n              that.socket.emit(&#39;postMsg&#39;, msg, color);\n              that._displayNewMsg(&#39;me&#39;, msg, color);\n              return;\n          };\n      });\n      //bind发送\n      $(&#39;#messageInput&#39;).on(&#39;keyup&#39;, function(e) {\n          var messageInput = $(&#39;#messageInput&#39;),\n              msg = messageInput.val(),\n              color = $(&#39;#colorStyle&#39;).val();\n          if (e.keyCode == 13 &amp;&amp; $.trim(msg).length != 0) {\n              messageInput.val(&#39; &#39;);\n              that.socket.emit(&#39;postMsg&#39;, msg, color);\n              that._displayNewMsg(&#39;me&#39;, msg, color);\n          };\n      });\n      //清空\n      $(&#39;#clearBtn&#39;).on(&#39;click tap&#39;, function() {\n          $(&#39;#winChat&#39;).html(&quot; &quot;);\n      });\n      //发送图片\n      $(&#39;#imgSend&#39;).on(&#39;change&#39;, function() {\n          if (this.files.length != 0) {\n              var file = this.files[0],\n                  reader = new FileReader(),\n                  color = $(&#39;#colorStyle&#39;).val();\n              if (!reader) {\n                  that._displayNewMsg(&#39;system&#39;, &#39;辣鸡浏览器不支持上传文件&#39;, &#39;red&#39;);\n                  this.val(&#39; &#39;);\n                  return;\n              };\n              //接收图片\n              reader.onload = function(e) {\n                  that.socket.emit(&#39;img&#39;, e.target.result, color);\n                  that._displayImage(&#39;me&#39;, e.target.result, color);\n              };\n              reader.readAsDataURL(file);\n          };\n      });\n      //图片包\n      this._initialLxh();\n      //按钮\n      $(&#39;#lxh&#39;).on(&#39;click tap&#39;, function(e) {\n          var lxhwrapper = $(&#39;#lxhWrapper&#39;);\n          lxhwrapper.css(&#39;display&#39;,&#39;block&#39;);\n          e.stopPropagation();\n      });\n      //二级图片栏\n      $(&#39;body&#39;).on(&#39;click&#39;, function(e) {\n          var lxhwrapper = $(&#39;#lxhWrapper&#39;);\n          if (e.target != lxhwrapper) {\n              lxhwrapper.css(&#39;display&#39;,&#39;none&#39;);\n          };\n      });\n      $(&#39;#lxhWrapper&#39;).on(&#39;click tap&#39;, function(e) {\n          var target = e.target;\n          if (target.nodeName.toLowerCase() == &#39;img&#39;) {\n              var messageInput = $(&#39;#messageInput&#39;);\n              messageInput.focus();\n              messageInput.val(messageInput.val() + &#39;[lxh:&#39; + target.title + &#39;]&#39;);\n          };\n      });\n  },\n      //发送图片\n  _initialLxh: function() {\n      var lxhContainer = $(&#39;#lxhWrapper&#39;),\n          docFragment = document.createDocumentFragment();\n      for (var i = 100; i &gt; 0; i--) {\n          var lxhItem = document.createElement(&#39;img&#39;);\n          lxhItem.src = &#39;../content/lxh/&#39; + i + &#39;.gif&#39;;\n          lxhItem.title = i;\n          docFragment.appendChild(lxhItem);\n      };\n      lxhContainer.append(docFragment);\n  },\n  _displayNewMsg: function(user, msg, color) {\n      var container = $(&#39;#winChat&#39;),\n          msgToDisplay = $(&#39;&lt;p&gt;&lt;/p&gt;&#39;),\n          date = new Date().toTimeString().substr(0, 8),\n          msg = this._showLxh(msg);\n      msgToDisplay.css(&#39;color&#39;,color || &#39;#000&#39;);\n      msgToDisplay.html(user + &#39;&lt;span class=&quot;timespan&quot;&gt;(&#39; + date + &#39;): &lt;/span&gt;&#39; + msg);\n      container.append(msgToDisplay);\n      container.scrollTop = container.scrollHeight;\n  },\n  _displayImage: function(user, imgData, color) {\n      var container = $(&#39;#winChat&#39;),\n          msgToDisplay = $(&#39;&lt;p&gt;&lt;/p&gt;&#39;),\n          date = new Date().toTimeString().substr(0, 8);\n      msgToDisplay.css(&#39;color&#39;,color || &#39;#000&#39;);\n      msgToDisplay.html(user + &#39;&lt;span class=&quot;timespan&quot;&gt;(&#39; + date + &#39;): &lt;/span&gt; &lt;br/&gt;&#39; + &#39;&lt;a href=&quot;&#39; + imgData + &#39;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;&#39; + imgData + &#39;&quot;/&gt;&lt;/a&gt;&#39;);\n      container.append(msgToDisplay);\n      container.scrollTop = container.scrollHeight;\n  },\n  _showLxh: function(msg) {\n      var match, \n          result = msg,\n          reg = /\\[lxh:\\d+\\]/g,\n          lxhIndex,\n          totalLxhNum = $(&#39;#lxhWrapper&#39;).children().length;\n      while (match = reg.exec(msg)) {\n          lxhIndex = match[0].slice(5, -1);\n          console.log(lxhIndex);\n          if (lxhIndex &gt; totalLxhNum) {\n              result = result.replace(match[0], &#39;[X]&#39;);\n          } else {\n              result = result.replace(match[0], &#39;&lt;img class=&quot;lxh&quot; src=&quot;../content/lxh/&#39; + lxhIndex + &#39;.gif&quot; /&gt;&#39;);\n          };\n      };\n      return result;\n  }\n};\n</code></pre><pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n      &lt;meta charset=&quot;utf-8&quot;&gt;\n      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;\n      &lt;meta name=&quot;description&quot; content=&quot;webchat | a simple chat application built with node.js and websocket&quot;&gt;\n      &lt;meta name=&quot;viewport&quot;content=&quot;width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;/&gt;    \n     &lt;title&gt;webchat&lt;/title&gt;\n      &lt;link rel=&quot;stylesheet&quot; href=&quot;styles/main.css&quot;&gt;\n      &lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;\n      &lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n      &lt;div class=&quot;wrapper&quot;&gt;\n          &lt;div class=&quot;banner&quot;&gt;\n              &lt;div&gt;WebChat&lt;/div&gt;\n              &lt;span id=&quot;onlineCount&quot;&gt;&lt;/span&gt;\n          &lt;/div&gt;\n          &lt;div id=&quot;winChat&quot;&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;controls&quot; &gt;\n              &lt;div class=&quot;items&quot;&gt;\n                  &lt;input id=&quot;colorStyle&quot; type=&quot;color&quot; placeHolder=&#39;#000&#39; title=&quot;font color&quot; /&gt;\n                  &lt;input id=&quot;lxh&quot; type=&quot;button&quot; value=&quot;lxh&quot; title=&quot;lxh&quot; /&gt;\n                  &lt;label for=&quot;imgSend&quot; class=&quot;imgLabel&quot;&gt;\n                      &lt;input type=&quot;button&quot; value=&quot;表情&quot; style=&quot;width: 60px;height: 30px;border: 0;margin: 0;padding: 0;&quot; /&gt;\n                      &lt;input id=&quot;imgSend&quot; type=&quot;file&quot; accept=&quot;image/gif&quot; value=&quot;表情&quot;  /&gt;\n                  &lt;/label&gt;\n                  &lt;input id=&quot;clearBtn&quot; type=&quot;button&quot; value=&quot;清空&quot; title=&quot;clear screen&quot; /&gt;\n              &lt;/div&gt;\n              &lt;input type=&quot;text&quot; id=&quot;messageInput&quot; placeHolder=&quot;enter to send&quot;/&gt;\n              &lt;input id=&quot;sendBtn&quot; type=&quot;button&quot; value=&quot;发送&quot;&gt;\n              &lt;div id=&quot;lxhWrapper&quot;&gt;\n              &lt;/div&gt;\n          &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;right&quot; id=&quot;right&quot;&gt;&lt;/div&gt;\n      &lt;div id=&quot;loginArea&quot;&gt;\n          &lt;p id=&quot;info&quot;&gt;正在连接服务器...&lt;/p&gt;\n          &lt;div id=&quot;inModal&quot;&gt;\n              &lt;input type=&quot;text&quot; placeHolder=&quot;请输入昵称&quot; id=&quot;usrName&quot; /&gt;\n              &lt;input type=&quot;button&quot; value=&quot;进入&quot; id=&quot;loginBtn&quot; /&gt;\n          &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;script src=&quot;scripts/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;\n      &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;\n      &lt;script src=&quot;scripts/webchat.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li>\n</ul>\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;\n        &lt;meta name=&quot;description&quot; content=&quot;webchat | a simple chat application built with node.js and websocket&quot;&gt;\n        &lt;meta name=&quot;viewport&quot;content=&quot;width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;/&gt;    \n       &lt;title&gt;webchat&lt;/title&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;styles/main.css&quot;&gt;\n        &lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;\n        &lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=&quot;wrapper&quot;&gt;\n            &lt;div class=&quot;banner&quot;&gt;\n                &lt;div&gt;WebChat&lt;/div&gt;\n                &lt;span id=&quot;onlineCount&quot;&gt;&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div id=&quot;winChat&quot;&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;controls&quot; &gt;\n                &lt;div class=&quot;items&quot;&gt;\n                    &lt;input id=&quot;colorStyle&quot; type=&quot;color&quot; placeHolder=&#39;#000&#39; title=&quot;font color&quot; /&gt;\n                    &lt;input id=&quot;lxh&quot; type=&quot;button&quot; value=&quot;lxh&quot; title=&quot;lxh&quot; /&gt;\n                    &lt;label for=&quot;imgSend&quot; class=&quot;imgLabel&quot;&gt;\n                        &lt;input type=&quot;button&quot; value=&quot;表情&quot; style=&quot;width: 60px;height: 30px;border: 0;margin: 0;padding: 0;&quot; /&gt;\n                        &lt;input id=&quot;imgSend&quot; type=&quot;file&quot; accept=&quot;image/gif&quot; value=&quot;表情&quot;  /&gt;\n                    &lt;/label&gt;\n                    &lt;input id=&quot;clearBtn&quot; type=&quot;button&quot; value=&quot;清空&quot; title=&quot;clear screen&quot; /&gt;\n                &lt;/div&gt;\n                &lt;input type=&quot;text&quot; id=&quot;messageInput&quot; placeHolder=&quot;enter to send&quot;/&gt;\n                &lt;input id=&quot;sendBtn&quot; type=&quot;button&quot; value=&quot;发送&quot;&gt;\n                &lt;div id=&quot;lxhWrapper&quot;&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;right&quot; id=&quot;right&quot;&gt;&lt;/div&gt;\n        &lt;div id=&quot;loginArea&quot;&gt;\n            &lt;p id=&quot;info&quot;&gt;正在连接服务器...&lt;/p&gt;\n            &lt;div id=&quot;inModal&quot;&gt;\n                &lt;input type=&quot;text&quot; placeHolder=&quot;请输入昵称&quot; id=&quot;usrName&quot; /&gt;\n                &lt;input type=&quot;button&quot; value=&quot;进入&quot; id=&quot;loginBtn&quot; /&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;script src=&quot;scripts/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;\n        &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;\n        &lt;script src=&quot;scripts/webchat.js&quot;&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"layout":"[layout]","title":"第一篇博客","date":"2016-11-20T16:01:09.000Z","type":"tags","_content":"折腾了一天了，本不应该耗这么久，然而win10的node总是要闹点小脾气。。\n\n<!--more-->\n","source":"_posts/第一篇博客.md","raw":"layout: '[layout]'\ntitle: 第一篇博客\ndate: 2016-11-21 00:01:09\ntype: \"tags\"\ntags:\n  - Xunfeng\n  - 黑天很黑\n---\n折腾了一天了，本不应该耗这么久，然而win10的node总是要闹点小脾气。。\n\n<!--more-->\n","slug":"第一篇博客","published":1,"updated":"2016-11-21T16:05:12.000Z","comments":1,"photos":[],"link":"","_id":"cj2aooqin000jzlwp2hd16doo","content":"<p>折腾了一天了，本不应该耗这么久，然而win10的node总是要闹点小脾气。。</p>\n<a id=\"more\"></a>\n","excerpt":"<p>折腾了一天了，本不应该耗这么久，然而win10的node总是要闹点小脾气。。</p>","more":""},{"title":"五一青岛游","date":"2017-04-25T08:04:15.000Z","_content":"计划个路线先..\n\n<!--more-->\n\n\n\n### 计划地点\n| 地点 | 地点     |地点     |\n| :------------- | :------------- |:------------- |\n| 栈桥       | 青岛书屋       |五四广场   |\n| 海底世界       | 崂山       |基督教堂   |\n| 公主楼       | 花石楼       |八大关   |\n| 中山公园       | 鲁迅公园       |海水浴场   |\n| 劈柴院       | 台东步行街       |春和楼   |\n| 德国风情街       | 奥帆中心       |金沙滩   |\n\n\n### 4.27\n  17:30 下了飞机坐上机场大巴来到了青岛市。\n  18:50 到了青岛站附近，首先映入眼帘的是它↓\n  ![](http://xuncs.cn/qingdao/IMG_20170427_183143.jpg)\n  19:30 放下行李，打车来到了台东步行街，这是老城区的小吃街，汇集了各路精品小吃，不仅有当地特色的烤、煮、炒海鲜，还有长沙臭豆腐，武汉热干面等外地美食。\n\n### 4.28\n  一路ofo+小绿,小哥的腿都要废了。。\n  奥帆中心 => 第三海水浴场 => 八大关（公主楼，花石楼） => 第一海水浴场 => 海底世界\n  => 鲁迅公园 => 小青岛 => 栈桥广场（时间还早就去栈桥）\n\n### 4.29\n  劈柴院 => 斑驳时光 => 青岛书房 => 金沙滩 => 海上嘉年华 => 石油大学\n### 4.30\n  如果前两天都玩完了就去崂山！\n","source":"_posts/五一青岛游.md","raw":"---\ntitle: 五一青岛游\ndate: 2017-04-25 16:04:15\ntags:\n---\n计划个路线先..\n\n<!--more-->\n\n\n\n### 计划地点\n| 地点 | 地点     |地点     |\n| :------------- | :------------- |:------------- |\n| 栈桥       | 青岛书屋       |五四广场   |\n| 海底世界       | 崂山       |基督教堂   |\n| 公主楼       | 花石楼       |八大关   |\n| 中山公园       | 鲁迅公园       |海水浴场   |\n| 劈柴院       | 台东步行街       |春和楼   |\n| 德国风情街       | 奥帆中心       |金沙滩   |\n\n\n### 4.27\n  17:30 下了飞机坐上机场大巴来到了青岛市。\n  18:50 到了青岛站附近，首先映入眼帘的是它↓\n  ![](http://xuncs.cn/qingdao/IMG_20170427_183143.jpg)\n  19:30 放下行李，打车来到了台东步行街，这是老城区的小吃街，汇集了各路精品小吃，不仅有当地特色的烤、煮、炒海鲜，还有长沙臭豆腐，武汉热干面等外地美食。\n\n### 4.28\n  一路ofo+小绿,小哥的腿都要废了。。\n  奥帆中心 => 第三海水浴场 => 八大关（公主楼，花石楼） => 第一海水浴场 => 海底世界\n  => 鲁迅公园 => 小青岛 => 栈桥广场（时间还早就去栈桥）\n\n### 4.29\n  劈柴院 => 斑驳时光 => 青岛书房 => 金沙滩 => 海上嘉年华 => 石油大学\n### 4.30\n  如果前两天都玩完了就去崂山！\n","slug":"五一青岛游","published":1,"updated":"2017-04-30T15:05:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqip000mzlwp02bheuzy","content":"<p>计划个路线先..</p>\n<a id=\"more\"></a>\n<h3 id=\"计划地点\"><a href=\"#计划地点\" class=\"headerlink\" title=\"计划地点\"></a>计划地点</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">地点</th>\n<th style=\"text-align:left\">地点</th>\n<th style=\"text-align:left\">地点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">栈桥</td>\n<td style=\"text-align:left\">青岛书屋</td>\n<td style=\"text-align:left\">五四广场</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">海底世界</td>\n<td style=\"text-align:left\">崂山</td>\n<td style=\"text-align:left\">基督教堂</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">公主楼</td>\n<td style=\"text-align:left\">花石楼</td>\n<td style=\"text-align:left\">八大关</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">中山公园</td>\n<td style=\"text-align:left\">鲁迅公园</td>\n<td style=\"text-align:left\">海水浴场</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">劈柴院</td>\n<td style=\"text-align:left\">台东步行街</td>\n<td style=\"text-align:left\">春和楼</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">德国风情街</td>\n<td style=\"text-align:left\">奥帆中心</td>\n<td style=\"text-align:left\">金沙滩</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-27\"><a href=\"#4-27\" class=\"headerlink\" title=\"4.27\"></a>4.27</h3><p>  17:30 下了飞机坐上机场大巴来到了青岛市。<br>  18:50 到了青岛站附近，首先映入眼帘的是它↓<br>  <img src=\"http://xuncs.cn/qingdao/IMG_20170427_183143.jpg\" alt=\"\"><br>  19:30 放下行李，打车来到了台东步行街，这是老城区的小吃街，汇集了各路精品小吃，不仅有当地特色的烤、煮、炒海鲜，还有长沙臭豆腐，武汉热干面等外地美食。</p>\n<h3 id=\"4-28\"><a href=\"#4-28\" class=\"headerlink\" title=\"4.28\"></a>4.28</h3><p>  一路ofo+小绿,小哥的腿都要废了。。<br>  奥帆中心 =&gt; 第三海水浴场 =&gt; 八大关（公主楼，花石楼） =&gt; 第一海水浴场 =&gt; 海底世界<br>  =&gt; 鲁迅公园 =&gt; 小青岛 =&gt; 栈桥广场（时间还早就去栈桥）</p>\n<h3 id=\"4-29\"><a href=\"#4-29\" class=\"headerlink\" title=\"4.29\"></a>4.29</h3><p>  劈柴院 =&gt; 斑驳时光 =&gt; 青岛书房 =&gt; 金沙滩 =&gt; 海上嘉年华 =&gt; 石油大学</p>\n<h3 id=\"4-30\"><a href=\"#4-30\" class=\"headerlink\" title=\"4.30\"></a>4.30</h3><p>  如果前两天都玩完了就去崂山！</p>\n","excerpt":"<p>计划个路线先..</p>","more":"<h3 id=\"计划地点\"><a href=\"#计划地点\" class=\"headerlink\" title=\"计划地点\"></a>计划地点</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">地点</th>\n<th style=\"text-align:left\">地点</th>\n<th style=\"text-align:left\">地点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">栈桥</td>\n<td style=\"text-align:left\">青岛书屋</td>\n<td style=\"text-align:left\">五四广场</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">海底世界</td>\n<td style=\"text-align:left\">崂山</td>\n<td style=\"text-align:left\">基督教堂</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">公主楼</td>\n<td style=\"text-align:left\">花石楼</td>\n<td style=\"text-align:left\">八大关</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">中山公园</td>\n<td style=\"text-align:left\">鲁迅公园</td>\n<td style=\"text-align:left\">海水浴场</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">劈柴院</td>\n<td style=\"text-align:left\">台东步行街</td>\n<td style=\"text-align:left\">春和楼</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">德国风情街</td>\n<td style=\"text-align:left\">奥帆中心</td>\n<td style=\"text-align:left\">金沙滩</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-27\"><a href=\"#4-27\" class=\"headerlink\" title=\"4.27\"></a>4.27</h3><p>  17:30 下了飞机坐上机场大巴来到了青岛市。<br>  18:50 到了青岛站附近，首先映入眼帘的是它↓<br>  <img src=\"http://xuncs.cn/qingdao/IMG_20170427_183143.jpg\" alt=\"\"><br>  19:30 放下行李，打车来到了台东步行街，这是老城区的小吃街，汇集了各路精品小吃，不仅有当地特色的烤、煮、炒海鲜，还有长沙臭豆腐，武汉热干面等外地美食。</p>\n<h3 id=\"4-28\"><a href=\"#4-28\" class=\"headerlink\" title=\"4.28\"></a>4.28</h3><p>  一路ofo+小绿,小哥的腿都要废了。。<br>  奥帆中心 =&gt; 第三海水浴场 =&gt; 八大关（公主楼，花石楼） =&gt; 第一海水浴场 =&gt; 海底世界<br>  =&gt; 鲁迅公园 =&gt; 小青岛 =&gt; 栈桥广场（时间还早就去栈桥）</p>\n<h3 id=\"4-29\"><a href=\"#4-29\" class=\"headerlink\" title=\"4.29\"></a>4.29</h3><p>  劈柴院 =&gt; 斑驳时光 =&gt; 青岛书房 =&gt; 金沙滩 =&gt; 海上嘉年华 =&gt; 石油大学</p>\n<h3 id=\"4-30\"><a href=\"#4-30\" class=\"headerlink\" title=\"4.30\"></a>4.30</h3><p>  如果前两天都玩完了就去崂山！</p>"},{"title":"translate-koa2","date":"2017-04-03T06:54:21.000Z","_content":"\n边学英语边学koa\n\n<!--more-->\n\n## KOA\n\n### koa\n基于node.js的下一代web框架\n\n### Introduction\nkoa是由Express开发团队设计的新型Web框架，旨在为Web应用和Apis提供更小，更具表现力和更强大基础。通过组合利用generators，可以避免回调嵌套并大大提高处理错误的能力。koa不在核心中捆绑任何中间件，仅仅提供了一套轻量优雅的方法库，使得编写服务更加便捷。\n\n### 安装\nkoa需要 node >= ^7.6.0版本来支持ES2015和async。\n你可以安装node版本控制器来升级到需求版本。\n```\nnpm install n -g\nn 7.6.0\nnpm install koa\nnode my-koa-app.js\n```\n\n### Async与Babel\n要想在node低于^7.6.0的环境，koa中使用Async函数，我们推荐使用[babel's require hook](https://babeljs.io/docs/usage/babel-register/)\n```\nrequire('babel-core/register');\n// require the rest of the app that needs to be transpiled after the hook\nconst app = require('./app');\n```\n为了解析和转换Async函数， 你至少应该有[transform-async-to-generator](http://babeljs.io/docs/plugins/transform-async-to-generator/)或[transform-async-to-module-method](http://babeljs.io/docs/plugins/transform-async-to-module-method/)插件。\n举个例，在你的`.babelrc`文件中，你应该有如下配置:\n```\n{\n  \"plugins\": [\"transform-async-to-generator\"]\n}\n```\n你当然也可以使用[Stage 3 preset](http://babeljs.io/docs/plugins/preset-stage-3/)代替\n> 讲道理干嘛这么麻烦。。不如用node^7.6.0\n\n### Application\nkoa应用是一个包含一系列中间件的对象，这些中间件函数根据request请求按照类似堆栈的方式构成依次执行。Koa类似于其他您可能使用过的中间件系统（如Ruby‘s Rack，Connect等）。然而Koa的核心设计思路是为其他低等级的中间件层提供高级语法糖，以提高其可操作性和稳定性，并使编写中间件变得更便捷。\n\nKoa包含了像content-negotiation(内容协商)、cache freshness（缓存刷新）、proxy support（代理支持）和 redirection（重定向）等常用任务方法。尽管有相当大数量的函数支持，Koa仅仅包含很小一部分，因为Koa没有中间件捆绑。\n\n编写一个 hello world 应用：\n```\nconst Koa = require('koa');\nconst app = new Koa();\n\napp.use(ctx => {\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n### Cascading—级联\nKoa中间件以更传统的方式级联，像你习惯使用的一些类似工具——在过去这使得用户很难友好的使用node频繁回调。然而通过使用Async函数，我们能\"真正\"实现中间件。Connect的实现是简单地通过一系列的函数传递控制权，直到一个函数返回。而Koa则是通调用下一个中间件，然后将控制权逐级返还到上级中间件。\n\n下面的例子将返回 `Hello World`，然而当请求开始时，将先经过x-response-time和logging中间件，记录中间件执行起始时间，然后继续通过response中间件得到控制权。当一个中间件调用 next() 时，该函数暂停并将控制权传递给定义的下一个中间件。当没有更多的下级中间件执行，堆栈将释放，并且将逆序执行每个中间件的代码。\n\n> 原文并未使用箭头函数\n\n  ```\n const Koa = require('koa');\n const app = new Koa();\n\n// x-response-time\n\napp.use(async (ctx, next) => {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n });\n\n // logger\n\n app.use(async (ctx, next) => {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n });\n\n// response\n\napp.use(ctx => {\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n### Settings\n应用配置是实例app的属性，目前支持以下配置：\n  - app.env 默认为NODE_DEV或development\n  - app.proxy 如果为true，则header域将被信任\n  - app.subdomainOffset 默认为2 表示.subdomains所忽略的字符偏移量\n\n### app.listen(...)\n Koa应用并不是一个HTTP服务器的单一映射表现方式。一个或多个Koa应用可以被一起挂载，形成一个具有单一HTTP服务器的较大型的应用。\n\n 创建并返回一个HTTP服务器，将给定的参数传递给Server#listen()。[(参数配置参考)](https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback)\n 以下为创建一个绑定3000端口的简单Koa应用：\n\n  ```\n const Koa = require('koa');\nconst app = new Koa();\napp.listen(3000);\n```\n\napp.listen(...)实际上以下代码的语法糖：\n\n```\nconst http = require('http');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\n```\n\n这意味这你可以同时启动HTTP和HTTPS或多个地址相同的引用程序：\n\n```\nconst http = require('http');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\nhttp.createServer(app.callback().listen(3000));\n```\n\n### app.callback()\n返回一个适用于http。createServer()方法的回调函数来处理请求。你也可以使用这个回调函数将你的Koa应用挂载到 Connect/Express 应用上。\n\n### app.use(function)\n将给定的中间件添加到应用中[(参考Middleware)](https://github.com/koajs/koa/wiki#middleware)\n\n### app.keys =\n设置签名Cookie密钥\n该密钥将会被传递给[KEyGrip](https://github.com/koajs/koa/wiki#middleware)。\n你也可以传递自己生成的KEyGrip实例。如下：\n```\napp.keys = [ 'im a newer secret', 'i like turtle'];\napp.keys = new KeyGrip(['im a newer secret', 'i like turtle'], 'sha256');\n```\n在进行cookie签名时。，这些键只有在设置signed 为 true 时才会使用密钥进行加密：\n```\nthis.cookies.set('name', 'tobi', {signed: true});\n```\n\n### app.context\napp.context是从ctx中创建的原型。你可以通过编辑app.context添加额外的属性到ctx上。这对于添加属性或方法到ctx上在整个应用程序上使用非常有用，这也可能会更为有效（无中间件）并更容易（更少使用require())牺牲更多依赖在ctx上，这可以被视为反模式。\n\n举个例，添加一个数据库引用到ctx:\n```\napp.context.db = db();\napp.use(async (ctx) => {\n  console.log(ctx.db);\n});\n```\n---\nNote：\n - ctx上的许多属性定义时使用了，getters，setters和Object.defineProperty()。你只能编辑这些属性（不推荐）通过使用Object.defineProperty app.context()。[(See more)](https://github.com/koajs/koa/issues/652)\n - 这一段有点晕。。。\n\n### 错误处理\n默认情况下，Koa会讲所有错误日志输出到stderr中，除非 app。silent = true。默认错误处理页不会在 err.status = 404 或 err.expose = true 时输出错误。想要执行自定义错误处理逻辑（例如 centralized logging），你可以添加“error”事件监听器。\n```\napp.on('error', err => {\n  log.error('serrver error', err);\n});\n```\n\n如果在 req／res 周期中出现error，并且不能够影响客户端时，Context实例也会被传递到error事件监听器的回调函数中：\n```\napp.on('error', (err, ctx) => {\n  log.error('server error', err, ctx);\n});\n```\n\n当发生错误并且仍然可以响应客户端时，例如没有数据被写入到socker中时，Koa将返回一个 500／服务器内部错误。\n无论哪种情况，Koa都会生成一个应用级别的错误，来实现日志记录。\n\n## Context\nKoa Context将node的request和response对象封装到一个单独的对象中，为编写web应用和API提供了很多有用的方法。这些操作在开发HTTP服务器中经常被使用，因此被添加在context这一层级总而不是更高层级的框架中，这将迫使中间件需要重新实现这些公共的方法。\nContext 根据每个request创建，并在中间件中作为接收器（receiver ）或通过 ctx 标识符来引用\n如下代码展示：\n```\napp.use(async (ctx, next) => {\n  ctx; // is the Context\n  ctx.request; // is a koa Request\n  ctx.response; // is a koa Response\n})\n```\n许多Context的访问器和方法为了方便起见，简单地委托给ctx.request和ctx.response 所对应的等价方法。\n举个例子，ctx.type和ctx.length 代理了 response对象中对应的方法， ctx.path和ctx.method代理了 resquest 对象中对应的方法。\n\n### API\nContext 具体的方法和访问器。\n\n### ctx.req\nNode的request对象\n\n### ctx.res\nNode的response对象\n\nKoa不支持直接调用底层response处理。请避免使用以下Node属性：\n  - res.statusCode\n  - res.writeHead()\n  - res.write()\n  - res.end()\n\n### ctx.request\nKoa 的 Request 对象。\n\n### ctx.response\nKoa 的 Response 对象。\n\n### ctx.state\n自定义命名空间，用于将信息从中间件传递到前端视图层\n```\nctx.state.user = await User.find(id);\n```\n\n### ctx.app\n应用实例引用。\n\n### ctx.cookies.get(name, [options])\n获取 cookie 中 name 的值 options为可选参数。\n  - signed：对cookie请求时需要设置签名。\n\nKoa 使用 [cookies模块](https://github.com/pillarjs/cookies),options参数只是简单地直接传递。\n\n### ctx.cookies.set(name, value, [options])\n设置 cookie 中 name值， options为可选参数。\n  - maxAge: 表示 Date.now() 到期的毫米数， number.\n  - signed: Cookie 签名\n  - expires: Cookie有效时间\n  - path: Cookie路径，默认为`/'`\n  - domain: Cookie的域\n  - secure: Cookie安全协议 false表示Cookie通过HTTP协议传送，true表示Cookie通过HTTPS协议传送。\n  - httpOnly: 服务器可访问的Cookie 默认为true\n  - overwrite: 一个布尔值，表示是否覆盖重写以前设置的同名的Cookie（默认为false）如果为true，在设置这个新Cookie时，将在同一个请求中设置所有相同名称的Cookie（不论路径或域）并从Set-Cookie头部中过滤掉。\n\nKoa 使用 [cookies模块](https://github.com/pillarjs/cookies),options参数只是简单地直接传递。\n\n### ctx.throw([msg], [status], [properties])\nHelper方法抛出一个.status属性默认为500的错误。该方法允许Koa准确的响应处理状态。\nKoa允许以下组合：\n```\nctx.throw(403);\nctx.throw('name required', 400);\nctx.throw(400, 'name required');\nctx.throw('something exploded');\n```\n举个例子 `ctx.throw('name required', 400)`等价于：\n```\nconst err = new Error('name required');\nerr.status = 400;\nerr.expose = true;\nthrow err;\n```\n请注意，这些是用户级错误，并会被标记为err.expose,这意味着消息会被准确描述为对客户端的响应，而并非使用在您不想泄漏失败细节的情景中。\n\n你可以根据需要将合并后的属性对象船钓错误中去，这对于向上级中间件请求的友好的机器化错误有着很好的装饰作用\n```\nctx.throw(401, 'access_denied', { user: user });\nctx.throw('access_denied', { user: user });\n```\nKoa 使用[http-errors](https://github.com/jshttp/http-errors)来创建错误。\n\n### ctx.assert(value, [status], [msg], [properties])\n当 !value时，Helper方法抛出类似于.throw()的错误。\n相当于node中的[assert](https://nodejs.org/api/assert.html)方法\n```\nctx.assert(ctx.state.user, 401, 'User not found. Please login!');\n```\nKoa 使用[http-assert](https://github.com/jshttp/http-assert)判断\n\n### ctx.respond\n为了避免Koa的内置响应处理，你可以直接设置 ctx.respond = false;\n如果你想使用原生的res对象代替Koa操作response，那么请使用这种方法。\n\n请注意，Koa并不支持这种使用方式，因为这有可能破坏Koa中间件和Koa本身的一些功能。\n这只能作为一种hack的方式，并只对希望在Koa的函数和中间件中使用传统的fn(req, res)的人带来便捷。\n\n### Request aliases\n以下的访问器别名与 [Request](#Request) 等价：\n```\nctx.header\nctx.headers\nctx.method\nctx.method=\nctx.url\nctx.url=\nctx.originalUrl\nctx.originalUrlctx.href\nctx.path\nctx.path=\nctx.query\nctx.query=\nctx.querystring\nctx.querystring=\nctx.host\nctx.hostname\nctx.fresh\nctx.stale\nctx.socket\nctx.protocol\nctx.secure\nctx.ip\nctx.ips\nctx.subdomains\nctx.is()\nctx.accepts()\nctx.acceptsEncodings()\nctx.acceptsLanguages()\nctx.get()\n```\n\n### Response aliases\n以下访问器别名与 [Response](#response)等价:\n```\nctx.body\nctx.body=\nctx.status\nctx.status=\nctx.message\nctx.message=\nctx.length\nctx.length=\nctx.type\nctx.type=\nctx.headerSent\nctx.rdirect()\nctx.attachment()\nctx.set()\nctx.append()\nctx.remove()\nctx.lastModified=\nctx.etag=\n```\n\n## <span id=\"request\">Request</span>\nKoa的Request对象是对node的Request对象进一步抽象，封装。\n提供了对日常HTTP服务器开发有用的一些功能函数\n\n### API\n\n#### request.header\n请求头对象\n\n#### request.headers\n请求头对象的别名\n\n#### request.method\n请求方法\n\n#### request.method=\n设置请求方法，在实现中间件时有很大作用，例如methodOverride()\n\n#### request.length\n以数字的形式返回request的内容长度(Content-lenght),或者返回undefined\n\n#### request.url\n获取请求url地址\n\n#### request.url=\n设置请求地址，用于重写url\n\n#### request.originalUrl\n获取请求原始url\n\n#### request.origin\n获取url来源，包括protocol和host\n```\nctx.request.origin\n// => http://example.com\n```\n\n#### request.href\n获取请求完整的URL，包括protpcol，host和url\n```\nctx.request.href\n// => http://example.com/foo/bar?q=1\n```\n\n#### request.path\n获取请求路径名。\n\n#### request.path=\n设置请求路径名，并保存'?'后面的部分（请求参数）\n\n#### request.querystring\n获取请求的查询参数(url中?后边的部分)不包含？\n\n#### request.querystring=\n设置查询参数\n\n#### request.search\n获取请求的查询参数，包含?\n\n#### request.search=\n设置请求的查询参数。\n\n#### request.host\n获取当前host(hostname: port) 当 app.proxy = true 时, 支持X-Forwarded-Host。\n\n#### request.hostname\n获取hostname，当 app.proxy = ture 时, 支持X-Forwarded-Host.\n\n#### request.type\n获取当前请求的 Conetent-Type 不包含如`charset`这样的参数。\n```\nconst ct = ctx.request.type\n// => \"image/png\"\n```\n\n#### request.charset\n获取当前请求的 charset 没有则返回undefined\n```\nctx.request.charset\n// => \"utf-8\"\n```\n\n#### request.query\n获取解析后的查询字符串，当请求中没有查询字符串时则返回一个空对象。\n请注意，这个方法不支持嵌套对象。\n例如：`color=blue&size=small`\n```\n{\n  color: 'blue',\n  size: 'small'\n}\n```\n\n#### request.query=\n根据给定的对象设置查询字符串。\n请注意，这个方法不支持嵌套对象。\n```\nctx.query = {next: '/login'}\n```\n\n#### request.fresh\n\n\n## <span id=\"response\">Response</span>\n","source":"_posts/translate-koa2.md","raw":"---\ntitle: translate-koa2\ndate: 2017-04-03 14:54:21\ntags:\n  - javascript\n  - node\n  - koa2\n---\n\n边学英语边学koa\n\n<!--more-->\n\n## KOA\n\n### koa\n基于node.js的下一代web框架\n\n### Introduction\nkoa是由Express开发团队设计的新型Web框架，旨在为Web应用和Apis提供更小，更具表现力和更强大基础。通过组合利用generators，可以避免回调嵌套并大大提高处理错误的能力。koa不在核心中捆绑任何中间件，仅仅提供了一套轻量优雅的方法库，使得编写服务更加便捷。\n\n### 安装\nkoa需要 node >= ^7.6.0版本来支持ES2015和async。\n你可以安装node版本控制器来升级到需求版本。\n```\nnpm install n -g\nn 7.6.0\nnpm install koa\nnode my-koa-app.js\n```\n\n### Async与Babel\n要想在node低于^7.6.0的环境，koa中使用Async函数，我们推荐使用[babel's require hook](https://babeljs.io/docs/usage/babel-register/)\n```\nrequire('babel-core/register');\n// require the rest of the app that needs to be transpiled after the hook\nconst app = require('./app');\n```\n为了解析和转换Async函数， 你至少应该有[transform-async-to-generator](http://babeljs.io/docs/plugins/transform-async-to-generator/)或[transform-async-to-module-method](http://babeljs.io/docs/plugins/transform-async-to-module-method/)插件。\n举个例，在你的`.babelrc`文件中，你应该有如下配置:\n```\n{\n  \"plugins\": [\"transform-async-to-generator\"]\n}\n```\n你当然也可以使用[Stage 3 preset](http://babeljs.io/docs/plugins/preset-stage-3/)代替\n> 讲道理干嘛这么麻烦。。不如用node^7.6.0\n\n### Application\nkoa应用是一个包含一系列中间件的对象，这些中间件函数根据request请求按照类似堆栈的方式构成依次执行。Koa类似于其他您可能使用过的中间件系统（如Ruby‘s Rack，Connect等）。然而Koa的核心设计思路是为其他低等级的中间件层提供高级语法糖，以提高其可操作性和稳定性，并使编写中间件变得更便捷。\n\nKoa包含了像content-negotiation(内容协商)、cache freshness（缓存刷新）、proxy support（代理支持）和 redirection（重定向）等常用任务方法。尽管有相当大数量的函数支持，Koa仅仅包含很小一部分，因为Koa没有中间件捆绑。\n\n编写一个 hello world 应用：\n```\nconst Koa = require('koa');\nconst app = new Koa();\n\napp.use(ctx => {\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n### Cascading—级联\nKoa中间件以更传统的方式级联，像你习惯使用的一些类似工具——在过去这使得用户很难友好的使用node频繁回调。然而通过使用Async函数，我们能\"真正\"实现中间件。Connect的实现是简单地通过一系列的函数传递控制权，直到一个函数返回。而Koa则是通调用下一个中间件，然后将控制权逐级返还到上级中间件。\n\n下面的例子将返回 `Hello World`，然而当请求开始时，将先经过x-response-time和logging中间件，记录中间件执行起始时间，然后继续通过response中间件得到控制权。当一个中间件调用 next() 时，该函数暂停并将控制权传递给定义的下一个中间件。当没有更多的下级中间件执行，堆栈将释放，并且将逆序执行每个中间件的代码。\n\n> 原文并未使用箭头函数\n\n  ```\n const Koa = require('koa');\n const app = new Koa();\n\n// x-response-time\n\napp.use(async (ctx, next) => {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n });\n\n // logger\n\n app.use(async (ctx, next) => {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n });\n\n// response\n\napp.use(ctx => {\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n### Settings\n应用配置是实例app的属性，目前支持以下配置：\n  - app.env 默认为NODE_DEV或development\n  - app.proxy 如果为true，则header域将被信任\n  - app.subdomainOffset 默认为2 表示.subdomains所忽略的字符偏移量\n\n### app.listen(...)\n Koa应用并不是一个HTTP服务器的单一映射表现方式。一个或多个Koa应用可以被一起挂载，形成一个具有单一HTTP服务器的较大型的应用。\n\n 创建并返回一个HTTP服务器，将给定的参数传递给Server#listen()。[(参数配置参考)](https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback)\n 以下为创建一个绑定3000端口的简单Koa应用：\n\n  ```\n const Koa = require('koa');\nconst app = new Koa();\napp.listen(3000);\n```\n\napp.listen(...)实际上以下代码的语法糖：\n\n```\nconst http = require('http');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\n```\n\n这意味这你可以同时启动HTTP和HTTPS或多个地址相同的引用程序：\n\n```\nconst http = require('http');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\nhttp.createServer(app.callback().listen(3000));\n```\n\n### app.callback()\n返回一个适用于http。createServer()方法的回调函数来处理请求。你也可以使用这个回调函数将你的Koa应用挂载到 Connect/Express 应用上。\n\n### app.use(function)\n将给定的中间件添加到应用中[(参考Middleware)](https://github.com/koajs/koa/wiki#middleware)\n\n### app.keys =\n设置签名Cookie密钥\n该密钥将会被传递给[KEyGrip](https://github.com/koajs/koa/wiki#middleware)。\n你也可以传递自己生成的KEyGrip实例。如下：\n```\napp.keys = [ 'im a newer secret', 'i like turtle'];\napp.keys = new KeyGrip(['im a newer secret', 'i like turtle'], 'sha256');\n```\n在进行cookie签名时。，这些键只有在设置signed 为 true 时才会使用密钥进行加密：\n```\nthis.cookies.set('name', 'tobi', {signed: true});\n```\n\n### app.context\napp.context是从ctx中创建的原型。你可以通过编辑app.context添加额外的属性到ctx上。这对于添加属性或方法到ctx上在整个应用程序上使用非常有用，这也可能会更为有效（无中间件）并更容易（更少使用require())牺牲更多依赖在ctx上，这可以被视为反模式。\n\n举个例，添加一个数据库引用到ctx:\n```\napp.context.db = db();\napp.use(async (ctx) => {\n  console.log(ctx.db);\n});\n```\n---\nNote：\n - ctx上的许多属性定义时使用了，getters，setters和Object.defineProperty()。你只能编辑这些属性（不推荐）通过使用Object.defineProperty app.context()。[(See more)](https://github.com/koajs/koa/issues/652)\n - 这一段有点晕。。。\n\n### 错误处理\n默认情况下，Koa会讲所有错误日志输出到stderr中，除非 app。silent = true。默认错误处理页不会在 err.status = 404 或 err.expose = true 时输出错误。想要执行自定义错误处理逻辑（例如 centralized logging），你可以添加“error”事件监听器。\n```\napp.on('error', err => {\n  log.error('serrver error', err);\n});\n```\n\n如果在 req／res 周期中出现error，并且不能够影响客户端时，Context实例也会被传递到error事件监听器的回调函数中：\n```\napp.on('error', (err, ctx) => {\n  log.error('server error', err, ctx);\n});\n```\n\n当发生错误并且仍然可以响应客户端时，例如没有数据被写入到socker中时，Koa将返回一个 500／服务器内部错误。\n无论哪种情况，Koa都会生成一个应用级别的错误，来实现日志记录。\n\n## Context\nKoa Context将node的request和response对象封装到一个单独的对象中，为编写web应用和API提供了很多有用的方法。这些操作在开发HTTP服务器中经常被使用，因此被添加在context这一层级总而不是更高层级的框架中，这将迫使中间件需要重新实现这些公共的方法。\nContext 根据每个request创建，并在中间件中作为接收器（receiver ）或通过 ctx 标识符来引用\n如下代码展示：\n```\napp.use(async (ctx, next) => {\n  ctx; // is the Context\n  ctx.request; // is a koa Request\n  ctx.response; // is a koa Response\n})\n```\n许多Context的访问器和方法为了方便起见，简单地委托给ctx.request和ctx.response 所对应的等价方法。\n举个例子，ctx.type和ctx.length 代理了 response对象中对应的方法， ctx.path和ctx.method代理了 resquest 对象中对应的方法。\n\n### API\nContext 具体的方法和访问器。\n\n### ctx.req\nNode的request对象\n\n### ctx.res\nNode的response对象\n\nKoa不支持直接调用底层response处理。请避免使用以下Node属性：\n  - res.statusCode\n  - res.writeHead()\n  - res.write()\n  - res.end()\n\n### ctx.request\nKoa 的 Request 对象。\n\n### ctx.response\nKoa 的 Response 对象。\n\n### ctx.state\n自定义命名空间，用于将信息从中间件传递到前端视图层\n```\nctx.state.user = await User.find(id);\n```\n\n### ctx.app\n应用实例引用。\n\n### ctx.cookies.get(name, [options])\n获取 cookie 中 name 的值 options为可选参数。\n  - signed：对cookie请求时需要设置签名。\n\nKoa 使用 [cookies模块](https://github.com/pillarjs/cookies),options参数只是简单地直接传递。\n\n### ctx.cookies.set(name, value, [options])\n设置 cookie 中 name值， options为可选参数。\n  - maxAge: 表示 Date.now() 到期的毫米数， number.\n  - signed: Cookie 签名\n  - expires: Cookie有效时间\n  - path: Cookie路径，默认为`/'`\n  - domain: Cookie的域\n  - secure: Cookie安全协议 false表示Cookie通过HTTP协议传送，true表示Cookie通过HTTPS协议传送。\n  - httpOnly: 服务器可访问的Cookie 默认为true\n  - overwrite: 一个布尔值，表示是否覆盖重写以前设置的同名的Cookie（默认为false）如果为true，在设置这个新Cookie时，将在同一个请求中设置所有相同名称的Cookie（不论路径或域）并从Set-Cookie头部中过滤掉。\n\nKoa 使用 [cookies模块](https://github.com/pillarjs/cookies),options参数只是简单地直接传递。\n\n### ctx.throw([msg], [status], [properties])\nHelper方法抛出一个.status属性默认为500的错误。该方法允许Koa准确的响应处理状态。\nKoa允许以下组合：\n```\nctx.throw(403);\nctx.throw('name required', 400);\nctx.throw(400, 'name required');\nctx.throw('something exploded');\n```\n举个例子 `ctx.throw('name required', 400)`等价于：\n```\nconst err = new Error('name required');\nerr.status = 400;\nerr.expose = true;\nthrow err;\n```\n请注意，这些是用户级错误，并会被标记为err.expose,这意味着消息会被准确描述为对客户端的响应，而并非使用在您不想泄漏失败细节的情景中。\n\n你可以根据需要将合并后的属性对象船钓错误中去，这对于向上级中间件请求的友好的机器化错误有着很好的装饰作用\n```\nctx.throw(401, 'access_denied', { user: user });\nctx.throw('access_denied', { user: user });\n```\nKoa 使用[http-errors](https://github.com/jshttp/http-errors)来创建错误。\n\n### ctx.assert(value, [status], [msg], [properties])\n当 !value时，Helper方法抛出类似于.throw()的错误。\n相当于node中的[assert](https://nodejs.org/api/assert.html)方法\n```\nctx.assert(ctx.state.user, 401, 'User not found. Please login!');\n```\nKoa 使用[http-assert](https://github.com/jshttp/http-assert)判断\n\n### ctx.respond\n为了避免Koa的内置响应处理，你可以直接设置 ctx.respond = false;\n如果你想使用原生的res对象代替Koa操作response，那么请使用这种方法。\n\n请注意，Koa并不支持这种使用方式，因为这有可能破坏Koa中间件和Koa本身的一些功能。\n这只能作为一种hack的方式，并只对希望在Koa的函数和中间件中使用传统的fn(req, res)的人带来便捷。\n\n### Request aliases\n以下的访问器别名与 [Request](#Request) 等价：\n```\nctx.header\nctx.headers\nctx.method\nctx.method=\nctx.url\nctx.url=\nctx.originalUrl\nctx.originalUrlctx.href\nctx.path\nctx.path=\nctx.query\nctx.query=\nctx.querystring\nctx.querystring=\nctx.host\nctx.hostname\nctx.fresh\nctx.stale\nctx.socket\nctx.protocol\nctx.secure\nctx.ip\nctx.ips\nctx.subdomains\nctx.is()\nctx.accepts()\nctx.acceptsEncodings()\nctx.acceptsLanguages()\nctx.get()\n```\n\n### Response aliases\n以下访问器别名与 [Response](#response)等价:\n```\nctx.body\nctx.body=\nctx.status\nctx.status=\nctx.message\nctx.message=\nctx.length\nctx.length=\nctx.type\nctx.type=\nctx.headerSent\nctx.rdirect()\nctx.attachment()\nctx.set()\nctx.append()\nctx.remove()\nctx.lastModified=\nctx.etag=\n```\n\n## <span id=\"request\">Request</span>\nKoa的Request对象是对node的Request对象进一步抽象，封装。\n提供了对日常HTTP服务器开发有用的一些功能函数\n\n### API\n\n#### request.header\n请求头对象\n\n#### request.headers\n请求头对象的别名\n\n#### request.method\n请求方法\n\n#### request.method=\n设置请求方法，在实现中间件时有很大作用，例如methodOverride()\n\n#### request.length\n以数字的形式返回request的内容长度(Content-lenght),或者返回undefined\n\n#### request.url\n获取请求url地址\n\n#### request.url=\n设置请求地址，用于重写url\n\n#### request.originalUrl\n获取请求原始url\n\n#### request.origin\n获取url来源，包括protocol和host\n```\nctx.request.origin\n// => http://example.com\n```\n\n#### request.href\n获取请求完整的URL，包括protpcol，host和url\n```\nctx.request.href\n// => http://example.com/foo/bar?q=1\n```\n\n#### request.path\n获取请求路径名。\n\n#### request.path=\n设置请求路径名，并保存'?'后面的部分（请求参数）\n\n#### request.querystring\n获取请求的查询参数(url中?后边的部分)不包含？\n\n#### request.querystring=\n设置查询参数\n\n#### request.search\n获取请求的查询参数，包含?\n\n#### request.search=\n设置请求的查询参数。\n\n#### request.host\n获取当前host(hostname: port) 当 app.proxy = true 时, 支持X-Forwarded-Host。\n\n#### request.hostname\n获取hostname，当 app.proxy = ture 时, 支持X-Forwarded-Host.\n\n#### request.type\n获取当前请求的 Conetent-Type 不包含如`charset`这样的参数。\n```\nconst ct = ctx.request.type\n// => \"image/png\"\n```\n\n#### request.charset\n获取当前请求的 charset 没有则返回undefined\n```\nctx.request.charset\n// => \"utf-8\"\n```\n\n#### request.query\n获取解析后的查询字符串，当请求中没有查询字符串时则返回一个空对象。\n请注意，这个方法不支持嵌套对象。\n例如：`color=blue&size=small`\n```\n{\n  color: 'blue',\n  size: 'small'\n}\n```\n\n#### request.query=\n根据给定的对象设置查询字符串。\n请注意，这个方法不支持嵌套对象。\n```\nctx.query = {next: '/login'}\n```\n\n#### request.fresh\n\n\n## <span id=\"response\">Response</span>\n","slug":"translate-koa2","published":1,"updated":"2017-04-04T11:46:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqiy000ozlwpn5sljyl7","content":"<p>边学英语边学koa</p>\n<a id=\"more\"></a>\n<h2 id=\"KOA\"><a href=\"#KOA\" class=\"headerlink\" title=\"KOA\"></a>KOA</h2><h3 id=\"koa\"><a href=\"#koa\" class=\"headerlink\" title=\"koa\"></a>koa</h3><p>基于node.js的下一代web框架</p>\n<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>koa是由Express开发团队设计的新型Web框架，旨在为Web应用和Apis提供更小，更具表现力和更强大基础。通过组合利用generators，可以避免回调嵌套并大大提高处理错误的能力。koa不在核心中捆绑任何中间件，仅仅提供了一套轻量优雅的方法库，使得编写服务更加便捷。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>koa需要 node &gt;= ^7.6.0版本来支持ES2015和async。<br>你可以安装node版本控制器来升级到需求版本。</p>\n<pre><code>npm install n -g\nn 7.6.0\nnpm install koa\nnode my-koa-app.js\n</code></pre><h3 id=\"Async与Babel\"><a href=\"#Async与Babel\" class=\"headerlink\" title=\"Async与Babel\"></a>Async与Babel</h3><p>要想在node低于^7.6.0的环境，koa中使用Async函数，我们推荐使用<a href=\"https://babeljs.io/docs/usage/babel-register/\" target=\"_blank\" rel=\"external\">babel’s require hook</a></p>\n<pre><code>require(&#39;babel-core/register&#39;);\n// require the rest of the app that needs to be transpiled after the hook\nconst app = require(&#39;./app&#39;);\n</code></pre><p>为了解析和转换Async函数， 你至少应该有<a href=\"http://babeljs.io/docs/plugins/transform-async-to-generator/\" target=\"_blank\" rel=\"external\">transform-async-to-generator</a>或<a href=\"http://babeljs.io/docs/plugins/transform-async-to-module-method/\" target=\"_blank\" rel=\"external\">transform-async-to-module-method</a>插件。<br>举个例，在你的<code>.babelrc</code>文件中，你应该有如下配置:</p>\n<pre><code>{\n  &quot;plugins&quot;: [&quot;transform-async-to-generator&quot;]\n}\n</code></pre><p>你当然也可以使用<a href=\"http://babeljs.io/docs/plugins/preset-stage-3/\" target=\"_blank\" rel=\"external\">Stage 3 preset</a>代替</p>\n<blockquote>\n<p>讲道理干嘛这么麻烦。。不如用node^7.6.0</p>\n</blockquote>\n<h3 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h3><p>koa应用是一个包含一系列中间件的对象，这些中间件函数根据request请求按照类似堆栈的方式构成依次执行。Koa类似于其他您可能使用过的中间件系统（如Ruby‘s Rack，Connect等）。然而Koa的核心设计思路是为其他低等级的中间件层提供高级语法糖，以提高其可操作性和稳定性，并使编写中间件变得更便捷。</p>\n<p>Koa包含了像content-negotiation(内容协商)、cache freshness（缓存刷新）、proxy support（代理支持）和 redirection（重定向）等常用任务方法。尽管有相当大数量的函数支持，Koa仅仅包含很小一部分，因为Koa没有中间件捆绑。</p>\n<p>编写一个 hello world 应用：</p>\n<pre><code>const Koa = require(&#39;koa&#39;);\nconst app = new Koa();\n\napp.use(ctx =&gt; {\n  ctx.body = &#39;Hello World&#39;;\n});\n\napp.listen(3000);\n</code></pre><h3 id=\"Cascading—级联\"><a href=\"#Cascading—级联\" class=\"headerlink\" title=\"Cascading—级联\"></a>Cascading—级联</h3><p>Koa中间件以更传统的方式级联，像你习惯使用的一些类似工具——在过去这使得用户很难友好的使用node频繁回调。然而通过使用Async函数，我们能”真正”实现中间件。Connect的实现是简单地通过一系列的函数传递控制权，直到一个函数返回。而Koa则是通调用下一个中间件，然后将控制权逐级返还到上级中间件。</p>\n<p>下面的例子将返回 <code>Hello World</code>，然而当请求开始时，将先经过x-response-time和logging中间件，记录中间件执行起始时间，然后继续通过response中间件得到控制权。当一个中间件调用 next() 时，该函数暂停并将控制权传递给定义的下一个中间件。当没有更多的下级中间件执行，堆栈将释放，并且将逆序执行每个中间件的代码。</p>\n<blockquote>\n<p>原文并未使用箭头函数</p>\n</blockquote>\n<pre><code> const Koa = require(&#39;koa&#39;);\n const app = new Koa();\n\n// x-response-time\n\napp.use(async (ctx, next) =&gt; {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  ctx.set(&#39;X-Response-Time&#39;, `${ms}ms`);\n });\n\n // logger\n\n app.use(async (ctx, next) =&gt; {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n });\n\n// response\n\napp.use(ctx =&gt; {\n  ctx.body = &#39;Hello World&#39;;\n});\n\napp.listen(3000);\n</code></pre><h3 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h3><p>应用配置是实例app的属性，目前支持以下配置：</p>\n<ul>\n<li>app.env 默认为NODE_DEV或development</li>\n<li>app.proxy 如果为true，则header域将被信任</li>\n<li>app.subdomainOffset 默认为2 表示.subdomains所忽略的字符偏移量</li>\n</ul>\n<h3 id=\"app-listen-…\"><a href=\"#app-listen-…\" class=\"headerlink\" title=\"app.listen(…)\"></a>app.listen(…)</h3><p> Koa应用并不是一个HTTP服务器的单一映射表现方式。一个或多个Koa应用可以被一起挂载，形成一个具有单一HTTP服务器的较大型的应用。</p>\n<p> 创建并返回一个HTTP服务器，将给定的参数传递给Server#listen()。<a href=\"https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback\" target=\"_blank\" rel=\"external\">(参数配置参考)</a><br> 以下为创建一个绑定3000端口的简单Koa应用：</p>\n<pre><code> const Koa = require(&#39;koa&#39;);\nconst app = new Koa();\napp.listen(3000);\n</code></pre><p>app.listen(…)实际上以下代码的语法糖：</p>\n<pre><code>const http = require(&#39;http&#39;);\nconst Koa = require(&#39;koa&#39;);\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\n</code></pre><p>这意味这你可以同时启动HTTP和HTTPS或多个地址相同的引用程序：</p>\n<pre><code>const http = require(&#39;http&#39;);\nconst Koa = require(&#39;koa&#39;);\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\nhttp.createServer(app.callback().listen(3000));\n</code></pre><h3 id=\"app-callback\"><a href=\"#app-callback\" class=\"headerlink\" title=\"app.callback()\"></a>app.callback()</h3><p>返回一个适用于http。createServer()方法的回调函数来处理请求。你也可以使用这个回调函数将你的Koa应用挂载到 Connect/Express 应用上。</p>\n<h3 id=\"app-use-function\"><a href=\"#app-use-function\" class=\"headerlink\" title=\"app.use(function)\"></a>app.use(function)</h3><p>将给定的中间件添加到应用中<a href=\"https://github.com/koajs/koa/wiki#middleware\" target=\"_blank\" rel=\"external\">(参考Middleware)</a></p>\n<h3 id=\"app-keys\"><a href=\"#app-keys\" class=\"headerlink\" title=\"app.keys =\"></a>app.keys =</h3><p>设置签名Cookie密钥<br>该密钥将会被传递给<a href=\"https://github.com/koajs/koa/wiki#middleware\" target=\"_blank\" rel=\"external\">KEyGrip</a>。<br>你也可以传递自己生成的KEyGrip实例。如下：</p>\n<pre><code>app.keys = [ &#39;im a newer secret&#39;, &#39;i like turtle&#39;];\napp.keys = new KeyGrip([&#39;im a newer secret&#39;, &#39;i like turtle&#39;], &#39;sha256&#39;);\n</code></pre><p>在进行cookie签名时。，这些键只有在设置signed 为 true 时才会使用密钥进行加密：</p>\n<pre><code>this.cookies.set(&#39;name&#39;, &#39;tobi&#39;, {signed: true});\n</code></pre><h3 id=\"app-context\"><a href=\"#app-context\" class=\"headerlink\" title=\"app.context\"></a>app.context</h3><p>app.context是从ctx中创建的原型。你可以通过编辑app.context添加额外的属性到ctx上。这对于添加属性或方法到ctx上在整个应用程序上使用非常有用，这也可能会更为有效（无中间件）并更容易（更少使用require())牺牲更多依赖在ctx上，这可以被视为反模式。</p>\n<p>举个例，添加一个数据库引用到ctx:</p>\n<pre><code>app.context.db = db();\napp.use(async (ctx) =&gt; {\n  console.log(ctx.db);\n});\n</code></pre><hr>\n<p>Note：</p>\n<ul>\n<li>ctx上的许多属性定义时使用了，getters，setters和Object.defineProperty()。你只能编辑这些属性（不推荐）通过使用Object.defineProperty app.context()。<a href=\"https://github.com/koajs/koa/issues/652\" target=\"_blank\" rel=\"external\">(See more)</a></li>\n<li>这一段有点晕。。。</li>\n</ul>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>默认情况下，Koa会讲所有错误日志输出到stderr中，除非 app。silent = true。默认错误处理页不会在 err.status = 404 或 err.expose = true 时输出错误。想要执行自定义错误处理逻辑（例如 centralized logging），你可以添加“error”事件监听器。</p>\n<pre><code>app.on(&#39;error&#39;, err =&gt; {\n  log.error(&#39;serrver error&#39;, err);\n});\n</code></pre><p>如果在 req／res 周期中出现error，并且不能够影响客户端时，Context实例也会被传递到error事件监听器的回调函数中：</p>\n<pre><code>app.on(&#39;error&#39;, (err, ctx) =&gt; {\n  log.error(&#39;server error&#39;, err, ctx);\n});\n</code></pre><p>当发生错误并且仍然可以响应客户端时，例如没有数据被写入到socker中时，Koa将返回一个 500／服务器内部错误。<br>无论哪种情况，Koa都会生成一个应用级别的错误，来实现日志记录。</p>\n<h2 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h2><p>Koa Context将node的request和response对象封装到一个单独的对象中，为编写web应用和API提供了很多有用的方法。这些操作在开发HTTP服务器中经常被使用，因此被添加在context这一层级总而不是更高层级的框架中，这将迫使中间件需要重新实现这些公共的方法。<br>Context 根据每个request创建，并在中间件中作为接收器（receiver ）或通过 ctx 标识符来引用<br>如下代码展示：</p>\n<pre><code>app.use(async (ctx, next) =&gt; {\n  ctx; // is the Context\n  ctx.request; // is a koa Request\n  ctx.response; // is a koa Response\n})\n</code></pre><p>许多Context的访问器和方法为了方便起见，简单地委托给ctx.request和ctx.response 所对应的等价方法。<br>举个例子，ctx.type和ctx.length 代理了 response对象中对应的方法， ctx.path和ctx.method代理了 resquest 对象中对应的方法。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Context 具体的方法和访问器。</p>\n<h3 id=\"ctx-req\"><a href=\"#ctx-req\" class=\"headerlink\" title=\"ctx.req\"></a>ctx.req</h3><p>Node的request对象</p>\n<h3 id=\"ctx-res\"><a href=\"#ctx-res\" class=\"headerlink\" title=\"ctx.res\"></a>ctx.res</h3><p>Node的response对象</p>\n<p>Koa不支持直接调用底层response处理。请避免使用以下Node属性：</p>\n<ul>\n<li>res.statusCode</li>\n<li>res.writeHead()</li>\n<li>res.write()</li>\n<li>res.end()</li>\n</ul>\n<h3 id=\"ctx-request\"><a href=\"#ctx-request\" class=\"headerlink\" title=\"ctx.request\"></a>ctx.request</h3><p>Koa 的 Request 对象。</p>\n<h3 id=\"ctx-response\"><a href=\"#ctx-response\" class=\"headerlink\" title=\"ctx.response\"></a>ctx.response</h3><p>Koa 的 Response 对象。</p>\n<h3 id=\"ctx-state\"><a href=\"#ctx-state\" class=\"headerlink\" title=\"ctx.state\"></a>ctx.state</h3><p>自定义命名空间，用于将信息从中间件传递到前端视图层</p>\n<pre><code>ctx.state.user = await User.find(id);\n</code></pre><h3 id=\"ctx-app\"><a href=\"#ctx-app\" class=\"headerlink\" title=\"ctx.app\"></a>ctx.app</h3><p>应用实例引用。</p>\n<h3 id=\"ctx-cookies-get-name-options\"><a href=\"#ctx-cookies-get-name-options\" class=\"headerlink\" title=\"ctx.cookies.get(name, [options])\"></a>ctx.cookies.get(name, [options])</h3><p>获取 cookie 中 name 的值 options为可选参数。</p>\n<ul>\n<li>signed：对cookie请求时需要设置签名。</li>\n</ul>\n<p>Koa 使用 <a href=\"https://github.com/pillarjs/cookies\" target=\"_blank\" rel=\"external\">cookies模块</a>,options参数只是简单地直接传递。</p>\n<h3 id=\"ctx-cookies-set-name-value-options\"><a href=\"#ctx-cookies-set-name-value-options\" class=\"headerlink\" title=\"ctx.cookies.set(name, value, [options])\"></a>ctx.cookies.set(name, value, [options])</h3><p>设置 cookie 中 name值， options为可选参数。</p>\n<ul>\n<li>maxAge: 表示 Date.now() 到期的毫米数， number.</li>\n<li>signed: Cookie 签名</li>\n<li>expires: Cookie有效时间</li>\n<li>path: Cookie路径，默认为<code>/&#39;</code></li>\n<li>domain: Cookie的域</li>\n<li>secure: Cookie安全协议 false表示Cookie通过HTTP协议传送，true表示Cookie通过HTTPS协议传送。</li>\n<li>httpOnly: 服务器可访问的Cookie 默认为true</li>\n<li>overwrite: 一个布尔值，表示是否覆盖重写以前设置的同名的Cookie（默认为false）如果为true，在设置这个新Cookie时，将在同一个请求中设置所有相同名称的Cookie（不论路径或域）并从Set-Cookie头部中过滤掉。</li>\n</ul>\n<p>Koa 使用 <a href=\"https://github.com/pillarjs/cookies\" target=\"_blank\" rel=\"external\">cookies模块</a>,options参数只是简单地直接传递。</p>\n<h3 id=\"ctx-throw-msg-status-properties\"><a href=\"#ctx-throw-msg-status-properties\" class=\"headerlink\" title=\"ctx.throw([msg], [status], [properties])\"></a>ctx.throw([msg], [status], [properties])</h3><p>Helper方法抛出一个.status属性默认为500的错误。该方法允许Koa准确的响应处理状态。<br>Koa允许以下组合：</p>\n<pre><code>ctx.throw(403);\nctx.throw(&#39;name required&#39;, 400);\nctx.throw(400, &#39;name required&#39;);\nctx.throw(&#39;something exploded&#39;);\n</code></pre><p>举个例子 <code>ctx.throw(&#39;name required&#39;, 400)</code>等价于：</p>\n<pre><code>const err = new Error(&#39;name required&#39;);\nerr.status = 400;\nerr.expose = true;\nthrow err;\n</code></pre><p>请注意，这些是用户级错误，并会被标记为err.expose,这意味着消息会被准确描述为对客户端的响应，而并非使用在您不想泄漏失败细节的情景中。</p>\n<p>你可以根据需要将合并后的属性对象船钓错误中去，这对于向上级中间件请求的友好的机器化错误有着很好的装饰作用</p>\n<pre><code>ctx.throw(401, &#39;access_denied&#39;, { user: user });\nctx.throw(&#39;access_denied&#39;, { user: user });\n</code></pre><p>Koa 使用<a href=\"https://github.com/jshttp/http-errors\" target=\"_blank\" rel=\"external\">http-errors</a>来创建错误。</p>\n<h3 id=\"ctx-assert-value-status-msg-properties\"><a href=\"#ctx-assert-value-status-msg-properties\" class=\"headerlink\" title=\"ctx.assert(value, [status], [msg], [properties])\"></a>ctx.assert(value, [status], [msg], [properties])</h3><p>当 !value时，Helper方法抛出类似于.throw()的错误。<br>相当于node中的<a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\" rel=\"external\">assert</a>方法</p>\n<pre><code>ctx.assert(ctx.state.user, 401, &#39;User not found. Please login!&#39;);\n</code></pre><p>Koa 使用<a href=\"https://github.com/jshttp/http-assert\" target=\"_blank\" rel=\"external\">http-assert</a>判断</p>\n<h3 id=\"ctx-respond\"><a href=\"#ctx-respond\" class=\"headerlink\" title=\"ctx.respond\"></a>ctx.respond</h3><p>为了避免Koa的内置响应处理，你可以直接设置 ctx.respond = false;<br>如果你想使用原生的res对象代替Koa操作response，那么请使用这种方法。</p>\n<p>请注意，Koa并不支持这种使用方式，因为这有可能破坏Koa中间件和Koa本身的一些功能。<br>这只能作为一种hack的方式，并只对希望在Koa的函数和中间件中使用传统的fn(req, res)的人带来便捷。</p>\n<h3 id=\"Request-aliases\"><a href=\"#Request-aliases\" class=\"headerlink\" title=\"Request aliases\"></a>Request aliases</h3><p>以下的访问器别名与 <a href=\"#Request\">Request</a> 等价：</p>\n<pre><code>ctx.header\nctx.headers\nctx.method\nctx.method=\nctx.url\nctx.url=\nctx.originalUrl\nctx.originalUrlctx.href\nctx.path\nctx.path=\nctx.query\nctx.query=\nctx.querystring\nctx.querystring=\nctx.host\nctx.hostname\nctx.fresh\nctx.stale\nctx.socket\nctx.protocol\nctx.secure\nctx.ip\nctx.ips\nctx.subdomains\nctx.is()\nctx.accepts()\nctx.acceptsEncodings()\nctx.acceptsLanguages()\nctx.get()\n</code></pre><h3 id=\"Response-aliases\"><a href=\"#Response-aliases\" class=\"headerlink\" title=\"Response aliases\"></a>Response aliases</h3><p>以下访问器别名与 <a href=\"#response\">Response</a>等价:</p>\n<pre><code>ctx.body\nctx.body=\nctx.status\nctx.status=\nctx.message\nctx.message=\nctx.length\nctx.length=\nctx.type\nctx.type=\nctx.headerSent\nctx.rdirect()\nctx.attachment()\nctx.set()\nctx.append()\nctx.remove()\nctx.lastModified=\nctx.etag=\n</code></pre><h2 id=\"Request\"><a href=\"#Request\" class=\"headerlink\" title=\"Request\"></a><span id=\"request\">Request</span></h2><p>Koa的Request对象是对node的Request对象进一步抽象，封装。<br>提供了对日常HTTP服务器开发有用的一些功能函数</p>\n<h3 id=\"API-1\"><a href=\"#API-1\" class=\"headerlink\" title=\"API\"></a>API</h3><h4 id=\"request-header\"><a href=\"#request-header\" class=\"headerlink\" title=\"request.header\"></a>request.header</h4><p>请求头对象</p>\n<h4 id=\"request-headers\"><a href=\"#request-headers\" class=\"headerlink\" title=\"request.headers\"></a>request.headers</h4><p>请求头对象的别名</p>\n<h4 id=\"request-method\"><a href=\"#request-method\" class=\"headerlink\" title=\"request.method\"></a>request.method</h4><p>请求方法</p>\n<h4 id=\"request-method-1\"><a href=\"#request-method-1\" class=\"headerlink\" title=\"request.method=\"></a>request.method=</h4><p>设置请求方法，在实现中间件时有很大作用，例如methodOverride()</p>\n<h4 id=\"request-length\"><a href=\"#request-length\" class=\"headerlink\" title=\"request.length\"></a>request.length</h4><p>以数字的形式返回request的内容长度(Content-lenght),或者返回undefined</p>\n<h4 id=\"request-url\"><a href=\"#request-url\" class=\"headerlink\" title=\"request.url\"></a>request.url</h4><p>获取请求url地址</p>\n<h4 id=\"request-url-1\"><a href=\"#request-url-1\" class=\"headerlink\" title=\"request.url=\"></a>request.url=</h4><p>设置请求地址，用于重写url</p>\n<h4 id=\"request-originalUrl\"><a href=\"#request-originalUrl\" class=\"headerlink\" title=\"request.originalUrl\"></a>request.originalUrl</h4><p>获取请求原始url</p>\n<h4 id=\"request-origin\"><a href=\"#request-origin\" class=\"headerlink\" title=\"request.origin\"></a>request.origin</h4><p>获取url来源，包括protocol和host</p>\n<pre><code>ctx.request.origin\n// =&gt; http://example.com\n</code></pre><h4 id=\"request-href\"><a href=\"#request-href\" class=\"headerlink\" title=\"request.href\"></a>request.href</h4><p>获取请求完整的URL，包括protpcol，host和url</p>\n<pre><code>ctx.request.href\n// =&gt; http://example.com/foo/bar?q=1\n</code></pre><h4 id=\"request-path\"><a href=\"#request-path\" class=\"headerlink\" title=\"request.path\"></a>request.path</h4><p>获取请求路径名。</p>\n<h4 id=\"request-path-1\"><a href=\"#request-path-1\" class=\"headerlink\" title=\"request.path=\"></a>request.path=</h4><p>设置请求路径名，并保存’?’后面的部分（请求参数）</p>\n<h4 id=\"request-querystring\"><a href=\"#request-querystring\" class=\"headerlink\" title=\"request.querystring\"></a>request.querystring</h4><p>获取请求的查询参数(url中?后边的部分)不包含？</p>\n<h4 id=\"request-querystring-1\"><a href=\"#request-querystring-1\" class=\"headerlink\" title=\"request.querystring=\"></a>request.querystring=</h4><p>设置查询参数</p>\n<h4 id=\"request-search\"><a href=\"#request-search\" class=\"headerlink\" title=\"request.search\"></a>request.search</h4><p>获取请求的查询参数，包含?</p>\n<h4 id=\"request-search-1\"><a href=\"#request-search-1\" class=\"headerlink\" title=\"request.search=\"></a>request.search=</h4><p>设置请求的查询参数。</p>\n<h4 id=\"request-host\"><a href=\"#request-host\" class=\"headerlink\" title=\"request.host\"></a>request.host</h4><p>获取当前host(hostname: port) 当 app.proxy = true 时, 支持X-Forwarded-Host。</p>\n<h4 id=\"request-hostname\"><a href=\"#request-hostname\" class=\"headerlink\" title=\"request.hostname\"></a>request.hostname</h4><p>获取hostname，当 app.proxy = ture 时, 支持X-Forwarded-Host.</p>\n<h4 id=\"request-type\"><a href=\"#request-type\" class=\"headerlink\" title=\"request.type\"></a>request.type</h4><p>获取当前请求的 Conetent-Type 不包含如<code>charset</code>这样的参数。</p>\n<pre><code>const ct = ctx.request.type\n// =&gt; &quot;image/png&quot;\n</code></pre><h4 id=\"request-charset\"><a href=\"#request-charset\" class=\"headerlink\" title=\"request.charset\"></a>request.charset</h4><p>获取当前请求的 charset 没有则返回undefined</p>\n<pre><code>ctx.request.charset\n// =&gt; &quot;utf-8&quot;\n</code></pre><h4 id=\"request-query\"><a href=\"#request-query\" class=\"headerlink\" title=\"request.query\"></a>request.query</h4><p>获取解析后的查询字符串，当请求中没有查询字符串时则返回一个空对象。<br>请注意，这个方法不支持嵌套对象。<br>例如：<code>color=blue&amp;size=small</code></p>\n<pre><code>{\n  color: &#39;blue&#39;,\n  size: &#39;small&#39;\n}\n</code></pre><h4 id=\"request-query-1\"><a href=\"#request-query-1\" class=\"headerlink\" title=\"request.query=\"></a>request.query=</h4><p>根据给定的对象设置查询字符串。<br>请注意，这个方法不支持嵌套对象。</p>\n<pre><code>ctx.query = {next: &#39;/login&#39;}\n</code></pre><h4 id=\"request-fresh\"><a href=\"#request-fresh\" class=\"headerlink\" title=\"request.fresh\"></a>request.fresh</h4><h2 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a><span id=\"response\">Response</span></h2>","excerpt":"<p>边学英语边学koa</p>","more":"<h2 id=\"KOA\"><a href=\"#KOA\" class=\"headerlink\" title=\"KOA\"></a>KOA</h2><h3 id=\"koa\"><a href=\"#koa\" class=\"headerlink\" title=\"koa\"></a>koa</h3><p>基于node.js的下一代web框架</p>\n<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>koa是由Express开发团队设计的新型Web框架，旨在为Web应用和Apis提供更小，更具表现力和更强大基础。通过组合利用generators，可以避免回调嵌套并大大提高处理错误的能力。koa不在核心中捆绑任何中间件，仅仅提供了一套轻量优雅的方法库，使得编写服务更加便捷。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>koa需要 node &gt;= ^7.6.0版本来支持ES2015和async。<br>你可以安装node版本控制器来升级到需求版本。</p>\n<pre><code>npm install n -g\nn 7.6.0\nnpm install koa\nnode my-koa-app.js\n</code></pre><h3 id=\"Async与Babel\"><a href=\"#Async与Babel\" class=\"headerlink\" title=\"Async与Babel\"></a>Async与Babel</h3><p>要想在node低于^7.6.0的环境，koa中使用Async函数，我们推荐使用<a href=\"https://babeljs.io/docs/usage/babel-register/\">babel’s require hook</a></p>\n<pre><code>require(&#39;babel-core/register&#39;);\n// require the rest of the app that needs to be transpiled after the hook\nconst app = require(&#39;./app&#39;);\n</code></pre><p>为了解析和转换Async函数， 你至少应该有<a href=\"http://babeljs.io/docs/plugins/transform-async-to-generator/\">transform-async-to-generator</a>或<a href=\"http://babeljs.io/docs/plugins/transform-async-to-module-method/\">transform-async-to-module-method</a>插件。<br>举个例，在你的<code>.babelrc</code>文件中，你应该有如下配置:</p>\n<pre><code>{\n  &quot;plugins&quot;: [&quot;transform-async-to-generator&quot;]\n}\n</code></pre><p>你当然也可以使用<a href=\"http://babeljs.io/docs/plugins/preset-stage-3/\">Stage 3 preset</a>代替</p>\n<blockquote>\n<p>讲道理干嘛这么麻烦。。不如用node^7.6.0</p>\n</blockquote>\n<h3 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h3><p>koa应用是一个包含一系列中间件的对象，这些中间件函数根据request请求按照类似堆栈的方式构成依次执行。Koa类似于其他您可能使用过的中间件系统（如Ruby‘s Rack，Connect等）。然而Koa的核心设计思路是为其他低等级的中间件层提供高级语法糖，以提高其可操作性和稳定性，并使编写中间件变得更便捷。</p>\n<p>Koa包含了像content-negotiation(内容协商)、cache freshness（缓存刷新）、proxy support（代理支持）和 redirection（重定向）等常用任务方法。尽管有相当大数量的函数支持，Koa仅仅包含很小一部分，因为Koa没有中间件捆绑。</p>\n<p>编写一个 hello world 应用：</p>\n<pre><code>const Koa = require(&#39;koa&#39;);\nconst app = new Koa();\n\napp.use(ctx =&gt; {\n  ctx.body = &#39;Hello World&#39;;\n});\n\napp.listen(3000);\n</code></pre><h3 id=\"Cascading—级联\"><a href=\"#Cascading—级联\" class=\"headerlink\" title=\"Cascading—级联\"></a>Cascading—级联</h3><p>Koa中间件以更传统的方式级联，像你习惯使用的一些类似工具——在过去这使得用户很难友好的使用node频繁回调。然而通过使用Async函数，我们能”真正”实现中间件。Connect的实现是简单地通过一系列的函数传递控制权，直到一个函数返回。而Koa则是通调用下一个中间件，然后将控制权逐级返还到上级中间件。</p>\n<p>下面的例子将返回 <code>Hello World</code>，然而当请求开始时，将先经过x-response-time和logging中间件，记录中间件执行起始时间，然后继续通过response中间件得到控制权。当一个中间件调用 next() 时，该函数暂停并将控制权传递给定义的下一个中间件。当没有更多的下级中间件执行，堆栈将释放，并且将逆序执行每个中间件的代码。</p>\n<blockquote>\n<p>原文并未使用箭头函数</p>\n</blockquote>\n<pre><code> const Koa = require(&#39;koa&#39;);\n const app = new Koa();\n\n// x-response-time\n\napp.use(async (ctx, next) =&gt; {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  ctx.set(&#39;X-Response-Time&#39;, `${ms}ms`);\n });\n\n // logger\n\n app.use(async (ctx, next) =&gt; {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n });\n\n// response\n\napp.use(ctx =&gt; {\n  ctx.body = &#39;Hello World&#39;;\n});\n\napp.listen(3000);\n</code></pre><h3 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h3><p>应用配置是实例app的属性，目前支持以下配置：</p>\n<ul>\n<li>app.env 默认为NODE_DEV或development</li>\n<li>app.proxy 如果为true，则header域将被信任</li>\n<li>app.subdomainOffset 默认为2 表示.subdomains所忽略的字符偏移量</li>\n</ul>\n<h3 id=\"app-listen-…\"><a href=\"#app-listen-…\" class=\"headerlink\" title=\"app.listen(…)\"></a>app.listen(…)</h3><p> Koa应用并不是一个HTTP服务器的单一映射表现方式。一个或多个Koa应用可以被一起挂载，形成一个具有单一HTTP服务器的较大型的应用。</p>\n<p> 创建并返回一个HTTP服务器，将给定的参数传递给Server#listen()。<a href=\"https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback\">(参数配置参考)</a><br> 以下为创建一个绑定3000端口的简单Koa应用：</p>\n<pre><code> const Koa = require(&#39;koa&#39;);\nconst app = new Koa();\napp.listen(3000);\n</code></pre><p>app.listen(…)实际上以下代码的语法糖：</p>\n<pre><code>const http = require(&#39;http&#39;);\nconst Koa = require(&#39;koa&#39;);\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\n</code></pre><p>这意味这你可以同时启动HTTP和HTTPS或多个地址相同的引用程序：</p>\n<pre><code>const http = require(&#39;http&#39;);\nconst Koa = require(&#39;koa&#39;);\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\nhttp.createServer(app.callback().listen(3000));\n</code></pre><h3 id=\"app-callback\"><a href=\"#app-callback\" class=\"headerlink\" title=\"app.callback()\"></a>app.callback()</h3><p>返回一个适用于http。createServer()方法的回调函数来处理请求。你也可以使用这个回调函数将你的Koa应用挂载到 Connect/Express 应用上。</p>\n<h3 id=\"app-use-function\"><a href=\"#app-use-function\" class=\"headerlink\" title=\"app.use(function)\"></a>app.use(function)</h3><p>将给定的中间件添加到应用中<a href=\"https://github.com/koajs/koa/wiki#middleware\">(参考Middleware)</a></p>\n<h3 id=\"app-keys\"><a href=\"#app-keys\" class=\"headerlink\" title=\"app.keys =\"></a>app.keys =</h3><p>设置签名Cookie密钥<br>该密钥将会被传递给<a href=\"https://github.com/koajs/koa/wiki#middleware\">KEyGrip</a>。<br>你也可以传递自己生成的KEyGrip实例。如下：</p>\n<pre><code>app.keys = [ &#39;im a newer secret&#39;, &#39;i like turtle&#39;];\napp.keys = new KeyGrip([&#39;im a newer secret&#39;, &#39;i like turtle&#39;], &#39;sha256&#39;);\n</code></pre><p>在进行cookie签名时。，这些键只有在设置signed 为 true 时才会使用密钥进行加密：</p>\n<pre><code>this.cookies.set(&#39;name&#39;, &#39;tobi&#39;, {signed: true});\n</code></pre><h3 id=\"app-context\"><a href=\"#app-context\" class=\"headerlink\" title=\"app.context\"></a>app.context</h3><p>app.context是从ctx中创建的原型。你可以通过编辑app.context添加额外的属性到ctx上。这对于添加属性或方法到ctx上在整个应用程序上使用非常有用，这也可能会更为有效（无中间件）并更容易（更少使用require())牺牲更多依赖在ctx上，这可以被视为反模式。</p>\n<p>举个例，添加一个数据库引用到ctx:</p>\n<pre><code>app.context.db = db();\napp.use(async (ctx) =&gt; {\n  console.log(ctx.db);\n});\n</code></pre><hr>\n<p>Note：</p>\n<ul>\n<li>ctx上的许多属性定义时使用了，getters，setters和Object.defineProperty()。你只能编辑这些属性（不推荐）通过使用Object.defineProperty app.context()。<a href=\"https://github.com/koajs/koa/issues/652\">(See more)</a></li>\n<li>这一段有点晕。。。</li>\n</ul>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>默认情况下，Koa会讲所有错误日志输出到stderr中，除非 app。silent = true。默认错误处理页不会在 err.status = 404 或 err.expose = true 时输出错误。想要执行自定义错误处理逻辑（例如 centralized logging），你可以添加“error”事件监听器。</p>\n<pre><code>app.on(&#39;error&#39;, err =&gt; {\n  log.error(&#39;serrver error&#39;, err);\n});\n</code></pre><p>如果在 req／res 周期中出现error，并且不能够影响客户端时，Context实例也会被传递到error事件监听器的回调函数中：</p>\n<pre><code>app.on(&#39;error&#39;, (err, ctx) =&gt; {\n  log.error(&#39;server error&#39;, err, ctx);\n});\n</code></pre><p>当发生错误并且仍然可以响应客户端时，例如没有数据被写入到socker中时，Koa将返回一个 500／服务器内部错误。<br>无论哪种情况，Koa都会生成一个应用级别的错误，来实现日志记录。</p>\n<h2 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h2><p>Koa Context将node的request和response对象封装到一个单独的对象中，为编写web应用和API提供了很多有用的方法。这些操作在开发HTTP服务器中经常被使用，因此被添加在context这一层级总而不是更高层级的框架中，这将迫使中间件需要重新实现这些公共的方法。<br>Context 根据每个request创建，并在中间件中作为接收器（receiver ）或通过 ctx 标识符来引用<br>如下代码展示：</p>\n<pre><code>app.use(async (ctx, next) =&gt; {\n  ctx; // is the Context\n  ctx.request; // is a koa Request\n  ctx.response; // is a koa Response\n})\n</code></pre><p>许多Context的访问器和方法为了方便起见，简单地委托给ctx.request和ctx.response 所对应的等价方法。<br>举个例子，ctx.type和ctx.length 代理了 response对象中对应的方法， ctx.path和ctx.method代理了 resquest 对象中对应的方法。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Context 具体的方法和访问器。</p>\n<h3 id=\"ctx-req\"><a href=\"#ctx-req\" class=\"headerlink\" title=\"ctx.req\"></a>ctx.req</h3><p>Node的request对象</p>\n<h3 id=\"ctx-res\"><a href=\"#ctx-res\" class=\"headerlink\" title=\"ctx.res\"></a>ctx.res</h3><p>Node的response对象</p>\n<p>Koa不支持直接调用底层response处理。请避免使用以下Node属性：</p>\n<ul>\n<li>res.statusCode</li>\n<li>res.writeHead()</li>\n<li>res.write()</li>\n<li>res.end()</li>\n</ul>\n<h3 id=\"ctx-request\"><a href=\"#ctx-request\" class=\"headerlink\" title=\"ctx.request\"></a>ctx.request</h3><p>Koa 的 Request 对象。</p>\n<h3 id=\"ctx-response\"><a href=\"#ctx-response\" class=\"headerlink\" title=\"ctx.response\"></a>ctx.response</h3><p>Koa 的 Response 对象。</p>\n<h3 id=\"ctx-state\"><a href=\"#ctx-state\" class=\"headerlink\" title=\"ctx.state\"></a>ctx.state</h3><p>自定义命名空间，用于将信息从中间件传递到前端视图层</p>\n<pre><code>ctx.state.user = await User.find(id);\n</code></pre><h3 id=\"ctx-app\"><a href=\"#ctx-app\" class=\"headerlink\" title=\"ctx.app\"></a>ctx.app</h3><p>应用实例引用。</p>\n<h3 id=\"ctx-cookies-get-name-options\"><a href=\"#ctx-cookies-get-name-options\" class=\"headerlink\" title=\"ctx.cookies.get(name, [options])\"></a>ctx.cookies.get(name, [options])</h3><p>获取 cookie 中 name 的值 options为可选参数。</p>\n<ul>\n<li>signed：对cookie请求时需要设置签名。</li>\n</ul>\n<p>Koa 使用 <a href=\"https://github.com/pillarjs/cookies\">cookies模块</a>,options参数只是简单地直接传递。</p>\n<h3 id=\"ctx-cookies-set-name-value-options\"><a href=\"#ctx-cookies-set-name-value-options\" class=\"headerlink\" title=\"ctx.cookies.set(name, value, [options])\"></a>ctx.cookies.set(name, value, [options])</h3><p>设置 cookie 中 name值， options为可选参数。</p>\n<ul>\n<li>maxAge: 表示 Date.now() 到期的毫米数， number.</li>\n<li>signed: Cookie 签名</li>\n<li>expires: Cookie有效时间</li>\n<li>path: Cookie路径，默认为<code>/&#39;</code></li>\n<li>domain: Cookie的域</li>\n<li>secure: Cookie安全协议 false表示Cookie通过HTTP协议传送，true表示Cookie通过HTTPS协议传送。</li>\n<li>httpOnly: 服务器可访问的Cookie 默认为true</li>\n<li>overwrite: 一个布尔值，表示是否覆盖重写以前设置的同名的Cookie（默认为false）如果为true，在设置这个新Cookie时，将在同一个请求中设置所有相同名称的Cookie（不论路径或域）并从Set-Cookie头部中过滤掉。</li>\n</ul>\n<p>Koa 使用 <a href=\"https://github.com/pillarjs/cookies\">cookies模块</a>,options参数只是简单地直接传递。</p>\n<h3 id=\"ctx-throw-msg-status-properties\"><a href=\"#ctx-throw-msg-status-properties\" class=\"headerlink\" title=\"ctx.throw([msg], [status], [properties])\"></a>ctx.throw([msg], [status], [properties])</h3><p>Helper方法抛出一个.status属性默认为500的错误。该方法允许Koa准确的响应处理状态。<br>Koa允许以下组合：</p>\n<pre><code>ctx.throw(403);\nctx.throw(&#39;name required&#39;, 400);\nctx.throw(400, &#39;name required&#39;);\nctx.throw(&#39;something exploded&#39;);\n</code></pre><p>举个例子 <code>ctx.throw(&#39;name required&#39;, 400)</code>等价于：</p>\n<pre><code>const err = new Error(&#39;name required&#39;);\nerr.status = 400;\nerr.expose = true;\nthrow err;\n</code></pre><p>请注意，这些是用户级错误，并会被标记为err.expose,这意味着消息会被准确描述为对客户端的响应，而并非使用在您不想泄漏失败细节的情景中。</p>\n<p>你可以根据需要将合并后的属性对象船钓错误中去，这对于向上级中间件请求的友好的机器化错误有着很好的装饰作用</p>\n<pre><code>ctx.throw(401, &#39;access_denied&#39;, { user: user });\nctx.throw(&#39;access_denied&#39;, { user: user });\n</code></pre><p>Koa 使用<a href=\"https://github.com/jshttp/http-errors\">http-errors</a>来创建错误。</p>\n<h3 id=\"ctx-assert-value-status-msg-properties\"><a href=\"#ctx-assert-value-status-msg-properties\" class=\"headerlink\" title=\"ctx.assert(value, [status], [msg], [properties])\"></a>ctx.assert(value, [status], [msg], [properties])</h3><p>当 !value时，Helper方法抛出类似于.throw()的错误。<br>相当于node中的<a href=\"https://nodejs.org/api/assert.html\">assert</a>方法</p>\n<pre><code>ctx.assert(ctx.state.user, 401, &#39;User not found. Please login!&#39;);\n</code></pre><p>Koa 使用<a href=\"https://github.com/jshttp/http-assert\">http-assert</a>判断</p>\n<h3 id=\"ctx-respond\"><a href=\"#ctx-respond\" class=\"headerlink\" title=\"ctx.respond\"></a>ctx.respond</h3><p>为了避免Koa的内置响应处理，你可以直接设置 ctx.respond = false;<br>如果你想使用原生的res对象代替Koa操作response，那么请使用这种方法。</p>\n<p>请注意，Koa并不支持这种使用方式，因为这有可能破坏Koa中间件和Koa本身的一些功能。<br>这只能作为一种hack的方式，并只对希望在Koa的函数和中间件中使用传统的fn(req, res)的人带来便捷。</p>\n<h3 id=\"Request-aliases\"><a href=\"#Request-aliases\" class=\"headerlink\" title=\"Request aliases\"></a>Request aliases</h3><p>以下的访问器别名与 <a href=\"#Request\">Request</a> 等价：</p>\n<pre><code>ctx.header\nctx.headers\nctx.method\nctx.method=\nctx.url\nctx.url=\nctx.originalUrl\nctx.originalUrlctx.href\nctx.path\nctx.path=\nctx.query\nctx.query=\nctx.querystring\nctx.querystring=\nctx.host\nctx.hostname\nctx.fresh\nctx.stale\nctx.socket\nctx.protocol\nctx.secure\nctx.ip\nctx.ips\nctx.subdomains\nctx.is()\nctx.accepts()\nctx.acceptsEncodings()\nctx.acceptsLanguages()\nctx.get()\n</code></pre><h3 id=\"Response-aliases\"><a href=\"#Response-aliases\" class=\"headerlink\" title=\"Response aliases\"></a>Response aliases</h3><p>以下访问器别名与 <a href=\"#response\">Response</a>等价:</p>\n<pre><code>ctx.body\nctx.body=\nctx.status\nctx.status=\nctx.message\nctx.message=\nctx.length\nctx.length=\nctx.type\nctx.type=\nctx.headerSent\nctx.rdirect()\nctx.attachment()\nctx.set()\nctx.append()\nctx.remove()\nctx.lastModified=\nctx.etag=\n</code></pre><h2 id=\"Request\"><a href=\"#Request\" class=\"headerlink\" title=\"Request\"></a><span id=\"request\">Request</span></h2><p>Koa的Request对象是对node的Request对象进一步抽象，封装。<br>提供了对日常HTTP服务器开发有用的一些功能函数</p>\n<h3 id=\"API-1\"><a href=\"#API-1\" class=\"headerlink\" title=\"API\"></a>API</h3><h4 id=\"request-header\"><a href=\"#request-header\" class=\"headerlink\" title=\"request.header\"></a>request.header</h4><p>请求头对象</p>\n<h4 id=\"request-headers\"><a href=\"#request-headers\" class=\"headerlink\" title=\"request.headers\"></a>request.headers</h4><p>请求头对象的别名</p>\n<h4 id=\"request-method\"><a href=\"#request-method\" class=\"headerlink\" title=\"request.method\"></a>request.method</h4><p>请求方法</p>\n<h4 id=\"request-method-1\"><a href=\"#request-method-1\" class=\"headerlink\" title=\"request.method=\"></a>request.method=</h4><p>设置请求方法，在实现中间件时有很大作用，例如methodOverride()</p>\n<h4 id=\"request-length\"><a href=\"#request-length\" class=\"headerlink\" title=\"request.length\"></a>request.length</h4><p>以数字的形式返回request的内容长度(Content-lenght),或者返回undefined</p>\n<h4 id=\"request-url\"><a href=\"#request-url\" class=\"headerlink\" title=\"request.url\"></a>request.url</h4><p>获取请求url地址</p>\n<h4 id=\"request-url-1\"><a href=\"#request-url-1\" class=\"headerlink\" title=\"request.url=\"></a>request.url=</h4><p>设置请求地址，用于重写url</p>\n<h4 id=\"request-originalUrl\"><a href=\"#request-originalUrl\" class=\"headerlink\" title=\"request.originalUrl\"></a>request.originalUrl</h4><p>获取请求原始url</p>\n<h4 id=\"request-origin\"><a href=\"#request-origin\" class=\"headerlink\" title=\"request.origin\"></a>request.origin</h4><p>获取url来源，包括protocol和host</p>\n<pre><code>ctx.request.origin\n// =&gt; http://example.com\n</code></pre><h4 id=\"request-href\"><a href=\"#request-href\" class=\"headerlink\" title=\"request.href\"></a>request.href</h4><p>获取请求完整的URL，包括protpcol，host和url</p>\n<pre><code>ctx.request.href\n// =&gt; http://example.com/foo/bar?q=1\n</code></pre><h4 id=\"request-path\"><a href=\"#request-path\" class=\"headerlink\" title=\"request.path\"></a>request.path</h4><p>获取请求路径名。</p>\n<h4 id=\"request-path-1\"><a href=\"#request-path-1\" class=\"headerlink\" title=\"request.path=\"></a>request.path=</h4><p>设置请求路径名，并保存’?’后面的部分（请求参数）</p>\n<h4 id=\"request-querystring\"><a href=\"#request-querystring\" class=\"headerlink\" title=\"request.querystring\"></a>request.querystring</h4><p>获取请求的查询参数(url中?后边的部分)不包含？</p>\n<h4 id=\"request-querystring-1\"><a href=\"#request-querystring-1\" class=\"headerlink\" title=\"request.querystring=\"></a>request.querystring=</h4><p>设置查询参数</p>\n<h4 id=\"request-search\"><a href=\"#request-search\" class=\"headerlink\" title=\"request.search\"></a>request.search</h4><p>获取请求的查询参数，包含?</p>\n<h4 id=\"request-search-1\"><a href=\"#request-search-1\" class=\"headerlink\" title=\"request.search=\"></a>request.search=</h4><p>设置请求的查询参数。</p>\n<h4 id=\"request-host\"><a href=\"#request-host\" class=\"headerlink\" title=\"request.host\"></a>request.host</h4><p>获取当前host(hostname: port) 当 app.proxy = true 时, 支持X-Forwarded-Host。</p>\n<h4 id=\"request-hostname\"><a href=\"#request-hostname\" class=\"headerlink\" title=\"request.hostname\"></a>request.hostname</h4><p>获取hostname，当 app.proxy = ture 时, 支持X-Forwarded-Host.</p>\n<h4 id=\"request-type\"><a href=\"#request-type\" class=\"headerlink\" title=\"request.type\"></a>request.type</h4><p>获取当前请求的 Conetent-Type 不包含如<code>charset</code>这样的参数。</p>\n<pre><code>const ct = ctx.request.type\n// =&gt; &quot;image/png&quot;\n</code></pre><h4 id=\"request-charset\"><a href=\"#request-charset\" class=\"headerlink\" title=\"request.charset\"></a>request.charset</h4><p>获取当前请求的 charset 没有则返回undefined</p>\n<pre><code>ctx.request.charset\n// =&gt; &quot;utf-8&quot;\n</code></pre><h4 id=\"request-query\"><a href=\"#request-query\" class=\"headerlink\" title=\"request.query\"></a>request.query</h4><p>获取解析后的查询字符串，当请求中没有查询字符串时则返回一个空对象。<br>请注意，这个方法不支持嵌套对象。<br>例如：<code>color=blue&amp;size=small</code></p>\n<pre><code>{\n  color: &#39;blue&#39;,\n  size: &#39;small&#39;\n}\n</code></pre><h4 id=\"request-query-1\"><a href=\"#request-query-1\" class=\"headerlink\" title=\"request.query=\"></a>request.query=</h4><p>根据给定的对象设置查询字符串。<br>请注意，这个方法不支持嵌套对象。</p>\n<pre><code>ctx.query = {next: &#39;/login&#39;}\n</code></pre><h4 id=\"request-fresh\"><a href=\"#request-fresh\" class=\"headerlink\" title=\"request.fresh\"></a>request.fresh</h4><h2 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a><span id=\"response\">Response</span></h2>"},{"title":"记录第一次搭建hexo","date":"2016-11-22T06:57:37.000Z","type":"hexo","_content":"即使扒了很多大佬的搭建教程，还是踩了很多坑，所以打算记录下来自己的搭建过程。本文主要介绍win10下hexo3.1.1搭建，并发布到GitHub上。\n\n<!--more-->\n\n## 环境搭建\n &ensp;安装nodejs（必须）\n- 作用：用来生成静态页面的\n- 方法：到[node.js](http://nodejs.cn/)官网下载并安装。我是用的是win10下v6.9.1版本。\n\n &ensp;安装git（必须）\n- 作用：把本地的hexo内容提交到github上去。\n- 方法：进入git官方下载即可，速度较慢。\n\n &ensp;申请GitHub账号（必须）\n- 作用：是用来做博客的远程创库、域名、服务器之类的。\n- 方法：到[github](https://github.com/)官网自行注册，如果想深入学习请看[pro git](http://iissnan.com/progit/)教程\n\n\n## 安装并搭建hexo\n &ensp;安装hexo\n- 进入git或cmd执行以下命令\n\n\n```\npm install -g hexo\n```\n\n- hexo必备插件，建议一起安装\n\n```\n$ npm install hexo-generator-index --save #索引生成器\n$ npm install hexo-generator-archive --save #归档生成器\n$ npm install hexo-generator-category --save #分类生成器\n$ npm install hexo-generator-tag --save #标签生成器\n$ npm install hexo-server --save #本地服务\n$ npm install hexo-deployer-git --save #hexo通过git发布（必装）\n$ npm install hexo-renderer-marked@0.2.7--save #渲染器\n$ npm install hexo-renderer-stylus@0.3.0 --save #渲染器\n```\n\n- 安装过程中不知道为毛我多了两个蜜汁报错，但到最后也没太大影响\n\n```\nnpm WARN deprecated swig@1.4.2: This package is no longer maintained\n```\n```\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevent@^1.0.0(node_modules\\hexo\\node_modules|chokidar\\node_mdules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.0.15: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})\n```\n\n- 初始化\n 选择本地磁盘某个位置创建本地hexo文件夹，进入后右键 git bash\n\n```\n$ hexo init\n```\n\n- 生成静态页面\n\n```\n$ hexo p\n```\n\n- 本地服务\n必须安装 hexo server，否则无用\n\n```\nhexo s\n```\n\n至此本地hexo已建立成功，测试网址：[http://localhost:4000](http://localhost:4000/)\n\n## 配置GitHub\n- 建立Repository\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】\n\n现在我们需要编辑_config.yml文件：\n翻到最下面，改成我这样子的\n```\ndeploy: \n      type: git  //有的版本是github也是个小坑，注意\n      repo: https://github.com/xunfeng911/xunfeng911.github.com.git // 换成你本人的\n      branch: master\n```\n\n然后保存后执行命令：\n\n```\nhexo d\n```\n注意yml格式文件冒号后面必须加一个空格\n执行完毕后访问your_user_name.github.io\n即可看到部署在github上的默认博客,第一次发布可能会有10分钟的延迟。\n\n到这里，一个全新的hexo博客就建成了。\n\n\n\n## 附录\n\n- 常用命令：\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help # 查看帮助\nhexo version #查看Hexo的版本\n```\n- 简写\n\n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n## 参考资料\n\n[卢睿韬学长的自留地](https://xdlrt.github.io/2016/02/16/2016-02-16/)\n[潘柏信,搭建个人博客](http://baixin.io/2015/08/HEXO搭建个人博客/)","source":"_posts/记录第一次搭建hexo.md","raw":"---\ntitle: 记录第一次搭建hexo\ndate: 2016-11-22 14:57:37\ntype: \"hexo\"\ntags:\n  - 搭建hexo\n  - git\n---\n即使扒了很多大佬的搭建教程，还是踩了很多坑，所以打算记录下来自己的搭建过程。本文主要介绍win10下hexo3.1.1搭建，并发布到GitHub上。\n\n<!--more-->\n\n## 环境搭建\n &ensp;安装nodejs（必须）\n- 作用：用来生成静态页面的\n- 方法：到[node.js](http://nodejs.cn/)官网下载并安装。我是用的是win10下v6.9.1版本。\n\n &ensp;安装git（必须）\n- 作用：把本地的hexo内容提交到github上去。\n- 方法：进入git官方下载即可，速度较慢。\n\n &ensp;申请GitHub账号（必须）\n- 作用：是用来做博客的远程创库、域名、服务器之类的。\n- 方法：到[github](https://github.com/)官网自行注册，如果想深入学习请看[pro git](http://iissnan.com/progit/)教程\n\n\n## 安装并搭建hexo\n &ensp;安装hexo\n- 进入git或cmd执行以下命令\n\n\n```\npm install -g hexo\n```\n\n- hexo必备插件，建议一起安装\n\n```\n$ npm install hexo-generator-index --save #索引生成器\n$ npm install hexo-generator-archive --save #归档生成器\n$ npm install hexo-generator-category --save #分类生成器\n$ npm install hexo-generator-tag --save #标签生成器\n$ npm install hexo-server --save #本地服务\n$ npm install hexo-deployer-git --save #hexo通过git发布（必装）\n$ npm install hexo-renderer-marked@0.2.7--save #渲染器\n$ npm install hexo-renderer-stylus@0.3.0 --save #渲染器\n```\n\n- 安装过程中不知道为毛我多了两个蜜汁报错，但到最后也没太大影响\n\n```\nnpm WARN deprecated swig@1.4.2: This package is no longer maintained\n```\n```\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevent@^1.0.0(node_modules\\hexo\\node_modules|chokidar\\node_mdules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.0.15: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})\n```\n\n- 初始化\n 选择本地磁盘某个位置创建本地hexo文件夹，进入后右键 git bash\n\n```\n$ hexo init\n```\n\n- 生成静态页面\n\n```\n$ hexo p\n```\n\n- 本地服务\n必须安装 hexo server，否则无用\n\n```\nhexo s\n```\n\n至此本地hexo已建立成功，测试网址：[http://localhost:4000](http://localhost:4000/)\n\n## 配置GitHub\n- 建立Repository\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】\n\n现在我们需要编辑_config.yml文件：\n翻到最下面，改成我这样子的\n```\ndeploy: \n      type: git  //有的版本是github也是个小坑，注意\n      repo: https://github.com/xunfeng911/xunfeng911.github.com.git // 换成你本人的\n      branch: master\n```\n\n然后保存后执行命令：\n\n```\nhexo d\n```\n注意yml格式文件冒号后面必须加一个空格\n执行完毕后访问your_user_name.github.io\n即可看到部署在github上的默认博客,第一次发布可能会有10分钟的延迟。\n\n到这里，一个全新的hexo博客就建成了。\n\n\n\n## 附录\n\n- 常用命令：\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help # 查看帮助\nhexo version #查看Hexo的版本\n```\n- 简写\n\n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n## 参考资料\n\n[卢睿韬学长的自留地](https://xdlrt.github.io/2016/02/16/2016-02-16/)\n[潘柏信,搭建个人博客](http://baixin.io/2015/08/HEXO搭建个人博客/)","slug":"记录第一次搭建hexo","published":1,"updated":"2016-11-22T11:03:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2aooqiz000qzlwp30gddt2m","content":"<p>即使扒了很多大佬的搭建教程，还是踩了很多坑，所以打算记录下来自己的搭建过程。本文主要介绍win10下hexo3.1.1搭建，并发布到GitHub上。</p>\n<a id=\"more\"></a>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p> &ensp;安装nodejs（必须）</p>\n<ul>\n<li>作用：用来生成静态页面的</li>\n<li><p>方法：到<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"external\">node.js</a>官网下载并安装。我是用的是win10下v6.9.1版本。</p>\n<p>&ensp;安装git（必须）</p>\n</li>\n<li>作用：把本地的hexo内容提交到github上去。</li>\n<li><p>方法：进入git官方下载即可，速度较慢。</p>\n<p>&ensp;申请GitHub账号（必须）</p>\n</li>\n<li>作用：是用来做博客的远程创库、域名、服务器之类的。</li>\n<li>方法：到<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>官网自行注册，如果想深入学习请看<a href=\"http://iissnan.com/progit/\" target=\"_blank\" rel=\"external\">pro git</a>教程</li>\n</ul>\n<h2 id=\"安装并搭建hexo\"><a href=\"#安装并搭建hexo\" class=\"headerlink\" title=\"安装并搭建hexo\"></a>安装并搭建hexo</h2><p> &ensp;安装hexo</p>\n<ul>\n<li>进入git或cmd执行以下命令</li>\n</ul>\n<pre><code>pm install -g hexo\n</code></pre><ul>\n<li>hexo必备插件，建议一起安装</li>\n</ul>\n<pre><code>$ npm install hexo-generator-index --save #索引生成器\n$ npm install hexo-generator-archive --save #归档生成器\n$ npm install hexo-generator-category --save #分类生成器\n$ npm install hexo-generator-tag --save #标签生成器\n$ npm install hexo-server --save #本地服务\n$ npm install hexo-deployer-git --save #hexo通过git发布（必装）\n$ npm install hexo-renderer-marked@0.2.7--save #渲染器\n$ npm install hexo-renderer-stylus@0.3.0 --save #渲染器\n</code></pre><ul>\n<li>安装过程中不知道为毛我多了两个蜜汁报错，但到最后也没太大影响</li>\n</ul>\n<pre><code>npm WARN deprecated swig@1.4.2: This package is no longer maintained\n</code></pre><pre><code>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevent@^1.0.0(node_modules\\hexo\\node_modules|chokidar\\node_mdules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.0.15: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})\n</code></pre><ul>\n<li>初始化<br>选择本地磁盘某个位置创建本地hexo文件夹，进入后右键 git bash</li>\n</ul>\n<pre><code>$ hexo init\n</code></pre><ul>\n<li>生成静态页面</li>\n</ul>\n<pre><code>$ hexo p\n</code></pre><ul>\n<li>本地服务<br>必须安装 hexo server，否则无用</li>\n</ul>\n<pre><code>hexo s\n</code></pre><p>至此本地hexo已建立成功，测试网址：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></p>\n<h2 id=\"配置GitHub\"><a href=\"#配置GitHub\" class=\"headerlink\" title=\"配置GitHub\"></a>配置GitHub</h2><ul>\n<li>建立Repository<br>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】</li>\n</ul>\n<p>现在我们需要编辑_config.yml文件：<br>翻到最下面，改成我这样子的</p>\n<pre><code>deploy: \n      type: git  //有的版本是github也是个小坑，注意\n      repo: https://github.com/xunfeng911/xunfeng911.github.com.git // 换成你本人的\n      branch: master\n</code></pre><p>然后保存后执行命令：</p>\n<pre><code>hexo d\n</code></pre><p>注意yml格式文件冒号后面必须加一个空格<br>执行完毕后访问your_user_name.github.io<br>即可看到部署在github上的默认博客,第一次发布可能会有10分钟的延迟。</p>\n<p>到这里，一个全新的hexo博客就建成了。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>常用命令：</li>\n</ul>\n<pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help # 查看帮助\nhexo version #查看Hexo的版本\n</code></pre><ul>\n<li>简写</li>\n</ul>\n<pre><code>hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n</code></pre><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://xdlrt.github.io/2016/02/16/2016-02-16/\" target=\"_blank\" rel=\"external\">卢睿韬学长的自留地</a><br><a href=\"http://baixin.io/2015/08/HEXO搭建个人博客/\" target=\"_blank\" rel=\"external\">潘柏信,搭建个人博客</a></p>\n","excerpt":"<p>即使扒了很多大佬的搭建教程，还是踩了很多坑，所以打算记录下来自己的搭建过程。本文主要介绍win10下hexo3.1.1搭建，并发布到GitHub上。</p>","more":"<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p> &ensp;安装nodejs（必须）</p>\n<ul>\n<li>作用：用来生成静态页面的</li>\n<li><p>方法：到<a href=\"http://nodejs.cn/\">node.js</a>官网下载并安装。我是用的是win10下v6.9.1版本。</p>\n<p>&ensp;安装git（必须）</p>\n</li>\n<li>作用：把本地的hexo内容提交到github上去。</li>\n<li><p>方法：进入git官方下载即可，速度较慢。</p>\n<p>&ensp;申请GitHub账号（必须）</p>\n</li>\n<li>作用：是用来做博客的远程创库、域名、服务器之类的。</li>\n<li>方法：到<a href=\"https://github.com/\">github</a>官网自行注册，如果想深入学习请看<a href=\"http://iissnan.com/progit/\">pro git</a>教程</li>\n</ul>\n<h2 id=\"安装并搭建hexo\"><a href=\"#安装并搭建hexo\" class=\"headerlink\" title=\"安装并搭建hexo\"></a>安装并搭建hexo</h2><p> &ensp;安装hexo</p>\n<ul>\n<li>进入git或cmd执行以下命令</li>\n</ul>\n<pre><code>pm install -g hexo\n</code></pre><ul>\n<li>hexo必备插件，建议一起安装</li>\n</ul>\n<pre><code>$ npm install hexo-generator-index --save #索引生成器\n$ npm install hexo-generator-archive --save #归档生成器\n$ npm install hexo-generator-category --save #分类生成器\n$ npm install hexo-generator-tag --save #标签生成器\n$ npm install hexo-server --save #本地服务\n$ npm install hexo-deployer-git --save #hexo通过git发布（必装）\n$ npm install hexo-renderer-marked@0.2.7--save #渲染器\n$ npm install hexo-renderer-stylus@0.3.0 --save #渲染器\n</code></pre><ul>\n<li>安装过程中不知道为毛我多了两个蜜汁报错，但到最后也没太大影响</li>\n</ul>\n<pre><code>npm WARN deprecated swig@1.4.2: This package is no longer maintained\n</code></pre><pre><code>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevent@^1.0.0(node_modules\\hexo\\node_modules|chokidar\\node_mdules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.0.15: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})\n</code></pre><ul>\n<li>初始化<br>选择本地磁盘某个位置创建本地hexo文件夹，进入后右键 git bash</li>\n</ul>\n<pre><code>$ hexo init\n</code></pre><ul>\n<li>生成静态页面</li>\n</ul>\n<pre><code>$ hexo p\n</code></pre><ul>\n<li>本地服务<br>必须安装 hexo server，否则无用</li>\n</ul>\n<pre><code>hexo s\n</code></pre><p>至此本地hexo已建立成功，测试网址：<a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n<h2 id=\"配置GitHub\"><a href=\"#配置GitHub\" class=\"headerlink\" title=\"配置GitHub\"></a>配置GitHub</h2><ul>\n<li>建立Repository<br>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】</li>\n</ul>\n<p>现在我们需要编辑_config.yml文件：<br>翻到最下面，改成我这样子的</p>\n<pre><code>deploy: \n      type: git  //有的版本是github也是个小坑，注意\n      repo: https://github.com/xunfeng911/xunfeng911.github.com.git // 换成你本人的\n      branch: master\n</code></pre><p>然后保存后执行命令：</p>\n<pre><code>hexo d\n</code></pre><p>注意yml格式文件冒号后面必须加一个空格<br>执行完毕后访问your_user_name.github.io<br>即可看到部署在github上的默认博客,第一次发布可能会有10分钟的延迟。</p>\n<p>到这里，一个全新的hexo博客就建成了。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>常用命令：</li>\n</ul>\n<pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help # 查看帮助\nhexo version #查看Hexo的版本\n</code></pre><ul>\n<li>简写</li>\n</ul>\n<pre><code>hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n</code></pre><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://xdlrt.github.io/2016/02/16/2016-02-16/\">卢睿韬学长的自留地</a><br><a href=\"http://baixin.io/2015/08/HEXO搭建个人博客/\">潘柏信,搭建个人博客</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj2aooqie000azlwpktd90l6c","tag_id":"cj2aooqi20004zlwpdvrst7lt","_id":"cj2aooqih000dzlwplb08s35i"},{"post_id":"cj2aooqhv0001zlwpbpbz2pyc","tag_id":"cj2aooqi20004zlwpdvrst7lt","_id":"cj2aooqim000izlwpjg8scg98"},{"post_id":"cj2aooqhv0001zlwpbpbz2pyc","tag_id":"cj2aooqid0009zlwpyur1k7tw","_id":"cj2aooqio000kzlwpnpr8x1rk"},{"post_id":"cj2aooqhv0001zlwpbpbz2pyc","tag_id":"cj2aooqih000czlwpdh94lyrd","_id":"cj2aooqix000nzlwpwnywene4"},{"post_id":"cj2aooqia0007zlwpgt2t33i5","tag_id":"cj2aooqik000gzlwp7van0toc","_id":"cj2aooqiz000pzlwprbqi5odd"},{"post_id":"cj2aooqic0008zlwpk2had5zc","tag_id":"cj2aooqip000lzlwp2u7re6hc","_id":"cj2aooqj1000szlwp9v0l42qw"},{"post_id":"cj2aooqic0008zlwpk2had5zc","tag_id":"cj2aooqi20004zlwpdvrst7lt","_id":"cj2aooqj1000tzlwpn7ugzvf9"},{"post_id":"cj2aooqil000hzlwppw91ddsb","tag_id":"cj2aooqj0000rzlwpam15s4mw","_id":"cj2aooqj2000vzlwpihqva2ge"},{"post_id":"cj2aooqil000hzlwppw91ddsb","tag_id":"cj2aooqi20004zlwpdvrst7lt","_id":"cj2aooqj3000wzlwptw92waxm"},{"post_id":"cj2aooqin000jzlwp2hd16doo","tag_id":"cj2aooqj2000uzlwp4e0r71d4","_id":"cj2aooqj4000zzlwpsnlspgt6"},{"post_id":"cj2aooqin000jzlwp2hd16doo","tag_id":"cj2aooqj3000xzlwpo1l212kp","_id":"cj2aooqj80010zlwpaj6a13lh"},{"post_id":"cj2aooqiy000ozlwpn5sljyl7","tag_id":"cj2aooqi20004zlwpdvrst7lt","_id":"cj2aooqj90013zlwpaltexns0"},{"post_id":"cj2aooqiy000ozlwpn5sljyl7","tag_id":"cj2aooqj0000rzlwpam15s4mw","_id":"cj2aooqj90014zlwp7wpmzsl6"},{"post_id":"cj2aooqiy000ozlwpn5sljyl7","tag_id":"cj2aooqj90011zlwpku36353n","_id":"cj2aooqj90016zlwpzpkib8r5"},{"post_id":"cj2aooqiz000qzlwp30gddt2m","tag_id":"cj2aooqj90012zlwps6d0yoek","_id":"cj2aooqja0017zlwpd66bcff7"},{"post_id":"cj2aooqiz000qzlwp30gddt2m","tag_id":"cj2aooqj90015zlwp1p8xm8d0","_id":"cj2aooqja0018zlwp0eyw9y9l"}],"Tag":[{"name":"javascript","_id":"cj2aooqi20004zlwpdvrst7lt"},{"name":"ES6","_id":"cj2aooqid0009zlwpyur1k7tw"},{"name":"ES5","_id":"cj2aooqih000czlwpdh94lyrd"},{"name":"JavaScript","_id":"cj2aooqik000gzlwp7van0toc"},{"name":"react","_id":"cj2aooqip000lzlwp2u7re6hc"},{"name":"node","_id":"cj2aooqj0000rzlwpam15s4mw"},{"name":"Xunfeng","_id":"cj2aooqj2000uzlwp4e0r71d4"},{"name":"黑天很黑","_id":"cj2aooqj3000xzlwpo1l212kp"},{"name":"koa2","_id":"cj2aooqj90011zlwpku36353n"},{"name":"搭建hexo","_id":"cj2aooqj90012zlwps6d0yoek"},{"name":"git","_id":"cj2aooqj90015zlwp1p8xm8d0"}]}}