{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/assets/eventloop1.jpg","path":"assets/eventloop1.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/favicon.svg","path":"favicon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.project","hash":"4679bdfe179f3c66a07355e14fb628178a3c7e6e","modified":1481640559000},{"_id":"source/.DS_Store","hash":"22854ca858da317cfca30727f62439e8e29d8135","modified":1516593927836},{"_id":"source/favicon.ico","hash":"a7169226e85e1b58a4eac43a6b2fd63a140c4f26","modified":1481384508000},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1479650522000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1479650522000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1479650522000},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1479650522000},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1479650522000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1479650522000},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1479650522000},{"_id":"themes/next/_config.yml","hash":"d855fda261374f79e4a8531a343c109947d41693","modified":1493910740000},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1479650522000},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1479650522000},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1479650522000},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1479650524000},{"_id":"themes/next/.DS_Store","hash":"746a1ce8d8504ef62a75c9f49f9ef9f410444d72","modified":1507986189747},{"_id":"source/_posts/JavaScript设计模式.md","hash":"bb40eb107f5444c99cf5272212f80fa944c518bf","modified":1501312356000},{"_id":"source/_posts/Currying-in-JavaScript.md","hash":"48954ae787ceeb1a04ec4ff4de68a89aa7acde22","modified":1514427584126},{"_id":"source/_posts/ES6与ES5.md","hash":"055ab3286c413daeb52eb4babb8803564abab20f","modified":1508036025868},{"_id":"source/_posts/.DS_Store","hash":"97d713e55a25caa29822459d1cb0b00fdc404cec","modified":1485169741000},{"_id":"source/_posts/TypeScript中的OOP.md","hash":"d1ec0f7ad694a57722b5241377c1ecb3a914bb0e","modified":1508036084947},{"_id":"source/_posts/angular4-directive入场动画.md","hash":"db72334f2438fae14d31e0a1d82d1bf0a0355459","modified":1511491887278},{"_id":"source/_posts/Rx入门学习.md","hash":"cb81c605e859440601c8642286d93e393eb77da6","modified":1502637145000},{"_id":"source/_posts/WebGL-study.md","hash":"3f236d83bcb1bdf012d082439393dcbec23dae2b","modified":1511080098904},{"_id":"source/_posts/cssWorld.md","hash":"65155a4b09bffe5fb3d102a35f9020ad00ee1cba","modified":1515315853000},{"_id":"source/_posts/angular4入门.md","hash":"93d10ca6801349e77de6283eb5f220f03180271b","modified":1508035918806},{"_id":"source/_posts/less-study.md","hash":"523a76d6012fd3801633c4bf1851dea1d319312d","modified":1516711640193},{"_id":"source/_posts/js中的arguments.md","hash":"05359359dc2c0326b834873e239a9363670cc69f","modified":1516590471630},{"_id":"source/_posts/leetCode.md","hash":"eca6b65af063db16696d6d62a2f09be589af0bc6","modified":1516625202304},{"_id":"source/_posts/css布局.md","hash":"7f3e9b0b2b8c41c7b6812eb21bca3e5d38504dcf","modified":1508035948452},{"_id":"source/_posts/mobx.md","hash":"480ab9a36147bbdf0beb4f7e829780c21a7cb4c4","modified":1512311155294},{"_id":"source/_posts/mongodb初探.md","hash":"c547eb5d7e3af5c7f7ea3b664de99413fdc13487","modified":1485273810000},{"_id":"source/_posts/mongodb安全认证.md","hash":"e95817484aa6c79d5f144a73b84c2aa4e545d244","modified":1496840299000},{"_id":"source/_posts/mongodb的一些操作.md","hash":"2b7c33ed21c1d2592288e8b953e58c20ba09e5f5","modified":1491017750000},{"_id":"source/_posts/redux.md","hash":"71d7f0d18221a62d7a7b824faadac5073fee9c18","modified":1512314395939},{"_id":"source/_posts/node-events.md","hash":"beddebd4dcf442c0352d649fd3493d06582ef3dc","modified":1513436264930},{"_id":"source/_posts/promise.md","hash":"063360e38aa68283a3891f3991c649e3c53c2dbb","modified":1513767550380},{"_id":"source/_posts/three-js入门.md","hash":"79f637d9e5f0ef247c7f28422d3b50798153be3e","modified":1508035910155},{"_id":"source/_posts/softwareEngineering.md","hash":"17357d71e21bc6805903c5e781e925db08c610bb","modified":1511968643067},{"_id":"source/_posts/translate-koa2.md","hash":"669f78c9e4318ac3001555bfff0b898227ec5df4","modified":1491306390000},{"_id":"source/_posts/ts数据结构.md","hash":"4f867066d7b155e66f4da87ce0e8779cb9a25651","modified":1508051966524},{"_id":"source/_posts/第一篇博客.md","hash":"917edce992584c50e153c5e2504b0f68d580b305","modified":1479744312000},{"_id":"source/_posts/window-API.md","hash":"742392a746a00d7b2dfc0e43200de3e2ead3e5b6","modified":1512094089639},{"_id":"source/_posts/深入EventLoop与JavaScript线程.md","hash":"09621ebbea7fd77e8ba238d2d5c87296aa6e4fbe","modified":1516618764793},{"_id":"source/_posts/基于websocket实现服务器浏览器持续通信.md","hash":"0051513a5d43fb8324a65af03b0f84e147dfa86a","modified":1512307823841},{"_id":"source/_posts/观察者模式与订阅发布模式.md","hash":"ba33eb67306671a4526469cc5e84ad999ab0783c","modified":1514453101198},{"_id":"source/categories/index.md","hash":"4cd81f62bc5c4fd51d29c61081a6f3936479fc49","modified":1479658142000},{"_id":"source/_posts/记录第一次搭建hexo.md","hash":"a4a6f94aec73fb16d24407bb50b809c7adf7cf38","modified":1508036069791},{"_id":"source/about/about.md","hash":"d918ea347c2d46c29ce64dd25abec82730169cac","modified":1493728428000},{"_id":"source/_posts/基础题收集.md","hash":"ccafa29671e1729df666703bab1eef0f654e702a","modified":1512784613554},{"_id":"source/assets/eventloop1.jpg","hash":"45ea2dd9284ec9717d76a8015ca12f355e6d5482","modified":1516594196265},{"_id":"source/tags/index.md","hash":"cf63aadf6e84d3583ef397ee6daebdea3b082c10","modified":1479744718000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1479650522000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1479650522000},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1479650522000},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1479650522000},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1479650522000},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1479650522000},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1479650522000},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1479650522000},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1479650522000},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1479650522000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1479650522000},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1479650522000},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1479650522000},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1479650522000},{"_id":"themes/next/layout/_layout.swig","hash":"b4ef30f7da073bf2a9052186f76e0e080de1c794","modified":1479650522000},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1479650522000},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1479650522000},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1479650522000},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1479650522000},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1479650524000},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1479650524000},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1479650524000},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1479650524000},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1479650524000},{"_id":"themes/next/scripts/.DS_Store","hash":"8a3b7686b6697f2340ae3055abafa6fb2998d8cc","modified":1507986152695},{"_id":"themes/next/source/favicon.svg","hash":"b12867228c15df5638c2edc4bf4ed7c21b31f163","modified":1479785784000},{"_id":"themes/next/source/.DS_Store","hash":"30e38369edcc9ca1626d47b1a909a8269506686b","modified":1507986171779},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1479650526000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1479650526000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1479650526000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479650524000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1479650522000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1479650522000},{"_id":"themes/next/layout/_macro/post.swig","hash":"abfc88f34f2c0ae52229c4ffa577b00ad7cecdc6","modified":1479650522000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1479650522000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1479650522000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3b261c758a7673d91c116367be1bb5223403f9e0","modified":1479650522000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1479650522000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1479650522000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1479650522000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1479650522000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1479650522000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"168430bd87ca8212cf9773b5dd94f52b805ef210","modified":1479650522000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1479650522000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a5ffadb516522f85c052b290b94c0e4af3002644","modified":1479650522000},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1479650522000},{"_id":"themes/next/layout/_partials/header.swig","hash":"d9b10a92fdccd57a0c0d6773831f9c1b0f1bb449","modified":1479650522000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1479650522000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1479650522000},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1479650522000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1479650524000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1479650524000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1479650524000},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1479650524000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1479650524000},{"_id":"themes/next/source/css/.DS_Store","hash":"594e19fc6dacefee8960e9dd24c78cf3ee636044","modified":1507986184721},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1479650524000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1479650524000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1479650524000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1479650524000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1479650524000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1479650524000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1479650524000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1479650524000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1479650524000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479650524000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1479650524000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479650524000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479650524000},{"_id":"themes/next/source/js/.DS_Store","hash":"de7fda9da6aec6e2063655fdd2e63045fa2c5111","modified":1507986157718},{"_id":"themes/next/source/lib/.DS_Store","hash":"553bfb12cff51d89e0c191b98fef380d6140427c","modified":1507986171778},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479650522000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479650522000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479650524000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479650524000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479650524000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479650524000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479650524000},{"_id":"themes/next/source/images/avatar.jpg","hash":"0f8f062ea0ff9bbfa8b3409b60e53e34f2d3891b","modified":1479655398000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1479650522000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1479650522000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1479650522000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"9c8f4b2a29741d96adf0b8fef52ae7f4396f27f5","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1479650522000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1479650522000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1479650522000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1479650522000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1479650522000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1479650522000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1479650522000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1479650522000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1479650522000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1479650522000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1479650524000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1479650524000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1479650524000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1479650524000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1479650524000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1479650524000},{"_id":"themes/next/source/js/src/.DS_Store","hash":"ea0f580bd77666f5029f6efa2f0da9a7c9d32ee0","modified":1507986165831},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1479650524000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1479650524000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1479650524000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1479650524000},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1479650524000},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1479650524000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1479650524000},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1479650524000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479650524000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1479650524000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1479650524000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1479650524000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1479650524000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1479650524000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1479650524000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1479650524000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1479650526000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1479650526000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1479650526000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1479650526000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1479650526000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1479650526000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1479650526000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1479650526000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1479650526000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1479650526000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1479650526000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1479650526000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1479650526000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1479650526000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1479650526000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1479650522000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1479650522000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1479650524000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1479650524000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1479650524000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1479650524000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1479650524000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1479650524000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1479650524000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1479650524000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1479650524000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479650524000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1479650526000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1479650526000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1479650526000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1479650526000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1479650526000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479650526000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479650526000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479650526000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479650526000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1479650526000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e2066dd20747e3125c969ef8459d0015fa5233a2","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1479650524000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479650524000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479650524000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1479650524000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479650526000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1479650524000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1479650526000}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2016-11-20T16:08:38.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-21 00:08:38\ntype: \"categories\"\n---\n","updated":"2016-11-20T16:09:02.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjcr55ukk0001jbzesgl3l3zi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About XunFeng","_content":"有的人心里，\n藏着一片幽暗森林；\n有的人心里，\n留着一个光亮出口。\n<!--more-->\n\n<blockquote class=\"blockquote-center\">学会遗忘</blockquote>","source":"about/about.md","raw":"---\ntitle: About XunFeng\n---\n有的人心里，\n藏着一片幽暗森林；\n有的人心里，\n留着一个光亮出口。\n<!--more-->\n\n<blockquote class=\"blockquote-center\">学会遗忘</blockquote>","date":"2017-11-25T13:40:43.226Z","updated":"2017-05-02T12:33:48.000Z","path":"about/about.html","comments":1,"layout":"page","_id":"cjcr55ukn0003jbzebrtkh1jq","content":"<p>有的人心里，<br>藏着一片幽暗森林；<br>有的人心里，<br>留着一个光亮出口。<br><a id=\"more\"></a></p>\n<blockquote class=\"blockquote-center\">学会遗忘</blockquote>","site":{"data":{}},"excerpt":"<p>有的人心里，<br>藏着一片幽暗森林；<br>有的人心里，<br>留着一个光亮出口。<br>","more":"</p>\n<blockquote class=\"blockquote-center\">学会遗忘</blockquote>"},{"title":"tags","date":"2016-11-20T16:07:39.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-21 00:07:39\ntype: \"tags\"\n---\n","updated":"2016-11-21T16:11:58.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjcr55uqg002ajbze2ys7j356","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Currying in JavaScript","date":"2017-12-20T06:26:08.000Z","_content":"<!--more-->\n\n## Curring in JavaScript\n柯里化是一个转换过程：把接受多个参数的函数转换成接受单一参数的函数\n如果其他参数也是必要的，则返回接受余下的参数且返回结果的新函数\n是一个使函数理解并处理部分应用的过程\n原理：预先将某些参数传入，得到一个简单的函数。而这些预先传入的参数保存在闭包中。\n\n现在我们有这样一个函数，接受三个参数\n```js\nfunction add (num1, num2, num3) {\n  return num1 + num2 + num3;\n}\n```\n\n### 把函数`add`柯里化\n```js\nvar curryAdd = curry(add);\n  // return function(num1, num2, num3)\nvar curryAddOne = curryAdd(1);\n  // return function(num2, num3)\nvar curryAddTwo = curryAddOne(2);\n  // return function(num3)\nvar curryAddThree = curryAddTwo(3);\n  // return 6\n```\n\n### 手动柯里化\n手动柯里化只需要我们在当前的函数中`return`新的函数\n\n```js\nfunction add (num1) {\n  return function (num2) {\n    return function (num3) {\n      // doing somethings with num1, num2, num3\n      return  num1 + num2 + num3;\n    }\n  }\n}\n```\n\n### 辅助用的curry函数\n\n```js\nfunction curry (fn) {\n  var slice = Array.proptype.slice,\n      stored_args = slice.call(arguments, 1);\n  return function () {\n    var new_args = slice.call(arguments),\n        args = stored_args.concat(new_args);\n    return fn.apply(null, args);\n  }\n}\n\nfunction curry(fn) {\n  var  _argLen = fn.length\n\n  function wrap() {\n    var _args = [].slice.call(arguments)\n    function act() {\n      _args = _args.concat([].slice.call(arguments))\n      if(_args.length === _argLen) {\n        return fn.apply(null, _args)\n      }\n      return arguments.callee\n      }\n    if(_args.length === _argLen) {\n      return fn.apply(null, _args)\n    }\n\n    act.toString = function() {\n      return fn.toString()\n    }\n    return act\n  }\n\n  return wrap\n}\n\n```","source":"_posts/Currying-in-JavaScript.md","raw":"---\ntitle: Currying in JavaScript\ndate: 2017-12-20 14:26:08\ntags:\n  - JavaScript\n---\n<!--more-->\n\n## Curring in JavaScript\n柯里化是一个转换过程：把接受多个参数的函数转换成接受单一参数的函数\n如果其他参数也是必要的，则返回接受余下的参数且返回结果的新函数\n是一个使函数理解并处理部分应用的过程\n原理：预先将某些参数传入，得到一个简单的函数。而这些预先传入的参数保存在闭包中。\n\n现在我们有这样一个函数，接受三个参数\n```js\nfunction add (num1, num2, num3) {\n  return num1 + num2 + num3;\n}\n```\n\n### 把函数`add`柯里化\n```js\nvar curryAdd = curry(add);\n  // return function(num1, num2, num3)\nvar curryAddOne = curryAdd(1);\n  // return function(num2, num3)\nvar curryAddTwo = curryAddOne(2);\n  // return function(num3)\nvar curryAddThree = curryAddTwo(3);\n  // return 6\n```\n\n### 手动柯里化\n手动柯里化只需要我们在当前的函数中`return`新的函数\n\n```js\nfunction add (num1) {\n  return function (num2) {\n    return function (num3) {\n      // doing somethings with num1, num2, num3\n      return  num1 + num2 + num3;\n    }\n  }\n}\n```\n\n### 辅助用的curry函数\n\n```js\nfunction curry (fn) {\n  var slice = Array.proptype.slice,\n      stored_args = slice.call(arguments, 1);\n  return function () {\n    var new_args = slice.call(arguments),\n        args = stored_args.concat(new_args);\n    return fn.apply(null, args);\n  }\n}\n\nfunction curry(fn) {\n  var  _argLen = fn.length\n\n  function wrap() {\n    var _args = [].slice.call(arguments)\n    function act() {\n      _args = _args.concat([].slice.call(arguments))\n      if(_args.length === _argLen) {\n        return fn.apply(null, _args)\n      }\n      return arguments.callee\n      }\n    if(_args.length === _argLen) {\n      return fn.apply(null, _args)\n    }\n\n    act.toString = function() {\n      return fn.toString()\n    }\n    return act\n  }\n\n  return wrap\n}\n\n```","slug":"Currying-in-JavaScript","published":1,"updated":"2017-12-28T02:19:44.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ukl0002jbzezs0l90x6","content":"<a id=\"more\"></a>\n<h2 id=\"Curring-in-JavaScript\"><a href=\"#Curring-in-JavaScript\" class=\"headerlink\" title=\"Curring in JavaScript\"></a>Curring in JavaScript</h2><p>柯里化是一个转换过程：把接受多个参数的函数转换成接受单一参数的函数<br>如果其他参数也是必要的，则返回接受余下的参数且返回结果的新函数<br>是一个使函数理解并处理部分应用的过程<br>原理：预先将某些参数传入，得到一个简单的函数。而这些预先传入的参数保存在闭包中。</p>\n<p>现在我们有这样一个函数，接受三个参数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">num1, num2, num3</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> num1 + num2 + num3;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"把函数add柯里化\"><a href=\"#把函数add柯里化\" class=\"headerlink\" title=\"把函数add柯里化\"></a>把函数<code>add</code>柯里化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> curryAdd = curry(add);</div><div class=\"line\">  <span class=\"comment\">// return function(num1, num2, num3)</span></div><div class=\"line\"><span class=\"keyword\">var</span> curryAddOne = curryAdd(<span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"comment\">// return function(num2, num3)</span></div><div class=\"line\"><span class=\"keyword\">var</span> curryAddTwo = curryAddOne(<span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"comment\">// return function(num3)</span></div><div class=\"line\"><span class=\"keyword\">var</span> curryAddThree = curryAddTwo(<span class=\"number\">3</span>);</div><div class=\"line\">  <span class=\"comment\">// return 6</span></div></pre></td></tr></table></figure>\n<h3 id=\"手动柯里化\"><a href=\"#手动柯里化\" class=\"headerlink\" title=\"手动柯里化\"></a>手动柯里化</h3><p>手动柯里化只需要我们在当前的函数中<code>return</code>新的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">num1</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num3</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// doing somethings with num1, num2, num3</span></div><div class=\"line\">      <span class=\"keyword\">return</span>  num1 + num2 + num3;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"辅助用的curry函数\"><a href=\"#辅助用的curry函数\" class=\"headerlink\" title=\"辅助用的curry函数\"></a>辅助用的curry函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span> (<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> slice = <span class=\"built_in\">Array</span>.proptype.slice,</div><div class=\"line\">      stored_args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> new_args = slice.call(<span class=\"built_in\">arguments</span>),</div><div class=\"line\">        args = stored_args.concat(new_args);</div><div class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span>  _argLen = fn.length</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _args = [].slice.call(<span class=\"built_in\">arguments</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">act</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      _args = _args.concat([].slice.call(<span class=\"built_in\">arguments</span>))</div><div class=\"line\">      <span class=\"keyword\">if</span>(_args.length === _argLen) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, _args)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>.callee</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(_args.length === _argLen) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, _args)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    act.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> fn.toString()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> act</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> wrap</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Curring-in-JavaScript\"><a href=\"#Curring-in-JavaScript\" class=\"headerlink\" title=\"Curring in JavaScript\"></a>Curring in JavaScript</h2><p>柯里化是一个转换过程：把接受多个参数的函数转换成接受单一参数的函数<br>如果其他参数也是必要的，则返回接受余下的参数且返回结果的新函数<br>是一个使函数理解并处理部分应用的过程<br>原理：预先将某些参数传入，得到一个简单的函数。而这些预先传入的参数保存在闭包中。</p>\n<p>现在我们有这样一个函数，接受三个参数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">num1, num2, num3</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> num1 + num2 + num3;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"把函数add柯里化\"><a href=\"#把函数add柯里化\" class=\"headerlink\" title=\"把函数add柯里化\"></a>把函数<code>add</code>柯里化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> curryAdd = curry(add);</div><div class=\"line\">  <span class=\"comment\">// return function(num1, num2, num3)</span></div><div class=\"line\"><span class=\"keyword\">var</span> curryAddOne = curryAdd(<span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"comment\">// return function(num2, num3)</span></div><div class=\"line\"><span class=\"keyword\">var</span> curryAddTwo = curryAddOne(<span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"comment\">// return function(num3)</span></div><div class=\"line\"><span class=\"keyword\">var</span> curryAddThree = curryAddTwo(<span class=\"number\">3</span>);</div><div class=\"line\">  <span class=\"comment\">// return 6</span></div></pre></td></tr></table></figure>\n<h3 id=\"手动柯里化\"><a href=\"#手动柯里化\" class=\"headerlink\" title=\"手动柯里化\"></a>手动柯里化</h3><p>手动柯里化只需要我们在当前的函数中<code>return</code>新的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">num1</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num3</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// doing somethings with num1, num2, num3</span></div><div class=\"line\">      <span class=\"keyword\">return</span>  num1 + num2 + num3;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"辅助用的curry函数\"><a href=\"#辅助用的curry函数\" class=\"headerlink\" title=\"辅助用的curry函数\"></a>辅助用的curry函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span> (<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> slice = <span class=\"built_in\">Array</span>.proptype.slice,</div><div class=\"line\">      stored_args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> new_args = slice.call(<span class=\"built_in\">arguments</span>),</div><div class=\"line\">        args = stored_args.concat(new_args);</div><div class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span>  _argLen = fn.length</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _args = [].slice.call(<span class=\"built_in\">arguments</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">act</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      _args = _args.concat([].slice.call(<span class=\"built_in\">arguments</span>))</div><div class=\"line\">      <span class=\"keyword\">if</span>(_args.length === _argLen) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, _args)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>.callee</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(_args.length === _argLen) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, _args)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    act.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> fn.toString()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> act</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> wrap</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"ES6的学习（一）","date":"2017-02-18T14:03:07.000Z","_content":"\n关于ES6的学习\n<!--more-->\n\n### ES5 => ES6\n---\n##### 箭头函数\n- 与函数表达式相比，箭头函数有更短的语法。\n\n```js\n\tfunction (i) { return i * 2} //ES5\n\t(i) => i * 2\t//ES6\n```\n复杂时需要`{}`包裹\n```js\n\tfunction (i, j) {\n\t\ti++\n\t\tj++\n\t\treturn i + j\n\t}  // ES5\n\t(i, j) => {i++, j++, return i + j} // ES6\n```\n- 箭头函数没有自身的this，从外层继承this。\n- 箭头函数通常是匿名的。\n\n\n ##### 块级作用域\n - ES5中只有全局作用域与函数作用域,因此内层变量将会覆盖外层变量\n - let 提供块级作用域,let命名的变量只在当前块内起作用\n - const 声明的是常量，不可更改\n\n```js\n  var a = 1\n  var b = 2\n  var c = 3\n  if (true) {\n    var a = 10  // 函数作用域\n    let b = 20  // if块内的作用域\n        c = 30  // es5解决方法\n    console.log('a:' + a)\n    console.log('b:' + b)\n    console.log('c:' + c)\n  }\n  console.log('a:' + a)\n  console.log('b:' + b)\n  console.log('c:' + c)\n```\nvar声明的变量在循环时新值会覆盖旧值，导致输出的变量都为最终值\n```js\nvar a = []\nfor (var i = 0; i < 9; i++) {\n  a[i] = function () {\n\t\tconsole.log(i)\n\t}\n}\na[2](); // 9\n```\nES5中利用闭包解决这一问题\n```js\nfunction test (index) {\n\t\tvar testback = function () {\n\t\t\tconsole.log(index)\n\t\t}\n\t\treturn testback\n}\nvar a = []\nfor (var i = 0; i < 9; i++) {\n  a[i] = test(i)\n}\na[2]()\n```\nES6中仅仅使用let即可解决\n```js\nvar a = []\nfor (let i = 0; i < 9; i++) {\n  a[i] = function () {\n\t\tconsole.log(i)\n\t}\n}\na[2](); // 2\n```\nconst声明常量\n```js\nconst a = 1\na = 10\nconsole.log(a)\n```\n\n##### 模版字符串\n- ES5中，当需要插入大量html文档时需要引用template插件或是用大量‘+’连接\n- 模版字符串可直接用'``'标识起始\n- 模板字符串可以包含嵌入式表达式,对象字面量,甚至是函数\n\n```js\nvar myName = 'xunfeng'\nconsole.log(`your name is ${myName}`) // your name is xunfeng\n\nvar people = {\n  name: 'xunfeng',\n  age: 20\n}\nconsole.log(`your name is ${people.name}, your age is ${people.age}`)\n// your name is xunfeng, your age is 20\n\nfunction fn () {\n  return 'function'\n}\nconsole.log(`可以嵌套函数：${fn()}`)\n```\n- 模板字符串可以在表达式内进行数学运算\n\n```js\nvar a = 10\nvar b = 20\nconsole.log(`a+b=${a+b}`) //a+b=30\n```\n- 模板字符串内保留空格，不需要换行符即可换行\n\n```js\nconsole.log(`第一行\n第二行`)\n// 第一行\n// 第二行\n```\n\n#####  数值扩展 Numeric Literals\n- 支持二进制(0b)和八进制(0o)新写法\n\n```js\n0b111110111 === 503 // true\n0o767 === 503 // true\n\n将二进制或八进制转换成十进制\nNumber('0b111')  // 7\nNumber('0o10')  // 8\n```\n- 新的方法\n\n```js\nNumber.isFinite() // 检查一个数值是否为有限\nNumber.isNaN()  // 检查一个数值是否为NaN\nNumber.isInteger()  // 检查一个数值是否为整数\nNumber.EPSILON  // 极小的常量，设定的误差范围\n```\n- Math对象的扩展\n\n```js\nMath.trunc()  // 去除一个数的小数部分，返回整数部分\nMath.sign() // 判断一个数到底是正数、负数、还是零\nMath.cbrt() // 用于计算一个数的立方根\nMath.hypot() // 返回所有参数的平方和的平方根\nMath.expm1() // Math.expm1(x)返回ex - 1，即Math.exp(x) - 1\nMath.log1p() // Math.log1p(x)方法返回1 + x的自然对数\nMath.log10() // Math.log10(x)返回以10为底的x的对数\nMath.log2() // Math.log2(x)返回以2为底的x的对数\nMath.sinh(x) // 返回x的双曲正弦（hyperbolic sine）\nMath.cosh(x) // 返回x的双曲余弦（hyperbolic cosine）\nMath.tanh(x) // 返回x的双曲正切（hyperbolic tangent）\nMath.asinh(x) // 返回x的反双曲正弦（inverse hyperbolic sine）\nMath.acosh(x) // 返回x的反双曲余弦（inverse hyperbolic cosine）\nMath.atanh(x) // 返回x的反双曲正切（inverse hyperbolic tangent）\n```\n- 指数运算符 **\n\n```js\nconsole.log(2 ** 3) // 8\n```\n\n##### 对象部分扩展\n- 变量和函数可直接作为对象的属性和方法\n\n```js\n<!-- ES6 -->\nvar object = {\n  value: 42,\n  toString() {\n    return this.value\n  }\n}\nconsole.log(object.toString() === 42) // true\n\n<!-- ES5 -->\nvar object = {\n  value: 42,\n  toString: function toString() {\n    return this.value\n  }\n}\n\nconsole.log(object.toString() === 42) // true\n```\n- 计算属性名可以用变量当做对象的属性名\n\n```js\nvar computed = 'calc'\nvar comFn = {\n  [computed + 'xun']: 'hi',\n  [computed + 'feng']: 'hello'\n}\nconsole.log(comFn['calcxun']) // hi\nconsole.log(comFn['calcfeng']) // hello\n```\n\n##### 解构\n- 允许从数组或对象中提取数据并对变量赋值\n\n```js\nvar a = 1\nvar b = 2\nvar c = {a, b}\nconsole.log(c) // {a: 1, b: 2}\n\nvar c = {a: 1, b: 2}\nvar {a, b} = c\nconsole.log(a, b) // 1 2\n```\n\n##### 默认参数 default\n- ES6可以指定默认参数在arguments中\n\n```js\nfunction myFn(mes = 'hello') {\n  console.log(mes)\n}\nmyFn(); // hello\nmyFn('hi'); // hi\n```\n\n##### 其他参数 rest\n- 允许将部分参数作为一个单独的数组\n\n```js\nfunction myFn(a, ...b) {\n  var result = a\n   for(let i = 0; i<b.length; i++) {\n     result += b[i]\n   }\n   return result\n}\nconsole.log(myFn(1,2,3,4)) // 10\n```\n\n##### 迭代器 iterators && for of\n- 可以直接遍历容器的内容\n\n```js\nvar a=['x', 'y', 'z']\nfor (let i of a){\n  console.log(i)  // x y z\n}\n```\n\n##### 类 classes\n- constructor(构造方法)\n创建实例对象时设定的属性\n- extends(继承)\nclass之间可以通过extends相互继承，相比于原形链更简洁易懂\n- super\n  在子类constructor中调用父类的constructor\n- getter && setter\n在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\n- static 静态方法\n不会被实例对象继承，只能通过类或类继承来调用\n\n```js\nclass student {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n  getName () {\n    console.log(this.name)\n  }\n  get myAge() {\n    return this.age\n  }\n  set myAge(value) {\n    this._age = value\n  }\n  static bar() {\n    console.log('static')\n  }\n}\n// 创建实例对象\nvar xun = new student('xun', 20)\nxun.getName() // xun\nxun.bar() // TypeError: xun.bar is not a function. (In 'xun.bar()', 'xun.bar' is undefined)\nstudent.bar() // static\n// 继承\nclass Tom extends student {\n  constructor(name, age, sex) {\n    super(name, age)\n    this.sex = sex\n  }\n}\nvar tom = new Tom('tom', 20, 'man')\nconsole.log(tom)  // 实例对象属性\ntom.myAge = 22\nconsole.log(tom._age) // 22\nconsole.log(tom.myAge) // 20\n```\n\n##### 模块 modules\n- export 暴露对外接口\n- import 导入其他模块接口\n\n```js\n<!-- export.js -->\n//命名导出\nexport var foo = ...\nexport let bar = ...\nexport const MY_CONST = ...\n\nexport function myFunc() {\n   ...\n}\nexport function* myGeneratorFunc() {\n   ...\n}\nexport class MyClass {\n   ...\n}\n// default 导出\nexport default 123\nexport default function (x) {\n   return x\n}\nexport default x => x;\nexport default class {\n   constructor(x, y) {\n       this.x = x\n       this.y = y\n   }\n};\n//也可以自己列出所有导出内容\nconst MY_CONST = ...\nfunction myFunc() {\n   ...\n}\n\nexport { MY_CONST, myFunc }\n//或者在导出的时候给他们改个名字\nexport { MY_CONST as THE_CONST, myFunc as theFunc }\n\n//还可以导出从其他地方导入的模块\nexport * from 'src/other_module'\nexport { foo, bar } from 'src/other_module'\nexport { foo as myFoo, bar } from 'src/other_module'\n\n<!-- import.js -->\n\n// Default exports and named exports\nimport theDefault, { named1, named2 } from 'src/mylib'\nimport theDefault from 'src/mylib'\nimport { named1, named2 } from 'src/mylib'\n\n// Renaming: import named1 as myNamed1\nimport { named1 as myNamed1, named2 } from 'src/mylib'\n\n// Importing the module as an object\n// (with one property per named export)\nimport * as mylib from 'src/mylib'\n\n// Only load the module, don’t import anything\nimport 'src/mylib'\n```\n\n##### 参考链接\n[30分钟掌握ES6/ES2015核心内容](http://www.jianshu.com/p/ebfeb687eb70)\n[ECMAScript 6 入门](http://es6.ruanyifeng.com/?search=Spread&x=0&y=0)\n[ ECMAScript 6 equivalents in ES5](https://github.com/addyosmani/es6-equivalents-in-es5/blob/master/README.md#classes)\n","source":"_posts/ES6与ES5.md","raw":"---\ntitle: ES6的学习（一）\ndate: 2017-02-18 22:03:07\ntags:\n  - javascript\n  - ES6\n  - ES5\n---\n\n关于ES6的学习\n<!--more-->\n\n### ES5 => ES6\n---\n##### 箭头函数\n- 与函数表达式相比，箭头函数有更短的语法。\n\n```js\n\tfunction (i) { return i * 2} //ES5\n\t(i) => i * 2\t//ES6\n```\n复杂时需要`{}`包裹\n```js\n\tfunction (i, j) {\n\t\ti++\n\t\tj++\n\t\treturn i + j\n\t}  // ES5\n\t(i, j) => {i++, j++, return i + j} // ES6\n```\n- 箭头函数没有自身的this，从外层继承this。\n- 箭头函数通常是匿名的。\n\n\n ##### 块级作用域\n - ES5中只有全局作用域与函数作用域,因此内层变量将会覆盖外层变量\n - let 提供块级作用域,let命名的变量只在当前块内起作用\n - const 声明的是常量，不可更改\n\n```js\n  var a = 1\n  var b = 2\n  var c = 3\n  if (true) {\n    var a = 10  // 函数作用域\n    let b = 20  // if块内的作用域\n        c = 30  // es5解决方法\n    console.log('a:' + a)\n    console.log('b:' + b)\n    console.log('c:' + c)\n  }\n  console.log('a:' + a)\n  console.log('b:' + b)\n  console.log('c:' + c)\n```\nvar声明的变量在循环时新值会覆盖旧值，导致输出的变量都为最终值\n```js\nvar a = []\nfor (var i = 0; i < 9; i++) {\n  a[i] = function () {\n\t\tconsole.log(i)\n\t}\n}\na[2](); // 9\n```\nES5中利用闭包解决这一问题\n```js\nfunction test (index) {\n\t\tvar testback = function () {\n\t\t\tconsole.log(index)\n\t\t}\n\t\treturn testback\n}\nvar a = []\nfor (var i = 0; i < 9; i++) {\n  a[i] = test(i)\n}\na[2]()\n```\nES6中仅仅使用let即可解决\n```js\nvar a = []\nfor (let i = 0; i < 9; i++) {\n  a[i] = function () {\n\t\tconsole.log(i)\n\t}\n}\na[2](); // 2\n```\nconst声明常量\n```js\nconst a = 1\na = 10\nconsole.log(a)\n```\n\n##### 模版字符串\n- ES5中，当需要插入大量html文档时需要引用template插件或是用大量‘+’连接\n- 模版字符串可直接用'``'标识起始\n- 模板字符串可以包含嵌入式表达式,对象字面量,甚至是函数\n\n```js\nvar myName = 'xunfeng'\nconsole.log(`your name is ${myName}`) // your name is xunfeng\n\nvar people = {\n  name: 'xunfeng',\n  age: 20\n}\nconsole.log(`your name is ${people.name}, your age is ${people.age}`)\n// your name is xunfeng, your age is 20\n\nfunction fn () {\n  return 'function'\n}\nconsole.log(`可以嵌套函数：${fn()}`)\n```\n- 模板字符串可以在表达式内进行数学运算\n\n```js\nvar a = 10\nvar b = 20\nconsole.log(`a+b=${a+b}`) //a+b=30\n```\n- 模板字符串内保留空格，不需要换行符即可换行\n\n```js\nconsole.log(`第一行\n第二行`)\n// 第一行\n// 第二行\n```\n\n#####  数值扩展 Numeric Literals\n- 支持二进制(0b)和八进制(0o)新写法\n\n```js\n0b111110111 === 503 // true\n0o767 === 503 // true\n\n将二进制或八进制转换成十进制\nNumber('0b111')  // 7\nNumber('0o10')  // 8\n```\n- 新的方法\n\n```js\nNumber.isFinite() // 检查一个数值是否为有限\nNumber.isNaN()  // 检查一个数值是否为NaN\nNumber.isInteger()  // 检查一个数值是否为整数\nNumber.EPSILON  // 极小的常量，设定的误差范围\n```\n- Math对象的扩展\n\n```js\nMath.trunc()  // 去除一个数的小数部分，返回整数部分\nMath.sign() // 判断一个数到底是正数、负数、还是零\nMath.cbrt() // 用于计算一个数的立方根\nMath.hypot() // 返回所有参数的平方和的平方根\nMath.expm1() // Math.expm1(x)返回ex - 1，即Math.exp(x) - 1\nMath.log1p() // Math.log1p(x)方法返回1 + x的自然对数\nMath.log10() // Math.log10(x)返回以10为底的x的对数\nMath.log2() // Math.log2(x)返回以2为底的x的对数\nMath.sinh(x) // 返回x的双曲正弦（hyperbolic sine）\nMath.cosh(x) // 返回x的双曲余弦（hyperbolic cosine）\nMath.tanh(x) // 返回x的双曲正切（hyperbolic tangent）\nMath.asinh(x) // 返回x的反双曲正弦（inverse hyperbolic sine）\nMath.acosh(x) // 返回x的反双曲余弦（inverse hyperbolic cosine）\nMath.atanh(x) // 返回x的反双曲正切（inverse hyperbolic tangent）\n```\n- 指数运算符 **\n\n```js\nconsole.log(2 ** 3) // 8\n```\n\n##### 对象部分扩展\n- 变量和函数可直接作为对象的属性和方法\n\n```js\n<!-- ES6 -->\nvar object = {\n  value: 42,\n  toString() {\n    return this.value\n  }\n}\nconsole.log(object.toString() === 42) // true\n\n<!-- ES5 -->\nvar object = {\n  value: 42,\n  toString: function toString() {\n    return this.value\n  }\n}\n\nconsole.log(object.toString() === 42) // true\n```\n- 计算属性名可以用变量当做对象的属性名\n\n```js\nvar computed = 'calc'\nvar comFn = {\n  [computed + 'xun']: 'hi',\n  [computed + 'feng']: 'hello'\n}\nconsole.log(comFn['calcxun']) // hi\nconsole.log(comFn['calcfeng']) // hello\n```\n\n##### 解构\n- 允许从数组或对象中提取数据并对变量赋值\n\n```js\nvar a = 1\nvar b = 2\nvar c = {a, b}\nconsole.log(c) // {a: 1, b: 2}\n\nvar c = {a: 1, b: 2}\nvar {a, b} = c\nconsole.log(a, b) // 1 2\n```\n\n##### 默认参数 default\n- ES6可以指定默认参数在arguments中\n\n```js\nfunction myFn(mes = 'hello') {\n  console.log(mes)\n}\nmyFn(); // hello\nmyFn('hi'); // hi\n```\n\n##### 其他参数 rest\n- 允许将部分参数作为一个单独的数组\n\n```js\nfunction myFn(a, ...b) {\n  var result = a\n   for(let i = 0; i<b.length; i++) {\n     result += b[i]\n   }\n   return result\n}\nconsole.log(myFn(1,2,3,4)) // 10\n```\n\n##### 迭代器 iterators && for of\n- 可以直接遍历容器的内容\n\n```js\nvar a=['x', 'y', 'z']\nfor (let i of a){\n  console.log(i)  // x y z\n}\n```\n\n##### 类 classes\n- constructor(构造方法)\n创建实例对象时设定的属性\n- extends(继承)\nclass之间可以通过extends相互继承，相比于原形链更简洁易懂\n- super\n  在子类constructor中调用父类的constructor\n- getter && setter\n在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\n- static 静态方法\n不会被实例对象继承，只能通过类或类继承来调用\n\n```js\nclass student {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n  getName () {\n    console.log(this.name)\n  }\n  get myAge() {\n    return this.age\n  }\n  set myAge(value) {\n    this._age = value\n  }\n  static bar() {\n    console.log('static')\n  }\n}\n// 创建实例对象\nvar xun = new student('xun', 20)\nxun.getName() // xun\nxun.bar() // TypeError: xun.bar is not a function. (In 'xun.bar()', 'xun.bar' is undefined)\nstudent.bar() // static\n// 继承\nclass Tom extends student {\n  constructor(name, age, sex) {\n    super(name, age)\n    this.sex = sex\n  }\n}\nvar tom = new Tom('tom', 20, 'man')\nconsole.log(tom)  // 实例对象属性\ntom.myAge = 22\nconsole.log(tom._age) // 22\nconsole.log(tom.myAge) // 20\n```\n\n##### 模块 modules\n- export 暴露对外接口\n- import 导入其他模块接口\n\n```js\n<!-- export.js -->\n//命名导出\nexport var foo = ...\nexport let bar = ...\nexport const MY_CONST = ...\n\nexport function myFunc() {\n   ...\n}\nexport function* myGeneratorFunc() {\n   ...\n}\nexport class MyClass {\n   ...\n}\n// default 导出\nexport default 123\nexport default function (x) {\n   return x\n}\nexport default x => x;\nexport default class {\n   constructor(x, y) {\n       this.x = x\n       this.y = y\n   }\n};\n//也可以自己列出所有导出内容\nconst MY_CONST = ...\nfunction myFunc() {\n   ...\n}\n\nexport { MY_CONST, myFunc }\n//或者在导出的时候给他们改个名字\nexport { MY_CONST as THE_CONST, myFunc as theFunc }\n\n//还可以导出从其他地方导入的模块\nexport * from 'src/other_module'\nexport { foo, bar } from 'src/other_module'\nexport { foo as myFoo, bar } from 'src/other_module'\n\n<!-- import.js -->\n\n// Default exports and named exports\nimport theDefault, { named1, named2 } from 'src/mylib'\nimport theDefault from 'src/mylib'\nimport { named1, named2 } from 'src/mylib'\n\n// Renaming: import named1 as myNamed1\nimport { named1 as myNamed1, named2 } from 'src/mylib'\n\n// Importing the module as an object\n// (with one property per named export)\nimport * as mylib from 'src/mylib'\n\n// Only load the module, don’t import anything\nimport 'src/mylib'\n```\n\n##### 参考链接\n[30分钟掌握ES6/ES2015核心内容](http://www.jianshu.com/p/ebfeb687eb70)\n[ECMAScript 6 入门](http://es6.ruanyifeng.com/?search=Spread&x=0&y=0)\n[ ECMAScript 6 equivalents in ES5](https://github.com/addyosmani/es6-equivalents-in-es5/blob/master/README.md#classes)\n","slug":"ES6与ES5","published":1,"updated":"2017-10-15T02:53:45.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ukq0005jbzeswxbx2to","content":"<p>关于ES6的学习<br><a id=\"more\"></a></p>\n<h3 id=\"ES5-gt-ES6\"><a href=\"#ES5-gt-ES6\" class=\"headerlink\" title=\"ES5 =&gt; ES6\"></a>ES5 =&gt; ES6</h3><hr>\n<h5 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h5><ul>\n<li>与函数表达式相比，箭头函数有更短的语法。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123; <span class=\"keyword\">return</span> i * <span class=\"number\">2</span>&#125; <span class=\"comment\">//ES5</span></div><div class=\"line\">(i) =&gt; i * <span class=\"number\">2</span>\t<span class=\"comment\">//ES6</span></div></pre></td></tr></table></figure>\n<p>复杂时需要<code>{}</code>包裹<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i, j</span>) </span>&#123;</div><div class=\"line\">\ti++</div><div class=\"line\">\tj++</div><div class=\"line\">\t<span class=\"keyword\">return</span> i + j</div><div class=\"line\">&#125;  <span class=\"comment\">// ES5</span></div><div class=\"line\">(i, j) =&gt; &#123;i++, j++, <span class=\"keyword\">return</span> i + j&#125; <span class=\"comment\">// ES6</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>箭头函数没有自身的this，从外层继承this。</li>\n<li>箭头函数通常是匿名的。</li>\n</ul>\n<h5 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h5><ul>\n<li>ES5中只有全局作用域与函数作用域,因此内层变量将会覆盖外层变量</li>\n<li>let 提供块级作用域,let命名的变量只在当前块内起作用</li>\n<li>const 声明的是常量，不可更改</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>  <span class=\"comment\">// 函数作用域</span></div><div class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">20</span>  <span class=\"comment\">// if块内的作用域</span></div><div class=\"line\">      c = <span class=\"number\">30</span>  <span class=\"comment\">// es5解决方法</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a:'</span> + a)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b:'</span> + b)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'c:'</span> + c)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a:'</span> + a)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b:'</span> + b)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'c:'</span> + c)</div></pre></td></tr></table></figure>\n<p>var声明的变量在循环时新值会覆盖旧值，导致输出的变量都为最终值<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = []</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</div><div class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">2</span>](); <span class=\"comment\">// 9</span></div></pre></td></tr></table></figure></p>\n<p>ES5中利用闭包解决这一问题<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> testback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(index)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> testback</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = []</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</div><div class=\"line\">  a[i] = test(i)</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">2</span>]()</div></pre></td></tr></table></figure></p>\n<p>ES6中仅仅使用let即可解决<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = []</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</div><div class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">2</span>](); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<p>const声明常量<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span></div><div class=\"line\">a = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a)</div></pre></td></tr></table></figure></p>\n<h5 id=\"模版字符串\"><a href=\"#模版字符串\" class=\"headerlink\" title=\"模版字符串\"></a>模版字符串</h5><ul>\n<li>ES5中，当需要插入大量html文档时需要引用template插件或是用大量‘+’连接</li>\n<li>模版字符串可直接用’``’标识起始</li>\n<li>模板字符串可以包含嵌入式表达式,对象字面量,甚至是函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'xunfeng'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`your name is <span class=\"subst\">$&#123;myName&#125;</span>`</span>) <span class=\"comment\">// your name is xunfeng</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> people = &#123;</div><div class=\"line\">  name: <span class=\"string\">'xunfeng'</span>,</div><div class=\"line\">  age: <span class=\"number\">20</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`your name is <span class=\"subst\">$&#123;people.name&#125;</span>, your age is <span class=\"subst\">$&#123;people.age&#125;</span>`</span>)</div><div class=\"line\"><span class=\"comment\">// your name is xunfeng, your age is 20</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'function'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`可以嵌套函数：<span class=\"subst\">$&#123;fn()&#125;</span>`</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li>模板字符串可以在表达式内进行数学运算</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`a+b=<span class=\"subst\">$&#123;a+b&#125;</span>`</span>) <span class=\"comment\">//a+b=30</span></div></pre></td></tr></table></figure>\n<ul>\n<li>模板字符串内保留空格，不需要换行符即可换行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`第一行</span></div><div class=\"line\"><span class=\"string\">第二行`</span>)</div><div class=\"line\"><span class=\"comment\">// 第一行</span></div><div class=\"line\"><span class=\"comment\">// 第二行</span></div></pre></td></tr></table></figure>\n<h5 id=\"数值扩展-Numeric-Literals\"><a href=\"#数值扩展-Numeric-Literals\" class=\"headerlink\" title=\"数值扩展 Numeric Literals\"></a>数值扩展 Numeric Literals</h5><ul>\n<li>支持二进制(0b)和八进制(0o)新写法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0b111110111</span> === <span class=\"number\">503</span> <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"number\">0o767</span> === <span class=\"number\">503</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">将二进制或八进制转换成十进制</div><div class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'0b111'</span>)  <span class=\"comment\">// 7</span></div><div class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'0o10'</span>)  <span class=\"comment\">// 8</span></div></pre></td></tr></table></figure>\n<ul>\n<li>新的方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Number</span>.isFinite() <span class=\"comment\">// 检查一个数值是否为有限</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN()  <span class=\"comment\">// 检查一个数值是否为NaN</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isInteger()  <span class=\"comment\">// 检查一个数值是否为整数</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.EPSILON  <span class=\"comment\">// 极小的常量，设定的误差范围</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Math对象的扩展</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.trunc()  <span class=\"comment\">// 去除一个数的小数部分，返回整数部分</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.sign() <span class=\"comment\">// 判断一个数到底是正数、负数、还是零</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.cbrt() <span class=\"comment\">// 用于计算一个数的立方根</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.hypot() <span class=\"comment\">// 返回所有参数的平方和的平方根</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.expm1() <span class=\"comment\">// Math.expm1(x)返回ex - 1，即Math.exp(x) - 1</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.log1p() <span class=\"comment\">// Math.log1p(x)方法返回1 + x的自然对数</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.log10() <span class=\"comment\">// Math.log10(x)返回以10为底的x的对数</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.log2() <span class=\"comment\">// Math.log2(x)返回以2为底的x的对数</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.sinh(x) <span class=\"comment\">// 返回x的双曲正弦（hyperbolic sine）</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.cosh(x) <span class=\"comment\">// 返回x的双曲余弦（hyperbolic cosine）</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.tanh(x) <span class=\"comment\">// 返回x的双曲正切（hyperbolic tangent）</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.asinh(x) <span class=\"comment\">// 返回x的反双曲正弦（inverse hyperbolic sine）</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.acosh(x) <span class=\"comment\">// 返回x的反双曲余弦（inverse hyperbolic cosine）</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.atanh(x) <span class=\"comment\">// 返回x的反双曲正切（inverse hyperbolic tangent）</span></div></pre></td></tr></table></figure>\n<ul>\n<li>指数运算符 **</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> ** <span class=\"number\">3</span>) <span class=\"comment\">// 8</span></div></pre></td></tr></table></figure>\n<h5 id=\"对象部分扩展\"><a href=\"#对象部分扩展\" class=\"headerlink\" title=\"对象部分扩展\"></a>对象部分扩展</h5><ul>\n<li>变量和函数可直接作为对象的属性和方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- ES6 --&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">  value: <span class=\"number\">42</span>,</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.toString() === <span class=\"number\">42</span>) <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">&lt;!-- ES5 --&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">  value: <span class=\"number\">42</span>,</div><div class=\"line\">  toString: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toString</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.toString() === <span class=\"number\">42</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<ul>\n<li>计算属性名可以用变量当做对象的属性名</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> computed = <span class=\"string\">'calc'</span></div><div class=\"line\"><span class=\"keyword\">var</span> comFn = &#123;</div><div class=\"line\">  [computed + <span class=\"string\">'xun'</span>]: <span class=\"string\">'hi'</span>,</div><div class=\"line\">  [computed + <span class=\"string\">'feng'</span>]: <span class=\"string\">'hello'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(comFn[<span class=\"string\">'calcxun'</span>]) <span class=\"comment\">// hi</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(comFn[<span class=\"string\">'calcfeng'</span>]) <span class=\"comment\">// hello</span></div></pre></td></tr></table></figure>\n<h5 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h5><ul>\n<li>允许从数组或对象中提取数据并对变量赋值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">var</span> c = &#123;a, b&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;a, b&#125; = c</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">// 1 2</span></div></pre></td></tr></table></figure>\n<h5 id=\"默认参数-default\"><a href=\"#默认参数-default\" class=\"headerlink\" title=\"默认参数 default\"></a>默认参数 default</h5><ul>\n<li>ES6可以指定默认参数在arguments中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFn</span>(<span class=\"params\">mes = <span class=\"string\">'hello'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(mes)</div><div class=\"line\">&#125;</div><div class=\"line\">myFn(); <span class=\"comment\">// hello</span></div><div class=\"line\">myFn(<span class=\"string\">'hi'</span>); <span class=\"comment\">// hi</span></div></pre></td></tr></table></figure>\n<h5 id=\"其他参数-rest\"><a href=\"#其他参数-rest\" class=\"headerlink\" title=\"其他参数 rest\"></a>其他参数 rest</h5><ul>\n<li>允许将部分参数作为一个单独的数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFn</span>(<span class=\"params\">a, ...b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = a</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;b.length; i++) &#123;</div><div class=\"line\">     result += b[i]</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myFn(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)) <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure>\n<h5 id=\"迭代器-iterators-amp-amp-for-of\"><a href=\"#迭代器-iterators-amp-amp-for-of\" class=\"headerlink\" title=\"迭代器 iterators &amp;&amp; for of\"></a>迭代器 iterators &amp;&amp; for of</h5><ul>\n<li>可以直接遍历容器的内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=[<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> a)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i)  <span class=\"comment\">// x y z</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"类-classes\"><a href=\"#类-classes\" class=\"headerlink\" title=\"类 classes\"></a>类 classes</h5><ul>\n<li>constructor(构造方法)<br>创建实例对象时设定的属性</li>\n<li>extends(继承)<br>class之间可以通过extends相互继承，相比于原形链更简洁易懂</li>\n<li>super<br>在子类constructor中调用父类的constructor</li>\n<li>getter &amp;&amp; setter<br>在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</li>\n<li>static 静态方法<br>不会被实例对象继承，只能通过类或类继承来调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">student</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age</div><div class=\"line\">  &#125;</div><div class=\"line\">  getName () &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">  &#125;</div><div class=\"line\">  get myAge() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age</div><div class=\"line\">  &#125;</div><div class=\"line\">  set myAge(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._age = value</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">static</span> bar() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'static'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 创建实例对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> xun = <span class=\"keyword\">new</span> student(<span class=\"string\">'xun'</span>, <span class=\"number\">20</span>)</div><div class=\"line\">xun.getName() <span class=\"comment\">// xun</span></div><div class=\"line\">xun.bar() <span class=\"comment\">// TypeError: xun.bar is not a function. (In 'xun.bar()', 'xun.bar' is undefined)</span></div><div class=\"line\">student.bar() <span class=\"comment\">// static</span></div><div class=\"line\"><span class=\"comment\">// 继承</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tom</span> <span class=\"keyword\">extends</span> <span class=\"title\">student</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, age, sex) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(name, age)</div><div class=\"line\">    <span class=\"keyword\">this</span>.sex = sex</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> tom = <span class=\"keyword\">new</span> Tom(<span class=\"string\">'tom'</span>, <span class=\"number\">20</span>, <span class=\"string\">'man'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(tom)  <span class=\"comment\">// 实例对象属性</span></div><div class=\"line\">tom.myAge = <span class=\"number\">22</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(tom._age) <span class=\"comment\">// 22</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(tom.myAge) <span class=\"comment\">// 20</span></div></pre></td></tr></table></figure>\n<h5 id=\"模块-modules\"><a href=\"#模块-modules\" class=\"headerlink\" title=\"模块 modules\"></a>模块 modules</h5><ul>\n<li>export 暴露对外接口</li>\n<li>import 导入其他模块接口</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- <span class=\"keyword\">export</span>.js --&gt;</div><div class=\"line\"><span class=\"comment\">//命名导出</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> foo = ...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> bar = ...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> MY_CONST = ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">myGeneratorFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// default 导出</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"number\">123</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> x</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> x =&gt; x;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.x = x</div><div class=\"line\">       <span class=\"keyword\">this</span>.y = y</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//也可以自己列出所有导出内容</span></div><div class=\"line\"><span class=\"keyword\">const</span> MY_CONST = ...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; MY_CONST, myFunc &#125;</div><div class=\"line\"><span class=\"comment\">//或者在导出的时候给他们改个名字</span></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; MY_CONST <span class=\"keyword\">as</span> THE_CONST, myFunc <span class=\"keyword\">as</span> theFunc &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//还可以导出从其他地方导入的模块</span></div><div class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'src/other_module'</span></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; foo, bar &#125; <span class=\"keyword\">from</span> <span class=\"string\">'src/other_module'</span></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; foo <span class=\"keyword\">as</span> myFoo, bar &#125; <span class=\"keyword\">from</span> <span class=\"string\">'src/other_module'</span></div><div class=\"line\"></div><div class=\"line\">&lt;!-- <span class=\"keyword\">import</span>.js --&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Default exports and named exports</span></div><div class=\"line\"><span class=\"keyword\">import</span> theDefault, &#123; named1, named2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'src/mylib'</span></div><div class=\"line\"><span class=\"keyword\">import</span> theDefault <span class=\"keyword\">from</span> <span class=\"string\">'src/mylib'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; named1, named2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'src/mylib'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Renaming: import named1 as myNamed1</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; named1 <span class=\"keyword\">as</span> myNamed1, named2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'src/mylib'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Importing the module as an object</span></div><div class=\"line\"><span class=\"comment\">// (with one property per named export)</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mylib <span class=\"keyword\">from</span> <span class=\"string\">'src/mylib'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Only load the module, don’t import anything</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'src/mylib'</span></div></pre></td></tr></table></figure>\n<h5 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h5><p><a href=\"http://www.jianshu.com/p/ebfeb687eb70\" target=\"_blank\" rel=\"external\">30分钟掌握ES6/ES2015核心内容</a><br><a href=\"http://es6.ruanyifeng.com/?search=Spread&amp;x=0&amp;y=0\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a><br><a href=\"https://github.com/addyosmani/es6-equivalents-in-es5/blob/master/README.md#classes\" target=\"_blank\" rel=\"external\"> ECMAScript 6 equivalents in ES5</a></p>\n","site":{"data":{}},"excerpt":"<p>关于ES6的学习<br>","more":"</p>\n<h3 id=\"ES5-gt-ES6\"><a href=\"#ES5-gt-ES6\" class=\"headerlink\" title=\"ES5 =&gt; ES6\"></a>ES5 =&gt; ES6</h3><hr>\n<h5 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h5><ul>\n<li>与函数表达式相比，箭头函数有更短的语法。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123; <span class=\"keyword\">return</span> i * <span class=\"number\">2</span>&#125; <span class=\"comment\">//ES5</span></div><div class=\"line\">(i) =&gt; i * <span class=\"number\">2</span>\t<span class=\"comment\">//ES6</span></div></pre></td></tr></table></figure>\n<p>复杂时需要<code>{}</code>包裹<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i, j</span>) </span>&#123;</div><div class=\"line\">\ti++</div><div class=\"line\">\tj++</div><div class=\"line\">\t<span class=\"keyword\">return</span> i + j</div><div class=\"line\">&#125;  <span class=\"comment\">// ES5</span></div><div class=\"line\">(i, j) =&gt; &#123;i++, j++, <span class=\"keyword\">return</span> i + j&#125; <span class=\"comment\">// ES6</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>箭头函数没有自身的this，从外层继承this。</li>\n<li>箭头函数通常是匿名的。</li>\n</ul>\n<h5 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h5><ul>\n<li>ES5中只有全局作用域与函数作用域,因此内层变量将会覆盖外层变量</li>\n<li>let 提供块级作用域,let命名的变量只在当前块内起作用</li>\n<li>const 声明的是常量，不可更改</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>  <span class=\"comment\">// 函数作用域</span></div><div class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">20</span>  <span class=\"comment\">// if块内的作用域</span></div><div class=\"line\">      c = <span class=\"number\">30</span>  <span class=\"comment\">// es5解决方法</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a:'</span> + a)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b:'</span> + b)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'c:'</span> + c)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a:'</span> + a)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b:'</span> + b)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'c:'</span> + c)</div></pre></td></tr></table></figure>\n<p>var声明的变量在循环时新值会覆盖旧值，导致输出的变量都为最终值<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = []</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</div><div class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">2</span>](); <span class=\"comment\">// 9</span></div></pre></td></tr></table></figure></p>\n<p>ES5中利用闭包解决这一问题<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> testback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(index)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> testback</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = []</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</div><div class=\"line\">  a[i] = test(i)</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">2</span>]()</div></pre></td></tr></table></figure></p>\n<p>ES6中仅仅使用let即可解决<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = []</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</div><div class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">2</span>](); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<p>const声明常量<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span></div><div class=\"line\">a = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a)</div></pre></td></tr></table></figure></p>\n<h5 id=\"模版字符串\"><a href=\"#模版字符串\" class=\"headerlink\" title=\"模版字符串\"></a>模版字符串</h5><ul>\n<li>ES5中，当需要插入大量html文档时需要引用template插件或是用大量‘+’连接</li>\n<li>模版字符串可直接用’``’标识起始</li>\n<li>模板字符串可以包含嵌入式表达式,对象字面量,甚至是函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'xunfeng'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`your name is <span class=\"subst\">$&#123;myName&#125;</span>`</span>) <span class=\"comment\">// your name is xunfeng</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> people = &#123;</div><div class=\"line\">  name: <span class=\"string\">'xunfeng'</span>,</div><div class=\"line\">  age: <span class=\"number\">20</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`your name is <span class=\"subst\">$&#123;people.name&#125;</span>, your age is <span class=\"subst\">$&#123;people.age&#125;</span>`</span>)</div><div class=\"line\"><span class=\"comment\">// your name is xunfeng, your age is 20</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'function'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`可以嵌套函数：<span class=\"subst\">$&#123;fn()&#125;</span>`</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li>模板字符串可以在表达式内进行数学运算</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`a+b=<span class=\"subst\">$&#123;a+b&#125;</span>`</span>) <span class=\"comment\">//a+b=30</span></div></pre></td></tr></table></figure>\n<ul>\n<li>模板字符串内保留空格，不需要换行符即可换行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`第一行</span></div><div class=\"line\"><span class=\"string\">第二行`</span>)</div><div class=\"line\"><span class=\"comment\">// 第一行</span></div><div class=\"line\"><span class=\"comment\">// 第二行</span></div></pre></td></tr></table></figure>\n<h5 id=\"数值扩展-Numeric-Literals\"><a href=\"#数值扩展-Numeric-Literals\" class=\"headerlink\" title=\"数值扩展 Numeric Literals\"></a>数值扩展 Numeric Literals</h5><ul>\n<li>支持二进制(0b)和八进制(0o)新写法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0b111110111</span> === <span class=\"number\">503</span> <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"number\">0o767</span> === <span class=\"number\">503</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">将二进制或八进制转换成十进制</div><div class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'0b111'</span>)  <span class=\"comment\">// 7</span></div><div class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'0o10'</span>)  <span class=\"comment\">// 8</span></div></pre></td></tr></table></figure>\n<ul>\n<li>新的方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Number</span>.isFinite() <span class=\"comment\">// 检查一个数值是否为有限</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN()  <span class=\"comment\">// 检查一个数值是否为NaN</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isInteger()  <span class=\"comment\">// 检查一个数值是否为整数</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.EPSILON  <span class=\"comment\">// 极小的常量，设定的误差范围</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Math对象的扩展</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.trunc()  <span class=\"comment\">// 去除一个数的小数部分，返回整数部分</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.sign() <span class=\"comment\">// 判断一个数到底是正数、负数、还是零</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.cbrt() <span class=\"comment\">// 用于计算一个数的立方根</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.hypot() <span class=\"comment\">// 返回所有参数的平方和的平方根</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.expm1() <span class=\"comment\">// Math.expm1(x)返回ex - 1，即Math.exp(x) - 1</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.log1p() <span class=\"comment\">// Math.log1p(x)方法返回1 + x的自然对数</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.log10() <span class=\"comment\">// Math.log10(x)返回以10为底的x的对数</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.log2() <span class=\"comment\">// Math.log2(x)返回以2为底的x的对数</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.sinh(x) <span class=\"comment\">// 返回x的双曲正弦（hyperbolic sine）</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.cosh(x) <span class=\"comment\">// 返回x的双曲余弦（hyperbolic cosine）</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.tanh(x) <span class=\"comment\">// 返回x的双曲正切（hyperbolic tangent）</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.asinh(x) <span class=\"comment\">// 返回x的反双曲正弦（inverse hyperbolic sine）</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.acosh(x) <span class=\"comment\">// 返回x的反双曲余弦（inverse hyperbolic cosine）</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.atanh(x) <span class=\"comment\">// 返回x的反双曲正切（inverse hyperbolic tangent）</span></div></pre></td></tr></table></figure>\n<ul>\n<li>指数运算符 **</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> ** <span class=\"number\">3</span>) <span class=\"comment\">// 8</span></div></pre></td></tr></table></figure>\n<h5 id=\"对象部分扩展\"><a href=\"#对象部分扩展\" class=\"headerlink\" title=\"对象部分扩展\"></a>对象部分扩展</h5><ul>\n<li>变量和函数可直接作为对象的属性和方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- ES6 --&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">  value: <span class=\"number\">42</span>,</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.toString() === <span class=\"number\">42</span>) <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">&lt;!-- ES5 --&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">  value: <span class=\"number\">42</span>,</div><div class=\"line\">  toString: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toString</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.toString() === <span class=\"number\">42</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<ul>\n<li>计算属性名可以用变量当做对象的属性名</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> computed = <span class=\"string\">'calc'</span></div><div class=\"line\"><span class=\"keyword\">var</span> comFn = &#123;</div><div class=\"line\">  [computed + <span class=\"string\">'xun'</span>]: <span class=\"string\">'hi'</span>,</div><div class=\"line\">  [computed + <span class=\"string\">'feng'</span>]: <span class=\"string\">'hello'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(comFn[<span class=\"string\">'calcxun'</span>]) <span class=\"comment\">// hi</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(comFn[<span class=\"string\">'calcfeng'</span>]) <span class=\"comment\">// hello</span></div></pre></td></tr></table></figure>\n<h5 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h5><ul>\n<li>允许从数组或对象中提取数据并对变量赋值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">var</span> c = &#123;a, b&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;a, b&#125; = c</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">// 1 2</span></div></pre></td></tr></table></figure>\n<h5 id=\"默认参数-default\"><a href=\"#默认参数-default\" class=\"headerlink\" title=\"默认参数 default\"></a>默认参数 default</h5><ul>\n<li>ES6可以指定默认参数在arguments中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFn</span>(<span class=\"params\">mes = <span class=\"string\">'hello'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(mes)</div><div class=\"line\">&#125;</div><div class=\"line\">myFn(); <span class=\"comment\">// hello</span></div><div class=\"line\">myFn(<span class=\"string\">'hi'</span>); <span class=\"comment\">// hi</span></div></pre></td></tr></table></figure>\n<h5 id=\"其他参数-rest\"><a href=\"#其他参数-rest\" class=\"headerlink\" title=\"其他参数 rest\"></a>其他参数 rest</h5><ul>\n<li>允许将部分参数作为一个单独的数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFn</span>(<span class=\"params\">a, ...b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = a</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;b.length; i++) &#123;</div><div class=\"line\">     result += b[i]</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myFn(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)) <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure>\n<h5 id=\"迭代器-iterators-amp-amp-for-of\"><a href=\"#迭代器-iterators-amp-amp-for-of\" class=\"headerlink\" title=\"迭代器 iterators &amp;&amp; for of\"></a>迭代器 iterators &amp;&amp; for of</h5><ul>\n<li>可以直接遍历容器的内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=[<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> a)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i)  <span class=\"comment\">// x y z</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"类-classes\"><a href=\"#类-classes\" class=\"headerlink\" title=\"类 classes\"></a>类 classes</h5><ul>\n<li>constructor(构造方法)<br>创建实例对象时设定的属性</li>\n<li>extends(继承)<br>class之间可以通过extends相互继承，相比于原形链更简洁易懂</li>\n<li>super<br>在子类constructor中调用父类的constructor</li>\n<li>getter &amp;&amp; setter<br>在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</li>\n<li>static 静态方法<br>不会被实例对象继承，只能通过类或类继承来调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">student</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age</div><div class=\"line\">  &#125;</div><div class=\"line\">  getName () &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">  &#125;</div><div class=\"line\">  get myAge() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age</div><div class=\"line\">  &#125;</div><div class=\"line\">  set myAge(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._age = value</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">static</span> bar() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'static'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 创建实例对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> xun = <span class=\"keyword\">new</span> student(<span class=\"string\">'xun'</span>, <span class=\"number\">20</span>)</div><div class=\"line\">xun.getName() <span class=\"comment\">// xun</span></div><div class=\"line\">xun.bar() <span class=\"comment\">// TypeError: xun.bar is not a function. (In 'xun.bar()', 'xun.bar' is undefined)</span></div><div class=\"line\">student.bar() <span class=\"comment\">// static</span></div><div class=\"line\"><span class=\"comment\">// 继承</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tom</span> <span class=\"keyword\">extends</span> <span class=\"title\">student</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, age, sex) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(name, age)</div><div class=\"line\">    <span class=\"keyword\">this</span>.sex = sex</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> tom = <span class=\"keyword\">new</span> Tom(<span class=\"string\">'tom'</span>, <span class=\"number\">20</span>, <span class=\"string\">'man'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(tom)  <span class=\"comment\">// 实例对象属性</span></div><div class=\"line\">tom.myAge = <span class=\"number\">22</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(tom._age) <span class=\"comment\">// 22</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(tom.myAge) <span class=\"comment\">// 20</span></div></pre></td></tr></table></figure>\n<h5 id=\"模块-modules\"><a href=\"#模块-modules\" class=\"headerlink\" title=\"模块 modules\"></a>模块 modules</h5><ul>\n<li>export 暴露对外接口</li>\n<li>import 导入其他模块接口</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- <span class=\"keyword\">export</span>.js --&gt;</div><div class=\"line\"><span class=\"comment\">//命名导出</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> foo = ...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> bar = ...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> MY_CONST = ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">myGeneratorFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// default 导出</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"number\">123</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> x</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> x =&gt; x;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.x = x</div><div class=\"line\">       <span class=\"keyword\">this</span>.y = y</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//也可以自己列出所有导出内容</span></div><div class=\"line\"><span class=\"keyword\">const</span> MY_CONST = ...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; MY_CONST, myFunc &#125;</div><div class=\"line\"><span class=\"comment\">//或者在导出的时候给他们改个名字</span></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; MY_CONST <span class=\"keyword\">as</span> THE_CONST, myFunc <span class=\"keyword\">as</span> theFunc &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//还可以导出从其他地方导入的模块</span></div><div class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'src/other_module'</span></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; foo, bar &#125; <span class=\"keyword\">from</span> <span class=\"string\">'src/other_module'</span></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; foo <span class=\"keyword\">as</span> myFoo, bar &#125; <span class=\"keyword\">from</span> <span class=\"string\">'src/other_module'</span></div><div class=\"line\"></div><div class=\"line\">&lt;!-- <span class=\"keyword\">import</span>.js --&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Default exports and named exports</span></div><div class=\"line\"><span class=\"keyword\">import</span> theDefault, &#123; named1, named2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'src/mylib'</span></div><div class=\"line\"><span class=\"keyword\">import</span> theDefault <span class=\"keyword\">from</span> <span class=\"string\">'src/mylib'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; named1, named2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'src/mylib'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Renaming: import named1 as myNamed1</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; named1 <span class=\"keyword\">as</span> myNamed1, named2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'src/mylib'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Importing the module as an object</span></div><div class=\"line\"><span class=\"comment\">// (with one property per named export)</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mylib <span class=\"keyword\">from</span> <span class=\"string\">'src/mylib'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Only load the module, don’t import anything</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'src/mylib'</span></div></pre></td></tr></table></figure>\n<h5 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h5><p><a href=\"http://www.jianshu.com/p/ebfeb687eb70\" target=\"_blank\" rel=\"external\">30分钟掌握ES6/ES2015核心内容</a><br><a href=\"http://es6.ruanyifeng.com/?search=Spread&amp;x=0&amp;y=0\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a><br><a href=\"https://github.com/addyosmani/es6-equivalents-in-es5/blob/master/README.md#classes\" target=\"_blank\" rel=\"external\"> ECMAScript 6 equivalents in ES5</a></p>"},{"title":"TypeScript的学习","date":"2017-03-23T14:27:15.000Z","_content":"学习TypeScript...\n\n<!--more-->\n\n### SOLID原则\n|en    |     en      |ch   |\n| ------------- |:-------------:| -----:|\n| SRP | The Single Responsibility Principle | 单一责任原则 |\n| OCP | The Open Closed Principle | 开放封闭原则 |\n| LSP | The Liskov Substitution Principle | 里氏替换原则 |\n| DIP | The Dependency Inversion Principle | 依赖倒置原则 |\n| ISP | The Interface Segregation Principle | 接口分离原则 |\n\n- 单一职责原则\n表明软件组件（函数，类，模块）必须专注于单一的任务，当这个类需要承当其他类型的责任的时候，就需要分解这个类。\n- 开放封闭原则\n表明软件设计时必须时刻考虑到（代码）可能的发展（扩展性），但是程序的发展必须最少地修改已有的代码。也就是扩展开放，修改封闭。\n- 里氏替换原则\n表明只要继承的是同一个接口，程序里任意一个类都可以被其他的类替换。替换后不需要其他额外的工作程序就能像原来一样运行。\n- 依赖倒置原则\n表明一个方法应该遵从依赖于抽象（接口）而不是一个实例（类）的概念。\n高层模块不应该依赖于低层模块，二者都应该依赖于抽象\n抽象不应该依赖于细节，细节应该依赖于抽象\n- 接口隔离原则\n不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好。\n\n\n### 基础类型 强类型\n\n#### 基础类型\n```ts\n// 布尔值\nlet isDone: boolean = false;\n// 数字 支持二、八、十、十六进制\nlet isNumber: number = 10;\n// 字符串\nlet isString: string = \"string\";\n// 模板字符串\nlet isExpr: string = `hello, ${isString}`;\n// 数组\nlet isArr: number[] = [1, 2, 3];\n// 数组泛型\nlet isList: Array<number> = [1, 2, 3];\n// 元组 Tuple（可以定义一个已知元素数量的数组，各个元素类型不必相同\nlet x: [string, number];\nx = ['string', 0];\nx = [0, 'string']; // error\n// 当访问一个越界的元素，会使用联合类型替代\nx[3] = 'world'; // x[3] 可以被赋值为（string | number）类型\n```\n\n#### 枚举\n`enum`\n```ts\nenum Color {Red, Green, Blue};\nconsole.log(Color);\n// {0: \"Red\", 1: \"Green\", 2: \"Blue\", Red: 0, Green: 1, Blue: 2}\nlet c:Color = Color.Green;\nconsole.log(c); // 1\n```\n#### 任意值 any\n```ts\nlet notSure: any = 'any';\nnotSure = 1;\nnotSure = false;\nlet list: any[] = [1, true ,'any'];\n```\n#### 空值 void\n```ts\nfunction returnVoid():void {\n  alert('is null');\n}\nlet unusable: void = null;\nlet unu:void = undefined;\n```\n\n#### 类型断言\nany值的指定猜测\n```ts\nlet someValue: any = \"some strings\";\n\nlet strLength: number = (<string>someValue).length;\nlet strLength: number = (someValue as string).length;\n```\n\n### 接口 interface\n\n```ts\n// 自定义的属性检查\ninterface LabelledValue {\n  label: string;\n}\n\nfunction printLabel(labelledObj: LabelledValue) {\n  console.log(labelledObj.label);\n}\n\nlet myObj = {size: 10, label: \"Size 10 Object\"};\nprintLabel(myObj);\n```\n#### 属性\n```ts\ninterface userInfo {\n  name?: string;  // 可选属性\n  readonly age: number; // 只读属性\n  [propName: string]: any; // 额外属性定义\n}\n```\n#### 函数类型\n```ts\ninterface searchFunc {\n    (src: string, sub: string): boolean;\n}\n\nlet mySearch: searchFunc;\nmySearch = (srcb, sub) => {\n    let res = srcb.search(sub);\n    if (res === -1) {\n        console.log('false');\n        return false;\n    } else {\n        console.log('true');\n        return true;\n    }\n}\nmySearch('aaaa', 'a'); // true\n```\n#### 可索引的类型\n```ts\ninterface StringArray {\n  [index: number]: string;\n}\n// 当使用 number 去索引 StringArray 时，会返回 string 类型的值。\n\ninterface NumberDictionary {\n  [index: string]: number;\n  length: number;\n  name: string;   //error `name`的类型不是索引类型的子类型\n}\n```\n\n#### 类类型\n```ts\ninterface IsTime {\n  currentTime: Date;\n  setTime(d: Date);\n}\nclass Clock implements IsTime {\n  currentTime: Date;\n  setTime(d: Date) {\n        this.currentTime = d;\n    }\n  constructor(h: number, m: number) { }\n}\n// 接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。\n```\n\n#### 扩展接口\n```ts\ninterface Shape {\n  color: string;\n}\ninterface Square extends Shape {\n  sideLength: number;\n}\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10;\n// 一个接口可以继承多个接口，创建出多个接口的合成接口。\n```\n\n#### 混合类型\n```ts\n// 一个对象可以同时作为函数和对象使用,并带有额外属性。\ninterface Counter {\n  (start: number): string;\n  interval: number;\n  reset(): void;\n}\n\nfunction getCounter(): Counter {\n  let counter = <Counter>function (start: number) {};\n  counter.interval = 123;\n  counter.reset = function () {};\n  return counter;\n}\n```\n\n#### 接口继承类\n```ts\nclass Control {\n    private state: any;\n}\n\ninterface SelectableControl extends Control {\n    select(): void;\n}\n\nclass Button extends Control {\n    select() { }\n}\n\nclass TextBox extends Control {\n    select() { }\n}\n\nclass Image {\n    select() { }\n}\n\nclass Location {\n    select() { }\n}\n```\n在上面的例子里，SelectableControl包含了Control的所有成员，包括私有成员state。 因为 state是私有成员，所以只能够是Control的子类们才能实现SelectableControl接口。 因为只有 Control的子类才能够拥有一个声明于Control的私有成员state，这对私有成员的兼容性是必需的。\n\n在Control类内部，是允许通过SelectableControl的实例来访问私有成员state的。 实际上， SelectableControl就像Control一样，并拥有一个select方法。 Button和TextBox类是SelectableControl的子类（因为它们都继承自Control并有select方法），但Image和Location类并不是这样的。\n\n\n\n### 类 Class\n\n#### 继承 extends\n```ts\nclass People {\n    name: string;\n    work: string;\n    constructor(theName: string, theWork: string) {\n        this.name = theName;\n        this.work = theWork;\n    }\n    getWork() {\n        console.log(`${this.name} is ${this.work}`);\n        \n    }\n}\n\nclass Student extends People {\n    constructor(name: string) {\n        super(name);\n        this.work = \"student\";\n    }\n    getWork() {\n        console.log('extend');\n        super.getWork();\n    }\n}\n\nlet sam = new Student(\"sam\")\nsam.getWork()\n```\n\n#### 公共，私有与受保护的修饰符\n默认为： public\n\n私有：private，不能在声明此类的外部访问\n```ts\n  private name: string;\n```\n\nprotected， 在派生类中仍然可以访问\n```ts\n  protected name: string;\n```\nreadonly 只读\n```ts\n  readonly name: string;\n```\n\n#### 存取器\n支持使用 get / set 截取对象成员的访问\n\n```ts\nclass Employee {\n  private _fullName: string;\n  get fullName(): string {\n    return this._fullName;\n  }\n  set fullName(newName: string) {\n    if (true) {\n      this._fullName = newName;\n    }\n  }\n}\n\nlet employee =new Employee();\nemployee.fullName = \"name\";\n ```\n\n#### 静态属性 static\n存在于类本身上面而不是类的实例上。\n```ts\nclass Grid {\n    static origin = {x: 0, y: 0};\n    calculateDistanceFromOrigin(point: {x: number; y: number;}) {\n        let xDist = (point.x - Grid.origin.x);\n        let yDist = (point.y - Grid.origin.y);\n        return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;\n    }\n    constructor (public scale: number) { }\n}\n\nlet grid1 = new Grid(1.0);  // 1x scale\nlet grid2 = new Grid(5.0);  // 5x scale\n\nconsole.log(grid1.calculateDistanceFromOrigin({x: 10, y: 10}));\nconsole.log(grid2.calculateDistanceFromOrigin({x: 10, y: 10}));\n```\n\n#### 抽象类\n抽象类做为其它派生类的基类使用。 \n它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。\n``` ts\nabstract class Department {\n\n    constructor(public name: string) {\n    }\n\n    printName(): void {\n        console.log('Department name: ' + this.name);\n    }\n\n    abstract printMeeting(): void; // 必须在派生类中实现\n}\n\nclass AccountingDepartment extends Department {\n\n    constructor() {\n        super('Accounting and Auditing'); // constructors in derived classes must call super()\n    }\n\n    printMeeting(): void {\n        console.log('The Accounting Department meets each Monday at 10am.');\n    }\n\n    generateReports(): void {\n        console.log('Generating accounting reports...');\n    }\n}\n\nlet department: Department; // ok to create a reference to an abstract type\ndepartment = new Department(); // error: cannot create an instance of an abstract class\ndepartment = new AccountingDepartment(); // ok to create and assign a non-abstract subclass\ndepartment.printName();\ndepartment.printMeeting();\ndepartment.generateReports(); // error: method doesn't exist on declared abstract type\n```\n\n### 函数\n\n#### 函数定义类型\n```ts\nlet myAdd = (x: number, y: number): number => {\n    return x + y;\n}\n// 设定返回值为 number型\n```\n#### 可选参数和默认参数\n```ts\nfunction buildUser(firstName: string = \"you\", lastName?: string) {\n  if(lastName) {\n    return firstName + \" \" +lastName;\n  } else {\n    return firstName;\n  }\n}\n// 可选参数必须跟在必须参数后面。\n```\n\n### 泛型","source":"_posts/TypeScript中的OOP.md","raw":"---\ntitle: TypeScript的学习\ndate: 2017-03-23 22:27:15\ntags:\n---\n学习TypeScript...\n\n<!--more-->\n\n### SOLID原则\n|en    |     en      |ch   |\n| ------------- |:-------------:| -----:|\n| SRP | The Single Responsibility Principle | 单一责任原则 |\n| OCP | The Open Closed Principle | 开放封闭原则 |\n| LSP | The Liskov Substitution Principle | 里氏替换原则 |\n| DIP | The Dependency Inversion Principle | 依赖倒置原则 |\n| ISP | The Interface Segregation Principle | 接口分离原则 |\n\n- 单一职责原则\n表明软件组件（函数，类，模块）必须专注于单一的任务，当这个类需要承当其他类型的责任的时候，就需要分解这个类。\n- 开放封闭原则\n表明软件设计时必须时刻考虑到（代码）可能的发展（扩展性），但是程序的发展必须最少地修改已有的代码。也就是扩展开放，修改封闭。\n- 里氏替换原则\n表明只要继承的是同一个接口，程序里任意一个类都可以被其他的类替换。替换后不需要其他额外的工作程序就能像原来一样运行。\n- 依赖倒置原则\n表明一个方法应该遵从依赖于抽象（接口）而不是一个实例（类）的概念。\n高层模块不应该依赖于低层模块，二者都应该依赖于抽象\n抽象不应该依赖于细节，细节应该依赖于抽象\n- 接口隔离原则\n不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好。\n\n\n### 基础类型 强类型\n\n#### 基础类型\n```ts\n// 布尔值\nlet isDone: boolean = false;\n// 数字 支持二、八、十、十六进制\nlet isNumber: number = 10;\n// 字符串\nlet isString: string = \"string\";\n// 模板字符串\nlet isExpr: string = `hello, ${isString}`;\n// 数组\nlet isArr: number[] = [1, 2, 3];\n// 数组泛型\nlet isList: Array<number> = [1, 2, 3];\n// 元组 Tuple（可以定义一个已知元素数量的数组，各个元素类型不必相同\nlet x: [string, number];\nx = ['string', 0];\nx = [0, 'string']; // error\n// 当访问一个越界的元素，会使用联合类型替代\nx[3] = 'world'; // x[3] 可以被赋值为（string | number）类型\n```\n\n#### 枚举\n`enum`\n```ts\nenum Color {Red, Green, Blue};\nconsole.log(Color);\n// {0: \"Red\", 1: \"Green\", 2: \"Blue\", Red: 0, Green: 1, Blue: 2}\nlet c:Color = Color.Green;\nconsole.log(c); // 1\n```\n#### 任意值 any\n```ts\nlet notSure: any = 'any';\nnotSure = 1;\nnotSure = false;\nlet list: any[] = [1, true ,'any'];\n```\n#### 空值 void\n```ts\nfunction returnVoid():void {\n  alert('is null');\n}\nlet unusable: void = null;\nlet unu:void = undefined;\n```\n\n#### 类型断言\nany值的指定猜测\n```ts\nlet someValue: any = \"some strings\";\n\nlet strLength: number = (<string>someValue).length;\nlet strLength: number = (someValue as string).length;\n```\n\n### 接口 interface\n\n```ts\n// 自定义的属性检查\ninterface LabelledValue {\n  label: string;\n}\n\nfunction printLabel(labelledObj: LabelledValue) {\n  console.log(labelledObj.label);\n}\n\nlet myObj = {size: 10, label: \"Size 10 Object\"};\nprintLabel(myObj);\n```\n#### 属性\n```ts\ninterface userInfo {\n  name?: string;  // 可选属性\n  readonly age: number; // 只读属性\n  [propName: string]: any; // 额外属性定义\n}\n```\n#### 函数类型\n```ts\ninterface searchFunc {\n    (src: string, sub: string): boolean;\n}\n\nlet mySearch: searchFunc;\nmySearch = (srcb, sub) => {\n    let res = srcb.search(sub);\n    if (res === -1) {\n        console.log('false');\n        return false;\n    } else {\n        console.log('true');\n        return true;\n    }\n}\nmySearch('aaaa', 'a'); // true\n```\n#### 可索引的类型\n```ts\ninterface StringArray {\n  [index: number]: string;\n}\n// 当使用 number 去索引 StringArray 时，会返回 string 类型的值。\n\ninterface NumberDictionary {\n  [index: string]: number;\n  length: number;\n  name: string;   //error `name`的类型不是索引类型的子类型\n}\n```\n\n#### 类类型\n```ts\ninterface IsTime {\n  currentTime: Date;\n  setTime(d: Date);\n}\nclass Clock implements IsTime {\n  currentTime: Date;\n  setTime(d: Date) {\n        this.currentTime = d;\n    }\n  constructor(h: number, m: number) { }\n}\n// 接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。\n```\n\n#### 扩展接口\n```ts\ninterface Shape {\n  color: string;\n}\ninterface Square extends Shape {\n  sideLength: number;\n}\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10;\n// 一个接口可以继承多个接口，创建出多个接口的合成接口。\n```\n\n#### 混合类型\n```ts\n// 一个对象可以同时作为函数和对象使用,并带有额外属性。\ninterface Counter {\n  (start: number): string;\n  interval: number;\n  reset(): void;\n}\n\nfunction getCounter(): Counter {\n  let counter = <Counter>function (start: number) {};\n  counter.interval = 123;\n  counter.reset = function () {};\n  return counter;\n}\n```\n\n#### 接口继承类\n```ts\nclass Control {\n    private state: any;\n}\n\ninterface SelectableControl extends Control {\n    select(): void;\n}\n\nclass Button extends Control {\n    select() { }\n}\n\nclass TextBox extends Control {\n    select() { }\n}\n\nclass Image {\n    select() { }\n}\n\nclass Location {\n    select() { }\n}\n```\n在上面的例子里，SelectableControl包含了Control的所有成员，包括私有成员state。 因为 state是私有成员，所以只能够是Control的子类们才能实现SelectableControl接口。 因为只有 Control的子类才能够拥有一个声明于Control的私有成员state，这对私有成员的兼容性是必需的。\n\n在Control类内部，是允许通过SelectableControl的实例来访问私有成员state的。 实际上， SelectableControl就像Control一样，并拥有一个select方法。 Button和TextBox类是SelectableControl的子类（因为它们都继承自Control并有select方法），但Image和Location类并不是这样的。\n\n\n\n### 类 Class\n\n#### 继承 extends\n```ts\nclass People {\n    name: string;\n    work: string;\n    constructor(theName: string, theWork: string) {\n        this.name = theName;\n        this.work = theWork;\n    }\n    getWork() {\n        console.log(`${this.name} is ${this.work}`);\n        \n    }\n}\n\nclass Student extends People {\n    constructor(name: string) {\n        super(name);\n        this.work = \"student\";\n    }\n    getWork() {\n        console.log('extend');\n        super.getWork();\n    }\n}\n\nlet sam = new Student(\"sam\")\nsam.getWork()\n```\n\n#### 公共，私有与受保护的修饰符\n默认为： public\n\n私有：private，不能在声明此类的外部访问\n```ts\n  private name: string;\n```\n\nprotected， 在派生类中仍然可以访问\n```ts\n  protected name: string;\n```\nreadonly 只读\n```ts\n  readonly name: string;\n```\n\n#### 存取器\n支持使用 get / set 截取对象成员的访问\n\n```ts\nclass Employee {\n  private _fullName: string;\n  get fullName(): string {\n    return this._fullName;\n  }\n  set fullName(newName: string) {\n    if (true) {\n      this._fullName = newName;\n    }\n  }\n}\n\nlet employee =new Employee();\nemployee.fullName = \"name\";\n ```\n\n#### 静态属性 static\n存在于类本身上面而不是类的实例上。\n```ts\nclass Grid {\n    static origin = {x: 0, y: 0};\n    calculateDistanceFromOrigin(point: {x: number; y: number;}) {\n        let xDist = (point.x - Grid.origin.x);\n        let yDist = (point.y - Grid.origin.y);\n        return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;\n    }\n    constructor (public scale: number) { }\n}\n\nlet grid1 = new Grid(1.0);  // 1x scale\nlet grid2 = new Grid(5.0);  // 5x scale\n\nconsole.log(grid1.calculateDistanceFromOrigin({x: 10, y: 10}));\nconsole.log(grid2.calculateDistanceFromOrigin({x: 10, y: 10}));\n```\n\n#### 抽象类\n抽象类做为其它派生类的基类使用。 \n它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。\n``` ts\nabstract class Department {\n\n    constructor(public name: string) {\n    }\n\n    printName(): void {\n        console.log('Department name: ' + this.name);\n    }\n\n    abstract printMeeting(): void; // 必须在派生类中实现\n}\n\nclass AccountingDepartment extends Department {\n\n    constructor() {\n        super('Accounting and Auditing'); // constructors in derived classes must call super()\n    }\n\n    printMeeting(): void {\n        console.log('The Accounting Department meets each Monday at 10am.');\n    }\n\n    generateReports(): void {\n        console.log('Generating accounting reports...');\n    }\n}\n\nlet department: Department; // ok to create a reference to an abstract type\ndepartment = new Department(); // error: cannot create an instance of an abstract class\ndepartment = new AccountingDepartment(); // ok to create and assign a non-abstract subclass\ndepartment.printName();\ndepartment.printMeeting();\ndepartment.generateReports(); // error: method doesn't exist on declared abstract type\n```\n\n### 函数\n\n#### 函数定义类型\n```ts\nlet myAdd = (x: number, y: number): number => {\n    return x + y;\n}\n// 设定返回值为 number型\n```\n#### 可选参数和默认参数\n```ts\nfunction buildUser(firstName: string = \"you\", lastName?: string) {\n  if(lastName) {\n    return firstName + \" \" +lastName;\n  } else {\n    return firstName;\n  }\n}\n// 可选参数必须跟在必须参数后面。\n```\n\n### 泛型","slug":"TypeScript中的OOP","published":1,"updated":"2017-10-15T02:54:44.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ukr0006jbze9wv7x6rt","content":"<p>学习TypeScript…</p>\n<a id=\"more\"></a>\n<h3 id=\"SOLID原则\"><a href=\"#SOLID原则\" class=\"headerlink\" title=\"SOLID原则\"></a>SOLID原则</h3><table>\n<thead>\n<tr>\n<th>en</th>\n<th style=\"text-align:center\">en</th>\n<th style=\"text-align:right\">ch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SRP</td>\n<td style=\"text-align:center\">The Single Responsibility Principle</td>\n<td style=\"text-align:right\">单一责任原则</td>\n</tr>\n<tr>\n<td>OCP</td>\n<td style=\"text-align:center\">The Open Closed Principle</td>\n<td style=\"text-align:right\">开放封闭原则</td>\n</tr>\n<tr>\n<td>LSP</td>\n<td style=\"text-align:center\">The Liskov Substitution Principle</td>\n<td style=\"text-align:right\">里氏替换原则</td>\n</tr>\n<tr>\n<td>DIP</td>\n<td style=\"text-align:center\">The Dependency Inversion Principle</td>\n<td style=\"text-align:right\">依赖倒置原则</td>\n</tr>\n<tr>\n<td>ISP</td>\n<td style=\"text-align:center\">The Interface Segregation Principle</td>\n<td style=\"text-align:right\">接口分离原则</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>单一职责原则<br>表明软件组件（函数，类，模块）必须专注于单一的任务，当这个类需要承当其他类型的责任的时候，就需要分解这个类。</li>\n<li>开放封闭原则<br>表明软件设计时必须时刻考虑到（代码）可能的发展（扩展性），但是程序的发展必须最少地修改已有的代码。也就是扩展开放，修改封闭。</li>\n<li>里氏替换原则<br>表明只要继承的是同一个接口，程序里任意一个类都可以被其他的类替换。替换后不需要其他额外的工作程序就能像原来一样运行。</li>\n<li>依赖倒置原则<br>表明一个方法应该遵从依赖于抽象（接口）而不是一个实例（类）的概念。<br>高层模块不应该依赖于低层模块，二者都应该依赖于抽象<br>抽象不应该依赖于细节，细节应该依赖于抽象</li>\n<li>接口隔离原则<br>不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好。</li>\n</ul>\n<h3 id=\"基础类型-强类型\"><a href=\"#基础类型-强类型\" class=\"headerlink\" title=\"基础类型 强类型\"></a>基础类型 强类型</h3><h4 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 布尔值</span></div><div class=\"line\"><span class=\"keyword\">let</span> isDone: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"comment\">// 数字 支持二、八、十、十六进制</span></div><div class=\"line\"><span class=\"keyword\">let</span> isNumber: <span class=\"built_in\">number</span> = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"comment\">// 字符串</span></div><div class=\"line\"><span class=\"keyword\">let</span> isString: <span class=\"built_in\">string</span> = <span class=\"string\">\"string\"</span>;</div><div class=\"line\"><span class=\"comment\">// 模板字符串</span></div><div class=\"line\"><span class=\"keyword\">let</span> isExpr: <span class=\"built_in\">string</span> = <span class=\"string\">`hello, <span class=\"subst\">$&#123;isString&#125;</span>`</span>;</div><div class=\"line\"><span class=\"comment\">// 数组</span></div><div class=\"line\"><span class=\"keyword\">let</span> isArr: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"comment\">// 数组泛型</span></div><div class=\"line\"><span class=\"keyword\">let</span> isList: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"comment\">// 元组 Tuple（可以定义一个已知元素数量的数组，各个元素类型不必相同</span></div><div class=\"line\"><span class=\"keyword\">let</span> x: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</div><div class=\"line\">x = [<span class=\"string\">'string'</span>, <span class=\"number\">0</span>];</div><div class=\"line\">x = [<span class=\"number\">0</span>, <span class=\"string\">'string'</span>]; <span class=\"comment\">// error</span></div><div class=\"line\"><span class=\"comment\">// 当访问一个越界的元素，会使用联合类型替代</span></div><div class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">'world'</span>; <span class=\"comment\">// x[3] 可以被赋值为（string | number）类型</span></div></pre></td></tr></table></figure>\n<h4 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h4><p><code>enum</code><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> Color &#123;Red, Green, Blue&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Color);</div><div class=\"line\"><span class=\"comment\">// &#123;0: \"Red\", 1: \"Green\", 2: \"Blue\", Red: 0, Green: 1, Blue: 2&#125;</span></div><div class=\"line\"><span class=\"keyword\">let</span> c:Color = Color.Green;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"任意值-any\"><a href=\"#任意值-any\" class=\"headerlink\" title=\"任意值 any\"></a>任意值 any</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> notSure: <span class=\"built_in\">any</span> = <span class=\"string\">'any'</span>;</div><div class=\"line\">notSure = <span class=\"number\">1</span>;</div><div class=\"line\">notSure = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">any</span>[] = [<span class=\"number\">1</span>, <span class=\"literal\">true</span> ,<span class=\"string\">'any'</span>];</div></pre></td></tr></table></figure>\n<h4 id=\"空值-void\"><a href=\"#空值-void\" class=\"headerlink\" title=\"空值 void\"></a>空值 void</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">returnVoid</span>(<span class=\"params\"></span>):<span class=\"title\">void</span> </span>&#123;</div><div class=\"line\">  alert(<span class=\"string\">'is null'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> unusable: <span class=\"built_in\">void</span> = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> unu:<span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h4><p>any值的指定猜测<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> someValue: <span class=\"built_in\">any</span> = <span class=\"string\">\"some strings\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).length;</div><div class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).length;</div></pre></td></tr></table></figure></p>\n<h3 id=\"接口-interface\"><a href=\"#接口-interface\" class=\"headerlink\" title=\"接口 interface\"></a>接口 interface</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 自定义的属性检查</span></div><div class=\"line\"><span class=\"keyword\">interface</span> LabelledValue &#123;</div><div class=\"line\">  label: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printLabel</span>(<span class=\"params\">labelledObj: LabelledValue</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(labelledObj.label);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> myObj = &#123;size: <span class=\"number\">10</span>, label: <span class=\"string\">\"Size 10 Object\"</span>&#125;;</div><div class=\"line\">printLabel(myObj);</div></pre></td></tr></table></figure>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> userInfo &#123;</div><div class=\"line\">  name?: <span class=\"built_in\">string</span>;  <span class=\"comment\">// 可选属性</span></div><div class=\"line\">  readonly age: <span class=\"built_in\">number</span>; <span class=\"comment\">// 只读属性</span></div><div class=\"line\">  [propName: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>; <span class=\"comment\">// 额外属性定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> searchFunc &#123;</div><div class=\"line\">    (src: <span class=\"built_in\">string</span>, sub: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mySearch: searchFunc;</div><div class=\"line\">mySearch = <span class=\"function\">(<span class=\"params\">srcb, sub</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> res = srcb.search(sub);</div><div class=\"line\">    <span class=\"keyword\">if</span> (res === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'false'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'true'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">mySearch(<span class=\"string\">'aaaa'</span>, <span class=\"string\">'a'</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h4 id=\"可索引的类型\"><a href=\"#可索引的类型\" class=\"headerlink\" title=\"可索引的类型\"></a>可索引的类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> StringArray &#123;</div><div class=\"line\">  [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 当使用 number 去索引 StringArray 时，会返回 string 类型的值。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">interface</span> NumberDictionary &#123;</div><div class=\"line\">  [index: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span>;</div><div class=\"line\">  length: <span class=\"built_in\">number</span>;</div><div class=\"line\">  name: <span class=\"built_in\">string</span>;   <span class=\"comment\">//error `name`的类型不是索引类型的子类型</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"类类型\"><a href=\"#类类型\" class=\"headerlink\" title=\"类类型\"></a>类类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> IsTime &#123;</div><div class=\"line\">  currentTime: <span class=\"built_in\">Date</span>;</div><div class=\"line\">  setTime(d: <span class=\"built_in\">Date</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">class</span> Clock <span class=\"keyword\">implements</span> IsTime &#123;</div><div class=\"line\">  currentTime: <span class=\"built_in\">Date</span>;</div><div class=\"line\">  setTime(d: <span class=\"built_in\">Date</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.currentTime = d;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>) &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。</span></div></pre></td></tr></table></figure>\n<h4 id=\"扩展接口\"><a href=\"#扩展接口\" class=\"headerlink\" title=\"扩展接口\"></a>扩展接口</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</div><div class=\"line\">  color: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">interface</span> Square <span class=\"keyword\">extends</span> Shape &#123;</div><div class=\"line\">  sideLength: <span class=\"built_in\">number</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> square = &lt;Square&gt;&#123;&#125;;</div><div class=\"line\">square.color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\">square.sideLength = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"comment\">// 一个接口可以继承多个接口，创建出多个接口的合成接口。</span></div></pre></td></tr></table></figure>\n<h4 id=\"混合类型\"><a href=\"#混合类型\" class=\"headerlink\" title=\"混合类型\"></a>混合类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一个对象可以同时作为函数和对象使用,并带有额外属性。</span></div><div class=\"line\"><span class=\"keyword\">interface</span> Counter &#123;</div><div class=\"line\">  (start: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>;</div><div class=\"line\">  interval: <span class=\"built_in\">number</span>;</div><div class=\"line\">  reset(): <span class=\"built_in\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCounter</span>(<span class=\"params\"></span>): <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> counter = &lt;Counter&gt;<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">start: <span class=\"built_in\">number</span></span>) </span>&#123;&#125;;</div><div class=\"line\">  counter.interval = <span class=\"number\">123</span>;</div><div class=\"line\">  counter.reset = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> counter;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"接口继承类\"><a href=\"#接口继承类\" class=\"headerlink\" title=\"接口继承类\"></a>接口继承类</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Control &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> state: <span class=\"built_in\">any</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">interface</span> SelectableControl <span class=\"keyword\">extends</span> Control &#123;</div><div class=\"line\">    select(): <span class=\"built_in\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Button <span class=\"keyword\">extends</span> Control &#123;</div><div class=\"line\">    select() &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> TextBox <span class=\"keyword\">extends</span> Control &#123;</div><div class=\"line\">    select() &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Image &#123;</div><div class=\"line\">    select() &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Location &#123;</div><div class=\"line\">    select() &#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上面的例子里，SelectableControl包含了Control的所有成员，包括私有成员state。 因为 state是私有成员，所以只能够是Control的子类们才能实现SelectableControl接口。 因为只有 Control的子类才能够拥有一个声明于Control的私有成员state，这对私有成员的兼容性是必需的。</p>\n<p>在Control类内部，是允许通过SelectableControl的实例来访问私有成员state的。 实际上， SelectableControl就像Control一样，并拥有一个select方法。 Button和TextBox类是SelectableControl的子类（因为它们都继承自Control并有select方法），但Image和Location类并不是这样的。</p>\n<h3 id=\"类-Class\"><a href=\"#类-Class\" class=\"headerlink\" title=\"类 Class\"></a>类 Class</h3><h4 id=\"继承-extends\"><a href=\"#继承-extends\" class=\"headerlink\" title=\"继承 extends\"></a>继承 extends</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> People &#123;</div><div class=\"line\">    name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    work: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span>, theWork: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = theName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.work = theWork;</div><div class=\"line\">    &#125;</div><div class=\"line\">    getWork() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span> is <span class=\"subst\">$&#123;this.work&#125;</span>`</span>);</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Student <span class=\"keyword\">extends</span> People &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name);</div><div class=\"line\">        <span class=\"keyword\">this</span>.work = <span class=\"string\">\"student\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    getWork() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'extend'</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.getWork();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sam = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"sam\"</span>)</div><div class=\"line\">sam.getWork()</div></pre></td></tr></table></figure>\n<h4 id=\"公共，私有与受保护的修饰符\"><a href=\"#公共，私有与受保护的修饰符\" class=\"headerlink\" title=\"公共，私有与受保护的修饰符\"></a>公共，私有与受保护的修饰符</h4><p>默认为： public</p>\n<p>私有：private，不能在声明此类的外部访问<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div></pre></td></tr></table></figure></p>\n<p>protected， 在派生类中仍然可以访问<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> name: <span class=\"built_in\">string</span>;</div></pre></td></tr></table></figure></p>\n<p>readonly 只读<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">readonly name: <span class=\"built_in\">string</span>;</div></pre></td></tr></table></figure></p>\n<h4 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h4><p>支持使用 get / set 截取对象成员的访问</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Employee &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> _fullName: <span class=\"built_in\">string</span>;</div><div class=\"line\">  <span class=\"keyword\">get</span> fullName(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._fullName;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">set</span> fullName(newName: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._fullName = newName;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> employee =<span class=\"keyword\">new</span> Employee();</div><div class=\"line\">employee.fullName = <span class=\"string\">\"name\"</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"静态属性-static\"><a href=\"#静态属性-static\" class=\"headerlink\" title=\"静态属性 static\"></a>静态属性 static</h4><p>存在于类本身上面而不是类的实例上。<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Grid &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> origin = &#123;x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>&#125;;</div><div class=\"line\">    calculateDistanceFromOrigin(point: &#123;x: <span class=\"built_in\">number</span>; y: <span class=\"built_in\">number</span>;&#125;) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> xDist = (point.x - Grid.origin.x);</div><div class=\"line\">        <span class=\"keyword\">let</span> yDist = (point.y - Grid.origin.y);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(xDist * xDist + yDist * yDist) / <span class=\"keyword\">this</span>.scale;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">constructor</span> (<span class=\"params\"><span class=\"keyword\">public</span> scale: <span class=\"built_in\">number</span></span>) &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> grid1 = <span class=\"keyword\">new</span> Grid(<span class=\"number\">1.0</span>);  <span class=\"comment\">// 1x scale</span></div><div class=\"line\"><span class=\"keyword\">let</span> grid2 = <span class=\"keyword\">new</span> Grid(<span class=\"number\">5.0</span>);  <span class=\"comment\">// 5x scale</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(grid1.calculateDistanceFromOrigin(&#123;x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>&#125;));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(grid2.calculateDistanceFromOrigin(&#123;x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>&#125;));</div></pre></td></tr></table></figure></p>\n<h4 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h4><p>抽象类做为其它派生类的基类使用。<br>它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Department &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    printName(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Department name: '</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">abstract</span> printMeeting(): <span class=\"built_in\">void</span>; <span class=\"comment\">// 必须在派生类中实现</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> AccountingDepartment <span class=\"keyword\">extends</span> Department &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">'Accounting and Auditing'</span>); <span class=\"comment\">// constructors in derived classes must call super()</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    printMeeting(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'The Accounting Department meets each Monday at 10am.'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    generateReports(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Generating accounting reports...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> department: Department; <span class=\"comment\">// ok to create a reference to an abstract type</span></div><div class=\"line\">department = <span class=\"keyword\">new</span> Department(); <span class=\"comment\">// error: cannot create an instance of an abstract class</span></div><div class=\"line\">department = <span class=\"keyword\">new</span> AccountingDepartment(); <span class=\"comment\">// ok to create and assign a non-abstract subclass</span></div><div class=\"line\">department.printName();</div><div class=\"line\">department.printMeeting();</div><div class=\"line\">department.generateReports(); <span class=\"comment\">// error: method doesn't exist on declared abstract type</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数定义类型\"><a href=\"#函数定义类型\" class=\"headerlink\" title=\"函数定义类型\"></a>函数定义类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myAdd = (x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 设定返回值为 number型</span></div></pre></td></tr></table></figure>\n<h4 id=\"可选参数和默认参数\"><a href=\"#可选参数和默认参数\" class=\"headerlink\" title=\"可选参数和默认参数\"></a>可选参数和默认参数</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function buildUser(firstName: string = \"you\", lastName?: string) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(lastName) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> +lastName;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> firstName;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 可选参数必须跟在必须参数后面。</span></div></pre></td></tr></table></figure>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3>","site":{"data":{}},"excerpt":"<p>学习TypeScript…</p>","more":"<h3 id=\"SOLID原则\"><a href=\"#SOLID原则\" class=\"headerlink\" title=\"SOLID原则\"></a>SOLID原则</h3><table>\n<thead>\n<tr>\n<th>en</th>\n<th style=\"text-align:center\">en</th>\n<th style=\"text-align:right\">ch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SRP</td>\n<td style=\"text-align:center\">The Single Responsibility Principle</td>\n<td style=\"text-align:right\">单一责任原则</td>\n</tr>\n<tr>\n<td>OCP</td>\n<td style=\"text-align:center\">The Open Closed Principle</td>\n<td style=\"text-align:right\">开放封闭原则</td>\n</tr>\n<tr>\n<td>LSP</td>\n<td style=\"text-align:center\">The Liskov Substitution Principle</td>\n<td style=\"text-align:right\">里氏替换原则</td>\n</tr>\n<tr>\n<td>DIP</td>\n<td style=\"text-align:center\">The Dependency Inversion Principle</td>\n<td style=\"text-align:right\">依赖倒置原则</td>\n</tr>\n<tr>\n<td>ISP</td>\n<td style=\"text-align:center\">The Interface Segregation Principle</td>\n<td style=\"text-align:right\">接口分离原则</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>单一职责原则<br>表明软件组件（函数，类，模块）必须专注于单一的任务，当这个类需要承当其他类型的责任的时候，就需要分解这个类。</li>\n<li>开放封闭原则<br>表明软件设计时必须时刻考虑到（代码）可能的发展（扩展性），但是程序的发展必须最少地修改已有的代码。也就是扩展开放，修改封闭。</li>\n<li>里氏替换原则<br>表明只要继承的是同一个接口，程序里任意一个类都可以被其他的类替换。替换后不需要其他额外的工作程序就能像原来一样运行。</li>\n<li>依赖倒置原则<br>表明一个方法应该遵从依赖于抽象（接口）而不是一个实例（类）的概念。<br>高层模块不应该依赖于低层模块，二者都应该依赖于抽象<br>抽象不应该依赖于细节，细节应该依赖于抽象</li>\n<li>接口隔离原则<br>不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好。</li>\n</ul>\n<h3 id=\"基础类型-强类型\"><a href=\"#基础类型-强类型\" class=\"headerlink\" title=\"基础类型 强类型\"></a>基础类型 强类型</h3><h4 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 布尔值</span></div><div class=\"line\"><span class=\"keyword\">let</span> isDone: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"comment\">// 数字 支持二、八、十、十六进制</span></div><div class=\"line\"><span class=\"keyword\">let</span> isNumber: <span class=\"built_in\">number</span> = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"comment\">// 字符串</span></div><div class=\"line\"><span class=\"keyword\">let</span> isString: <span class=\"built_in\">string</span> = <span class=\"string\">\"string\"</span>;</div><div class=\"line\"><span class=\"comment\">// 模板字符串</span></div><div class=\"line\"><span class=\"keyword\">let</span> isExpr: <span class=\"built_in\">string</span> = <span class=\"string\">`hello, <span class=\"subst\">$&#123;isString&#125;</span>`</span>;</div><div class=\"line\"><span class=\"comment\">// 数组</span></div><div class=\"line\"><span class=\"keyword\">let</span> isArr: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"comment\">// 数组泛型</span></div><div class=\"line\"><span class=\"keyword\">let</span> isList: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"comment\">// 元组 Tuple（可以定义一个已知元素数量的数组，各个元素类型不必相同</span></div><div class=\"line\"><span class=\"keyword\">let</span> x: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</div><div class=\"line\">x = [<span class=\"string\">'string'</span>, <span class=\"number\">0</span>];</div><div class=\"line\">x = [<span class=\"number\">0</span>, <span class=\"string\">'string'</span>]; <span class=\"comment\">// error</span></div><div class=\"line\"><span class=\"comment\">// 当访问一个越界的元素，会使用联合类型替代</span></div><div class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">'world'</span>; <span class=\"comment\">// x[3] 可以被赋值为（string | number）类型</span></div></pre></td></tr></table></figure>\n<h4 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h4><p><code>enum</code><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> Color &#123;Red, Green, Blue&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Color);</div><div class=\"line\"><span class=\"comment\">// &#123;0: \"Red\", 1: \"Green\", 2: \"Blue\", Red: 0, Green: 1, Blue: 2&#125;</span></div><div class=\"line\"><span class=\"keyword\">let</span> c:Color = Color.Green;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"任意值-any\"><a href=\"#任意值-any\" class=\"headerlink\" title=\"任意值 any\"></a>任意值 any</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> notSure: <span class=\"built_in\">any</span> = <span class=\"string\">'any'</span>;</div><div class=\"line\">notSure = <span class=\"number\">1</span>;</div><div class=\"line\">notSure = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">any</span>[] = [<span class=\"number\">1</span>, <span class=\"literal\">true</span> ,<span class=\"string\">'any'</span>];</div></pre></td></tr></table></figure>\n<h4 id=\"空值-void\"><a href=\"#空值-void\" class=\"headerlink\" title=\"空值 void\"></a>空值 void</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">returnVoid</span>(<span class=\"params\"></span>):<span class=\"title\">void</span> </span>&#123;</div><div class=\"line\">  alert(<span class=\"string\">'is null'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> unusable: <span class=\"built_in\">void</span> = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> unu:<span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h4><p>any值的指定猜测<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> someValue: <span class=\"built_in\">any</span> = <span class=\"string\">\"some strings\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).length;</div><div class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).length;</div></pre></td></tr></table></figure></p>\n<h3 id=\"接口-interface\"><a href=\"#接口-interface\" class=\"headerlink\" title=\"接口 interface\"></a>接口 interface</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 自定义的属性检查</span></div><div class=\"line\"><span class=\"keyword\">interface</span> LabelledValue &#123;</div><div class=\"line\">  label: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printLabel</span>(<span class=\"params\">labelledObj: LabelledValue</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(labelledObj.label);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> myObj = &#123;size: <span class=\"number\">10</span>, label: <span class=\"string\">\"Size 10 Object\"</span>&#125;;</div><div class=\"line\">printLabel(myObj);</div></pre></td></tr></table></figure>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> userInfo &#123;</div><div class=\"line\">  name?: <span class=\"built_in\">string</span>;  <span class=\"comment\">// 可选属性</span></div><div class=\"line\">  readonly age: <span class=\"built_in\">number</span>; <span class=\"comment\">// 只读属性</span></div><div class=\"line\">  [propName: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>; <span class=\"comment\">// 额外属性定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> searchFunc &#123;</div><div class=\"line\">    (src: <span class=\"built_in\">string</span>, sub: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mySearch: searchFunc;</div><div class=\"line\">mySearch = <span class=\"function\">(<span class=\"params\">srcb, sub</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> res = srcb.search(sub);</div><div class=\"line\">    <span class=\"keyword\">if</span> (res === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'false'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'true'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">mySearch(<span class=\"string\">'aaaa'</span>, <span class=\"string\">'a'</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h4 id=\"可索引的类型\"><a href=\"#可索引的类型\" class=\"headerlink\" title=\"可索引的类型\"></a>可索引的类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> StringArray &#123;</div><div class=\"line\">  [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 当使用 number 去索引 StringArray 时，会返回 string 类型的值。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">interface</span> NumberDictionary &#123;</div><div class=\"line\">  [index: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span>;</div><div class=\"line\">  length: <span class=\"built_in\">number</span>;</div><div class=\"line\">  name: <span class=\"built_in\">string</span>;   <span class=\"comment\">//error `name`的类型不是索引类型的子类型</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"类类型\"><a href=\"#类类型\" class=\"headerlink\" title=\"类类型\"></a>类类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> IsTime &#123;</div><div class=\"line\">  currentTime: <span class=\"built_in\">Date</span>;</div><div class=\"line\">  setTime(d: <span class=\"built_in\">Date</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">class</span> Clock <span class=\"keyword\">implements</span> IsTime &#123;</div><div class=\"line\">  currentTime: <span class=\"built_in\">Date</span>;</div><div class=\"line\">  setTime(d: <span class=\"built_in\">Date</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.currentTime = d;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>) &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。</span></div></pre></td></tr></table></figure>\n<h4 id=\"扩展接口\"><a href=\"#扩展接口\" class=\"headerlink\" title=\"扩展接口\"></a>扩展接口</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</div><div class=\"line\">  color: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">interface</span> Square <span class=\"keyword\">extends</span> Shape &#123;</div><div class=\"line\">  sideLength: <span class=\"built_in\">number</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> square = &lt;Square&gt;&#123;&#125;;</div><div class=\"line\">square.color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\">square.sideLength = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"comment\">// 一个接口可以继承多个接口，创建出多个接口的合成接口。</span></div></pre></td></tr></table></figure>\n<h4 id=\"混合类型\"><a href=\"#混合类型\" class=\"headerlink\" title=\"混合类型\"></a>混合类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一个对象可以同时作为函数和对象使用,并带有额外属性。</span></div><div class=\"line\"><span class=\"keyword\">interface</span> Counter &#123;</div><div class=\"line\">  (start: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>;</div><div class=\"line\">  interval: <span class=\"built_in\">number</span>;</div><div class=\"line\">  reset(): <span class=\"built_in\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCounter</span>(<span class=\"params\"></span>): <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> counter = &lt;Counter&gt;<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">start: <span class=\"built_in\">number</span></span>) </span>&#123;&#125;;</div><div class=\"line\">  counter.interval = <span class=\"number\">123</span>;</div><div class=\"line\">  counter.reset = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> counter;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"接口继承类\"><a href=\"#接口继承类\" class=\"headerlink\" title=\"接口继承类\"></a>接口继承类</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Control &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> state: <span class=\"built_in\">any</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">interface</span> SelectableControl <span class=\"keyword\">extends</span> Control &#123;</div><div class=\"line\">    select(): <span class=\"built_in\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Button <span class=\"keyword\">extends</span> Control &#123;</div><div class=\"line\">    select() &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> TextBox <span class=\"keyword\">extends</span> Control &#123;</div><div class=\"line\">    select() &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Image &#123;</div><div class=\"line\">    select() &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Location &#123;</div><div class=\"line\">    select() &#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上面的例子里，SelectableControl包含了Control的所有成员，包括私有成员state。 因为 state是私有成员，所以只能够是Control的子类们才能实现SelectableControl接口。 因为只有 Control的子类才能够拥有一个声明于Control的私有成员state，这对私有成员的兼容性是必需的。</p>\n<p>在Control类内部，是允许通过SelectableControl的实例来访问私有成员state的。 实际上， SelectableControl就像Control一样，并拥有一个select方法。 Button和TextBox类是SelectableControl的子类（因为它们都继承自Control并有select方法），但Image和Location类并不是这样的。</p>\n<h3 id=\"类-Class\"><a href=\"#类-Class\" class=\"headerlink\" title=\"类 Class\"></a>类 Class</h3><h4 id=\"继承-extends\"><a href=\"#继承-extends\" class=\"headerlink\" title=\"继承 extends\"></a>继承 extends</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> People &#123;</div><div class=\"line\">    name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    work: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span>, theWork: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = theName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.work = theWork;</div><div class=\"line\">    &#125;</div><div class=\"line\">    getWork() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span> is <span class=\"subst\">$&#123;this.work&#125;</span>`</span>);</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Student <span class=\"keyword\">extends</span> People &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name);</div><div class=\"line\">        <span class=\"keyword\">this</span>.work = <span class=\"string\">\"student\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    getWork() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'extend'</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.getWork();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sam = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"sam\"</span>)</div><div class=\"line\">sam.getWork()</div></pre></td></tr></table></figure>\n<h4 id=\"公共，私有与受保护的修饰符\"><a href=\"#公共，私有与受保护的修饰符\" class=\"headerlink\" title=\"公共，私有与受保护的修饰符\"></a>公共，私有与受保护的修饰符</h4><p>默认为： public</p>\n<p>私有：private，不能在声明此类的外部访问<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div></pre></td></tr></table></figure></p>\n<p>protected， 在派生类中仍然可以访问<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> name: <span class=\"built_in\">string</span>;</div></pre></td></tr></table></figure></p>\n<p>readonly 只读<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">readonly name: <span class=\"built_in\">string</span>;</div></pre></td></tr></table></figure></p>\n<h4 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h4><p>支持使用 get / set 截取对象成员的访问</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Employee &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> _fullName: <span class=\"built_in\">string</span>;</div><div class=\"line\">  <span class=\"keyword\">get</span> fullName(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._fullName;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">set</span> fullName(newName: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._fullName = newName;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> employee =<span class=\"keyword\">new</span> Employee();</div><div class=\"line\">employee.fullName = <span class=\"string\">\"name\"</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"静态属性-static\"><a href=\"#静态属性-static\" class=\"headerlink\" title=\"静态属性 static\"></a>静态属性 static</h4><p>存在于类本身上面而不是类的实例上。<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Grid &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> origin = &#123;x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>&#125;;</div><div class=\"line\">    calculateDistanceFromOrigin(point: &#123;x: <span class=\"built_in\">number</span>; y: <span class=\"built_in\">number</span>;&#125;) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> xDist = (point.x - Grid.origin.x);</div><div class=\"line\">        <span class=\"keyword\">let</span> yDist = (point.y - Grid.origin.y);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(xDist * xDist + yDist * yDist) / <span class=\"keyword\">this</span>.scale;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">constructor</span> (<span class=\"params\"><span class=\"keyword\">public</span> scale: <span class=\"built_in\">number</span></span>) &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> grid1 = <span class=\"keyword\">new</span> Grid(<span class=\"number\">1.0</span>);  <span class=\"comment\">// 1x scale</span></div><div class=\"line\"><span class=\"keyword\">let</span> grid2 = <span class=\"keyword\">new</span> Grid(<span class=\"number\">5.0</span>);  <span class=\"comment\">// 5x scale</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(grid1.calculateDistanceFromOrigin(&#123;x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>&#125;));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(grid2.calculateDistanceFromOrigin(&#123;x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>&#125;));</div></pre></td></tr></table></figure></p>\n<h4 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h4><p>抽象类做为其它派生类的基类使用。<br>它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Department &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    printName(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Department name: '</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">abstract</span> printMeeting(): <span class=\"built_in\">void</span>; <span class=\"comment\">// 必须在派生类中实现</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> AccountingDepartment <span class=\"keyword\">extends</span> Department &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">'Accounting and Auditing'</span>); <span class=\"comment\">// constructors in derived classes must call super()</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    printMeeting(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'The Accounting Department meets each Monday at 10am.'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    generateReports(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Generating accounting reports...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> department: Department; <span class=\"comment\">// ok to create a reference to an abstract type</span></div><div class=\"line\">department = <span class=\"keyword\">new</span> Department(); <span class=\"comment\">// error: cannot create an instance of an abstract class</span></div><div class=\"line\">department = <span class=\"keyword\">new</span> AccountingDepartment(); <span class=\"comment\">// ok to create and assign a non-abstract subclass</span></div><div class=\"line\">department.printName();</div><div class=\"line\">department.printMeeting();</div><div class=\"line\">department.generateReports(); <span class=\"comment\">// error: method doesn't exist on declared abstract type</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数定义类型\"><a href=\"#函数定义类型\" class=\"headerlink\" title=\"函数定义类型\"></a>函数定义类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myAdd = (x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 设定返回值为 number型</span></div></pre></td></tr></table></figure>\n<h4 id=\"可选参数和默认参数\"><a href=\"#可选参数和默认参数\" class=\"headerlink\" title=\"可选参数和默认参数\"></a>可选参数和默认参数</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function buildUser(firstName: string = \"you\", lastName?: string) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(lastName) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> +lastName;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> firstName;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 可选参数必须跟在必须参数后面。</span></div></pre></td></tr></table></figure>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3>"},{"title":"angular4 directive入场动画","date":"2017-11-24T00:39:38.000Z","_content":"<!--more -->\n\n## 通过Directive实现入场动画\n\n### 创建指令并引入所需\n\n```ts\nimport { Directive, ElementRef, HostListener, HostBinding  } from '@angular/core';\n\n@Directive({\n  selector: '[VisualIn]'\n})\nexport class VisualInDirective {\n  finished: boolean;\n  constructor(\n    private el: ElementRef,\n  ) {\n    this.finished = false;\n  }\n```\n### 使用`HostListener`为宿主元素添加`window`监听\n\n```ts\n// scroll 监听\n@HostListener('window: scroll') elementShowIn() {}\n// load 监听\n@HostListener('window: load') elementLoadIn() {}\n```\n\n### 使用`HostBinding`为宿主元素绑定动画类名\n```ts\n  @HostBinding('class.bounceInRight') isAnimate: boolean;\n```\n```css\n@keyframes bounceInRight {\n  from, 60%, 75%, 90%, to {\n    animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(3000px, 0, 0);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(-25px, 0, 0);\n  }\n\n  75% {\n    transform: translate3d(10px, 0, 0);\n  }\n\n  90% {\n    transform: translate3d(-5px, 0, 0);\n  }\n\n  to {\n    transform: none;\n  }\n}\n\n.bounceInRight {\n  animation-duration: .5s;\n  animation-fill-mode: both;\n  animation-name: bounceInRight;\n}\n```\n### 获取元素相对于`body`标签的高度\n`documentElement.offsetTop`会获取标签到`offsetParent`的相对偏移高度\n默认的`offsetParent`返回一个指向最近的包含该元素的定位元素\n如果没有定位元素则返回最近的`table, table sell`或根元素\n因此我们需要遍历父级元素，从基元素获取所有父级定位元素，并累加相对偏移高度\n```ts\nprivate getOffsetBodyTop(el) {\n    let offsetBodyTop = 0;\n    function _getOffsetBodyTop(el) {\n      offsetBodyTop += el.offsetTop;\n      if (el.offsetParent.tagName != 'BODY') {\n        return _getOffsetBodyTop(el.offsetParent);\n      } else if (el.offsetParent.tagName == 'BODY') {\n        return false;\n      }\n    }\n    _getOffsetBodyTop(el);\n    return offsetBodyTop;\n  }\n```\n\n### 定位元素进入窗口的高度，并执行动画\n当 元素相对根元素的偏移高度 - 当前滚动高度 - 窗口高度 < 0 时，元素开始进入页面\n此时执行动画\n```ts\nprivate showAnimate(): Promise<any> {\n    return new Promise((resolve, reject) => {\n    const offsetBodyTop = this.getOffsetBodyTop(this.el.nativeElement); // 元素距离顶部高度\n    let _dst: number;   // 滚动高度\n    if (this.myPhone() === 'iPhone') {\n      _dst = document.body.scrollTop;\n    } else {\n      _dst = document.documentElement.scrollTop;\n    }\n    const _wsh = window.innerHeight;   // 屏幕高度\n    if (offsetBodyTop - _dst - _wsh < -30) {\n      if (this.finished) {\n        resolve('isFinished');\n      } else {\n        this.isAnimate = true;\n        this.finished = true;\n        resolve('show');\n      }\n    } else {\n      resolve('noShow');\n    }\n  });\n}\n\nprivate myPhone() {\n  const userAgent = navigator.userAgent;\n  if (userAgent.indexOf('iPhone') > -1) {\n    return 'iPhone';\n  }\n```\n\n### 修改HostListener\n```ts\n @HostListener('window:scroll') elementShowIn() {\n    this.showAnimate().then(res => {});\n  }\n  @HostListener('window:load') elementLoadIn() {\n    this.showAnimate().then(res => {});\n  }\n```\n\n### 添加指令\n在你需要的元素标签上添加\n```html\n<div  VisualIn></div>\n```\n[This is demo](http://blog.xuncs.cn)\n\n","source":"_posts/angular4-directive入场动画.md","raw":"---\ntitle: angular4 directive入场动画\ndate: 2017-11-24 08:39:38\ntags:\n  - JavaScript\n  - Angular4\n---\n<!--more -->\n\n## 通过Directive实现入场动画\n\n### 创建指令并引入所需\n\n```ts\nimport { Directive, ElementRef, HostListener, HostBinding  } from '@angular/core';\n\n@Directive({\n  selector: '[VisualIn]'\n})\nexport class VisualInDirective {\n  finished: boolean;\n  constructor(\n    private el: ElementRef,\n  ) {\n    this.finished = false;\n  }\n```\n### 使用`HostListener`为宿主元素添加`window`监听\n\n```ts\n// scroll 监听\n@HostListener('window: scroll') elementShowIn() {}\n// load 监听\n@HostListener('window: load') elementLoadIn() {}\n```\n\n### 使用`HostBinding`为宿主元素绑定动画类名\n```ts\n  @HostBinding('class.bounceInRight') isAnimate: boolean;\n```\n```css\n@keyframes bounceInRight {\n  from, 60%, 75%, 90%, to {\n    animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(3000px, 0, 0);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(-25px, 0, 0);\n  }\n\n  75% {\n    transform: translate3d(10px, 0, 0);\n  }\n\n  90% {\n    transform: translate3d(-5px, 0, 0);\n  }\n\n  to {\n    transform: none;\n  }\n}\n\n.bounceInRight {\n  animation-duration: .5s;\n  animation-fill-mode: both;\n  animation-name: bounceInRight;\n}\n```\n### 获取元素相对于`body`标签的高度\n`documentElement.offsetTop`会获取标签到`offsetParent`的相对偏移高度\n默认的`offsetParent`返回一个指向最近的包含该元素的定位元素\n如果没有定位元素则返回最近的`table, table sell`或根元素\n因此我们需要遍历父级元素，从基元素获取所有父级定位元素，并累加相对偏移高度\n```ts\nprivate getOffsetBodyTop(el) {\n    let offsetBodyTop = 0;\n    function _getOffsetBodyTop(el) {\n      offsetBodyTop += el.offsetTop;\n      if (el.offsetParent.tagName != 'BODY') {\n        return _getOffsetBodyTop(el.offsetParent);\n      } else if (el.offsetParent.tagName == 'BODY') {\n        return false;\n      }\n    }\n    _getOffsetBodyTop(el);\n    return offsetBodyTop;\n  }\n```\n\n### 定位元素进入窗口的高度，并执行动画\n当 元素相对根元素的偏移高度 - 当前滚动高度 - 窗口高度 < 0 时，元素开始进入页面\n此时执行动画\n```ts\nprivate showAnimate(): Promise<any> {\n    return new Promise((resolve, reject) => {\n    const offsetBodyTop = this.getOffsetBodyTop(this.el.nativeElement); // 元素距离顶部高度\n    let _dst: number;   // 滚动高度\n    if (this.myPhone() === 'iPhone') {\n      _dst = document.body.scrollTop;\n    } else {\n      _dst = document.documentElement.scrollTop;\n    }\n    const _wsh = window.innerHeight;   // 屏幕高度\n    if (offsetBodyTop - _dst - _wsh < -30) {\n      if (this.finished) {\n        resolve('isFinished');\n      } else {\n        this.isAnimate = true;\n        this.finished = true;\n        resolve('show');\n      }\n    } else {\n      resolve('noShow');\n    }\n  });\n}\n\nprivate myPhone() {\n  const userAgent = navigator.userAgent;\n  if (userAgent.indexOf('iPhone') > -1) {\n    return 'iPhone';\n  }\n```\n\n### 修改HostListener\n```ts\n @HostListener('window:scroll') elementShowIn() {\n    this.showAnimate().then(res => {});\n  }\n  @HostListener('window:load') elementLoadIn() {\n    this.showAnimate().then(res => {});\n  }\n```\n\n### 添加指令\n在你需要的元素标签上添加\n```html\n<div  VisualIn></div>\n```\n[This is demo](http://blog.xuncs.cn)\n\n","slug":"angular4-directive入场动画","published":1,"updated":"2017-11-24T02:51:27.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ukt0007jbze7w5iok0c","content":"<a id=\"more\"></a>\n<h2 id=\"通过Directive实现入场动画\"><a href=\"#通过Directive实现入场动画\" class=\"headerlink\" title=\"通过Directive实现入场动画\"></a>通过Directive实现入场动画</h2><h3 id=\"创建指令并引入所需\"><a href=\"#创建指令并引入所需\" class=\"headerlink\" title=\"创建指令并引入所需\"></a>创建指令并引入所需</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Directive, ElementRef, HostListener, HostBinding  &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'[VisualIn]'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> VisualInDirective &#123;</div><div class=\"line\">  finished: <span class=\"built_in\">boolean</span>;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> el: ElementRef,</span></div><div class=\"line\"><span class=\"params\">  </span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.finished = <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用HostListener为宿主元素添加window监听\"><a href=\"#使用HostListener为宿主元素添加window监听\" class=\"headerlink\" title=\"使用HostListener为宿主元素添加window监听\"></a>使用<code>HostListener</code>为宿主元素添加<code>window</code>监听</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// scroll 监听</span></div><div class=\"line\"><span class=\"meta\">@HostListener</span>(<span class=\"string\">'window: scroll'</span>) elementShowIn() &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// load 监听</span></div><div class=\"line\"><span class=\"meta\">@HostListener</span>(<span class=\"string\">'window: load'</span>) elementLoadIn() &#123;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用HostBinding为宿主元素绑定动画类名\"><a href=\"#使用HostBinding为宿主元素绑定动画类名\" class=\"headerlink\" title=\"使用HostBinding为宿主元素绑定动画类名\"></a>使用<code>HostBinding</code>为宿主元素绑定动画类名</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@HostBinding</span>(<span class=\"string\">'class.bounceInRight'</span>) isAnimate: <span class=\"built_in\">boolean</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> bounceInRight &#123;</div><div class=\"line\">  <span class=\"selector-tag\">from</span>, 60%, 75%, 90%, <span class=\"selector-tag\">to</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(0.215, 0.610, 0.355, 1.000);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(3000px, 0, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  60% &#123;</div><div class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(-25px, 0, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  75% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(10px, 0, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  90% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(-5px, 0, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: none;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.bounceInRight</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">animation-duration</span>: .<span class=\"number\">5s</span>;</div><div class=\"line\">  <span class=\"attribute\">animation-fill-mode</span>: both;</div><div class=\"line\">  <span class=\"attribute\">animation-name</span>: bounceInRight;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"获取元素相对于body标签的高度\"><a href=\"#获取元素相对于body标签的高度\" class=\"headerlink\" title=\"获取元素相对于body标签的高度\"></a>获取元素相对于<code>body</code>标签的高度</h3><p><code>documentElement.offsetTop</code>会获取标签到<code>offsetParent</code>的相对偏移高度<br>默认的<code>offsetParent</code>返回一个指向最近的包含该元素的定位元素<br>如果没有定位元素则返回最近的<code>table, table sell</code>或根元素<br>因此我们需要遍历父级元素，从基元素获取所有父级定位元素，并累加相对偏移高度<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> getOffsetBodyTop(el) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> offsetBodyTop = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_getOffsetBodyTop</span>(<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      offsetBodyTop += el.offsetTop;</div><div class=\"line\">      <span class=\"keyword\">if</span> (el.offsetParent.tagName != <span class=\"string\">'BODY'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> _getOffsetBodyTop(el.offsetParent);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.offsetParent.tagName == <span class=\"string\">'BODY'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    _getOffsetBodyTop(el);</div><div class=\"line\">    <span class=\"keyword\">return</span> offsetBodyTop;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"定位元素进入窗口的高度，并执行动画\"><a href=\"#定位元素进入窗口的高度，并执行动画\" class=\"headerlink\" title=\"定位元素进入窗口的高度，并执行动画\"></a>定位元素进入窗口的高度，并执行动画</h3><p>当 元素相对根元素的偏移高度 - 当前滚动高度 - 窗口高度 &lt; 0 时，元素开始进入页面<br>此时执行动画<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> showAnimate(): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> offsetBodyTop = <span class=\"keyword\">this</span>.getOffsetBodyTop(<span class=\"keyword\">this</span>.el.nativeElement); <span class=\"comment\">// 元素距离顶部高度</span></div><div class=\"line\">    <span class=\"keyword\">let</span> _dst: <span class=\"built_in\">number</span>;   <span class=\"comment\">// 滚动高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.myPhone() === <span class=\"string\">'iPhone'</span>) &#123;</div><div class=\"line\">      _dst = <span class=\"built_in\">document</span>.body.scrollTop;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      _dst = <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">const</span> _wsh = <span class=\"built_in\">window</span>.innerHeight;   <span class=\"comment\">// 屏幕高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (offsetBodyTop - _dst - _wsh &lt; <span class=\"number\">-30</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.finished) &#123;</div><div class=\"line\">        resolve(<span class=\"string\">'isFinished'</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.isAnimate = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.finished = <span class=\"literal\">true</span>;</div><div class=\"line\">        resolve(<span class=\"string\">'show'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      resolve(<span class=\"string\">'noShow'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> myPhone() &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> userAgent = navigator.userAgent;</div><div class=\"line\">  <span class=\"keyword\">if</span> (userAgent.indexOf(<span class=\"string\">'iPhone'</span>) &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'iPhone'</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"修改HostListener\"><a href=\"#修改HostListener\" class=\"headerlink\" title=\"修改HostListener\"></a>修改HostListener</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@HostListener</span>(<span class=\"string\">'window:scroll'</span>) elementShowIn() &#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.showAnimate().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;&#125;);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@HostListener</span>(<span class=\"string\">'window:load'</span>) elementLoadIn() &#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.showAnimate().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;&#125;);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"添加指令\"><a href=\"#添加指令\" class=\"headerlink\" title=\"添加指令\"></a>添加指令</h3><p>在你需要的元素标签上添加<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">VisualIn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"http://blog.xuncs.cn\" target=\"_blank\" rel=\"external\">This is demo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"通过Directive实现入场动画\"><a href=\"#通过Directive实现入场动画\" class=\"headerlink\" title=\"通过Directive实现入场动画\"></a>通过Directive实现入场动画</h2><h3 id=\"创建指令并引入所需\"><a href=\"#创建指令并引入所需\" class=\"headerlink\" title=\"创建指令并引入所需\"></a>创建指令并引入所需</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Directive, ElementRef, HostListener, HostBinding  &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'[VisualIn]'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> VisualInDirective &#123;</div><div class=\"line\">  finished: <span class=\"built_in\">boolean</span>;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> el: ElementRef,</span></div><div class=\"line\"><span class=\"params\">  </span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.finished = <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用HostListener为宿主元素添加window监听\"><a href=\"#使用HostListener为宿主元素添加window监听\" class=\"headerlink\" title=\"使用HostListener为宿主元素添加window监听\"></a>使用<code>HostListener</code>为宿主元素添加<code>window</code>监听</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// scroll 监听</span></div><div class=\"line\"><span class=\"meta\">@HostListener</span>(<span class=\"string\">'window: scroll'</span>) elementShowIn() &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// load 监听</span></div><div class=\"line\"><span class=\"meta\">@HostListener</span>(<span class=\"string\">'window: load'</span>) elementLoadIn() &#123;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用HostBinding为宿主元素绑定动画类名\"><a href=\"#使用HostBinding为宿主元素绑定动画类名\" class=\"headerlink\" title=\"使用HostBinding为宿主元素绑定动画类名\"></a>使用<code>HostBinding</code>为宿主元素绑定动画类名</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@HostBinding</span>(<span class=\"string\">'class.bounceInRight'</span>) isAnimate: <span class=\"built_in\">boolean</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> bounceInRight &#123;</div><div class=\"line\">  <span class=\"selector-tag\">from</span>, 60%, 75%, 90%, <span class=\"selector-tag\">to</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(0.215, 0.610, 0.355, 1.000);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(3000px, 0, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  60% &#123;</div><div class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(-25px, 0, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  75% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(10px, 0, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  90% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate3d</span>(-5px, 0, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: none;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.bounceInRight</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">animation-duration</span>: .<span class=\"number\">5s</span>;</div><div class=\"line\">  <span class=\"attribute\">animation-fill-mode</span>: both;</div><div class=\"line\">  <span class=\"attribute\">animation-name</span>: bounceInRight;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"获取元素相对于body标签的高度\"><a href=\"#获取元素相对于body标签的高度\" class=\"headerlink\" title=\"获取元素相对于body标签的高度\"></a>获取元素相对于<code>body</code>标签的高度</h3><p><code>documentElement.offsetTop</code>会获取标签到<code>offsetParent</code>的相对偏移高度<br>默认的<code>offsetParent</code>返回一个指向最近的包含该元素的定位元素<br>如果没有定位元素则返回最近的<code>table, table sell</code>或根元素<br>因此我们需要遍历父级元素，从基元素获取所有父级定位元素，并累加相对偏移高度<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> getOffsetBodyTop(el) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> offsetBodyTop = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_getOffsetBodyTop</span>(<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      offsetBodyTop += el.offsetTop;</div><div class=\"line\">      <span class=\"keyword\">if</span> (el.offsetParent.tagName != <span class=\"string\">'BODY'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> _getOffsetBodyTop(el.offsetParent);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.offsetParent.tagName == <span class=\"string\">'BODY'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    _getOffsetBodyTop(el);</div><div class=\"line\">    <span class=\"keyword\">return</span> offsetBodyTop;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"定位元素进入窗口的高度，并执行动画\"><a href=\"#定位元素进入窗口的高度，并执行动画\" class=\"headerlink\" title=\"定位元素进入窗口的高度，并执行动画\"></a>定位元素进入窗口的高度，并执行动画</h3><p>当 元素相对根元素的偏移高度 - 当前滚动高度 - 窗口高度 &lt; 0 时，元素开始进入页面<br>此时执行动画<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> showAnimate(): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> offsetBodyTop = <span class=\"keyword\">this</span>.getOffsetBodyTop(<span class=\"keyword\">this</span>.el.nativeElement); <span class=\"comment\">// 元素距离顶部高度</span></div><div class=\"line\">    <span class=\"keyword\">let</span> _dst: <span class=\"built_in\">number</span>;   <span class=\"comment\">// 滚动高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.myPhone() === <span class=\"string\">'iPhone'</span>) &#123;</div><div class=\"line\">      _dst = <span class=\"built_in\">document</span>.body.scrollTop;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      _dst = <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">const</span> _wsh = <span class=\"built_in\">window</span>.innerHeight;   <span class=\"comment\">// 屏幕高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (offsetBodyTop - _dst - _wsh &lt; <span class=\"number\">-30</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.finished) &#123;</div><div class=\"line\">        resolve(<span class=\"string\">'isFinished'</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.isAnimate = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.finished = <span class=\"literal\">true</span>;</div><div class=\"line\">        resolve(<span class=\"string\">'show'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      resolve(<span class=\"string\">'noShow'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> myPhone() &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> userAgent = navigator.userAgent;</div><div class=\"line\">  <span class=\"keyword\">if</span> (userAgent.indexOf(<span class=\"string\">'iPhone'</span>) &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'iPhone'</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"修改HostListener\"><a href=\"#修改HostListener\" class=\"headerlink\" title=\"修改HostListener\"></a>修改HostListener</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@HostListener</span>(<span class=\"string\">'window:scroll'</span>) elementShowIn() &#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.showAnimate().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;&#125;);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@HostListener</span>(<span class=\"string\">'window:load'</span>) elementLoadIn() &#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.showAnimate().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;&#125;);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"添加指令\"><a href=\"#添加指令\" class=\"headerlink\" title=\"添加指令\"></a>添加指令</h3><p>在你需要的元素标签上添加<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">VisualIn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"http://blog.xuncs.cn\" target=\"_blank\" rel=\"external\">This is demo</a></p>"},{"title":"Rx入门学习","date":"2017-08-12T06:08:28.000Z","_content":"## RXjs\n\n### Functional Programming\n - Expression, no Statement\n - Pure Function\n - 利用参数保存状态\n\n\n### 建立Observable\n统一订阅\n```js\nobservable.subscribe({\n    next: function(value) {\n        console.log(value)\n    },\n    complete: function() {\n        console.log('complete!');\n    },\n    error: function(error) {\n        console.log(error)\n    }\n});\n```\n- `create`\n```js\n/**\n@param: `callback function`\n*/\nvar observable = Rx.Observable\n  .create(function(observer) {\n    observer.next('Jerry'); // RxJS 4.x 以前的版本用 onNext\n    observer.next('Anna');\n  })\n```\n\n- `of`\n多个传递值\n```js\nvar observable = Rx.Observable.of('Jerry', 'Anna');\n```\n\n- `from`\n数组，字符串，promise对象\n```js\nvar params = ['Jerry', 'Anna']  // 数组\nvar params = 'Jerry' // 字符串\nvar params = new Promise((resolve, reject) => {\n    setTimeout(() => {\n        resolve('hi')\n    }, 300)\n})                  // promise对象\nvar observable = Rx.Observable.from(params)\n```\n\n- `fromEvent`\n为DOM元素添加监听事件\nparam1: DOM对象，param2: 监听事件\n```js\nvar observable = Rx.Observable.fromEvent($DOM, $event);\n```\n\n- `fromEventPattern`\n同时具有注册移除监听的类事件使用\n```js\nclass Producer {\n\tconstructor() {\n\t\tthis.listeners = [];\n\t}\n\taddListener(listener) {\n\t\tif(typeof listener === 'function') {\n\t\t\tthis.listeners.push(listener)\n\t\t} else {\n\t\t\tthrow new Error('listener 必須是 function')\n\t\t}\n\t}\n\tremoveListener(listener) {\n\t\tthis.listeners.splice(this.listeners.indexOf(listener), 1)\n\t}\n\tnotify(message) {\n\t\tthis.listeners.forEach(listener => {\n\t\t\tlistener(message);\n\t\t})\n\t}\n}\nvar egghead = new Producer(); \nvar source = Rx.Observable\n    .fromEventPattern(\n        (handler) => egghead.addListener(handler), \n        (handler) => egghead.removeListener(handler)\n    ); \nsource.subscribe({\n    next: function(value) {\n        console.log(value)\n    },\n    complete: function() {\n        console.log('complete!');\n    },\n    error: function(error) {\n        console.log(error)\n    }\n})\negghead.notify('Hello! Can you hear me?');\n// Hello! Can you hear me?\n```\n\n\n- `empty`\n给出一个空的Observable，如果订阅这个Observable则会立即push出complete\n```js\nvar source = Rx.Observable.empty()\n```\n\n- `never`\n给出一个无穷的Observable，订阅后将什么都不发生，但存在\n```js\nvar source = Rx.Observable.never()\n```\n\n- `throw`\n给出一个错误的Observable，订阅后将直接抛出错误\n```js\nvar source = Rx.Observable.throw()\n```\n\n- `interval`\n每隔一段时间推送出一个从零开始递增的整数\n```js\nvar source = Rx.Observable.interval(666)\n```\n\n- `timer`\n`param_one`: 发出第一个值的等待时间(number)/等待到的日期(Date)\n`param_two`: 第一个值发出之后发送每个值的间隔时间\n如果只有一个参数，发出第一个值之后触发complete\n```js\nvar source = Rx.Observable.timer(5000, 1000)\n```\n\n\n### Subscription\n订阅Observable后会回传一个subscription对象，这个对象含有释放资源的`unsubscribe`方法，可以停止订阅\n```js\nvar source = Rx.Observable.timer(1000, 1000);\n// 取得 subscription\nvar subscription = source.subscribe({\n\tnext: function(value) {\n\t\tconsole.log(value)\n\t},\n\tcomplete: function() {\n\t\tconsole.log('complete!');\n\t},\n\terror: function(error) {\n    console.log('Throw Error: ' + error)\n\t}\n});\nsetTimeout(() => {\n    subscription.unsubscribe()\n}, 5000)\n// 输出: 0,1,2,3,4\n```\n\n### Operator\n`Operators`是一个个被附加到`Observable`上的方法，经过这些方法传递出一个新的`observable`\n\n#### Transformation Operators\n- `map`: 对 `Observable` 对象发出的每个值，使用指定的 `project` 函数，进行映射处理\n```js\nvar source = Rx.Observable.interval(1000);\nvar newest = source.map(x => x + 2); \nnewest.subscribe(console.log);\n```\n```\nsource: -----0-----1-----2-----3--...\n            map(x => x + 2)\nnewest: -----2-----3-----4-----5--...\n```\n- `mapTo`: 对 `Observable` 对象发出的每个值，映射成固定的值\n```js\nvar source = Rx.Observable.interval(1000);\nvar newest = source.mapTo(2); \nnewest.subscribe(console.log);\n```\n```\nsource: -----0-----1-----2-----3--...\n                mapTo(2)\nnewest: -----2-----2-----2-----2--...\n```\n- `scan`: 对 `Observable` 发出值，执行 `accumulator` 指定的运算，类似于 `reduce` \n```js\nvar source = Rx.Observable.interval(1000)\nvar newest = source.scan( count => count + 5, '2')\nnewest.subscribe(console.log);\n```\n```\nsource: -----0------1------2------3--...\n        scan( x => x + 5, 0)\nnewest: -----5-----10-----15-----20--...\n```\n\n- `buffer`: 缓冲源 `Observable` 对象已发出的值，直到 `closingNotifier` 触发后，统一输出缓存的元素\n```js\nvar source = Rx.Observable.interval(300);\nvar source2 = Rx.Observable.interval(1000);\nvar example = source.buffer(source2);\nexample.subscribe(...);\n```\n```\nsource : --0--1--2--3--4--5--6--7..\nsource2: ---------0---------1--------...\n            buffer(source2)\nexample: ---------([0,1,2])---------([3,4,5]) \n```\n\n- `bufferTime`: 设定源 `Observable` 对象已发出的值的缓冲时间\n```js\nvar source = Rx.Observable.interval(300);\nvar example = source.bufferTime(1000);\nexample.subscribe(...);\n```\n```\nsource : --0--1--2--3--4--5--6--7..\n            bufferTime(1000)\nexample: ---------([0,1,2])---------([3,4,5]) \n```\n\n- `bufferCount`: 缓冲源 `Observable` 对象已发出的值，直到大小达到给定的最大 `bufferSize` \n```js\nvar source = Rx.Observable.interval(300);\nvar example = source.bufferCount(3);\nexample.subscribe(...);\n```\n```\nsource : --0--1--2--3--4--5--6--7..\n            bufferCount(3)\nexample: ---------([0,1,2])---------([3,4,5]) \n```\n\n- `concatMap`: 对每个 `Observable` 对象发出的值，进行映射处理，并进行合并。该操作符也会依序所有`Observable` 对象\n```js\nvar source = Rx.Observable.fromEvent(document.body, 'click');\nvar example = source.concatMap(e => Rx.Observable.interval(100).take(3));\nexample.subscribe(...);\n```\n```\nsource : -----------c--c------------------...\n        concatMap(c => Rx.Observable.interval(100).take(3))\nexample: -------------0-1-2-0-1-2---------...\n```\n\n- `switchMap`: 对源 `Observable` 对象发出的值，做映射处理。若有新的 `Observable` 对象出现，会在新的 `Observable` 对象发出新值后，退订前一个未处理完的 `Observable` 对象\n```js\nvar source = Rx.Observable.fromEvent(document.body, 'click');\nvar example = source.switchMap(e => Rx.Observable.interval(100).take(3));\nexample.subscribe(...);\n```\n```\nsource : -----------c--c-----------------...\n        concatMap(c => Rx.Observable.interval(100).take(3))\nexample: -------------0--0-1-2-----------...\n```\n\n#### Filtering Operators\n- `filter`: 过滤值\n```js\nvar source = Rx.Observable.interval(1000);\nvar newest = source.filter(x => x % 2 === 0); \n```\n```\nsource: -----0-----1-----2-----3-----4-...\n            filter(x => x % 2 === 0)\nnewest: -----0-----------2-----------4-...\n```\n\n- `take`: 获取 `Observable` 对象发出的前n项值，取完结束。\n```js\nvar source = Rx.Observable.interval(1000);\nvar example = source.take(3);\n```\n```\nsource : -----0-----1-----2-----3--..\n                take(3)\nexample: -----0-----1-----2|\n```\n\n- `first`: 获取 `Observable` 对象发出的第一个元素，取完结束。\n```js\nvar source = Rx.Observable.interval(1000);\nvar example = source.first();\n```\n```\nsource : -----0-----1-----2-----3--..\n                first()\nexample: -----0|\n```\n\n- `takeUntil`: 当 `takeUntil` 传入的 `notifier` 发出值时，源 `Observable` 对象就会直接进入完成状态\n```js\nvar source = Rx.Observable.interval(1000);\nvar click = Rx.Observable.fromEvent(document.body, 'click');\nvar example = source.takeUntil(click);\n```\n```\nsource : -----0-----1-----2------3--\nclick  : ----------------------c----\n                takeUntil(click)\nexample: -----0-----1-----2----|\n```\n\n- `skip`: 跳过 源`Observable`的前n项，并返回新的`Observable`对象\n```js\nvar source = Rx.Observable.interval(1000);\nvar example = source.skip(3);\n```\n```\nsource : ----0----1----2----3----4----5--....\n                    skip(3)\nexample: -------------------3----4----5--...\n```\n\n- `takeLast`: 获取 源`Observable`发出的后n项\n```js\nvar source = Rx.Observable.interval(1000).take(6);\nvar example = source.takeLast(2);\n```\n```\nsource : ----0----1----2----3----4----5|\n                takeLast(2)\nexample: ------------------------------(45)|\n```\n\n- `last`: 获取 源`Observable`发出的最后一项\n```js\nvar source = Rx.Observable.interval(1000).take(6);\nvar example = source.last();\n```\n```\nsource : ----0----1----2----3----4----5|\n                    last()\nexample: ------------------------------(5)|\n```\n\n- `debounceTime`: 在设定的时间跨度内，若源 `Observable` 对象没有再发出新值，则返回最近一次发出的值\n```js\nvar source = Rx.Observable.interval(300).take(5);\nvar example = source.debounceTime(1000);\n```\n```\nsource : --0--1--2--3--4|\n        debounceTime(1000)\nexample: --------------4| \n```\n\n- `throttleTime`: 节流，从 源`Observable`对象发出的第一个值开始，忽略等待时间内发出的值\n```js\nvar source = Rx.Observable.interval(300).take(5);\nvar example = source.throttleTime(1000);\n```\n```\nsource : --0--1--2--3--4|\n        throttleTime(1000)\nexample: --0------------4|  \n```\n\n- `distinct`: 去重\n```js\nvar source = Rx.Observable.from(['a', 'b', 'c', 'a', 'b'])\nvar example = source.distinct()\n```\n```\nsource : --a--b--c--a--b|\n            distinct()\nexample: --a--b--c------|\n```\n\n- `distinctUntilChanged`: 过滤 `Observable`发出的值，若当前值与上一次值不一致，则发出该值。\n```js\nvar source = Rx.Observable.from(['a', 'b', 'c', 'c', 'b'])\nvar example = source.distinctUntilChanged()\n```\n```\nsource : --a--b--c--c--b|\n            distinctUntilChanged()\nexample: --a--b--c-----b|\n```\n#### `Combination Operators`\n\n- `concat`: 合并多个`Observable`对象，并依次执行\n```js\nvar source = Rx.Observable.interval(1000).take(3);\nvar source2 = Rx.Observable.of(3)\nvar source3 = Rx.Observable.of(4,5,6)\nvar example = source.concat(source2, source3);\n```\n```\nsource : ----0----1----2|\nsource2: (3)|\nsource3: (456)|\n            concat()\nexample: ----0----1----2(3456)|\n```\n\n- `concatAll`: 合并多个`Observable`对象，并在上一个`Obs`完成订阅后订阅下一个`Obs`\n```js\nvar obs1 = Rx.Observable.interval(1000).take(5);\nvar obs2 = Rx.Observable.interval(500).take(2);\nvar obs3 = Rx.Observable.interval(2000).take(1);\nvar source = Rx.Observable.of(obs1, obs2, obs3);\nvar example = source.concatAll();\n```\n```\nsource : (o1                 o2      o3)|\n           \\                  \\       \\\n            --0--1--2--3--4|   -0-1|   ----0|               \n                concatAll()        \nexample: --0--1--2--3--4-0-1----0|\n```\n\n- `startWith`: 在开始发出`Obs`对象的数据之前发出已经设置的参数\n```js\nvar source = Rx.Observable.interval(1000);\nvar example = source.startWith(222);\n```\n```\nsource : ----0----1----2----3--...\n                startWith(222)\nexample: (222)----0----1----2----3--...\n```\n\n- `merage`: 合并 `Obs`对象，并按给定的时序发出对应值\n```js\nvar source = Rx.Observable.interval(500).take(3);\nvar source2 = Rx.Observable.interval(300).take(6);\nvar example = source.merge(source2);\n```\n```\nsource : ----0----1----2|\nsource2: --0--1--2--3--4--5|\n            merge()\nexample: --0-01--21-3--(24)--5|\n```\n\n- `merageAll`: 将高阶`Obs`转换为一阶`Obs`，并同时处理所有`Obs`\n```js\nvar click = Rx.Observable.fromEvent(document.body, 'click');\nvar source = click.map(e => Rx.Observable.interval(1000));\nvar example = source.mergeAll();\n```\n```\nclick  : ---------c-c------------------c--.. \n        map(e => Rx.Observable.interval(1000))\nsource : ---------o-o------------------o--..\n                   \\ \\                  \\----0----1--...\n                    \\ ----0----1----2----3----4--...\n                     ----0----1----2----3----4--...\n                     mergeAll()\nexample: ----------------00---11---22---33---(04)4--...\n```\n\n- `combineLatest`: 合并输入的`Obs`对象，当源`Obs`和其他`Obs`都发出值后，才会调用`project`函数\n```js\nvar source = Rx.Observable.interval(500).take(3);\nvar newest = Rx.Observable.interval(300).take(6);\nvar example = source.combineLatest(newest, (x, y) => x + y);\n```\n```\nsource : ----0----1----2|\nnewest : --0--1--2--3--4--5|\n    combineLatest(newest, (x, y) => x + y);\nexample: ----01--23-4--(56)--7|\n```\n\n- `zip`: 根据所有的`Obs`对象的输入顺序，产生一个新`Obs`\n```js\nvar source = Rx.Observable.interval(500).take(3);\nvar newest = Rx.Observable.interval(300).take(6);\nvar example = source.zip(newest, (x, y) => x + y);\n```\n```\nsource : ----0----1----2|\nnewest : --0--1--2--3--4--5|\n    zip(newest, (x, y) => x + y)\nexample: ----0----2----4|\n```\n\n- `withLatestFrom`: 当源`Obs`发出新值时，根据`project`函数，合并其他`Obs`之前发出的最新值\n```js\nvar main = Rx.Observable.from('hello').zip(Rx.Observable.interval(500), \n    (x, y) => x);\nvar some = Rx.Observable.from([0,1,0,0,0,1]).zip(Rx.Observable.interval(300), \n    (x, y) => x);\nvar example = main.withLatestFrom(some, (x, y) => {\n    return y === 1 ? x.toUpperCase() : x;\n});\n```\n```\nmain   : ----h----e----l----l----o|\nsome   : --0--1--0--0--0--1|\nwithLatestFrom(some, (x, y) =>  y === 1 ? x.toUpperCase() : x);\nexample: ----h----e----l----L----O|\n```\n\n- `switch`: 切换为最新的`Obs`数据源，并退订之前的`Obs`\n```js\nvar click = Rx.Observable.fromEvent(document.body, 'click');\nvar source = click.map(e => Rx.Observable.interval(1000));\nvar example = source.switch();\n```\n```\nclick  : ---------c-c------------------c--.. \n        map(e => Rx.Observable.interval(1000))\nsource : ---------o-o------------------o--..\n                   \\ \\                  \\----0----1--...\n                    \\ ----0----1----2----3----4--...\n                     ----0----1----2----3----4--...\n                     switch()\nexample: -----------------0----1----2--------0----1--...\n```\n\n#### `Utility Operators`\n- `delay`: 延迟源`Obs`发出的第一个元素的时间点\n```js\nvar source = Rx.Observable.interval(300).take(5);\nvar example = source.delay(500);\n```\n```\nsource : --0--1--2--3--4|\n        delay(500)\nexample: -------0--1--2--3--4|\n```\n\n- `delayWhen`: `delayWhen` 会响每个元素，调用的时候需要设置 `delayDurationSelector` 函数，该函数的返回值是 `Observable` 对象\n```js\nvar source = Rx.Observable.interval(300).take(5);\nvar example = source.delayWhen( x => Rx.Observable.interval(100 * x).take(1));\n```\n```\nsource : --0--1--2--3--4|\n    .delayWhen(x => Rx.Observable.interval(100 * x).take(1));\nexample: --0---1----2-----3------4|\n```\n\n#### `Multicasting Operators`\n- `multicast`: 用于挂载`Subject`，并返回一个可链接的`Obs`对象\n```js\nvar source = Rx.Observable.interval(1000)\n             .take(3)\n             .multicast(new Rx.Subject());\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n};\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n};\nsource.subscribe(observerA); // subject.subscribe(observerA)\nsource.connect(); // source.subscribe(subject)\nsetTimeout(() => {\n    source.subscribe(observerB); // subject.subscribe(observerA)\n}, 1000);\n```\n- `refCount`: 使 `multicast Observalbe`可以在第一个`subscriber`到达时自动执行，并在最后一个`subscriber`离开时结束。\n`refCount()`存在于`ConnectableObservable`上，并返回一个新的`Observalbe`\n```js\nvar source = Rx.Observable.interval(1000)\n             .do(x => console.log('send: ' + x))\n             .multicast(new Rx.Subject())\n             .refCount();\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n};\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n}\nvar subscriptionA = source.subscribe(observerA);\n// 订阅数 0 => 1\nvar subscriptionB;\nsetTimeout(() => {\n    subscriptionB = source.subscribe(observerB);\n    // 订阅数 1 => 2\n}, 1000);\nsetTimeout(() => {\n    subscriptionA.unsubscribe(); // 订阅数 2 => 1\n    subscriptionB.unsubscribe(); // 订阅数 1 => 0，source 停止发送元素\n}, 5000);\n```\n\n- `publish`: 用于挂载 `Subject` 对象，并返回一个可链接 (connectable) 的 `Obs`, `publish` `multicast(new Rx.Subject())` 等价\n```js\nvar source = Rx.Observable.interval(1000)\n             .publish() \n             .refCount();        \nvar source = Rx.Observable.interval(1000)\n             .multicast(new Rx.Subject()) \n             .refCount();\n```\n- `publishReplay`\n```js\nvar source = Rx.Observable.interval(1000)\n             .publishReplay(1) \n             .refCount();          \nvar source = Rx.Observable.interval(1000)\n            .multicast(new Rx.ReplaySubject(1)) \n            .refCount();\n```\n\n- `publishBehavior`\n```js\nvar source = Rx.Observable.interval(1000)\n             .publishBehavior(0) \n             .refCount();           \nvar source = Rx.Observable.interval(1000)\n             .multicast(new Rx.BehaviorSubject(0)) \n             .refCount();\n```\n\n- `publishLast`\n```js\nvar source = Rx.Observable.interval(1000)\n             .publishLast() \n             .refCount();          \nvar source = Rx.Observable.interval(1000)\n             .multicast(new Rx.AsyncSubject(1)) \n             .refCount();\n```\n\n- `share`: `publish` + `refCount` 的简写\n```js\nvar source = Rx.Observable.interval(1000)\n             .share();          \nvar source = Rx.Observable.interval(1000)\n             .publish()\n             .refCount();\nvar source = Rx.Observable.interval(1000)\n             .multicast(new Rx.Subject()) \n             .refCount();\n```\n\n#### `Error Handling Operators`\n- `catch`: 捕获异常，同时返回一个 `Obs`，用于发出新的值\n```js\nvar source = Rx.Observable.from(['a','b','c','d',2])\n               .zip(Rx.Observable.interval(500), (x,y) => x);\nvar example = source.map(x => x.toUpperCase())\n                    .catch(error => Rx.Observable.of('h'));\n```\n```\nsource : ----a----b----c----d----2|\n        map(x => x.toUpperCase())\n         ----a----b----c----d----X|\n        catch(error => Rx.Observable.of('h'))\nexample: ----A----B----C----D----h|\n```\n- `retry`: 发生错误后，重试 `count` 次数\n```js\nvar source = Rx.Observable.from(['a','b','c','d',2])\n               .zip(Rx.Observable.interval(500), (x,y) => x);\nvar example = source.map(x => x.toUpperCase())\n                    .retry(1);\n```\n```\nsource : ----a----b----c----d----2|\n        map(x => x.toUpperCase())\n         ----a----b----c----d----X|\n                retry(1)\nexample: ----A----B----C----D--------A----B----C----D----X|\n```\n\n- `retryWhen`: 捕获异常 `Obs`, 处理后可以重新订阅源`Obs`\n```js\nvar source = Rx.Observable.from(['a','b','c','d',2])\n               .zip(Rx.Observable.interval(500), (x,y) => x);\nvar example = source.map(x => x.toUpperCase())\n                    .retryWhen(errorObs => errorObs.delay(1000));\n```\n```\nsource : ----a----b----c----d----2|\n        map(x => x.toUpperCase())\n         ----a----b----c----d----X|\n        retryWhen(errorObs => errorObs.delay(1000))\nexample: ----A----B----C----D-------------------A----B----C----D----...\n```\n\n### Subject\n - `Subject`: 继承于`Observable`的 `Observer Pattern` 的实例\n`Subject` 既是 `Observable` 又是 `Observer`\n`Subject` 会对內部的 `observers` 列表进行组播(multicast)\n\n```js\nvar subject = new Rx.Subject();\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n}\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n}\nsubject.subscribe(observerA);\nsubject.subscribe(observerB);\nsubject.next(1);\n// \"A next: 1\"\n// \"B next: 1\"\nsubject.next(2);\n// \"A next: 2\"\n// \"B next: 2\"\n```\n- `BehaviorSubject`: 会记住最新一次推送的元素，并把该元素当做当前值推送（建立时需给定状态）\n```js\nvar subject = new Rx.BehaviorSubject(0); // 0 為起始值\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n}\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n}\nsubject.subscribe(observerA);\n// \"A next: 0\"\nsubject.next(1);\n// \"A next: 1\"\nsubject.next(2);\n// \"A next: 2\"\nsubject.next(3);\n// \"A next: 3\"\nsetTimeout(() => {\n    subject.subscribe(observerB); \n    // \"B next: 3\"\n},3000)\n```\n\n- `ReplaySubject`: 在新订阅后重新发送最后几个元素\n```js\nvar subject = new Rx.ReplaySubject(2); // 重複發送最後 2 個元素\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n}\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n}\nsubject.subscribe(observerA);\nsubject.next(1);\n// \"A next: 1\"\nsubject.next(2);\n// \"A next: 2\"\nsubject.next(3);\n// \"A next: 3\"\nsetTimeout(() => {\n    subject.subscribe(observerB);\n    // \"B next: 2\"\n    // \"B next: 3\"\n},3000)\n```\n\n- `AsyncSubject`: 在`subject`结束后送出最后一个值并结束\n```js\nvar subject = new Rx.AsyncSubject();\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n}\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n}\nsubject.subscribe(observerA);\nsubject.next(1);\nsubject.next(2);\nsubject.next(3);\nsubject.complete();\n// \"A next: 3\"\n// \"A complete!\"\nsetTimeout(() => {\n    subject.subscribe(observerB);\n    // \"B next: 3\"\n    // \"B complete!\"\n},3000)\n```\n\n\n### Observer\n - `next`: 当Observable推送新值时调用\n - `complete`: 当Observable所有值调用完毕之后，调用后next将不再起作用\n - `error`: 报错时\n```js\nvar observer = {\n\tnext: function(value) {\n\t\tconsole.log(value);\n\t},\n\terror: function(error) {\n\t\tconsole.log(error)\n\t},\n\tcomplete: function() {\n\t\tconsole.log('complete')\n\t}\n}\n//  使用之前定义的观察者来订阅\nobservable.subscribe(observer)\n// Jerry\n// Anna\n// complete\n```\n\n\n### Scheduler\n- 数据结构，知道如何根据优先级或其他标准来执行并列任务\n- 执行环境，知道事件何时何处执行\n- 虚拟时钟，可以让事件在特定时间执行\n","source":"_posts/Rx入门学习.md","raw":"---\ntitle: Rx入门学习\ndate: 2017-08-12 14:08:28\ntags:\n---\n## RXjs\n\n### Functional Programming\n - Expression, no Statement\n - Pure Function\n - 利用参数保存状态\n\n\n### 建立Observable\n统一订阅\n```js\nobservable.subscribe({\n    next: function(value) {\n        console.log(value)\n    },\n    complete: function() {\n        console.log('complete!');\n    },\n    error: function(error) {\n        console.log(error)\n    }\n});\n```\n- `create`\n```js\n/**\n@param: `callback function`\n*/\nvar observable = Rx.Observable\n  .create(function(observer) {\n    observer.next('Jerry'); // RxJS 4.x 以前的版本用 onNext\n    observer.next('Anna');\n  })\n```\n\n- `of`\n多个传递值\n```js\nvar observable = Rx.Observable.of('Jerry', 'Anna');\n```\n\n- `from`\n数组，字符串，promise对象\n```js\nvar params = ['Jerry', 'Anna']  // 数组\nvar params = 'Jerry' // 字符串\nvar params = new Promise((resolve, reject) => {\n    setTimeout(() => {\n        resolve('hi')\n    }, 300)\n})                  // promise对象\nvar observable = Rx.Observable.from(params)\n```\n\n- `fromEvent`\n为DOM元素添加监听事件\nparam1: DOM对象，param2: 监听事件\n```js\nvar observable = Rx.Observable.fromEvent($DOM, $event);\n```\n\n- `fromEventPattern`\n同时具有注册移除监听的类事件使用\n```js\nclass Producer {\n\tconstructor() {\n\t\tthis.listeners = [];\n\t}\n\taddListener(listener) {\n\t\tif(typeof listener === 'function') {\n\t\t\tthis.listeners.push(listener)\n\t\t} else {\n\t\t\tthrow new Error('listener 必須是 function')\n\t\t}\n\t}\n\tremoveListener(listener) {\n\t\tthis.listeners.splice(this.listeners.indexOf(listener), 1)\n\t}\n\tnotify(message) {\n\t\tthis.listeners.forEach(listener => {\n\t\t\tlistener(message);\n\t\t})\n\t}\n}\nvar egghead = new Producer(); \nvar source = Rx.Observable\n    .fromEventPattern(\n        (handler) => egghead.addListener(handler), \n        (handler) => egghead.removeListener(handler)\n    ); \nsource.subscribe({\n    next: function(value) {\n        console.log(value)\n    },\n    complete: function() {\n        console.log('complete!');\n    },\n    error: function(error) {\n        console.log(error)\n    }\n})\negghead.notify('Hello! Can you hear me?');\n// Hello! Can you hear me?\n```\n\n\n- `empty`\n给出一个空的Observable，如果订阅这个Observable则会立即push出complete\n```js\nvar source = Rx.Observable.empty()\n```\n\n- `never`\n给出一个无穷的Observable，订阅后将什么都不发生，但存在\n```js\nvar source = Rx.Observable.never()\n```\n\n- `throw`\n给出一个错误的Observable，订阅后将直接抛出错误\n```js\nvar source = Rx.Observable.throw()\n```\n\n- `interval`\n每隔一段时间推送出一个从零开始递增的整数\n```js\nvar source = Rx.Observable.interval(666)\n```\n\n- `timer`\n`param_one`: 发出第一个值的等待时间(number)/等待到的日期(Date)\n`param_two`: 第一个值发出之后发送每个值的间隔时间\n如果只有一个参数，发出第一个值之后触发complete\n```js\nvar source = Rx.Observable.timer(5000, 1000)\n```\n\n\n### Subscription\n订阅Observable后会回传一个subscription对象，这个对象含有释放资源的`unsubscribe`方法，可以停止订阅\n```js\nvar source = Rx.Observable.timer(1000, 1000);\n// 取得 subscription\nvar subscription = source.subscribe({\n\tnext: function(value) {\n\t\tconsole.log(value)\n\t},\n\tcomplete: function() {\n\t\tconsole.log('complete!');\n\t},\n\terror: function(error) {\n    console.log('Throw Error: ' + error)\n\t}\n});\nsetTimeout(() => {\n    subscription.unsubscribe()\n}, 5000)\n// 输出: 0,1,2,3,4\n```\n\n### Operator\n`Operators`是一个个被附加到`Observable`上的方法，经过这些方法传递出一个新的`observable`\n\n#### Transformation Operators\n- `map`: 对 `Observable` 对象发出的每个值，使用指定的 `project` 函数，进行映射处理\n```js\nvar source = Rx.Observable.interval(1000);\nvar newest = source.map(x => x + 2); \nnewest.subscribe(console.log);\n```\n```\nsource: -----0-----1-----2-----3--...\n            map(x => x + 2)\nnewest: -----2-----3-----4-----5--...\n```\n- `mapTo`: 对 `Observable` 对象发出的每个值，映射成固定的值\n```js\nvar source = Rx.Observable.interval(1000);\nvar newest = source.mapTo(2); \nnewest.subscribe(console.log);\n```\n```\nsource: -----0-----1-----2-----3--...\n                mapTo(2)\nnewest: -----2-----2-----2-----2--...\n```\n- `scan`: 对 `Observable` 发出值，执行 `accumulator` 指定的运算，类似于 `reduce` \n```js\nvar source = Rx.Observable.interval(1000)\nvar newest = source.scan( count => count + 5, '2')\nnewest.subscribe(console.log);\n```\n```\nsource: -----0------1------2------3--...\n        scan( x => x + 5, 0)\nnewest: -----5-----10-----15-----20--...\n```\n\n- `buffer`: 缓冲源 `Observable` 对象已发出的值，直到 `closingNotifier` 触发后，统一输出缓存的元素\n```js\nvar source = Rx.Observable.interval(300);\nvar source2 = Rx.Observable.interval(1000);\nvar example = source.buffer(source2);\nexample.subscribe(...);\n```\n```\nsource : --0--1--2--3--4--5--6--7..\nsource2: ---------0---------1--------...\n            buffer(source2)\nexample: ---------([0,1,2])---------([3,4,5]) \n```\n\n- `bufferTime`: 设定源 `Observable` 对象已发出的值的缓冲时间\n```js\nvar source = Rx.Observable.interval(300);\nvar example = source.bufferTime(1000);\nexample.subscribe(...);\n```\n```\nsource : --0--1--2--3--4--5--6--7..\n            bufferTime(1000)\nexample: ---------([0,1,2])---------([3,4,5]) \n```\n\n- `bufferCount`: 缓冲源 `Observable` 对象已发出的值，直到大小达到给定的最大 `bufferSize` \n```js\nvar source = Rx.Observable.interval(300);\nvar example = source.bufferCount(3);\nexample.subscribe(...);\n```\n```\nsource : --0--1--2--3--4--5--6--7..\n            bufferCount(3)\nexample: ---------([0,1,2])---------([3,4,5]) \n```\n\n- `concatMap`: 对每个 `Observable` 对象发出的值，进行映射处理，并进行合并。该操作符也会依序所有`Observable` 对象\n```js\nvar source = Rx.Observable.fromEvent(document.body, 'click');\nvar example = source.concatMap(e => Rx.Observable.interval(100).take(3));\nexample.subscribe(...);\n```\n```\nsource : -----------c--c------------------...\n        concatMap(c => Rx.Observable.interval(100).take(3))\nexample: -------------0-1-2-0-1-2---------...\n```\n\n- `switchMap`: 对源 `Observable` 对象发出的值，做映射处理。若有新的 `Observable` 对象出现，会在新的 `Observable` 对象发出新值后，退订前一个未处理完的 `Observable` 对象\n```js\nvar source = Rx.Observable.fromEvent(document.body, 'click');\nvar example = source.switchMap(e => Rx.Observable.interval(100).take(3));\nexample.subscribe(...);\n```\n```\nsource : -----------c--c-----------------...\n        concatMap(c => Rx.Observable.interval(100).take(3))\nexample: -------------0--0-1-2-----------...\n```\n\n#### Filtering Operators\n- `filter`: 过滤值\n```js\nvar source = Rx.Observable.interval(1000);\nvar newest = source.filter(x => x % 2 === 0); \n```\n```\nsource: -----0-----1-----2-----3-----4-...\n            filter(x => x % 2 === 0)\nnewest: -----0-----------2-----------4-...\n```\n\n- `take`: 获取 `Observable` 对象发出的前n项值，取完结束。\n```js\nvar source = Rx.Observable.interval(1000);\nvar example = source.take(3);\n```\n```\nsource : -----0-----1-----2-----3--..\n                take(3)\nexample: -----0-----1-----2|\n```\n\n- `first`: 获取 `Observable` 对象发出的第一个元素，取完结束。\n```js\nvar source = Rx.Observable.interval(1000);\nvar example = source.first();\n```\n```\nsource : -----0-----1-----2-----3--..\n                first()\nexample: -----0|\n```\n\n- `takeUntil`: 当 `takeUntil` 传入的 `notifier` 发出值时，源 `Observable` 对象就会直接进入完成状态\n```js\nvar source = Rx.Observable.interval(1000);\nvar click = Rx.Observable.fromEvent(document.body, 'click');\nvar example = source.takeUntil(click);\n```\n```\nsource : -----0-----1-----2------3--\nclick  : ----------------------c----\n                takeUntil(click)\nexample: -----0-----1-----2----|\n```\n\n- `skip`: 跳过 源`Observable`的前n项，并返回新的`Observable`对象\n```js\nvar source = Rx.Observable.interval(1000);\nvar example = source.skip(3);\n```\n```\nsource : ----0----1----2----3----4----5--....\n                    skip(3)\nexample: -------------------3----4----5--...\n```\n\n- `takeLast`: 获取 源`Observable`发出的后n项\n```js\nvar source = Rx.Observable.interval(1000).take(6);\nvar example = source.takeLast(2);\n```\n```\nsource : ----0----1----2----3----4----5|\n                takeLast(2)\nexample: ------------------------------(45)|\n```\n\n- `last`: 获取 源`Observable`发出的最后一项\n```js\nvar source = Rx.Observable.interval(1000).take(6);\nvar example = source.last();\n```\n```\nsource : ----0----1----2----3----4----5|\n                    last()\nexample: ------------------------------(5)|\n```\n\n- `debounceTime`: 在设定的时间跨度内，若源 `Observable` 对象没有再发出新值，则返回最近一次发出的值\n```js\nvar source = Rx.Observable.interval(300).take(5);\nvar example = source.debounceTime(1000);\n```\n```\nsource : --0--1--2--3--4|\n        debounceTime(1000)\nexample: --------------4| \n```\n\n- `throttleTime`: 节流，从 源`Observable`对象发出的第一个值开始，忽略等待时间内发出的值\n```js\nvar source = Rx.Observable.interval(300).take(5);\nvar example = source.throttleTime(1000);\n```\n```\nsource : --0--1--2--3--4|\n        throttleTime(1000)\nexample: --0------------4|  \n```\n\n- `distinct`: 去重\n```js\nvar source = Rx.Observable.from(['a', 'b', 'c', 'a', 'b'])\nvar example = source.distinct()\n```\n```\nsource : --a--b--c--a--b|\n            distinct()\nexample: --a--b--c------|\n```\n\n- `distinctUntilChanged`: 过滤 `Observable`发出的值，若当前值与上一次值不一致，则发出该值。\n```js\nvar source = Rx.Observable.from(['a', 'b', 'c', 'c', 'b'])\nvar example = source.distinctUntilChanged()\n```\n```\nsource : --a--b--c--c--b|\n            distinctUntilChanged()\nexample: --a--b--c-----b|\n```\n#### `Combination Operators`\n\n- `concat`: 合并多个`Observable`对象，并依次执行\n```js\nvar source = Rx.Observable.interval(1000).take(3);\nvar source2 = Rx.Observable.of(3)\nvar source3 = Rx.Observable.of(4,5,6)\nvar example = source.concat(source2, source3);\n```\n```\nsource : ----0----1----2|\nsource2: (3)|\nsource3: (456)|\n            concat()\nexample: ----0----1----2(3456)|\n```\n\n- `concatAll`: 合并多个`Observable`对象，并在上一个`Obs`完成订阅后订阅下一个`Obs`\n```js\nvar obs1 = Rx.Observable.interval(1000).take(5);\nvar obs2 = Rx.Observable.interval(500).take(2);\nvar obs3 = Rx.Observable.interval(2000).take(1);\nvar source = Rx.Observable.of(obs1, obs2, obs3);\nvar example = source.concatAll();\n```\n```\nsource : (o1                 o2      o3)|\n           \\                  \\       \\\n            --0--1--2--3--4|   -0-1|   ----0|               \n                concatAll()        \nexample: --0--1--2--3--4-0-1----0|\n```\n\n- `startWith`: 在开始发出`Obs`对象的数据之前发出已经设置的参数\n```js\nvar source = Rx.Observable.interval(1000);\nvar example = source.startWith(222);\n```\n```\nsource : ----0----1----2----3--...\n                startWith(222)\nexample: (222)----0----1----2----3--...\n```\n\n- `merage`: 合并 `Obs`对象，并按给定的时序发出对应值\n```js\nvar source = Rx.Observable.interval(500).take(3);\nvar source2 = Rx.Observable.interval(300).take(6);\nvar example = source.merge(source2);\n```\n```\nsource : ----0----1----2|\nsource2: --0--1--2--3--4--5|\n            merge()\nexample: --0-01--21-3--(24)--5|\n```\n\n- `merageAll`: 将高阶`Obs`转换为一阶`Obs`，并同时处理所有`Obs`\n```js\nvar click = Rx.Observable.fromEvent(document.body, 'click');\nvar source = click.map(e => Rx.Observable.interval(1000));\nvar example = source.mergeAll();\n```\n```\nclick  : ---------c-c------------------c--.. \n        map(e => Rx.Observable.interval(1000))\nsource : ---------o-o------------------o--..\n                   \\ \\                  \\----0----1--...\n                    \\ ----0----1----2----3----4--...\n                     ----0----1----2----3----4--...\n                     mergeAll()\nexample: ----------------00---11---22---33---(04)4--...\n```\n\n- `combineLatest`: 合并输入的`Obs`对象，当源`Obs`和其他`Obs`都发出值后，才会调用`project`函数\n```js\nvar source = Rx.Observable.interval(500).take(3);\nvar newest = Rx.Observable.interval(300).take(6);\nvar example = source.combineLatest(newest, (x, y) => x + y);\n```\n```\nsource : ----0----1----2|\nnewest : --0--1--2--3--4--5|\n    combineLatest(newest, (x, y) => x + y);\nexample: ----01--23-4--(56)--7|\n```\n\n- `zip`: 根据所有的`Obs`对象的输入顺序，产生一个新`Obs`\n```js\nvar source = Rx.Observable.interval(500).take(3);\nvar newest = Rx.Observable.interval(300).take(6);\nvar example = source.zip(newest, (x, y) => x + y);\n```\n```\nsource : ----0----1----2|\nnewest : --0--1--2--3--4--5|\n    zip(newest, (x, y) => x + y)\nexample: ----0----2----4|\n```\n\n- `withLatestFrom`: 当源`Obs`发出新值时，根据`project`函数，合并其他`Obs`之前发出的最新值\n```js\nvar main = Rx.Observable.from('hello').zip(Rx.Observable.interval(500), \n    (x, y) => x);\nvar some = Rx.Observable.from([0,1,0,0,0,1]).zip(Rx.Observable.interval(300), \n    (x, y) => x);\nvar example = main.withLatestFrom(some, (x, y) => {\n    return y === 1 ? x.toUpperCase() : x;\n});\n```\n```\nmain   : ----h----e----l----l----o|\nsome   : --0--1--0--0--0--1|\nwithLatestFrom(some, (x, y) =>  y === 1 ? x.toUpperCase() : x);\nexample: ----h----e----l----L----O|\n```\n\n- `switch`: 切换为最新的`Obs`数据源，并退订之前的`Obs`\n```js\nvar click = Rx.Observable.fromEvent(document.body, 'click');\nvar source = click.map(e => Rx.Observable.interval(1000));\nvar example = source.switch();\n```\n```\nclick  : ---------c-c------------------c--.. \n        map(e => Rx.Observable.interval(1000))\nsource : ---------o-o------------------o--..\n                   \\ \\                  \\----0----1--...\n                    \\ ----0----1----2----3----4--...\n                     ----0----1----2----3----4--...\n                     switch()\nexample: -----------------0----1----2--------0----1--...\n```\n\n#### `Utility Operators`\n- `delay`: 延迟源`Obs`发出的第一个元素的时间点\n```js\nvar source = Rx.Observable.interval(300).take(5);\nvar example = source.delay(500);\n```\n```\nsource : --0--1--2--3--4|\n        delay(500)\nexample: -------0--1--2--3--4|\n```\n\n- `delayWhen`: `delayWhen` 会响每个元素，调用的时候需要设置 `delayDurationSelector` 函数，该函数的返回值是 `Observable` 对象\n```js\nvar source = Rx.Observable.interval(300).take(5);\nvar example = source.delayWhen( x => Rx.Observable.interval(100 * x).take(1));\n```\n```\nsource : --0--1--2--3--4|\n    .delayWhen(x => Rx.Observable.interval(100 * x).take(1));\nexample: --0---1----2-----3------4|\n```\n\n#### `Multicasting Operators`\n- `multicast`: 用于挂载`Subject`，并返回一个可链接的`Obs`对象\n```js\nvar source = Rx.Observable.interval(1000)\n             .take(3)\n             .multicast(new Rx.Subject());\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n};\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n};\nsource.subscribe(observerA); // subject.subscribe(observerA)\nsource.connect(); // source.subscribe(subject)\nsetTimeout(() => {\n    source.subscribe(observerB); // subject.subscribe(observerA)\n}, 1000);\n```\n- `refCount`: 使 `multicast Observalbe`可以在第一个`subscriber`到达时自动执行，并在最后一个`subscriber`离开时结束。\n`refCount()`存在于`ConnectableObservable`上，并返回一个新的`Observalbe`\n```js\nvar source = Rx.Observable.interval(1000)\n             .do(x => console.log('send: ' + x))\n             .multicast(new Rx.Subject())\n             .refCount();\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n};\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n}\nvar subscriptionA = source.subscribe(observerA);\n// 订阅数 0 => 1\nvar subscriptionB;\nsetTimeout(() => {\n    subscriptionB = source.subscribe(observerB);\n    // 订阅数 1 => 2\n}, 1000);\nsetTimeout(() => {\n    subscriptionA.unsubscribe(); // 订阅数 2 => 1\n    subscriptionB.unsubscribe(); // 订阅数 1 => 0，source 停止发送元素\n}, 5000);\n```\n\n- `publish`: 用于挂载 `Subject` 对象，并返回一个可链接 (connectable) 的 `Obs`, `publish` `multicast(new Rx.Subject())` 等价\n```js\nvar source = Rx.Observable.interval(1000)\n             .publish() \n             .refCount();        \nvar source = Rx.Observable.interval(1000)\n             .multicast(new Rx.Subject()) \n             .refCount();\n```\n- `publishReplay`\n```js\nvar source = Rx.Observable.interval(1000)\n             .publishReplay(1) \n             .refCount();          \nvar source = Rx.Observable.interval(1000)\n            .multicast(new Rx.ReplaySubject(1)) \n            .refCount();\n```\n\n- `publishBehavior`\n```js\nvar source = Rx.Observable.interval(1000)\n             .publishBehavior(0) \n             .refCount();           \nvar source = Rx.Observable.interval(1000)\n             .multicast(new Rx.BehaviorSubject(0)) \n             .refCount();\n```\n\n- `publishLast`\n```js\nvar source = Rx.Observable.interval(1000)\n             .publishLast() \n             .refCount();          \nvar source = Rx.Observable.interval(1000)\n             .multicast(new Rx.AsyncSubject(1)) \n             .refCount();\n```\n\n- `share`: `publish` + `refCount` 的简写\n```js\nvar source = Rx.Observable.interval(1000)\n             .share();          \nvar source = Rx.Observable.interval(1000)\n             .publish()\n             .refCount();\nvar source = Rx.Observable.interval(1000)\n             .multicast(new Rx.Subject()) \n             .refCount();\n```\n\n#### `Error Handling Operators`\n- `catch`: 捕获异常，同时返回一个 `Obs`，用于发出新的值\n```js\nvar source = Rx.Observable.from(['a','b','c','d',2])\n               .zip(Rx.Observable.interval(500), (x,y) => x);\nvar example = source.map(x => x.toUpperCase())\n                    .catch(error => Rx.Observable.of('h'));\n```\n```\nsource : ----a----b----c----d----2|\n        map(x => x.toUpperCase())\n         ----a----b----c----d----X|\n        catch(error => Rx.Observable.of('h'))\nexample: ----A----B----C----D----h|\n```\n- `retry`: 发生错误后，重试 `count` 次数\n```js\nvar source = Rx.Observable.from(['a','b','c','d',2])\n               .zip(Rx.Observable.interval(500), (x,y) => x);\nvar example = source.map(x => x.toUpperCase())\n                    .retry(1);\n```\n```\nsource : ----a----b----c----d----2|\n        map(x => x.toUpperCase())\n         ----a----b----c----d----X|\n                retry(1)\nexample: ----A----B----C----D--------A----B----C----D----X|\n```\n\n- `retryWhen`: 捕获异常 `Obs`, 处理后可以重新订阅源`Obs`\n```js\nvar source = Rx.Observable.from(['a','b','c','d',2])\n               .zip(Rx.Observable.interval(500), (x,y) => x);\nvar example = source.map(x => x.toUpperCase())\n                    .retryWhen(errorObs => errorObs.delay(1000));\n```\n```\nsource : ----a----b----c----d----2|\n        map(x => x.toUpperCase())\n         ----a----b----c----d----X|\n        retryWhen(errorObs => errorObs.delay(1000))\nexample: ----A----B----C----D-------------------A----B----C----D----...\n```\n\n### Subject\n - `Subject`: 继承于`Observable`的 `Observer Pattern` 的实例\n`Subject` 既是 `Observable` 又是 `Observer`\n`Subject` 会对內部的 `observers` 列表进行组播(multicast)\n\n```js\nvar subject = new Rx.Subject();\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n}\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n}\nsubject.subscribe(observerA);\nsubject.subscribe(observerB);\nsubject.next(1);\n// \"A next: 1\"\n// \"B next: 1\"\nsubject.next(2);\n// \"A next: 2\"\n// \"B next: 2\"\n```\n- `BehaviorSubject`: 会记住最新一次推送的元素，并把该元素当做当前值推送（建立时需给定状态）\n```js\nvar subject = new Rx.BehaviorSubject(0); // 0 為起始值\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n}\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n}\nsubject.subscribe(observerA);\n// \"A next: 0\"\nsubject.next(1);\n// \"A next: 1\"\nsubject.next(2);\n// \"A next: 2\"\nsubject.next(3);\n// \"A next: 3\"\nsetTimeout(() => {\n    subject.subscribe(observerB); \n    // \"B next: 3\"\n},3000)\n```\n\n- `ReplaySubject`: 在新订阅后重新发送最后几个元素\n```js\nvar subject = new Rx.ReplaySubject(2); // 重複發送最後 2 個元素\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n}\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n}\nsubject.subscribe(observerA);\nsubject.next(1);\n// \"A next: 1\"\nsubject.next(2);\n// \"A next: 2\"\nsubject.next(3);\n// \"A next: 3\"\nsetTimeout(() => {\n    subject.subscribe(observerB);\n    // \"B next: 2\"\n    // \"B next: 3\"\n},3000)\n```\n\n- `AsyncSubject`: 在`subject`结束后送出最后一个值并结束\n```js\nvar subject = new Rx.AsyncSubject();\nvar observerA = {\n    next: value => console.log('A next: ' + value),\n    error: error => console.log('A error: ' + error),\n    complete: () => console.log('A complete!')\n}\nvar observerB = {\n    next: value => console.log('B next: ' + value),\n    error: error => console.log('B error: ' + error),\n    complete: () => console.log('B complete!')\n}\nsubject.subscribe(observerA);\nsubject.next(1);\nsubject.next(2);\nsubject.next(3);\nsubject.complete();\n// \"A next: 3\"\n// \"A complete!\"\nsetTimeout(() => {\n    subject.subscribe(observerB);\n    // \"B next: 3\"\n    // \"B complete!\"\n},3000)\n```\n\n\n### Observer\n - `next`: 当Observable推送新值时调用\n - `complete`: 当Observable所有值调用完毕之后，调用后next将不再起作用\n - `error`: 报错时\n```js\nvar observer = {\n\tnext: function(value) {\n\t\tconsole.log(value);\n\t},\n\terror: function(error) {\n\t\tconsole.log(error)\n\t},\n\tcomplete: function() {\n\t\tconsole.log('complete')\n\t}\n}\n//  使用之前定义的观察者来订阅\nobservable.subscribe(observer)\n// Jerry\n// Anna\n// complete\n```\n\n\n### Scheduler\n- 数据结构，知道如何根据优先级或其他标准来执行并列任务\n- 执行环境，知道事件何时何处执行\n- 虚拟时钟，可以让事件在特定时间执行\n","slug":"Rx入门学习","published":1,"updated":"2017-08-13T15:12:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ukv000ajbzejud6qrt8","content":"<h2 id=\"RXjs\"><a href=\"#RXjs\" class=\"headerlink\" title=\"RXjs\"></a>RXjs</h2><h3 id=\"Functional-Programming\"><a href=\"#Functional-Programming\" class=\"headerlink\" title=\"Functional Programming\"></a>Functional Programming</h3><ul>\n<li>Expression, no Statement</li>\n<li>Pure Function</li>\n<li>利用参数保存状态</li>\n</ul>\n<h3 id=\"建立Observable\"><a href=\"#建立Observable\" class=\"headerlink\" title=\"建立Observable\"></a>建立Observable</h3><p>统一订阅<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">observable.subscribe(&#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'complete!'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(error)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p><code>create</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">@param: `callback function`</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> observable = Rx.Observable</div><div class=\"line\">  .create(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">observer</span>) </span>&#123;</div><div class=\"line\">    observer.next(<span class=\"string\">'Jerry'</span>); <span class=\"comment\">// RxJS 4.x 以前的版本用 onNext</span></div><div class=\"line\">    observer.next(<span class=\"string\">'Anna'</span>);</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>of</code><br>多个传递值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observable = Rx.Observable.of(<span class=\"string\">'Jerry'</span>, <span class=\"string\">'Anna'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>from</code><br>数组，字符串，promise对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> params = [<span class=\"string\">'Jerry'</span>, <span class=\"string\">'Anna'</span>]  <span class=\"comment\">// 数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> params = <span class=\"string\">'Jerry'</span> <span class=\"comment\">// 字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> params = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        resolve(<span class=\"string\">'hi'</span>)</div><div class=\"line\">    &#125;, <span class=\"number\">300</span>)</div><div class=\"line\">&#125;)                  <span class=\"comment\">// promise对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> observable = Rx.Observable.from(params)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>fromEvent</code><br>为DOM元素添加监听事件<br>param1: DOM对象，param2: 监听事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observable = Rx.Observable.fromEvent($DOM, $event);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>fromEventPattern</code><br>同时具有注册移除监听的类事件使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners = [];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\taddListener(listener) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> listener === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.listeners.push(listener)</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'listener 必須是 function'</span>)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tremoveListener(listener) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners.splice(<span class=\"keyword\">this</span>.listeners.indexOf(listener), <span class=\"number\">1</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tnotify(message) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners.forEach(<span class=\"function\"><span class=\"params\">listener</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\tlistener(message);</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> egghead = <span class=\"keyword\">new</span> Producer(); </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable</div><div class=\"line\">    .fromEventPattern(</div><div class=\"line\">        (handler) =&gt; egghead.addListener(handler), </div><div class=\"line\">        (handler) =&gt; egghead.removeListener(handler)</div><div class=\"line\">    ); </div><div class=\"line\">source.subscribe(&#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'complete!'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(error)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">egghead.notify(<span class=\"string\">'Hello! Can you hear me?'</span>);</div><div class=\"line\"><span class=\"comment\">// Hello! Can you hear me?</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>empty</code><br>给出一个空的Observable，如果订阅这个Observable则会立即push出complete</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.empty()</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>never</code><br>给出一个无穷的Observable，订阅后将什么都不发生，但存在</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.never()</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>throw</code><br>给出一个错误的Observable，订阅后将直接抛出错误</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.throw()</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>interval</code><br>每隔一段时间推送出一个从零开始递增的整数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">666</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>timer</code><br><code>param_one</code>: 发出第一个值的等待时间(number)/等待到的日期(Date)<br><code>param_two</code>: 第一个值发出之后发送每个值的间隔时间<br>如果只有一个参数，发出第一个值之后触发complete</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.timer(<span class=\"number\">5000</span>, <span class=\"number\">1000</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Subscription\"><a href=\"#Subscription\" class=\"headerlink\" title=\"Subscription\"></a>Subscription</h3><p>订阅Observable后会回传一个subscription对象，这个对象含有释放资源的<code>unsubscribe</code>方法，可以停止订阅<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.timer(<span class=\"number\">1000</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"comment\">// 取得 subscription</span></div><div class=\"line\"><span class=\"keyword\">var</span> subscription = source.subscribe(&#123;</div><div class=\"line\">\tnext: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(value)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tcomplete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'complete!'</span>);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Throw Error: '</span> + error)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subscription.unsubscribe()</div><div class=\"line\">&#125;, <span class=\"number\">5000</span>)</div><div class=\"line\"><span class=\"comment\">// 输出: 0,1,2,3,4</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Operator\"><a href=\"#Operator\" class=\"headerlink\" title=\"Operator\"></a>Operator</h3><p><code>Operators</code>是一个个被附加到<code>Observable</code>上的方法，经过这些方法传递出一个新的<code>observable</code></p>\n<h4 id=\"Transformation-Operators\"><a href=\"#Transformation-Operators\" class=\"headerlink\" title=\"Transformation Operators\"></a>Transformation Operators</h4><ul>\n<li><code>map</code>: 对 <code>Observable</code> 对象发出的每个值，使用指定的 <code>project</code> 函数，进行映射处理<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> newest = source.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">2</span>); </div><div class=\"line\">newest.subscribe(<span class=\"built_in\">console</span>.log);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">            <span class=\"comment\">map(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span> <span class=\"literal\">+</span> <span class=\"comment\">2)</span></div><div class=\"line\"><span class=\"comment\">newest:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>mapTo</code>: 对 <code>Observable</code> 对象发出的每个值，映射成固定的值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> newest = source.mapTo(<span class=\"number\">2</span>); </div><div class=\"line\">newest.subscribe(<span class=\"built_in\">console</span>.log);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                <span class=\"comment\">mapTo(2)</span></div><div class=\"line\"><span class=\"comment\">newest:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>scan</code>: 对 <code>Observable</code> 发出值，执行 <code>accumulator</code> 指定的运算，类似于 <code>reduce</code> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> newest = source.scan( <span class=\"function\"><span class=\"params\">count</span> =&gt;</span> count + <span class=\"number\">5</span>, <span class=\"string\">'2'</span>)</div><div class=\"line\">newest.subscribe(<span class=\"built_in\">console</span>.log);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">        <span class=\"comment\">scan(</span> <span class=\"comment\">x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span> <span class=\"literal\">+</span> <span class=\"comment\">5</span><span class=\"string\">,</span> <span class=\"comment\">0)</span></div><div class=\"line\"><span class=\"comment\">newest:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">10</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">15</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">20</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>buffer</code>: 缓冲源 <code>Observable</code> 对象已发出的值，直到 <code>closingNotifier</code> 触发后，统一输出缓存的元素<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.buffer(source2);</div><div class=\"line\">example.subscribe(...);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">6</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">7</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\"><span class=\"comment\">source2:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">            <span class=\"comment\">buffer(source2)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">0</span><span class=\"string\">,</span><span class=\"comment\">1</span><span class=\"string\">,</span><span class=\"comment\">2</span><span class=\"title\">]</span><span class=\"comment\">)</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">3</span><span class=\"string\">,</span><span class=\"comment\">4</span><span class=\"string\">,</span><span class=\"comment\">5</span><span class=\"title\">]</span><span class=\"comment\">)</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>bufferTime</code>: 设定源 <code>Observable</code> 对象已发出的值的缓冲时间<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.bufferTime(<span class=\"number\">1000</span>);</div><div class=\"line\">example.subscribe(...);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">6</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">7</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">            <span class=\"comment\">bufferTime(1000)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">0</span><span class=\"string\">,</span><span class=\"comment\">1</span><span class=\"string\">,</span><span class=\"comment\">2</span><span class=\"title\">]</span><span class=\"comment\">)</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">3</span><span class=\"string\">,</span><span class=\"comment\">4</span><span class=\"string\">,</span><span class=\"comment\">5</span><span class=\"title\">]</span><span class=\"comment\">)</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>bufferCount</code>: 缓冲源 <code>Observable</code> 对象已发出的值，直到大小达到给定的最大 <code>bufferSize</code> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.bufferCount(<span class=\"number\">3</span>);</div><div class=\"line\">example.subscribe(...);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">6</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">7</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">            <span class=\"comment\">bufferCount(3)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">0</span><span class=\"string\">,</span><span class=\"comment\">1</span><span class=\"string\">,</span><span class=\"comment\">2</span><span class=\"title\">]</span><span class=\"comment\">)</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">3</span><span class=\"string\">,</span><span class=\"comment\">4</span><span class=\"string\">,</span><span class=\"comment\">5</span><span class=\"title\">]</span><span class=\"comment\">)</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>concatMap</code>: 对每个 <code>Observable</code> 对象发出的值，进行映射处理，并进行合并。该操作符也会依序所有<code>Observable</code> 对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.fromEvent(<span class=\"built_in\">document</span>.body, <span class=\"string\">'click'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.concatMap(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> Rx.Observable.interval(<span class=\"number\">100</span>).take(<span class=\"number\">3</span>));</div><div class=\"line\">example.subscribe(...);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">source : <span class=\"params\">-----------c--c------------------</span><span class=\"string\">...</span></div><div class=\"line\">        concatMap<span class=\"params\">(<span class=\"attr\">c</span> =&gt; Rx.Observable.interval(100)</span><span class=\"string\">.take</span><span class=\"params\">(3)</span>)</div><div class=\"line\">example: <span class=\"params\">-------------0-1-2-0-1-2---------</span><span class=\"string\">...</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>switchMap</code>: 对源 <code>Observable</code> 对象发出的值，做映射处理。若有新的 <code>Observable</code> 对象出现，会在新的 <code>Observable</code> 对象发出新值后，退订前一个未处理完的 <code>Observable</code> 对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.fromEvent(<span class=\"built_in\">document</span>.body, <span class=\"string\">'click'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.switchMap(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> Rx.Observable.interval(<span class=\"number\">100</span>).take(<span class=\"number\">3</span>));</div><div class=\"line\">example.subscribe(...);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">        <span class=\"comment\">concatMap(c</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">Rx</span><span class=\"string\">.</span><span class=\"comment\">Observable</span><span class=\"string\">.</span><span class=\"comment\">interval(100)</span><span class=\"string\">.</span><span class=\"comment\">take(3))</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<h4 id=\"Filtering-Operators\"><a href=\"#Filtering-Operators\" class=\"headerlink\" title=\"Filtering Operators\"></a>Filtering Operators</h4><ul>\n<li><code>filter</code>: 过滤值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> newest = source.filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">            <span class=\"comment\">filter(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span> <span class=\"comment\">%</span> <span class=\"comment\">2</span> <span class=\"comment\">===</span> <span class=\"comment\">0)</span></div><div class=\"line\"><span class=\"comment\">newest:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>take</code>: 获取 <code>Observable</code> 对象发出的前n项值，取完结束。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.take(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                <span class=\"comment\">take(3)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>first</code>: 获取 <code>Observable</code> 对象发出的第一个元素，取完结束。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.first();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                <span class=\"comment\">first()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>takeUntil</code>: 当 <code>takeUntil</code> 传入的 <code>notifier</code> 发出值时，源 <code>Observable</code> 对象就会直接进入完成状态<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> click = Rx.Observable.fromEvent(<span class=\"built_in\">document</span>.body, <span class=\"string\">'click'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.takeUntil(click);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span></div><div class=\"line\"><span class=\"comment\">click</span>  <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span></div><div class=\"line\">                <span class=\"comment\">takeUntil(click)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>skip</code>: 跳过 源<code>Observable</code>的前n项，并返回新的<code>Observable</code>对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.skip(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                    <span class=\"comment\">skip(3)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>takeLast</code>: 获取 源<code>Observable</code>发出的后n项<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>).take(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.takeLast(<span class=\"number\">2</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5|</span></div><div class=\"line\"><span class=\"comment\"></span>                <span class=\"comment\">takeLast(2)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(45)|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>last</code>: 获取 源<code>Observable</code>发出的最后一项<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>).take(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.last();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5|</span></div><div class=\"line\"><span class=\"comment\"></span>                    <span class=\"comment\">last()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(5)|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>debounceTime</code>: 在设定的时间跨度内，若源 <code>Observable</code> 对象没有再发出新值，则返回最近一次发出的值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.debounceTime(<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">debounceTime(1000)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>throttleTime</code>: 节流，从 源<code>Observable</code>对象发出的第一个值开始，忽略等待时间内发出的值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.throttleTime(<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">throttleTime(1000)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>distinct</code>: 去重<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.from([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>])</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.distinct()</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b|</span></div><div class=\"line\"><span class=\"comment\"></span>            <span class=\"comment\">distinct()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>distinctUntilChanged</code>: 过滤 <code>Observable</code>发出的值，若当前值与上一次值不一致，则发出该值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.from([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>])</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.distinctUntilChanged()</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b|</span></div><div class=\"line\"><span class=\"comment\"></span>            <span class=\"comment\">distinctUntilChanged()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b|</span></div></pre></td></tr></table></figure>\n<h4 id=\"Combination-Operators\"><a href=\"#Combination-Operators\" class=\"headerlink\" title=\"Combination Operators\"></a><code>Combination Operators</code></h4><ul>\n<li><code>concat</code>: 合并多个<code>Observable</code>对象，并依次执行<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>).take(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = Rx.Observable.of(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> source3 = Rx.Observable.of(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.concat(source2, source3);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\">source2:</span> <span class=\"comment\">(3)|</span></div><div class=\"line\"><span class=\"comment\">source3:</span> <span class=\"comment\">(456)|</span></div><div class=\"line\"><span class=\"comment\"></span>            <span class=\"comment\">concat()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2(3456)|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>concatAll</code>: 合并多个<code>Observable</code>对象，并在上一个<code>Obs</code>完成订阅后订阅下一个<code>Obs</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obs1 = Rx.Observable.interval(<span class=\"number\">1000</span>).take(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> obs2 = Rx.Observable.interval(<span class=\"number\">500</span>).take(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> obs3 = Rx.Observable.interval(<span class=\"number\">2000</span>).take(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.of(obs1, obs2, obs3);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.concatAll();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">source : (o1                 o2      o3)|</div><div class=\"line\">           \\                  \\       \\</div><div class=\"line\">            -<span class=\"string\">-0</span>-<span class=\"string\">-1</span>-<span class=\"string\">-2</span>-<span class=\"string\">-3</span>-<span class=\"string\">-4</span>|   <span class=\"string\">-0</span><span class=\"string\">-1</span>|   ---<span class=\"string\">-0</span>|               </div><div class=\"line\">                concatAll()        </div><div class=\"line\">example: -<span class=\"string\">-0</span>-<span class=\"string\">-1</span>-<span class=\"string\">-2</span>-<span class=\"string\">-3</span>-<span class=\"string\">-4</span><span class=\"string\">-0</span><span class=\"string\">-1</span>---<span class=\"string\">-0</span>|</div></pre></td></tr></table></figure>\n<ul>\n<li><code>startWith</code>: 在开始发出<code>Obs</code>对象的数据之前发出已经设置的参数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.startWith(<span class=\"number\">222</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                <span class=\"comment\">startWith(222)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"comment\">(222)</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>merage</code>: 合并 <code>Obs</code>对象，并按给定的时序发出对应值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">500</span>).take(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.merge(source2);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">source : ---<span class=\"string\">-0</span>---<span class=\"string\">-1</span>---<span class=\"string\">-2</span>|</div><div class=\"line\">source2: -<span class=\"string\">-0</span>-<span class=\"string\">-1</span>-<span class=\"string\">-2</span>-<span class=\"string\">-3</span>-<span class=\"string\">-4</span>-<span class=\"string\">-5</span>|</div><div class=\"line\">            merge()</div><div class=\"line\">example: -<span class=\"string\">-0</span><span class=\"string\">-01</span>-<span class=\"string\">-21</span><span class=\"string\">-3</span>--(24)-<span class=\"string\">-5</span>|</div></pre></td></tr></table></figure>\n<ul>\n<li><code>merageAll</code>: 将高阶<code>Obs</code>转换为一阶<code>Obs</code>，并同时处理所有<code>Obs</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> click = Rx.Observable.fromEvent(<span class=\"built_in\">document</span>.body, <span class=\"string\">'click'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source = click.map(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> Rx.Observable.interval(<span class=\"number\">1000</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.mergeAll();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">click</span>  <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span> </div><div class=\"line\">        <span class=\"comment\">map(e</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">Rx</span><span class=\"string\">.</span><span class=\"comment\">Observable</span><span class=\"string\">.</span><span class=\"comment\">interval(1000))</span></div><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                   <span class=\"comment\">\\</span> <span class=\"comment\">\\</span>                  <span class=\"comment\">\\</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                    <span class=\"comment\">\\</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                     <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                     <span class=\"comment\">mergeAll()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">00</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">11</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">22</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">33</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(04)4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>combineLatest</code>: 合并输入的<code>Obs</code>对象，当源<code>Obs</code>和其他<code>Obs</code>都发出值后，才会调用<code>project</code>函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">500</span>).take(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> newest = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.combineLatest(newest, (x, y) =&gt; x + y);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\">newest</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5|</span></div><div class=\"line\"><span class=\"comment\"></span>    <span class=\"comment\">combineLatest(newest</span><span class=\"string\">,</span> <span class=\"comment\">(x</span><span class=\"string\">,</span> <span class=\"comment\">y)</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span> <span class=\"literal\">+</span> <span class=\"comment\">y);</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">01</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">23</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(56)</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">7|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>zip</code>: 根据所有的<code>Obs</code>对象的输入顺序，产生一个新<code>Obs</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">500</span>).take(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> newest = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.zip(newest, (x, y) =&gt; x + y);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\">newest</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5|</span></div><div class=\"line\"><span class=\"comment\"></span>    <span class=\"comment\">zip(newest</span><span class=\"string\">,</span> <span class=\"comment\">(x</span><span class=\"string\">,</span> <span class=\"comment\">y)</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span> <span class=\"literal\">+</span> <span class=\"comment\">y)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>withLatestFrom</code>: 当源<code>Obs</code>发出新值时，根据<code>project</code>函数，合并其他<code>Obs</code>之前发出的最新值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> main = Rx.Observable.from(<span class=\"string\">'hello'</span>).zip(Rx.Observable.interval(<span class=\"number\">500</span>), </div><div class=\"line\">    (x, y) =&gt; x);</div><div class=\"line\"><span class=\"keyword\">var</span> some = Rx.Observable.from([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]).zip(Rx.Observable.interval(<span class=\"number\">300</span>), </div><div class=\"line\">    (x, y) =&gt; x);</div><div class=\"line\"><span class=\"keyword\">var</span> example = main.withLatestFrom(some, (x, y) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> y === <span class=\"number\">1</span> ? x.toUpperCase() : x;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">main</span>   <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">h</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">e</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">l</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">l</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">o|</span></div><div class=\"line\"><span class=\"comment\">some</span>   <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1|</span></div><div class=\"line\"><span class=\"comment\">withLatestFrom(some</span><span class=\"string\">,</span> <span class=\"comment\">(x</span><span class=\"string\">,</span> <span class=\"comment\">y)</span> <span class=\"comment\">=</span>&gt;  <span class=\"comment\">y</span> <span class=\"comment\">===</span> <span class=\"comment\">1</span> <span class=\"comment\">?</span> <span class=\"comment\">x</span><span class=\"string\">.</span><span class=\"comment\">toUpperCase()</span> <span class=\"comment\">:</span> <span class=\"comment\">x);</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">h</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">e</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">l</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">L</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">O|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>switch</code>: 切换为最新的<code>Obs</code>数据源，并退订之前的<code>Obs</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> click = Rx.Observable.fromEvent(<span class=\"built_in\">document</span>.body, <span class=\"string\">'click'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source = click.map(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> Rx.Observable.interval(<span class=\"number\">1000</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.switch();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">click</span>  <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span> </div><div class=\"line\">        <span class=\"comment\">map(e</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">Rx</span><span class=\"string\">.</span><span class=\"comment\">Observable</span><span class=\"string\">.</span><span class=\"comment\">interval(1000))</span></div><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                   <span class=\"comment\">\\</span> <span class=\"comment\">\\</span>                  <span class=\"comment\">\\</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                    <span class=\"comment\">\\</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                     <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                     <span class=\"comment\">switch()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<h4 id=\"Utility-Operators\"><a href=\"#Utility-Operators\" class=\"headerlink\" title=\"Utility Operators\"></a><code>Utility Operators</code></h4><ul>\n<li><code>delay</code>: 延迟源<code>Obs</code>发出的第一个元素的时间点<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.delay(<span class=\"number\">500</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">delay(500)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>delayWhen</code>: <code>delayWhen</code> 会响每个元素，调用的时候需要设置 <code>delayDurationSelector</code> 函数，该函数的返回值是 <code>Observable</code> 对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.delayWhen( <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> Rx.Observable.interval(<span class=\"number\">100</span> * x).take(<span class=\"number\">1</span>));</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div><div class=\"line\"><span class=\"comment\"></span>    <span class=\"string\">.</span><span class=\"comment\">delayWhen(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">Rx</span><span class=\"string\">.</span><span class=\"comment\">Observable</span><span class=\"string\">.</span><span class=\"comment\">interval(100</span> <span class=\"comment\">*</span> <span class=\"comment\">x)</span><span class=\"string\">.</span><span class=\"comment\">take(1));</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div></pre></td></tr></table></figure>\n<h4 id=\"Multicasting-Operators\"><a href=\"#Multicasting-Operators\" class=\"headerlink\" title=\"Multicasting Operators\"></a><code>Multicasting Operators</code></h4><ul>\n<li><p><code>multicast</code>: 用于挂载<code>Subject</code>，并返回一个可链接的<code>Obs</code>对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .take(<span class=\"number\">3</span>)</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.Subject());</div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">source.subscribe(observerA); <span class=\"comment\">// subject.subscribe(observerA)</span></div><div class=\"line\">source.connect(); <span class=\"comment\">// source.subscribe(subject)</span></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    source.subscribe(observerB); <span class=\"comment\">// subject.subscribe(observerA)</span></div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>refCount</code>: 使 <code>multicast Observalbe</code>可以在第一个<code>subscriber</code>到达时自动执行，并在最后一个<code>subscriber</code>离开时结束。<br><code>refCount()</code>存在于<code>ConnectableObservable</code>上，并返回一个新的<code>Observalbe</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .do(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'send: '</span> + x))</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.Subject())</div><div class=\"line\">             .refCount();</div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> subscriptionA = source.subscribe(observerA);</div><div class=\"line\"><span class=\"comment\">// 订阅数 0 =&gt; 1</span></div><div class=\"line\"><span class=\"keyword\">var</span> subscriptionB;</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subscriptionB = source.subscribe(observerB);</div><div class=\"line\">    <span class=\"comment\">// 订阅数 1 =&gt; 2</span></div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subscriptionA.unsubscribe(); <span class=\"comment\">// 订阅数 2 =&gt; 1</span></div><div class=\"line\">    subscriptionB.unsubscribe(); <span class=\"comment\">// 订阅数 1 =&gt; 0，source 停止发送元素</span></div><div class=\"line\">&#125;, <span class=\"number\">5000</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>publish</code>: 用于挂载 <code>Subject</code> 对象，并返回一个可链接 (connectable) 的 <code>Obs</code>, <code>publish</code> <code>multicast(new Rx.Subject())</code> 等价</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .publish() </div><div class=\"line\">             .refCount();        </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.Subject()) </div><div class=\"line\">             .refCount();</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>publishReplay</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .publishReplay(<span class=\"number\">1</span>) </div><div class=\"line\">             .refCount();          </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">            .multicast(<span class=\"keyword\">new</span> Rx.ReplaySubject(<span class=\"number\">1</span>)) </div><div class=\"line\">            .refCount();</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>publishBehavior</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .publishBehavior(<span class=\"number\">0</span>) </div><div class=\"line\">             .refCount();           </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.BehaviorSubject(<span class=\"number\">0</span>)) </div><div class=\"line\">             .refCount();</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>publishLast</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .publishLast() </div><div class=\"line\">             .refCount();          </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.AsyncSubject(<span class=\"number\">1</span>)) </div><div class=\"line\">             .refCount();</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>share</code>: <code>publish</code> + <code>refCount</code> 的简写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .share();          </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .publish()</div><div class=\"line\">             .refCount();</div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.Subject()) </div><div class=\"line\">             .refCount();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Error-Handling-Operators\"><a href=\"#Error-Handling-Operators\" class=\"headerlink\" title=\"Error Handling Operators\"></a><code>Error Handling Operators</code></h4><ul>\n<li><code>catch</code>: 捕获异常，同时返回一个 <code>Obs</code>，用于发出新的值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.from([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"number\">2</span>])</div><div class=\"line\">               .zip(Rx.Observable.interval(<span class=\"number\">500</span>), (x,y) =&gt; x);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.toUpperCase())</div><div class=\"line\">                    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> Rx.Observable.of(<span class=\"string\">'h'</span>));</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">map(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span><span class=\"string\">.</span><span class=\"comment\">toUpperCase())</span></div><div class=\"line\"><span class=\"comment\"></span>         <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">X|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">catch(error</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">Rx</span><span class=\"string\">.</span><span class=\"comment\">Observable</span><span class=\"string\">.</span><span class=\"comment\">of('h'))</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">A</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">B</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">C</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">D</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">h|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>retry</code>: 发生错误后，重试 <code>count</code> 次数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.from([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"number\">2</span>])</div><div class=\"line\">               .zip(Rx.Observable.interval(<span class=\"number\">500</span>), (x,y) =&gt; x);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.toUpperCase())</div><div class=\"line\">                    .retry(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">map(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span><span class=\"string\">.</span><span class=\"comment\">toUpperCase())</span></div><div class=\"line\"><span class=\"comment\"></span>         <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">X|</span></div><div class=\"line\"><span class=\"comment\"></span>                <span class=\"comment\">retry(1)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">A</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">B</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">C</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">D</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">A</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">B</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">C</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">D</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">X|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>retryWhen</code>: 捕获异常 <code>Obs</code>, 处理后可以重新订阅源<code>Obs</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.from([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"number\">2</span>])</div><div class=\"line\">               .zip(Rx.Observable.interval(<span class=\"number\">500</span>), (x,y) =&gt; x);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.toUpperCase())</div><div class=\"line\">                    .retryWhen(<span class=\"function\"><span class=\"params\">errorObs</span> =&gt;</span> errorObs.delay(<span class=\"number\">1000</span>));</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">map(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span><span class=\"string\">.</span><span class=\"comment\">toUpperCase())</span></div><div class=\"line\"><span class=\"comment\"></span>         <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">X|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">retryWhen(errorObs</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">errorObs</span><span class=\"string\">.</span><span class=\"comment\">delay(1000))</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">A</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">B</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">C</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">D</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">A</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">B</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">C</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">D</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<h3 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h3><ul>\n<li><code>Subject</code>: 继承于<code>Observable</code>的 <code>Observer Pattern</code> 的实例<br><code>Subject</code> 既是 <code>Observable</code> 又是 <code>Observer</code><br><code>Subject</code> 会对內部的 <code>observers</code> 列表进行组播(multicast)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> Rx.Subject();</div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">subject.subscribe(observerA);</div><div class=\"line\">subject.subscribe(observerB);</div><div class=\"line\">subject.next(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 1\"</span></div><div class=\"line\"><span class=\"comment\">// \"B next: 1\"</span></div><div class=\"line\">subject.next(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 2\"</span></div><div class=\"line\"><span class=\"comment\">// \"B next: 2\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>BehaviorSubject</code>: 会记住最新一次推送的元素，并把该元素当做当前值推送（建立时需给定状态）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> Rx.BehaviorSubject(<span class=\"number\">0</span>); <span class=\"comment\">// 0 為起始值</span></div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">subject.subscribe(observerA);</div><div class=\"line\"><span class=\"comment\">// \"A next: 0\"</span></div><div class=\"line\">subject.next(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 1\"</span></div><div class=\"line\">subject.next(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 2\"</span></div><div class=\"line\">subject.next(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 3\"</span></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subject.subscribe(observerB); </div><div class=\"line\">    <span class=\"comment\">// \"B next: 3\"</span></div><div class=\"line\">&#125;,<span class=\"number\">3000</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>ReplaySubject</code>: 在新订阅后重新发送最后几个元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> Rx.ReplaySubject(<span class=\"number\">2</span>); <span class=\"comment\">// 重複發送最後 2 個元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">subject.subscribe(observerA);</div><div class=\"line\">subject.next(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 1\"</span></div><div class=\"line\">subject.next(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 2\"</span></div><div class=\"line\">subject.next(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 3\"</span></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subject.subscribe(observerB);</div><div class=\"line\">    <span class=\"comment\">// \"B next: 2\"</span></div><div class=\"line\">    <span class=\"comment\">// \"B next: 3\"</span></div><div class=\"line\">&#125;,<span class=\"number\">3000</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>AsyncSubject</code>: 在<code>subject</code>结束后送出最后一个值并结束</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> Rx.AsyncSubject();</div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">subject.subscribe(observerA);</div><div class=\"line\">subject.next(<span class=\"number\">1</span>);</div><div class=\"line\">subject.next(<span class=\"number\">2</span>);</div><div class=\"line\">subject.next(<span class=\"number\">3</span>);</div><div class=\"line\">subject.complete();</div><div class=\"line\"><span class=\"comment\">// \"A next: 3\"</span></div><div class=\"line\"><span class=\"comment\">// \"A complete!\"</span></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subject.subscribe(observerB);</div><div class=\"line\">    <span class=\"comment\">// \"B next: 3\"</span></div><div class=\"line\">    <span class=\"comment\">// \"B complete!\"</span></div><div class=\"line\">&#125;,<span class=\"number\">3000</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h3><ul>\n<li><code>next</code>: 当Observable推送新值时调用</li>\n<li><code>complete</code>: 当Observable所有值调用完毕之后，调用后next将不再起作用</li>\n<li><code>error</code>: 报错时<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observer = &#123;</div><div class=\"line\">\tnext: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(error)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tcomplete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'complete'</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//  使用之前定义的观察者来订阅</span></div><div class=\"line\">observable.subscribe(observer)</div><div class=\"line\"><span class=\"comment\">// Jerry</span></div><div class=\"line\"><span class=\"comment\">// Anna</span></div><div class=\"line\"><span class=\"comment\">// complete</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h3><ul>\n<li>数据结构，知道如何根据优先级或其他标准来执行并列任务</li>\n<li>执行环境，知道事件何时何处执行</li>\n<li>虚拟时钟，可以让事件在特定时间执行</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"RXjs\"><a href=\"#RXjs\" class=\"headerlink\" title=\"RXjs\"></a>RXjs</h2><h3 id=\"Functional-Programming\"><a href=\"#Functional-Programming\" class=\"headerlink\" title=\"Functional Programming\"></a>Functional Programming</h3><ul>\n<li>Expression, no Statement</li>\n<li>Pure Function</li>\n<li>利用参数保存状态</li>\n</ul>\n<h3 id=\"建立Observable\"><a href=\"#建立Observable\" class=\"headerlink\" title=\"建立Observable\"></a>建立Observable</h3><p>统一订阅<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">observable.subscribe(&#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'complete!'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(error)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p><code>create</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">@param: `callback function`</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> observable = Rx.Observable</div><div class=\"line\">  .create(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">observer</span>) </span>&#123;</div><div class=\"line\">    observer.next(<span class=\"string\">'Jerry'</span>); <span class=\"comment\">// RxJS 4.x 以前的版本用 onNext</span></div><div class=\"line\">    observer.next(<span class=\"string\">'Anna'</span>);</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>of</code><br>多个传递值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observable = Rx.Observable.of(<span class=\"string\">'Jerry'</span>, <span class=\"string\">'Anna'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>from</code><br>数组，字符串，promise对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> params = [<span class=\"string\">'Jerry'</span>, <span class=\"string\">'Anna'</span>]  <span class=\"comment\">// 数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> params = <span class=\"string\">'Jerry'</span> <span class=\"comment\">// 字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> params = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        resolve(<span class=\"string\">'hi'</span>)</div><div class=\"line\">    &#125;, <span class=\"number\">300</span>)</div><div class=\"line\">&#125;)                  <span class=\"comment\">// promise对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> observable = Rx.Observable.from(params)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>fromEvent</code><br>为DOM元素添加监听事件<br>param1: DOM对象，param2: 监听事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observable = Rx.Observable.fromEvent($DOM, $event);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>fromEventPattern</code><br>同时具有注册移除监听的类事件使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners = [];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\taddListener(listener) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> listener === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.listeners.push(listener)</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'listener 必須是 function'</span>)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tremoveListener(listener) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners.splice(<span class=\"keyword\">this</span>.listeners.indexOf(listener), <span class=\"number\">1</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tnotify(message) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners.forEach(<span class=\"function\"><span class=\"params\">listener</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\tlistener(message);</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> egghead = <span class=\"keyword\">new</span> Producer(); </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable</div><div class=\"line\">    .fromEventPattern(</div><div class=\"line\">        (handler) =&gt; egghead.addListener(handler), </div><div class=\"line\">        (handler) =&gt; egghead.removeListener(handler)</div><div class=\"line\">    ); </div><div class=\"line\">source.subscribe(&#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'complete!'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(error)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">egghead.notify(<span class=\"string\">'Hello! Can you hear me?'</span>);</div><div class=\"line\"><span class=\"comment\">// Hello! Can you hear me?</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>empty</code><br>给出一个空的Observable，如果订阅这个Observable则会立即push出complete</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.empty()</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>never</code><br>给出一个无穷的Observable，订阅后将什么都不发生，但存在</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.never()</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>throw</code><br>给出一个错误的Observable，订阅后将直接抛出错误</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.throw()</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>interval</code><br>每隔一段时间推送出一个从零开始递增的整数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">666</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>timer</code><br><code>param_one</code>: 发出第一个值的等待时间(number)/等待到的日期(Date)<br><code>param_two</code>: 第一个值发出之后发送每个值的间隔时间<br>如果只有一个参数，发出第一个值之后触发complete</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.timer(<span class=\"number\">5000</span>, <span class=\"number\">1000</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Subscription\"><a href=\"#Subscription\" class=\"headerlink\" title=\"Subscription\"></a>Subscription</h3><p>订阅Observable后会回传一个subscription对象，这个对象含有释放资源的<code>unsubscribe</code>方法，可以停止订阅<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.timer(<span class=\"number\">1000</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"comment\">// 取得 subscription</span></div><div class=\"line\"><span class=\"keyword\">var</span> subscription = source.subscribe(&#123;</div><div class=\"line\">\tnext: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(value)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tcomplete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'complete!'</span>);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Throw Error: '</span> + error)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subscription.unsubscribe()</div><div class=\"line\">&#125;, <span class=\"number\">5000</span>)</div><div class=\"line\"><span class=\"comment\">// 输出: 0,1,2,3,4</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Operator\"><a href=\"#Operator\" class=\"headerlink\" title=\"Operator\"></a>Operator</h3><p><code>Operators</code>是一个个被附加到<code>Observable</code>上的方法，经过这些方法传递出一个新的<code>observable</code></p>\n<h4 id=\"Transformation-Operators\"><a href=\"#Transformation-Operators\" class=\"headerlink\" title=\"Transformation Operators\"></a>Transformation Operators</h4><ul>\n<li><code>map</code>: 对 <code>Observable</code> 对象发出的每个值，使用指定的 <code>project</code> 函数，进行映射处理<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> newest = source.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">2</span>); </div><div class=\"line\">newest.subscribe(<span class=\"built_in\">console</span>.log);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">            <span class=\"comment\">map(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span> <span class=\"literal\">+</span> <span class=\"comment\">2)</span></div><div class=\"line\"><span class=\"comment\">newest:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>mapTo</code>: 对 <code>Observable</code> 对象发出的每个值，映射成固定的值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> newest = source.mapTo(<span class=\"number\">2</span>); </div><div class=\"line\">newest.subscribe(<span class=\"built_in\">console</span>.log);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                <span class=\"comment\">mapTo(2)</span></div><div class=\"line\"><span class=\"comment\">newest:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>scan</code>: 对 <code>Observable</code> 发出值，执行 <code>accumulator</code> 指定的运算，类似于 <code>reduce</code> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> newest = source.scan( <span class=\"function\"><span class=\"params\">count</span> =&gt;</span> count + <span class=\"number\">5</span>, <span class=\"string\">'2'</span>)</div><div class=\"line\">newest.subscribe(<span class=\"built_in\">console</span>.log);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">        <span class=\"comment\">scan(</span> <span class=\"comment\">x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span> <span class=\"literal\">+</span> <span class=\"comment\">5</span><span class=\"string\">,</span> <span class=\"comment\">0)</span></div><div class=\"line\"><span class=\"comment\">newest:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">10</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">15</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">20</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>buffer</code>: 缓冲源 <code>Observable</code> 对象已发出的值，直到 <code>closingNotifier</code> 触发后，统一输出缓存的元素<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.buffer(source2);</div><div class=\"line\">example.subscribe(...);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">6</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">7</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\"><span class=\"comment\">source2:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">            <span class=\"comment\">buffer(source2)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">0</span><span class=\"string\">,</span><span class=\"comment\">1</span><span class=\"string\">,</span><span class=\"comment\">2</span><span class=\"title\">]</span><span class=\"comment\">)</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">3</span><span class=\"string\">,</span><span class=\"comment\">4</span><span class=\"string\">,</span><span class=\"comment\">5</span><span class=\"title\">]</span><span class=\"comment\">)</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>bufferTime</code>: 设定源 <code>Observable</code> 对象已发出的值的缓冲时间<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.bufferTime(<span class=\"number\">1000</span>);</div><div class=\"line\">example.subscribe(...);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">6</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">7</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">            <span class=\"comment\">bufferTime(1000)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">0</span><span class=\"string\">,</span><span class=\"comment\">1</span><span class=\"string\">,</span><span class=\"comment\">2</span><span class=\"title\">]</span><span class=\"comment\">)</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">3</span><span class=\"string\">,</span><span class=\"comment\">4</span><span class=\"string\">,</span><span class=\"comment\">5</span><span class=\"title\">]</span><span class=\"comment\">)</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>bufferCount</code>: 缓冲源 <code>Observable</code> 对象已发出的值，直到大小达到给定的最大 <code>bufferSize</code> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.bufferCount(<span class=\"number\">3</span>);</div><div class=\"line\">example.subscribe(...);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">6</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">7</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">            <span class=\"comment\">bufferCount(3)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">0</span><span class=\"string\">,</span><span class=\"comment\">1</span><span class=\"string\">,</span><span class=\"comment\">2</span><span class=\"title\">]</span><span class=\"comment\">)</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(</span><span class=\"title\">[</span><span class=\"comment\">3</span><span class=\"string\">,</span><span class=\"comment\">4</span><span class=\"string\">,</span><span class=\"comment\">5</span><span class=\"title\">]</span><span class=\"comment\">)</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>concatMap</code>: 对每个 <code>Observable</code> 对象发出的值，进行映射处理，并进行合并。该操作符也会依序所有<code>Observable</code> 对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.fromEvent(<span class=\"built_in\">document</span>.body, <span class=\"string\">'click'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.concatMap(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> Rx.Observable.interval(<span class=\"number\">100</span>).take(<span class=\"number\">3</span>));</div><div class=\"line\">example.subscribe(...);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">source : <span class=\"params\">-----------c--c------------------</span><span class=\"string\">...</span></div><div class=\"line\">        concatMap<span class=\"params\">(<span class=\"attr\">c</span> =&gt; Rx.Observable.interval(100)</span><span class=\"string\">.take</span><span class=\"params\">(3)</span>)</div><div class=\"line\">example: <span class=\"params\">-------------0-1-2-0-1-2---------</span><span class=\"string\">...</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>switchMap</code>: 对源 <code>Observable</code> 对象发出的值，做映射处理。若有新的 <code>Observable</code> 对象出现，会在新的 <code>Observable</code> 对象发出新值后，退订前一个未处理完的 <code>Observable</code> 对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.fromEvent(<span class=\"built_in\">document</span>.body, <span class=\"string\">'click'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.switchMap(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> Rx.Observable.interval(<span class=\"number\">100</span>).take(<span class=\"number\">3</span>));</div><div class=\"line\">example.subscribe(...);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">        <span class=\"comment\">concatMap(c</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">Rx</span><span class=\"string\">.</span><span class=\"comment\">Observable</span><span class=\"string\">.</span><span class=\"comment\">interval(100)</span><span class=\"string\">.</span><span class=\"comment\">take(3))</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<h4 id=\"Filtering-Operators\"><a href=\"#Filtering-Operators\" class=\"headerlink\" title=\"Filtering Operators\"></a>Filtering Operators</h4><ul>\n<li><code>filter</code>: 过滤值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> newest = source.filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">            <span class=\"comment\">filter(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span> <span class=\"comment\">%</span> <span class=\"comment\">2</span> <span class=\"comment\">===</span> <span class=\"comment\">0)</span></div><div class=\"line\"><span class=\"comment\">newest:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>take</code>: 获取 <code>Observable</code> 对象发出的前n项值，取完结束。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.take(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                <span class=\"comment\">take(3)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>first</code>: 获取 <code>Observable</code> 对象发出的第一个元素，取完结束。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.first();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                <span class=\"comment\">first()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>takeUntil</code>: 当 <code>takeUntil</code> 传入的 <code>notifier</code> 发出值时，源 <code>Observable</code> 对象就会直接进入完成状态<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> click = Rx.Observable.fromEvent(<span class=\"built_in\">document</span>.body, <span class=\"string\">'click'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.takeUntil(click);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span></div><div class=\"line\"><span class=\"comment\">click</span>  <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span></div><div class=\"line\">                <span class=\"comment\">takeUntil(click)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>skip</code>: 跳过 源<code>Observable</code>的前n项，并返回新的<code>Observable</code>对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.skip(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                    <span class=\"comment\">skip(3)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>takeLast</code>: 获取 源<code>Observable</code>发出的后n项<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>).take(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.takeLast(<span class=\"number\">2</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5|</span></div><div class=\"line\"><span class=\"comment\"></span>                <span class=\"comment\">takeLast(2)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(45)|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>last</code>: 获取 源<code>Observable</code>发出的最后一项<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>).take(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.last();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5|</span></div><div class=\"line\"><span class=\"comment\"></span>                    <span class=\"comment\">last()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(5)|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>debounceTime</code>: 在设定的时间跨度内，若源 <code>Observable</code> 对象没有再发出新值，则返回最近一次发出的值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.debounceTime(<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">debounceTime(1000)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>throttleTime</code>: 节流，从 源<code>Observable</code>对象发出的第一个值开始，忽略等待时间内发出的值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.throttleTime(<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">throttleTime(1000)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>distinct</code>: 去重<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.from([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>])</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.distinct()</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b|</span></div><div class=\"line\"><span class=\"comment\"></span>            <span class=\"comment\">distinct()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>distinctUntilChanged</code>: 过滤 <code>Observable</code>发出的值，若当前值与上一次值不一致，则发出该值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.from([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>])</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.distinctUntilChanged()</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b|</span></div><div class=\"line\"><span class=\"comment\"></span>            <span class=\"comment\">distinctUntilChanged()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b|</span></div></pre></td></tr></table></figure>\n<h4 id=\"Combination-Operators\"><a href=\"#Combination-Operators\" class=\"headerlink\" title=\"Combination Operators\"></a><code>Combination Operators</code></h4><ul>\n<li><code>concat</code>: 合并多个<code>Observable</code>对象，并依次执行<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>).take(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = Rx.Observable.of(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> source3 = Rx.Observable.of(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.concat(source2, source3);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\">source2:</span> <span class=\"comment\">(3)|</span></div><div class=\"line\"><span class=\"comment\">source3:</span> <span class=\"comment\">(456)|</span></div><div class=\"line\"><span class=\"comment\"></span>            <span class=\"comment\">concat()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2(3456)|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>concatAll</code>: 合并多个<code>Observable</code>对象，并在上一个<code>Obs</code>完成订阅后订阅下一个<code>Obs</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obs1 = Rx.Observable.interval(<span class=\"number\">1000</span>).take(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> obs2 = Rx.Observable.interval(<span class=\"number\">500</span>).take(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> obs3 = Rx.Observable.interval(<span class=\"number\">2000</span>).take(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.of(obs1, obs2, obs3);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.concatAll();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">source : (o1                 o2      o3)|</div><div class=\"line\">           \\                  \\       \\</div><div class=\"line\">            -<span class=\"string\">-0</span>-<span class=\"string\">-1</span>-<span class=\"string\">-2</span>-<span class=\"string\">-3</span>-<span class=\"string\">-4</span>|   <span class=\"string\">-0</span><span class=\"string\">-1</span>|   ---<span class=\"string\">-0</span>|               </div><div class=\"line\">                concatAll()        </div><div class=\"line\">example: -<span class=\"string\">-0</span>-<span class=\"string\">-1</span>-<span class=\"string\">-2</span>-<span class=\"string\">-3</span>-<span class=\"string\">-4</span><span class=\"string\">-0</span><span class=\"string\">-1</span>---<span class=\"string\">-0</span>|</div></pre></td></tr></table></figure>\n<ul>\n<li><code>startWith</code>: 在开始发出<code>Obs</code>对象的数据之前发出已经设置的参数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.startWith(<span class=\"number\">222</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                <span class=\"comment\">startWith(222)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"comment\">(222)</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>merage</code>: 合并 <code>Obs</code>对象，并按给定的时序发出对应值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">500</span>).take(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.merge(source2);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">source : ---<span class=\"string\">-0</span>---<span class=\"string\">-1</span>---<span class=\"string\">-2</span>|</div><div class=\"line\">source2: -<span class=\"string\">-0</span>-<span class=\"string\">-1</span>-<span class=\"string\">-2</span>-<span class=\"string\">-3</span>-<span class=\"string\">-4</span>-<span class=\"string\">-5</span>|</div><div class=\"line\">            merge()</div><div class=\"line\">example: -<span class=\"string\">-0</span><span class=\"string\">-01</span>-<span class=\"string\">-21</span><span class=\"string\">-3</span>--(24)-<span class=\"string\">-5</span>|</div></pre></td></tr></table></figure>\n<ul>\n<li><code>merageAll</code>: 将高阶<code>Obs</code>转换为一阶<code>Obs</code>，并同时处理所有<code>Obs</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> click = Rx.Observable.fromEvent(<span class=\"built_in\">document</span>.body, <span class=\"string\">'click'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source = click.map(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> Rx.Observable.interval(<span class=\"number\">1000</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.mergeAll();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">click</span>  <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span> </div><div class=\"line\">        <span class=\"comment\">map(e</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">Rx</span><span class=\"string\">.</span><span class=\"comment\">Observable</span><span class=\"string\">.</span><span class=\"comment\">interval(1000))</span></div><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                   <span class=\"comment\">\\</span> <span class=\"comment\">\\</span>                  <span class=\"comment\">\\</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                    <span class=\"comment\">\\</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                     <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                     <span class=\"comment\">mergeAll()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">00</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">11</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">22</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">33</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(04)4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>combineLatest</code>: 合并输入的<code>Obs</code>对象，当源<code>Obs</code>和其他<code>Obs</code>都发出值后，才会调用<code>project</code>函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">500</span>).take(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> newest = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.combineLatest(newest, (x, y) =&gt; x + y);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\">newest</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5|</span></div><div class=\"line\"><span class=\"comment\"></span>    <span class=\"comment\">combineLatest(newest</span><span class=\"string\">,</span> <span class=\"comment\">(x</span><span class=\"string\">,</span> <span class=\"comment\">y)</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span> <span class=\"literal\">+</span> <span class=\"comment\">y);</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">01</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">23</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">(56)</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">7|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>zip</code>: 根据所有的<code>Obs</code>对象的输入顺序，产生一个新<code>Obs</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">500</span>).take(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> newest = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.zip(newest, (x, y) =&gt; x + y);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\">newest</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">5|</span></div><div class=\"line\"><span class=\"comment\"></span>    <span class=\"comment\">zip(newest</span><span class=\"string\">,</span> <span class=\"comment\">(x</span><span class=\"string\">,</span> <span class=\"comment\">y)</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span> <span class=\"literal\">+</span> <span class=\"comment\">y)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>withLatestFrom</code>: 当源<code>Obs</code>发出新值时，根据<code>project</code>函数，合并其他<code>Obs</code>之前发出的最新值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> main = Rx.Observable.from(<span class=\"string\">'hello'</span>).zip(Rx.Observable.interval(<span class=\"number\">500</span>), </div><div class=\"line\">    (x, y) =&gt; x);</div><div class=\"line\"><span class=\"keyword\">var</span> some = Rx.Observable.from([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]).zip(Rx.Observable.interval(<span class=\"number\">300</span>), </div><div class=\"line\">    (x, y) =&gt; x);</div><div class=\"line\"><span class=\"keyword\">var</span> example = main.withLatestFrom(some, (x, y) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> y === <span class=\"number\">1</span> ? x.toUpperCase() : x;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">main</span>   <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">h</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">e</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">l</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">l</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">o|</span></div><div class=\"line\"><span class=\"comment\">some</span>   <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1|</span></div><div class=\"line\"><span class=\"comment\">withLatestFrom(some</span><span class=\"string\">,</span> <span class=\"comment\">(x</span><span class=\"string\">,</span> <span class=\"comment\">y)</span> <span class=\"comment\">=</span>&gt;  <span class=\"comment\">y</span> <span class=\"comment\">===</span> <span class=\"comment\">1</span> <span class=\"comment\">?</span> <span class=\"comment\">x</span><span class=\"string\">.</span><span class=\"comment\">toUpperCase()</span> <span class=\"comment\">:</span> <span class=\"comment\">x);</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">h</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">e</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">l</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">L</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">O|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>switch</code>: 切换为最新的<code>Obs</code>数据源，并退订之前的<code>Obs</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> click = Rx.Observable.fromEvent(<span class=\"built_in\">document</span>.body, <span class=\"string\">'click'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source = click.map(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> Rx.Observable.interval(<span class=\"number\">1000</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.switch();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">click</span>  <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span> </div><div class=\"line\">        <span class=\"comment\">map(e</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">Rx</span><span class=\"string\">.</span><span class=\"comment\">Observable</span><span class=\"string\">.</span><span class=\"comment\">interval(1000))</span></div><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">o</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                   <span class=\"comment\">\\</span> <span class=\"comment\">\\</span>                  <span class=\"comment\">\\</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                    <span class=\"comment\">\\</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                     <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div><div class=\"line\">                     <span class=\"comment\">switch()</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<h4 id=\"Utility-Operators\"><a href=\"#Utility-Operators\" class=\"headerlink\" title=\"Utility Operators\"></a><code>Utility Operators</code></h4><ul>\n<li><code>delay</code>: 延迟源<code>Obs</code>发出的第一个元素的时间点<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.delay(<span class=\"number\">500</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">delay(500)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>delayWhen</code>: <code>delayWhen</code> 会响每个元素，调用的时候需要设置 <code>delayDurationSelector</code> 函数，该函数的返回值是 <code>Observable</code> 对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">300</span>).take(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.delayWhen( <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> Rx.Observable.interval(<span class=\"number\">100</span> * x).take(<span class=\"number\">1</span>));</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div><div class=\"line\"><span class=\"comment\"></span>    <span class=\"string\">.</span><span class=\"comment\">delayWhen(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">Rx</span><span class=\"string\">.</span><span class=\"comment\">Observable</span><span class=\"string\">.</span><span class=\"comment\">interval(100</span> <span class=\"comment\">*</span> <span class=\"comment\">x)</span><span class=\"string\">.</span><span class=\"comment\">take(1));</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">0</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">1</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">3</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">4|</span></div></pre></td></tr></table></figure>\n<h4 id=\"Multicasting-Operators\"><a href=\"#Multicasting-Operators\" class=\"headerlink\" title=\"Multicasting Operators\"></a><code>Multicasting Operators</code></h4><ul>\n<li><p><code>multicast</code>: 用于挂载<code>Subject</code>，并返回一个可链接的<code>Obs</code>对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .take(<span class=\"number\">3</span>)</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.Subject());</div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">source.subscribe(observerA); <span class=\"comment\">// subject.subscribe(observerA)</span></div><div class=\"line\">source.connect(); <span class=\"comment\">// source.subscribe(subject)</span></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    source.subscribe(observerB); <span class=\"comment\">// subject.subscribe(observerA)</span></div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>refCount</code>: 使 <code>multicast Observalbe</code>可以在第一个<code>subscriber</code>到达时自动执行，并在最后一个<code>subscriber</code>离开时结束。<br><code>refCount()</code>存在于<code>ConnectableObservable</code>上，并返回一个新的<code>Observalbe</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .do(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'send: '</span> + x))</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.Subject())</div><div class=\"line\">             .refCount();</div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> subscriptionA = source.subscribe(observerA);</div><div class=\"line\"><span class=\"comment\">// 订阅数 0 =&gt; 1</span></div><div class=\"line\"><span class=\"keyword\">var</span> subscriptionB;</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subscriptionB = source.subscribe(observerB);</div><div class=\"line\">    <span class=\"comment\">// 订阅数 1 =&gt; 2</span></div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subscriptionA.unsubscribe(); <span class=\"comment\">// 订阅数 2 =&gt; 1</span></div><div class=\"line\">    subscriptionB.unsubscribe(); <span class=\"comment\">// 订阅数 1 =&gt; 0，source 停止发送元素</span></div><div class=\"line\">&#125;, <span class=\"number\">5000</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>publish</code>: 用于挂载 <code>Subject</code> 对象，并返回一个可链接 (connectable) 的 <code>Obs</code>, <code>publish</code> <code>multicast(new Rx.Subject())</code> 等价</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .publish() </div><div class=\"line\">             .refCount();        </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.Subject()) </div><div class=\"line\">             .refCount();</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>publishReplay</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .publishReplay(<span class=\"number\">1</span>) </div><div class=\"line\">             .refCount();          </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">            .multicast(<span class=\"keyword\">new</span> Rx.ReplaySubject(<span class=\"number\">1</span>)) </div><div class=\"line\">            .refCount();</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>publishBehavior</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .publishBehavior(<span class=\"number\">0</span>) </div><div class=\"line\">             .refCount();           </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.BehaviorSubject(<span class=\"number\">0</span>)) </div><div class=\"line\">             .refCount();</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>publishLast</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .publishLast() </div><div class=\"line\">             .refCount();          </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.AsyncSubject(<span class=\"number\">1</span>)) </div><div class=\"line\">             .refCount();</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>share</code>: <code>publish</code> + <code>refCount</code> 的简写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .share();          </div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .publish()</div><div class=\"line\">             .refCount();</div><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.interval(<span class=\"number\">1000</span>)</div><div class=\"line\">             .multicast(<span class=\"keyword\">new</span> Rx.Subject()) </div><div class=\"line\">             .refCount();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Error-Handling-Operators\"><a href=\"#Error-Handling-Operators\" class=\"headerlink\" title=\"Error Handling Operators\"></a><code>Error Handling Operators</code></h4><ul>\n<li><code>catch</code>: 捕获异常，同时返回一个 <code>Obs</code>，用于发出新的值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.from([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"number\">2</span>])</div><div class=\"line\">               .zip(Rx.Observable.interval(<span class=\"number\">500</span>), (x,y) =&gt; x);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.toUpperCase())</div><div class=\"line\">                    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> Rx.Observable.of(<span class=\"string\">'h'</span>));</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">map(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span><span class=\"string\">.</span><span class=\"comment\">toUpperCase())</span></div><div class=\"line\"><span class=\"comment\"></span>         <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">X|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">catch(error</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">Rx</span><span class=\"string\">.</span><span class=\"comment\">Observable</span><span class=\"string\">.</span><span class=\"comment\">of('h'))</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">A</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">B</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">C</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">D</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">h|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>retry</code>: 发生错误后，重试 <code>count</code> 次数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.from([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"number\">2</span>])</div><div class=\"line\">               .zip(Rx.Observable.interval(<span class=\"number\">500</span>), (x,y) =&gt; x);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.toUpperCase())</div><div class=\"line\">                    .retry(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">map(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span><span class=\"string\">.</span><span class=\"comment\">toUpperCase())</span></div><div class=\"line\"><span class=\"comment\"></span>         <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">X|</span></div><div class=\"line\"><span class=\"comment\"></span>                <span class=\"comment\">retry(1)</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">A</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">B</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">C</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">D</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">A</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">B</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">C</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">D</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">X|</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>retryWhen</code>: 捕获异常 <code>Obs</code>, 处理后可以重新订阅源<code>Obs</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> source = Rx.Observable.from([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"number\">2</span>])</div><div class=\"line\">               .zip(Rx.Observable.interval(<span class=\"number\">500</span>), (x,y) =&gt; x);</div><div class=\"line\"><span class=\"keyword\">var</span> example = source.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.toUpperCase())</div><div class=\"line\">                    .retryWhen(<span class=\"function\"><span class=\"params\">errorObs</span> =&gt;</span> errorObs.delay(<span class=\"number\">1000</span>));</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">source</span> <span class=\"comment\">:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">2|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">map(x</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">x</span><span class=\"string\">.</span><span class=\"comment\">toUpperCase())</span></div><div class=\"line\"><span class=\"comment\"></span>         <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">a</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">b</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">d</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">X|</span></div><div class=\"line\"><span class=\"comment\"></span>        <span class=\"comment\">retryWhen(errorObs</span> <span class=\"comment\">=</span>&gt; <span class=\"comment\">errorObs</span><span class=\"string\">.</span><span class=\"comment\">delay(1000))</span></div><div class=\"line\"><span class=\"comment\">example:</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">A</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">B</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">C</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">D</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">A</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">B</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">C</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">D</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span></div></pre></td></tr></table></figure>\n<h3 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h3><ul>\n<li><code>Subject</code>: 继承于<code>Observable</code>的 <code>Observer Pattern</code> 的实例<br><code>Subject</code> 既是 <code>Observable</code> 又是 <code>Observer</code><br><code>Subject</code> 会对內部的 <code>observers</code> 列表进行组播(multicast)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> Rx.Subject();</div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">subject.subscribe(observerA);</div><div class=\"line\">subject.subscribe(observerB);</div><div class=\"line\">subject.next(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 1\"</span></div><div class=\"line\"><span class=\"comment\">// \"B next: 1\"</span></div><div class=\"line\">subject.next(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 2\"</span></div><div class=\"line\"><span class=\"comment\">// \"B next: 2\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>BehaviorSubject</code>: 会记住最新一次推送的元素，并把该元素当做当前值推送（建立时需给定状态）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> Rx.BehaviorSubject(<span class=\"number\">0</span>); <span class=\"comment\">// 0 為起始值</span></div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">subject.subscribe(observerA);</div><div class=\"line\"><span class=\"comment\">// \"A next: 0\"</span></div><div class=\"line\">subject.next(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 1\"</span></div><div class=\"line\">subject.next(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 2\"</span></div><div class=\"line\">subject.next(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 3\"</span></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subject.subscribe(observerB); </div><div class=\"line\">    <span class=\"comment\">// \"B next: 3\"</span></div><div class=\"line\">&#125;,<span class=\"number\">3000</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>ReplaySubject</code>: 在新订阅后重新发送最后几个元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> Rx.ReplaySubject(<span class=\"number\">2</span>); <span class=\"comment\">// 重複發送最後 2 個元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">subject.subscribe(observerA);</div><div class=\"line\">subject.next(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 1\"</span></div><div class=\"line\">subject.next(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 2\"</span></div><div class=\"line\">subject.next(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// \"A next: 3\"</span></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subject.subscribe(observerB);</div><div class=\"line\">    <span class=\"comment\">// \"B next: 2\"</span></div><div class=\"line\">    <span class=\"comment\">// \"B next: 3\"</span></div><div class=\"line\">&#125;,<span class=\"number\">3000</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>AsyncSubject</code>: 在<code>subject</code>结束后送出最后一个值并结束</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> Rx.AsyncSubject();</div><div class=\"line\"><span class=\"keyword\">var</span> observerA = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'A complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> observerB = &#123;</div><div class=\"line\">    next: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B next: '</span> + value),</div><div class=\"line\">    error: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B error: '</span> + error),</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'B complete!'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">subject.subscribe(observerA);</div><div class=\"line\">subject.next(<span class=\"number\">1</span>);</div><div class=\"line\">subject.next(<span class=\"number\">2</span>);</div><div class=\"line\">subject.next(<span class=\"number\">3</span>);</div><div class=\"line\">subject.complete();</div><div class=\"line\"><span class=\"comment\">// \"A next: 3\"</span></div><div class=\"line\"><span class=\"comment\">// \"A complete!\"</span></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    subject.subscribe(observerB);</div><div class=\"line\">    <span class=\"comment\">// \"B next: 3\"</span></div><div class=\"line\">    <span class=\"comment\">// \"B complete!\"</span></div><div class=\"line\">&#125;,<span class=\"number\">3000</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h3><ul>\n<li><code>next</code>: 当Observable推送新值时调用</li>\n<li><code>complete</code>: 当Observable所有值调用完毕之后，调用后next将不再起作用</li>\n<li><code>error</code>: 报错时<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observer = &#123;</div><div class=\"line\">\tnext: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(error)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tcomplete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'complete'</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//  使用之前定义的观察者来订阅</span></div><div class=\"line\">observable.subscribe(observer)</div><div class=\"line\"><span class=\"comment\">// Jerry</span></div><div class=\"line\"><span class=\"comment\">// Anna</span></div><div class=\"line\"><span class=\"comment\">// complete</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h3><ul>\n<li>数据结构，知道如何根据优先级或其他标准来执行并列任务</li>\n<li>执行环境，知道事件何时何处执行</li>\n<li>虚拟时钟，可以让事件在特定时间执行</li>\n</ul>\n"},{"title":"cssWorld","date":"2017-12-30T15:18:47.000Z","_content":"<!--more-->\n\n## CSS World\n\n### content计数器\n使用CSS代码实现随着元素数目增多，数值也跟着改变的效果。\n- `counter-reset` 计数器重置\n```css\ncounter-reset: counter 1; // 初始值为1，名为counter\ncounter-reset: inherit; // 继承累加\n```\n作用：起名并且设置初始值。\n- `counter-increment` 计数器递增\n作用：修改递增规则\n```css\ncounter-increment: counter 2; // counter递增规则为2\n```\n- `counter()/counters()`\n作用：显示计数，并可选设置计数类型。后者可嵌套计数。\n```css\ncontent: counter(name, style);  // style为list-style-type的类型\nlist-style-type: dis | circle | square ...\ncontent: counters(name ,string, style); // string是连接符\n```\n\n- demo\n```css\n.reset {\n  counter-reset: feng;\n}\n.counter::before {\n  content: counters(feng, '-');\n  counter-increment: feng;\n}\n```\n```html\n<div class=\"reset\">\n  <div class=\"counter\">我是王小二\n    <div class=\"reset\">\n      <div class=\"counter\">我是王小二的大儿子</div>\n        <div class=\"counter\">我是王小二的二儿子\n          <div class=\"reset\">\n            <div class=\"counter\">我是王小二的二儿子的大孙子</div>\n            <div class=\"counter\">我是王小二的二儿子的二孙子</div>\n            <div class=\"counter\">我是王小二的二儿子的小孙子</div>\n          </div>\n        </div>\n      <div class=\"counter\">我是王小二的三儿子</div>\n    </div>\n</div>\n<div class=\"counter\">我是王小三</div>\n<div class=\"counter\">我是王小四\n    <div class=\"reset\">\n      <div class=\"counter\">我是王小四的大儿子</div>\n    </div>\n  </div>\n</div>\n```","source":"_posts/cssWorld.md","raw":"---\ntitle: cssWorld\ndate: 2017-12-30 23:18:47\ntags:\n---\n<!--more-->\n\n## CSS World\n\n### content计数器\n使用CSS代码实现随着元素数目增多，数值也跟着改变的效果。\n- `counter-reset` 计数器重置\n```css\ncounter-reset: counter 1; // 初始值为1，名为counter\ncounter-reset: inherit; // 继承累加\n```\n作用：起名并且设置初始值。\n- `counter-increment` 计数器递增\n作用：修改递增规则\n```css\ncounter-increment: counter 2; // counter递增规则为2\n```\n- `counter()/counters()`\n作用：显示计数，并可选设置计数类型。后者可嵌套计数。\n```css\ncontent: counter(name, style);  // style为list-style-type的类型\nlist-style-type: dis | circle | square ...\ncontent: counters(name ,string, style); // string是连接符\n```\n\n- demo\n```css\n.reset {\n  counter-reset: feng;\n}\n.counter::before {\n  content: counters(feng, '-');\n  counter-increment: feng;\n}\n```\n```html\n<div class=\"reset\">\n  <div class=\"counter\">我是王小二\n    <div class=\"reset\">\n      <div class=\"counter\">我是王小二的大儿子</div>\n        <div class=\"counter\">我是王小二的二儿子\n          <div class=\"reset\">\n            <div class=\"counter\">我是王小二的二儿子的大孙子</div>\n            <div class=\"counter\">我是王小二的二儿子的二孙子</div>\n            <div class=\"counter\">我是王小二的二儿子的小孙子</div>\n          </div>\n        </div>\n      <div class=\"counter\">我是王小二的三儿子</div>\n    </div>\n</div>\n<div class=\"counter\">我是王小三</div>\n<div class=\"counter\">我是王小四\n    <div class=\"reset\">\n      <div class=\"counter\">我是王小四的大儿子</div>\n    </div>\n  </div>\n</div>\n```","slug":"cssWorld","published":1,"updated":"2018-01-07T09:04:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ukz000ejbzex3a0m1mh","content":"<a id=\"more\"></a>\n<h2 id=\"CSS-World\"><a href=\"#CSS-World\" class=\"headerlink\" title=\"CSS World\"></a>CSS World</h2><h3 id=\"content计数器\"><a href=\"#content计数器\" class=\"headerlink\" title=\"content计数器\"></a>content计数器</h3><p>使用CSS代码实现随着元素数目增多，数值也跟着改变的效果。</p>\n<ul>\n<li><code>counter-reset</code> 计数器重置<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">counter-reset: counter 1; // 初始值为1，名为counter</div><div class=\"line\">counter-reset: inherit; // 继承累加</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>作用：起名并且设置初始值。</p>\n<ul>\n<li><p><code>counter-increment</code> 计数器递增<br>作用：修改递增规则</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">counter-increment: counter 2; // counter递增规则为2</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>counter()/counters()</code><br>作用：显示计数，并可选设置计数类型。后者可嵌套计数。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">content: counter(name, style);  // style为list-style-type的类型</div><div class=\"line\">list-style-type: dis | circle | square ...</div><div class=\"line\">content: counters(name ,string, style); // string是连接符</div></pre></td></tr></table></figure>\n</li>\n<li><p>demo</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.reset</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">counter-reset</span>: feng;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.counter</span><span class=\"selector-pseudo\">::before</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">counters</span>(feng, <span class=\"string\">'-'</span>);</div><div class=\"line\">  <span class=\"attribute\">counter-increment</span>: feng;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reset\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reset\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的大儿子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的二儿子</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reset\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的二儿子的大孙子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的二儿子的二孙子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的二儿子的小孙子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的三儿子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小三<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小四</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reset\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小四的大儿子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-World\"><a href=\"#CSS-World\" class=\"headerlink\" title=\"CSS World\"></a>CSS World</h2><h3 id=\"content计数器\"><a href=\"#content计数器\" class=\"headerlink\" title=\"content计数器\"></a>content计数器</h3><p>使用CSS代码实现随着元素数目增多，数值也跟着改变的效果。</p>\n<ul>\n<li><code>counter-reset</code> 计数器重置<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">counter-reset: counter 1; // 初始值为1，名为counter</div><div class=\"line\">counter-reset: inherit; // 继承累加</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>作用：起名并且设置初始值。</p>\n<ul>\n<li><p><code>counter-increment</code> 计数器递增<br>作用：修改递增规则</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">counter-increment: counter 2; // counter递增规则为2</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>counter()/counters()</code><br>作用：显示计数，并可选设置计数类型。后者可嵌套计数。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">content: counter(name, style);  // style为list-style-type的类型</div><div class=\"line\">list-style-type: dis | circle | square ...</div><div class=\"line\">content: counters(name ,string, style); // string是连接符</div></pre></td></tr></table></figure>\n</li>\n<li><p>demo</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.reset</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">counter-reset</span>: feng;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.counter</span><span class=\"selector-pseudo\">::before</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">counters</span>(feng, <span class=\"string\">'-'</span>);</div><div class=\"line\">  <span class=\"attribute\">counter-increment</span>: feng;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reset\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reset\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的大儿子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的二儿子</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reset\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的二儿子的大孙子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的二儿子的二孙子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的二儿子的小孙子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小二的三儿子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小三<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小四</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reset\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"counter\"</span>&gt;</span>我是王小四的大儿子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"Angular4入门","date":"2017-08-02T02:49:44.000Z","_content":"## Angular4入门\n\n### Angular-cli\n\n#### 全局安装\n```shell\nsudo npm install @angular/cli -g\n\nng generate --help  // 查询帮助\n```\n#### 创建项目\n```sh\nng new <ProjectName>\n```\n相关配置\n```sh\n--dry-run           // boolean, 默认为 false, 若设置 dry-run 则不会创建任何文件\n--verbose           // boolean, 默认为 false\n--link-cli          // boolean, 默认为 false, 自动链接到 @angular/cli 包\n--skip-install      // boolean, 默认为 false, 表示跳过 npm install\n--skip-git          // boolean, 默认为 false, 表示该目录不初始化为 git 仓库\n--skip-tests        // boolean, 默认为 false, 表示不创建 tests 相关文件\n--skip-commit       // boolean, 默认为 false, 表示不进行初始提交\n--directory         // string, 用于设置创建的目录名，默认与应用程序的同名\n--source-dir        // string, 默认为 'src', 用于设置源文件目录的名称\n--style             // string, 默认为 'css', 用于设置选用的样式语法 ('css', 'less' or 'scss')\n--prefix            // string, 默认为 'app', 用于设置创建新组件时，组件选择器使用的前缀\n--mobile            // boolean, 默认为 false,表示是否生成 Progressive Web App 应用程序\n--routing           // boolean, 默认为 false, 表示新增带有路由信息的模块，并添加到根模块中\n--inline-style      // boolean, 默认为 false, 表示当创建新的应用程序时，使用内联样式\n--inline-template   // boolean, 默认为 false, 表示当创建新的应用程序时，使用内联模板\n```\n\n#### 启动项目\n```sh\ncd <ProjectName>\nnpm start -o\nng serve  --open   // 主动打开浏览器窗口\n```\n\n```sh\nng g cl <Name> --spec            // 新建 class\nng g c  <Name>                   // 新建组件\nng g d  <Name>                   // 新建指令\nng g e  <Name>                   // 新建枚举\nng g m  <Name> --routing --spec  // 新建模块\nng g p  <Name> --flat=false      // 新建管道\nng g s  <Name> --flat=false       // 新建服务\n```\n\n#### 单元测试\n```sh\nng test\nnpm test\n```\n\n#### e2e测试\n```sh\nng e2e\n```\n\n#### 构建压缩代码并实施监控变化的应用程序\n```sh\nng build --target=production --watch\n```\n\n#### 自定义构建webpack\n```sh\nng eject\n```\n\n### 实际开发\n\n#### 事件绑定\n\n```html\n<!--xun-com.component.html  -->\n<span>{{title}}</span>\n<!--dom绑定  -->\n<input #myInput type=\"text\">\n<!--鼠标事件  -->\n<button (click)=\"onClick($event, myInput.value)\">鼠标点击事件</button>\n<!--键盘事件  -->\n<input #keyBoard type=\"text\" (keydown.enter)=\"onEnter($event, keyBoard.value)\">\n```\n\n```ts\n<!--xun-com.component.ts  -->\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-xun-com',\n  templateUrl: './xun-com.component.html',\n  styleUrls: ['./xun-com.component.css']\n})\nexport class XunComComponent implements OnInit {\n  title: string;\n  constructor() {\n    this.title = 'title'\n  }\n\n  ngOnInit() {\n  }\n  // 事件方法\n  onClick(event, val) {\n    console.log(event)\n    console.log(val)\n  }\n  onEnter(event, val) {\n    console.log(event)\n    console.log(val)\n  }\n\n}\n```\n\n#### 新建服务\n\n```sh\nng g s mail\n\n// 输出\ninstalling service\n  create src/app/mail.service.spec.ts     // 用于单元测试\n  create src/app/mail.service.ts          // 新建的服务\n  WARNING Service is generated but not provided, it must be provided to be used\n```\n\n#### 配置服务\n```ts\nimport { MailService } from './mail.service';\n\n@NgModule({\n\n  providers: [\n    MailService,\n    {provide: 'apiUrl', useValue: 'https://jsonplaceholder.typicode.com/'}\n  ],     // 注入服务  \n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n#### 更新服务\n```ts\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class MailService {\n  message: string  ='该消息来自MailService';\n  constructor() { }\n}\n```\n\n#### 使用服务\n```ts\n<!--xun-com.component.ts  -->\nimport { MailService } from '../mail.service';\n...\nexport class AppComponent {\n\n  constructor(private mailService: MailService) {}\n  constructor(\n    @Inject(MailService) private mailService,\n    @Inject('apiUrl') private apiUrl) {}\n  <!--二选其一  -->\n  <!-- 不过对于 Type 类型(函数类型) 的对象，我们一般使用 constructor(private mailService: MailService) 方式进行注入。而 Inject 装饰器一般用来注入非 Type 类型的对象。 -->\n}\n```\n```html\n<!--xun-com.component.html  -->\n<p>{{mailService.message}}</p>\n```\n\n#### ngClass\n```html\n<div [ngClass]=\"{mousedown: isMousedown}\"></div>\n```\n\n#### ngStyle\n```html\n<!--font-size支持px % em  -->\n<div>\n   <span [ngStyle]=\"{color: 'red'}\" [style.font-size.px]=\"fontSize\" [style.background-color=\"'red'\"]>\n      Red Text\n   </span>\n</div>\n```\n\n#### ngModel\n- 单独使用ngModel\n需要给表单元素添加`name`，为`ngForm.value`对象添加`property`\n```html\n<input type='text' name='userName' placeholder='Input your userName' ngModel>\n```\n- 单向绑定[ngModel]\n将this.name 初始化绑定到`ngForm.value`上\n```html\n<input type='text' name='userName' placeholder='Input your userName' [ngModel]=\"name\" />\n```\n\n- 双向绑定[(ngModel)]\n```ts\n<!--module中  -->\nimport {FormsModule} from '@angular/forms';\n...\nimports: [\n    ...\n    FormsModule\n  ],\n<!--组件中  -->\nthis.inputValue = 'inputvalue'\n<!--模板中  -->\n<input #myInput type=\"text\" [(ngModel)]=\"inputValue\">\n```\n\n#### @Input\n相当于props 父组件==>子组件\n```ts\n<!--子组件 xun-com.component  -->\nimport { ..., Input } from '@angular/core';\n...\nexport class XunComComponent implements OnInit {\n\n  @Input() msg: string;\n}\n\n<!--父组件 app.component  -->\nexport class AppComponent {\n  msg = {\n    data: '数据'\n  };\n}\n```\n\n```html\n<!--父模板 app.component  -->\n<app-xun-com [msg]=\"msg\"></app-xun-com>\n\n<!--子模板 xun-com.component -->\n<span>msg: {{msg.data}}</span>\n```\n\n#### @Output\nOutput装饰器:  让子组件将信息通过事件的方式返回给父组件\n```ts\n<!--子组件  -->\nimport {Output, EventEmitter } from '@angular/core';\nexport class XunComComponent implements OnInit {\n  @Input() msg: string;\n  @Output() update = new EventEmitter<{title: string}>();\n  constructor() {\n    this.title = 'xun-com'\n    }\n}\n<!--子组件模板  -->\n<button (click)=\"update.emit(title)\">更新</button>\n\n<!--父组件  -->\nexport class AppComponent {\n  constructor() {}\n  onUpdate(title) {\n    console.log(title)\n  }\n}\n<!--父组件模板  -->\n<app-xun-com (update)=\"onUpdate(title)\"></app-xun-com>\n```\n\n#### http模块\n```ts\n<!--导入模块 app.module.ts  -->\n...\nimport { HttpModule } from '@angular/http';\n...\n@NgModule({\n  imports: [BrowserModule, FormsModule, HttpModule],\n  declarations: [AppComponent, UserComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n<!--调用模块  -->\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map';\n...\nexport class MembersComponent implements OnInit {\n  members: Member[];\n\n  constructor(private http: Http) { } // (3)\n\n  ngOnInit() {\n    this.http.get(`api`) // (4)\n        .map(res => res.json()) // (5)\n        .subscribe(data => {\n           if (data) this.members = data; // (6)\n        });\n    }\n}\n```\n\n#### 路由\n- `RouterModule.forRoot()`: 在主模块中定义主要的路由信息\n- `RouterModule.forChild()`: 在子模块中定义路由信息\n- `<router-outlet></router-outlet>`: 路由视图入口位置\n- 动态路由\n```ts\n// 配置文件\n  { path: '/profile/:username', component: ProfileComponent }\n// 组件中\nimport { ActivatedRoute } from '@angular/router';\n...\nexport class SettingsComponent implements OnInit {\n  username: string;\n  constructor(private route: ActivatedRoute) {}\n  ngOnInit() {\n    this.route.params.subscribe((params) => this.username = params.username);\n  }\n}\n```\n- 子路由 children\n- loadChildren 从另一个模块中获取子路由\n\n```ts\n// 子模块\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nexport const ROUTES: Routes = [\n  {\n    path: '',\n    component: SettingsComponent,\n    children: [\n      { path: 'profile', component: ProfileSettingsComponent },\n      { path: 'password', component: PasswordSettingsComponent }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(ROUTES)\n  ],\n})\nexport class SettingsModule {}\n\n// 父模块\nexport const ROUTES: Routes = [\n  {\n    path: 'settings',\n    loadChildren: './settings/settings.module#SettingsModule'\n  }\n];\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(ROUTES)\n  ],\n  // ...\n})\nexport class AppModule {}\n\n```\n\n- Router Directives\n  `routerLink`: 跳转指令\n  ```html\n  <a routerLink=\"/\">Home</a>\n  ```\n- 路由跳转\n  ```ts\n  this.router.navigate(['/profile', event.name]);\n  ```\n\n### NgModule\n@NgModule接收一个用来描述模块属性的元数据对象\n\n- `declarations`:  声明本模块中的视图类\n- `exports`: declarations 的子集，可用于其它模块的组件模板\n- `imports`: 注册其他模块\n- `providers`: 添加全局服务\n- `bootstrap`: 根组件\n\n\n### Directive\n- `Component directive`: 构建UI组件，继承于Directive类\n- `Attribute directive`: 改变组件的外观或行为\n- `Structural directive`: 动态添加或删除DOM元素来改变DOM布局\n\n#### 自定义指令\n- `HostBinding`: 实现元素属性绑定\n- `Input`: 实现自定义元素属性输入\n- `HostListener`: 监听元素的事件\n- `Attribute`: 获取指令宿主元素上的自定义属性\n\n#### ngFor: 使用可迭代的每个项作为模板的上下文来重复模板\n首先更新mail服务，增加数组\n```ts\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class MailService {\n  message: string = '该消息来自MailService';\n  messages: string[] = [\n    '天之骄子，加入修仙之路群',\n    'Shadows，加入修仙之路群',\n    'Keriy，加入修仙之路群'\n  ]\n  constructor() { }\n}\n```\n更新组件模板\n```html\n<ul>\n  <li *ngFor=\"let message of mailService.messages; index as i;\">\n    {{i}} - {{message}}\n  </li>\n</ul>\n```\n\n#### ngIf: 根据表达式的值，显示或移除元素\n```html\n<div *ngIf=\"SHOW\">show</div>\n```\n#### ngSwitch\n```html\n<ul [ngSwitch]='person.country'>\n  <li *ngSwitchCase=\"'UK'\" class='text-success'>\n      {{ person.name }} ({{person.country}})\n  </li>\n   <li *ngSwitchCase=\"'USA'\" class='text-secondary'>\n      {{ person.name }} ({{person.country}})\n  </li>\n  <li *ngSwitchDefault class='text-primary'>\n    {{ person.name }} ({{person.country}})\n  </li>\n</ul>\n```\n\n\n\n### Template Driven Forms\n#### 创建表单\nng内嵌`validators`模块\n使用`userName.valid`判断验证，`userName.errors`输出错误信息\n```ts\n<!--html模板  -->\n<input\n  type=\"text\"\n  required\n  minlength=\"3\"\n  [(ngModel)]=\"username\"\n  #userName=\"ngModel\">\n  {{userName.valid}}\n<div *ngIf=\"userName.errors?.required\">请您输入用户名</div>\n<div *ngIf=\"userName.errors?.minlength\">\n  用户名的长度必须大于 {{userName.errors?.minlength.requiredLength}}，当前的长度为\n    {{userName.errors?.minlength.actualLength}}\n</div>\n\n<!--ts模块  -->\nexport class AppComponent {\n  username = 'semlinker';\n}\n```\n\n\n#### 表单提交\n通过 `#loginForm=\"ngForm\"` 方式获取 `ngForm` 对象，然后通过 `loginForm.value` 来获取表单的值\n<!--html模板  -->\n```html\n<form #loginForm=\"ngForm\" (ngSubmit)=\"onSubmit(loginForm.value)\">\n...\n<button type=\"submit\">提交</button>\n</form>\n```\n<!--绑定方法  -->\n```ts\nonSubmit(value) {\n    console.dir(value);\n  }\n```\n通过`ngModelGroup`指令对表单元素进行细化\n```html\n<form #loginForm=\"ngForm\" (ngSubmit)=\"onSubmit(loginForm.value)\">\n   <fieldset ngModelGroup=\"user\">\n    <input\n     type=\"text\"\n     required\n     minlength=\"3\"\n     name=\"username\"\n     [(ngModel)]=\"username\"\n     #userName=\"ngModel\">\n    <hr>\n    <div *ngIf=\"userName.errors?.required\">请您输入用户名</div>\n    <div *ngIf=\"userName.errors?.minlength\">\n      用户名的长度必须大于 {{userName.errors?.minlength.requiredLength}}，当前的长度为\n        {{userName.errors?.minlength.actualLength}}\n    </div>\n    <input type=\"password\" ngModel name=\"password\">\n   </fieldset>\n    <button type=\"submit\">提交</button>\n    <hr>\n    {{loginForm.value | json}}\n  </form>\n```\n\n#### 验证状态样式\n可以通过 `#userName=\"ngModel\"` 方式获取 `ngModel` 对象，进而通过`userName.dirty`获取控件的状态信息\ncss类\n```css\n.input.ng-invalid {\n  border: 3px solid red;\n}\ninput.ng-valid {\n  border: 3px solid green;\n}\n```\n状态列表\n- `valid`: 表单控件有效\n- `invalid`: 表单控件无效\n- `pristine`: 表单控件值未改变\n- `dirty`: 表单控件值已改变\n- `touched`: 表单控件已被访问过\n- `untouched`: 表单控件未被访问过\n\n#### 单选多选\n```html\n<div *ngFor=\"let version of versions;\">\n  <input\n    [attr.id]=\"version\"\n      name=\"version\"\n\n      required\n      [value]=\"version\"\n      type=\"radio\">\n    <label [attr.for]=\"version\">{{version}}</label>\n</div>\n```\n#### 特点\n- 使用方便，适用于简单环境\n- 通过[(ngModel)]实现数据的双向绑定\n- 最小化组件类的代码\n- 不易于单元测试\n\n### Reactive Form\n`FormControl`: 一个为单个表单控件提供支持的类，可用于跟踪控件的值和验证状态.\n```ts\nngOnInit() {\n  this.myControl = new FormControl('Semlinker');\n}\n```\n\n`FormGroup`: 包含一组 FormControl 实例，可用于跟踪 FormControl 组的值和验证状态.\n<!--组件ts  -->\n```ts\nexport class XunCsComponent implements OnInit {\n\nconstructor() {}\n  // tslint:disable-next-line:member-ordering\n  user: FormGroup;\n  ngOnInit() {\n    this.user = new FormGroup({\n      name: new FormControl(''),\n      account: new FormGroup({\n        email: new FormControl(''),\n        confirm: new FormControl('')\n      })\n    });\n  }\n  onSubmit() {\n    console.log(this.user.value, this.user.valid);\n  }\n}\n```\n<!--组件模板  -->\n```html\n  <form novalidate [formGroup]=\"user\"  (ngSubmit)=\"onSubmit(user)\" >\n  <label>\n    <span>Full name</span>\n    <input\n      type=\"text\"\n      placeholder=\"Your full name\"\n      formControlName=\"name\">\n  </label>\n  <div formGroupName=\"account\">\n    <label>\n      <span>Email address</span>\n      <input\n        type=\"email\"\n        placeholder=\"Your email address\"\n        formControlName=\"email\">\n    </label>\n    <label>\n      <span>Confirm address</span>\n      <input\n        type=\"email\"\n        placeholder=\"Confirm your email address\"\n        formControlName=\"confirm\">\n    </label>\n  </div>\n  <button type=\"submit\">Sign up</button>\n</form>\n```\n\n#### 表单验证\n通过`user.invalid`判断表单验证是否正确\n通过`user.controls.name?.errors`获取错误原因\n```ts\nthis.user = new FormGroup({\n  name: new FormControl('', [Validators.required, Validators.minLength(2)]),\n  account: new FormGroup({\n    email: new FormControl('', Validators.required),\n    confirm: new FormControl('', Validators.required)\n  })\n});\n```\n\n#### FormBuilder\n用来简化`FormGroup`+`FormControl`结合\n```ts\nngOnInit() {\n  this.user = this.fb.group({\n    name: ['', [Validators.required, Validators.minLength(2)]],\n    account: this.fb.group({\n      email: ['', Validators.required],\n      confirm: ['', Validators.required]\n    })\n  });\n}\n```\n\n#### 特点\n- 灵活，适用于复杂场景\n- 简化html模板代码，将验证逻辑抽离到组件类中\n- 方便跟踪表单控件值变化\n- 易于单元测试\n\n### 动态加载已声明的组件\n\n* 定义组件\n* 创建组件容器\n  `ViewChild`：一个属性装饰器，用来从模板视图中获取对应的元素，可以通过模板变量获取，获取时可以通过 read 属性设置查询的条件，就是说可以把此视图转为不同的实例\n  `ViewContainerRef`： 个视图容器，可以在此上面创建、插入、删除组件等等\n  ```ts\n   @ViewChild(\"childContainer\", { read: ViewContainerRef }) container: ViewContainerRef;\n   ```\n* 动态创建组件\n  `ComponentFactoryResolve`: 一个服务，动态加载组件的核心，这个服务可以将一个组件实例呈现到另一个组件视图上\n  通过调用`ComponentFactory`实例的`create()`创建组件\n  应用`ComponentFactoryResolver`服务的`resolveComponentFactory()`方法接受组件类，返回`ComponentFactory`\n  在组件`constructor`注入该服务\n  ```ts\n  constructor(private resolver: ComponentFactoryResolver) {}\n  ```\n  ```ts\n  createComponent(type: string) {\n    // 删除之前的视图\n    this.container.clear();\n    // 创建组件实例\n    const factory: ComponentFactory<ActXunComponent> = this.resolver.resolveComponentFactory(ActXunComponent);\n    // 将组件添加到容器当中\n    this.componentRef = this.container.createComponent(factory);\n    // 为组建复制\n    this.componentRef.instance.type = type;\n    // 订阅组件的输出属性\n    this.componentRef.instance.output.subscribe((msg: string) => console.log(msg));\n  }\n  ```\n  销毁组件\n  ```ts\n  ngOnDestroy() {\n    this.componentRef.destroy();\n  }\n  ```\n* 在`NgModule`的`entryComponents`属性中添加动态组件\n```ts\n@NgModule({\n  ...,\n  declarations: [AppComponent, ActXunComponent],\n  bootstrap: [AppComponent],\n  entryComponents: [ActXunComponent],\n})\nexport class AppModule { }\n```\n\n### 动态加载已声明的表单\n\n### Pipe (管道)\n过滤器，对输入的数据进行处理。\n\n#### Ng内建管道\n- String => String\n  * UpperCasePipe（大写转换）\n  ```html\n  <p>{{'Angular' | uppercase}}</p>\n  <span>输出ANGULAR</span>\n  ```\n\n  * LowerCasePipe (小写转换)\n ```html\n  <p>{{'Angular' | lowercase}}</p>\n  <span>输出angular</span>\n  ```\n\n  * TitleCasePipe (首字母大写)\n   ```html\n  <p>{{'angular' | titlecase}}</p>\n  <span>输出Angular</span>\n  ```\n\n- Number => String\n  * DecimalPipe (数值格式化)\n  ```html\n  <p>{{expression | number[: digiInfo] }}</p>\n  <p>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</p>\n  <p>{{ 3.14159265 | number: '1.3-5' }}</p>\n  <p>输出3.14159</p>\n  ```\n\n  * PercentPipe （百分比格式化）\n  ```html\n  <p>{{expression | percent[: digiInfo] }}</p>\n  <p>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</p>\n  <p>{{ 1 | percent: '1.3-5' }}</p>\n  <p>输出100.000%</p>\n  ```\n\n  * CurrencyPipe (货币格式化)\n  ```html\n  <p>{{expression | currency[: currencyCode[: symbolDisplay[: digiInfo]]] }}</p>\n  <p>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</p>\n  <p>currencyCod是指货币代码，其值为ISO 4217标准，人民币CNY,美元USD,欧元 EUR.\nsymbolDisplay 是一个布尔值，true时显示货币符号($￥) false显示货币码</p>\n  <p>{{ 1 | currency: 'USD': true }}</p>\n  <p>输出100.000%</p>\n  ```\n\n- Object => String\n  * JsonPipe (对象json化)\n  ```html\n  <p>{{ {name: 'xuncs'} | json}}</p>\n  <p>输出{ \"name\": \"xuncs\" }</p>\n  ```\n\n  * DatePipe (日期格式化)\n  ```html\n  <p>{{ new Date() | date: 'shortTime' }}</p>\n  <p>语法：{{expression | date:format}}</p>\n  <p>\n    y 年 y使用4位数字表示年份(2017),yy使用两位数字表示(17)\n    M 月 M 1位或两位数字(2或10、11、12),MM 两位数字表示，前面补0(02)\n    d 日 d 一位或两位数字(9) dd两位数字，前面补0(09)\n    E 星期 EEE 三位字母缩写的星期 EEEE 星期全称\n    j 12小时制时间 j (9 AM) jj (09 AM)\n    h 12小时制小时 h(9) hh (09)\n    H 24小时制小时 H(9) HH (09)\n    m 分 m (5) mm (05)\n    s 秒 s (1) ss (01)\n    z 时区 z China Standard Time\n  </p>\n  ```\n\n- Tools (工具类)\n  * SlicePipe (数组或字符串取切割)\n  ```html\n  <p>{{ 'xuncs' | slice:0:3 }}</p>\n  <p>输出：xun</p>\n  <p>语法：{{expression | slice: start [: end] }}</p>\n  ```\n  * AsyncPipe\n  `Promise`: 返回单个值，不可取消\n  `Observalbe`: 随着时间推移发出多个值，可以取消，支持`map`,`filter`,`reduce`等操作符，延迟执行\n  * I18nPluralPipe\n  * I18nSelectPipe\n\n#### 管道参数\n管道可以接收任意数量的参数。\n用法: 参数之间用`:`隔开\n\n#### 管道链\n将多个管道连接在一起，组成管道链对数据进行处理\n```html\n<p>{{ 'angular' | slice:0:3 | uppercase }}</p>\n<p>输出：ANG</p>\n```\n\n#### 管道分类\n\n- pure管道\n仅当管道输入值变化的时候，才执行转换操作，默认的类型是 pure 类型。(备注：输入值变化是指原始数据类型如：string、number、boolean 等的数值或对象的引用值发生变化)\n\n- impure管道\n在每次变化检测期间都会执行，如鼠标点击或移动都会执行 impure 管道\n\n#### 自定义管道 (@Pipe)\n- 使用 @Pipe 装饰器定义 Pipe 的 metadata 信息，如 Pipe 的名称 - 即 name 属性\n- 实现 PipeTransform 接口中定义的 transform 方法\n```\nng g p  <Name> --flat=false      // 新建管道\n```\n\n```ts\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'xunTest',\n  // 非纯管道\n  pure: false\n})\nexport class XunTestPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return null;\n  }\n\n}\n```\n","source":"_posts/angular4入门.md","raw":"---\ntitle: Angular4入门\ndate: 2017-08-02 10:49:44\ntags:\n\tAngular\n---\n## Angular4入门\n\n### Angular-cli\n\n#### 全局安装\n```shell\nsudo npm install @angular/cli -g\n\nng generate --help  // 查询帮助\n```\n#### 创建项目\n```sh\nng new <ProjectName>\n```\n相关配置\n```sh\n--dry-run           // boolean, 默认为 false, 若设置 dry-run 则不会创建任何文件\n--verbose           // boolean, 默认为 false\n--link-cli          // boolean, 默认为 false, 自动链接到 @angular/cli 包\n--skip-install      // boolean, 默认为 false, 表示跳过 npm install\n--skip-git          // boolean, 默认为 false, 表示该目录不初始化为 git 仓库\n--skip-tests        // boolean, 默认为 false, 表示不创建 tests 相关文件\n--skip-commit       // boolean, 默认为 false, 表示不进行初始提交\n--directory         // string, 用于设置创建的目录名，默认与应用程序的同名\n--source-dir        // string, 默认为 'src', 用于设置源文件目录的名称\n--style             // string, 默认为 'css', 用于设置选用的样式语法 ('css', 'less' or 'scss')\n--prefix            // string, 默认为 'app', 用于设置创建新组件时，组件选择器使用的前缀\n--mobile            // boolean, 默认为 false,表示是否生成 Progressive Web App 应用程序\n--routing           // boolean, 默认为 false, 表示新增带有路由信息的模块，并添加到根模块中\n--inline-style      // boolean, 默认为 false, 表示当创建新的应用程序时，使用内联样式\n--inline-template   // boolean, 默认为 false, 表示当创建新的应用程序时，使用内联模板\n```\n\n#### 启动项目\n```sh\ncd <ProjectName>\nnpm start -o\nng serve  --open   // 主动打开浏览器窗口\n```\n\n```sh\nng g cl <Name> --spec            // 新建 class\nng g c  <Name>                   // 新建组件\nng g d  <Name>                   // 新建指令\nng g e  <Name>                   // 新建枚举\nng g m  <Name> --routing --spec  // 新建模块\nng g p  <Name> --flat=false      // 新建管道\nng g s  <Name> --flat=false       // 新建服务\n```\n\n#### 单元测试\n```sh\nng test\nnpm test\n```\n\n#### e2e测试\n```sh\nng e2e\n```\n\n#### 构建压缩代码并实施监控变化的应用程序\n```sh\nng build --target=production --watch\n```\n\n#### 自定义构建webpack\n```sh\nng eject\n```\n\n### 实际开发\n\n#### 事件绑定\n\n```html\n<!--xun-com.component.html  -->\n<span>{{title}}</span>\n<!--dom绑定  -->\n<input #myInput type=\"text\">\n<!--鼠标事件  -->\n<button (click)=\"onClick($event, myInput.value)\">鼠标点击事件</button>\n<!--键盘事件  -->\n<input #keyBoard type=\"text\" (keydown.enter)=\"onEnter($event, keyBoard.value)\">\n```\n\n```ts\n<!--xun-com.component.ts  -->\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-xun-com',\n  templateUrl: './xun-com.component.html',\n  styleUrls: ['./xun-com.component.css']\n})\nexport class XunComComponent implements OnInit {\n  title: string;\n  constructor() {\n    this.title = 'title'\n  }\n\n  ngOnInit() {\n  }\n  // 事件方法\n  onClick(event, val) {\n    console.log(event)\n    console.log(val)\n  }\n  onEnter(event, val) {\n    console.log(event)\n    console.log(val)\n  }\n\n}\n```\n\n#### 新建服务\n\n```sh\nng g s mail\n\n// 输出\ninstalling service\n  create src/app/mail.service.spec.ts     // 用于单元测试\n  create src/app/mail.service.ts          // 新建的服务\n  WARNING Service is generated but not provided, it must be provided to be used\n```\n\n#### 配置服务\n```ts\nimport { MailService } from './mail.service';\n\n@NgModule({\n\n  providers: [\n    MailService,\n    {provide: 'apiUrl', useValue: 'https://jsonplaceholder.typicode.com/'}\n  ],     // 注入服务  \n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n#### 更新服务\n```ts\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class MailService {\n  message: string  ='该消息来自MailService';\n  constructor() { }\n}\n```\n\n#### 使用服务\n```ts\n<!--xun-com.component.ts  -->\nimport { MailService } from '../mail.service';\n...\nexport class AppComponent {\n\n  constructor(private mailService: MailService) {}\n  constructor(\n    @Inject(MailService) private mailService,\n    @Inject('apiUrl') private apiUrl) {}\n  <!--二选其一  -->\n  <!-- 不过对于 Type 类型(函数类型) 的对象，我们一般使用 constructor(private mailService: MailService) 方式进行注入。而 Inject 装饰器一般用来注入非 Type 类型的对象。 -->\n}\n```\n```html\n<!--xun-com.component.html  -->\n<p>{{mailService.message}}</p>\n```\n\n#### ngClass\n```html\n<div [ngClass]=\"{mousedown: isMousedown}\"></div>\n```\n\n#### ngStyle\n```html\n<!--font-size支持px % em  -->\n<div>\n   <span [ngStyle]=\"{color: 'red'}\" [style.font-size.px]=\"fontSize\" [style.background-color=\"'red'\"]>\n      Red Text\n   </span>\n</div>\n```\n\n#### ngModel\n- 单独使用ngModel\n需要给表单元素添加`name`，为`ngForm.value`对象添加`property`\n```html\n<input type='text' name='userName' placeholder='Input your userName' ngModel>\n```\n- 单向绑定[ngModel]\n将this.name 初始化绑定到`ngForm.value`上\n```html\n<input type='text' name='userName' placeholder='Input your userName' [ngModel]=\"name\" />\n```\n\n- 双向绑定[(ngModel)]\n```ts\n<!--module中  -->\nimport {FormsModule} from '@angular/forms';\n...\nimports: [\n    ...\n    FormsModule\n  ],\n<!--组件中  -->\nthis.inputValue = 'inputvalue'\n<!--模板中  -->\n<input #myInput type=\"text\" [(ngModel)]=\"inputValue\">\n```\n\n#### @Input\n相当于props 父组件==>子组件\n```ts\n<!--子组件 xun-com.component  -->\nimport { ..., Input } from '@angular/core';\n...\nexport class XunComComponent implements OnInit {\n\n  @Input() msg: string;\n}\n\n<!--父组件 app.component  -->\nexport class AppComponent {\n  msg = {\n    data: '数据'\n  };\n}\n```\n\n```html\n<!--父模板 app.component  -->\n<app-xun-com [msg]=\"msg\"></app-xun-com>\n\n<!--子模板 xun-com.component -->\n<span>msg: {{msg.data}}</span>\n```\n\n#### @Output\nOutput装饰器:  让子组件将信息通过事件的方式返回给父组件\n```ts\n<!--子组件  -->\nimport {Output, EventEmitter } from '@angular/core';\nexport class XunComComponent implements OnInit {\n  @Input() msg: string;\n  @Output() update = new EventEmitter<{title: string}>();\n  constructor() {\n    this.title = 'xun-com'\n    }\n}\n<!--子组件模板  -->\n<button (click)=\"update.emit(title)\">更新</button>\n\n<!--父组件  -->\nexport class AppComponent {\n  constructor() {}\n  onUpdate(title) {\n    console.log(title)\n  }\n}\n<!--父组件模板  -->\n<app-xun-com (update)=\"onUpdate(title)\"></app-xun-com>\n```\n\n#### http模块\n```ts\n<!--导入模块 app.module.ts  -->\n...\nimport { HttpModule } from '@angular/http';\n...\n@NgModule({\n  imports: [BrowserModule, FormsModule, HttpModule],\n  declarations: [AppComponent, UserComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n<!--调用模块  -->\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map';\n...\nexport class MembersComponent implements OnInit {\n  members: Member[];\n\n  constructor(private http: Http) { } // (3)\n\n  ngOnInit() {\n    this.http.get(`api`) // (4)\n        .map(res => res.json()) // (5)\n        .subscribe(data => {\n           if (data) this.members = data; // (6)\n        });\n    }\n}\n```\n\n#### 路由\n- `RouterModule.forRoot()`: 在主模块中定义主要的路由信息\n- `RouterModule.forChild()`: 在子模块中定义路由信息\n- `<router-outlet></router-outlet>`: 路由视图入口位置\n- 动态路由\n```ts\n// 配置文件\n  { path: '/profile/:username', component: ProfileComponent }\n// 组件中\nimport { ActivatedRoute } from '@angular/router';\n...\nexport class SettingsComponent implements OnInit {\n  username: string;\n  constructor(private route: ActivatedRoute) {}\n  ngOnInit() {\n    this.route.params.subscribe((params) => this.username = params.username);\n  }\n}\n```\n- 子路由 children\n- loadChildren 从另一个模块中获取子路由\n\n```ts\n// 子模块\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nexport const ROUTES: Routes = [\n  {\n    path: '',\n    component: SettingsComponent,\n    children: [\n      { path: 'profile', component: ProfileSettingsComponent },\n      { path: 'password', component: PasswordSettingsComponent }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(ROUTES)\n  ],\n})\nexport class SettingsModule {}\n\n// 父模块\nexport const ROUTES: Routes = [\n  {\n    path: 'settings',\n    loadChildren: './settings/settings.module#SettingsModule'\n  }\n];\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(ROUTES)\n  ],\n  // ...\n})\nexport class AppModule {}\n\n```\n\n- Router Directives\n  `routerLink`: 跳转指令\n  ```html\n  <a routerLink=\"/\">Home</a>\n  ```\n- 路由跳转\n  ```ts\n  this.router.navigate(['/profile', event.name]);\n  ```\n\n### NgModule\n@NgModule接收一个用来描述模块属性的元数据对象\n\n- `declarations`:  声明本模块中的视图类\n- `exports`: declarations 的子集，可用于其它模块的组件模板\n- `imports`: 注册其他模块\n- `providers`: 添加全局服务\n- `bootstrap`: 根组件\n\n\n### Directive\n- `Component directive`: 构建UI组件，继承于Directive类\n- `Attribute directive`: 改变组件的外观或行为\n- `Structural directive`: 动态添加或删除DOM元素来改变DOM布局\n\n#### 自定义指令\n- `HostBinding`: 实现元素属性绑定\n- `Input`: 实现自定义元素属性输入\n- `HostListener`: 监听元素的事件\n- `Attribute`: 获取指令宿主元素上的自定义属性\n\n#### ngFor: 使用可迭代的每个项作为模板的上下文来重复模板\n首先更新mail服务，增加数组\n```ts\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class MailService {\n  message: string = '该消息来自MailService';\n  messages: string[] = [\n    '天之骄子，加入修仙之路群',\n    'Shadows，加入修仙之路群',\n    'Keriy，加入修仙之路群'\n  ]\n  constructor() { }\n}\n```\n更新组件模板\n```html\n<ul>\n  <li *ngFor=\"let message of mailService.messages; index as i;\">\n    {{i}} - {{message}}\n  </li>\n</ul>\n```\n\n#### ngIf: 根据表达式的值，显示或移除元素\n```html\n<div *ngIf=\"SHOW\">show</div>\n```\n#### ngSwitch\n```html\n<ul [ngSwitch]='person.country'>\n  <li *ngSwitchCase=\"'UK'\" class='text-success'>\n      {{ person.name }} ({{person.country}})\n  </li>\n   <li *ngSwitchCase=\"'USA'\" class='text-secondary'>\n      {{ person.name }} ({{person.country}})\n  </li>\n  <li *ngSwitchDefault class='text-primary'>\n    {{ person.name }} ({{person.country}})\n  </li>\n</ul>\n```\n\n\n\n### Template Driven Forms\n#### 创建表单\nng内嵌`validators`模块\n使用`userName.valid`判断验证，`userName.errors`输出错误信息\n```ts\n<!--html模板  -->\n<input\n  type=\"text\"\n  required\n  minlength=\"3\"\n  [(ngModel)]=\"username\"\n  #userName=\"ngModel\">\n  {{userName.valid}}\n<div *ngIf=\"userName.errors?.required\">请您输入用户名</div>\n<div *ngIf=\"userName.errors?.minlength\">\n  用户名的长度必须大于 {{userName.errors?.minlength.requiredLength}}，当前的长度为\n    {{userName.errors?.minlength.actualLength}}\n</div>\n\n<!--ts模块  -->\nexport class AppComponent {\n  username = 'semlinker';\n}\n```\n\n\n#### 表单提交\n通过 `#loginForm=\"ngForm\"` 方式获取 `ngForm` 对象，然后通过 `loginForm.value` 来获取表单的值\n<!--html模板  -->\n```html\n<form #loginForm=\"ngForm\" (ngSubmit)=\"onSubmit(loginForm.value)\">\n...\n<button type=\"submit\">提交</button>\n</form>\n```\n<!--绑定方法  -->\n```ts\nonSubmit(value) {\n    console.dir(value);\n  }\n```\n通过`ngModelGroup`指令对表单元素进行细化\n```html\n<form #loginForm=\"ngForm\" (ngSubmit)=\"onSubmit(loginForm.value)\">\n   <fieldset ngModelGroup=\"user\">\n    <input\n     type=\"text\"\n     required\n     minlength=\"3\"\n     name=\"username\"\n     [(ngModel)]=\"username\"\n     #userName=\"ngModel\">\n    <hr>\n    <div *ngIf=\"userName.errors?.required\">请您输入用户名</div>\n    <div *ngIf=\"userName.errors?.minlength\">\n      用户名的长度必须大于 {{userName.errors?.minlength.requiredLength}}，当前的长度为\n        {{userName.errors?.minlength.actualLength}}\n    </div>\n    <input type=\"password\" ngModel name=\"password\">\n   </fieldset>\n    <button type=\"submit\">提交</button>\n    <hr>\n    {{loginForm.value | json}}\n  </form>\n```\n\n#### 验证状态样式\n可以通过 `#userName=\"ngModel\"` 方式获取 `ngModel` 对象，进而通过`userName.dirty`获取控件的状态信息\ncss类\n```css\n.input.ng-invalid {\n  border: 3px solid red;\n}\ninput.ng-valid {\n  border: 3px solid green;\n}\n```\n状态列表\n- `valid`: 表单控件有效\n- `invalid`: 表单控件无效\n- `pristine`: 表单控件值未改变\n- `dirty`: 表单控件值已改变\n- `touched`: 表单控件已被访问过\n- `untouched`: 表单控件未被访问过\n\n#### 单选多选\n```html\n<div *ngFor=\"let version of versions;\">\n  <input\n    [attr.id]=\"version\"\n      name=\"version\"\n\n      required\n      [value]=\"version\"\n      type=\"radio\">\n    <label [attr.for]=\"version\">{{version}}</label>\n</div>\n```\n#### 特点\n- 使用方便，适用于简单环境\n- 通过[(ngModel)]实现数据的双向绑定\n- 最小化组件类的代码\n- 不易于单元测试\n\n### Reactive Form\n`FormControl`: 一个为单个表单控件提供支持的类，可用于跟踪控件的值和验证状态.\n```ts\nngOnInit() {\n  this.myControl = new FormControl('Semlinker');\n}\n```\n\n`FormGroup`: 包含一组 FormControl 实例，可用于跟踪 FormControl 组的值和验证状态.\n<!--组件ts  -->\n```ts\nexport class XunCsComponent implements OnInit {\n\nconstructor() {}\n  // tslint:disable-next-line:member-ordering\n  user: FormGroup;\n  ngOnInit() {\n    this.user = new FormGroup({\n      name: new FormControl(''),\n      account: new FormGroup({\n        email: new FormControl(''),\n        confirm: new FormControl('')\n      })\n    });\n  }\n  onSubmit() {\n    console.log(this.user.value, this.user.valid);\n  }\n}\n```\n<!--组件模板  -->\n```html\n  <form novalidate [formGroup]=\"user\"  (ngSubmit)=\"onSubmit(user)\" >\n  <label>\n    <span>Full name</span>\n    <input\n      type=\"text\"\n      placeholder=\"Your full name\"\n      formControlName=\"name\">\n  </label>\n  <div formGroupName=\"account\">\n    <label>\n      <span>Email address</span>\n      <input\n        type=\"email\"\n        placeholder=\"Your email address\"\n        formControlName=\"email\">\n    </label>\n    <label>\n      <span>Confirm address</span>\n      <input\n        type=\"email\"\n        placeholder=\"Confirm your email address\"\n        formControlName=\"confirm\">\n    </label>\n  </div>\n  <button type=\"submit\">Sign up</button>\n</form>\n```\n\n#### 表单验证\n通过`user.invalid`判断表单验证是否正确\n通过`user.controls.name?.errors`获取错误原因\n```ts\nthis.user = new FormGroup({\n  name: new FormControl('', [Validators.required, Validators.minLength(2)]),\n  account: new FormGroup({\n    email: new FormControl('', Validators.required),\n    confirm: new FormControl('', Validators.required)\n  })\n});\n```\n\n#### FormBuilder\n用来简化`FormGroup`+`FormControl`结合\n```ts\nngOnInit() {\n  this.user = this.fb.group({\n    name: ['', [Validators.required, Validators.minLength(2)]],\n    account: this.fb.group({\n      email: ['', Validators.required],\n      confirm: ['', Validators.required]\n    })\n  });\n}\n```\n\n#### 特点\n- 灵活，适用于复杂场景\n- 简化html模板代码，将验证逻辑抽离到组件类中\n- 方便跟踪表单控件值变化\n- 易于单元测试\n\n### 动态加载已声明的组件\n\n* 定义组件\n* 创建组件容器\n  `ViewChild`：一个属性装饰器，用来从模板视图中获取对应的元素，可以通过模板变量获取，获取时可以通过 read 属性设置查询的条件，就是说可以把此视图转为不同的实例\n  `ViewContainerRef`： 个视图容器，可以在此上面创建、插入、删除组件等等\n  ```ts\n   @ViewChild(\"childContainer\", { read: ViewContainerRef }) container: ViewContainerRef;\n   ```\n* 动态创建组件\n  `ComponentFactoryResolve`: 一个服务，动态加载组件的核心，这个服务可以将一个组件实例呈现到另一个组件视图上\n  通过调用`ComponentFactory`实例的`create()`创建组件\n  应用`ComponentFactoryResolver`服务的`resolveComponentFactory()`方法接受组件类，返回`ComponentFactory`\n  在组件`constructor`注入该服务\n  ```ts\n  constructor(private resolver: ComponentFactoryResolver) {}\n  ```\n  ```ts\n  createComponent(type: string) {\n    // 删除之前的视图\n    this.container.clear();\n    // 创建组件实例\n    const factory: ComponentFactory<ActXunComponent> = this.resolver.resolveComponentFactory(ActXunComponent);\n    // 将组件添加到容器当中\n    this.componentRef = this.container.createComponent(factory);\n    // 为组建复制\n    this.componentRef.instance.type = type;\n    // 订阅组件的输出属性\n    this.componentRef.instance.output.subscribe((msg: string) => console.log(msg));\n  }\n  ```\n  销毁组件\n  ```ts\n  ngOnDestroy() {\n    this.componentRef.destroy();\n  }\n  ```\n* 在`NgModule`的`entryComponents`属性中添加动态组件\n```ts\n@NgModule({\n  ...,\n  declarations: [AppComponent, ActXunComponent],\n  bootstrap: [AppComponent],\n  entryComponents: [ActXunComponent],\n})\nexport class AppModule { }\n```\n\n### 动态加载已声明的表单\n\n### Pipe (管道)\n过滤器，对输入的数据进行处理。\n\n#### Ng内建管道\n- String => String\n  * UpperCasePipe（大写转换）\n  ```html\n  <p>{{'Angular' | uppercase}}</p>\n  <span>输出ANGULAR</span>\n  ```\n\n  * LowerCasePipe (小写转换)\n ```html\n  <p>{{'Angular' | lowercase}}</p>\n  <span>输出angular</span>\n  ```\n\n  * TitleCasePipe (首字母大写)\n   ```html\n  <p>{{'angular' | titlecase}}</p>\n  <span>输出Angular</span>\n  ```\n\n- Number => String\n  * DecimalPipe (数值格式化)\n  ```html\n  <p>{{expression | number[: digiInfo] }}</p>\n  <p>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</p>\n  <p>{{ 3.14159265 | number: '1.3-5' }}</p>\n  <p>输出3.14159</p>\n  ```\n\n  * PercentPipe （百分比格式化）\n  ```html\n  <p>{{expression | percent[: digiInfo] }}</p>\n  <p>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</p>\n  <p>{{ 1 | percent: '1.3-5' }}</p>\n  <p>输出100.000%</p>\n  ```\n\n  * CurrencyPipe (货币格式化)\n  ```html\n  <p>{{expression | currency[: currencyCode[: symbolDisplay[: digiInfo]]] }}</p>\n  <p>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</p>\n  <p>currencyCod是指货币代码，其值为ISO 4217标准，人民币CNY,美元USD,欧元 EUR.\nsymbolDisplay 是一个布尔值，true时显示货币符号($￥) false显示货币码</p>\n  <p>{{ 1 | currency: 'USD': true }}</p>\n  <p>输出100.000%</p>\n  ```\n\n- Object => String\n  * JsonPipe (对象json化)\n  ```html\n  <p>{{ {name: 'xuncs'} | json}}</p>\n  <p>输出{ \"name\": \"xuncs\" }</p>\n  ```\n\n  * DatePipe (日期格式化)\n  ```html\n  <p>{{ new Date() | date: 'shortTime' }}</p>\n  <p>语法：{{expression | date:format}}</p>\n  <p>\n    y 年 y使用4位数字表示年份(2017),yy使用两位数字表示(17)\n    M 月 M 1位或两位数字(2或10、11、12),MM 两位数字表示，前面补0(02)\n    d 日 d 一位或两位数字(9) dd两位数字，前面补0(09)\n    E 星期 EEE 三位字母缩写的星期 EEEE 星期全称\n    j 12小时制时间 j (9 AM) jj (09 AM)\n    h 12小时制小时 h(9) hh (09)\n    H 24小时制小时 H(9) HH (09)\n    m 分 m (5) mm (05)\n    s 秒 s (1) ss (01)\n    z 时区 z China Standard Time\n  </p>\n  ```\n\n- Tools (工具类)\n  * SlicePipe (数组或字符串取切割)\n  ```html\n  <p>{{ 'xuncs' | slice:0:3 }}</p>\n  <p>输出：xun</p>\n  <p>语法：{{expression | slice: start [: end] }}</p>\n  ```\n  * AsyncPipe\n  `Promise`: 返回单个值，不可取消\n  `Observalbe`: 随着时间推移发出多个值，可以取消，支持`map`,`filter`,`reduce`等操作符，延迟执行\n  * I18nPluralPipe\n  * I18nSelectPipe\n\n#### 管道参数\n管道可以接收任意数量的参数。\n用法: 参数之间用`:`隔开\n\n#### 管道链\n将多个管道连接在一起，组成管道链对数据进行处理\n```html\n<p>{{ 'angular' | slice:0:3 | uppercase }}</p>\n<p>输出：ANG</p>\n```\n\n#### 管道分类\n\n- pure管道\n仅当管道输入值变化的时候，才执行转换操作，默认的类型是 pure 类型。(备注：输入值变化是指原始数据类型如：string、number、boolean 等的数值或对象的引用值发生变化)\n\n- impure管道\n在每次变化检测期间都会执行，如鼠标点击或移动都会执行 impure 管道\n\n#### 自定义管道 (@Pipe)\n- 使用 @Pipe 装饰器定义 Pipe 的 metadata 信息，如 Pipe 的名称 - 即 name 属性\n- 实现 PipeTransform 接口中定义的 transform 方法\n```\nng g p  <Name> --flat=false      // 新建管道\n```\n\n```ts\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'xunTest',\n  // 非纯管道\n  pure: false\n})\nexport class XunTestPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return null;\n  }\n\n}\n```\n","slug":"angular4入门","published":1,"updated":"2017-10-15T02:51:58.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ul2000fjbzeou6vdrip","content":"<h2 id=\"Angular4入门\"><a href=\"#Angular4入门\" class=\"headerlink\" title=\"Angular4入门\"></a>Angular4入门</h2><h3 id=\"Angular-cli\"><a href=\"#Angular-cli\" class=\"headerlink\" title=\"Angular-cli\"></a>Angular-cli</h3><h4 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install @angular/cli -g</div><div class=\"line\"></div><div class=\"line\">ng generate --help  // 查询帮助</div></pre></td></tr></table></figure>\n<h4 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng new &lt;ProjectName&gt;</div></pre></td></tr></table></figure>\n<p>相关配置<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">--dry-run           // boolean, 默认为 <span class=\"literal\">false</span>, 若设置 dry-run 则不会创建任何文件</div><div class=\"line\">--verbose           // boolean, 默认为 <span class=\"literal\">false</span></div><div class=\"line\">--link-cli          // boolean, 默认为 <span class=\"literal\">false</span>, 自动链接到 @angular/cli 包</div><div class=\"line\">--skip-install      // boolean, 默认为 <span class=\"literal\">false</span>, 表示跳过 npm install</div><div class=\"line\">--skip-git          // boolean, 默认为 <span class=\"literal\">false</span>, 表示该目录不初始化为 git 仓库</div><div class=\"line\">--skip-tests        // boolean, 默认为 <span class=\"literal\">false</span>, 表示不创建 tests 相关文件</div><div class=\"line\">--skip-commit       // boolean, 默认为 <span class=\"literal\">false</span>, 表示不进行初始提交</div><div class=\"line\">--directory         // string, 用于设置创建的目录名，默认与应用程序的同名</div><div class=\"line\">--<span class=\"built_in\">source</span>-dir        // string, 默认为 <span class=\"string\">'src'</span>, 用于设置源文件目录的名称</div><div class=\"line\">--style             // string, 默认为 <span class=\"string\">'css'</span>, 用于设置选用的样式语法 (<span class=\"string\">'css'</span>, <span class=\"string\">'less'</span> or <span class=\"string\">'scss'</span>)</div><div class=\"line\">--prefix            // string, 默认为 <span class=\"string\">'app'</span>, 用于设置创建新组件时，组件选择器使用的前缀</div><div class=\"line\">--mobile            // boolean, 默认为 <span class=\"literal\">false</span>,表示是否生成 Progressive Web App 应用程序</div><div class=\"line\">--routing           // boolean, 默认为 <span class=\"literal\">false</span>, 表示新增带有路由信息的模块，并添加到根模块中</div><div class=\"line\">--inline-style      // boolean, 默认为 <span class=\"literal\">false</span>, 表示当创建新的应用程序时，使用内联样式</div><div class=\"line\">--inline-template   // boolean, 默认为 <span class=\"literal\">false</span>, 表示当创建新的应用程序时，使用内联模板</div></pre></td></tr></table></figure></p>\n<h4 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> &lt;ProjectName&gt;</div><div class=\"line\">npm start -o</div><div class=\"line\">ng serve  --open   // 主动打开浏览器窗口</div></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g cl &lt;Name&gt; --spec            // 新建 class</div><div class=\"line\">ng g c  &lt;Name&gt;                   // 新建组件</div><div class=\"line\">ng g d  &lt;Name&gt;                   // 新建指令</div><div class=\"line\">ng g e  &lt;Name&gt;                   // 新建枚举</div><div class=\"line\">ng g m  &lt;Name&gt; --routing --spec  // 新建模块</div><div class=\"line\">ng g p  &lt;Name&gt; --flat=<span class=\"literal\">false</span>      // 新建管道</div><div class=\"line\">ng g s  &lt;Name&gt; --flat=<span class=\"literal\">false</span>       // 新建服务</div></pre></td></tr></table></figure>\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng <span class=\"built_in\">test</span></div><div class=\"line\">npm <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h4 id=\"e2e测试\"><a href=\"#e2e测试\" class=\"headerlink\" title=\"e2e测试\"></a>e2e测试</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng e2e</div></pre></td></tr></table></figure>\n<h4 id=\"构建压缩代码并实施监控变化的应用程序\"><a href=\"#构建压缩代码并实施监控变化的应用程序\" class=\"headerlink\" title=\"构建压缩代码并实施监控变化的应用程序\"></a>构建压缩代码并实施监控变化的应用程序</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng build --target=production --watch</div></pre></td></tr></table></figure>\n<h4 id=\"自定义构建webpack\"><a href=\"#自定义构建webpack\" class=\"headerlink\" title=\"自定义构建webpack\"></a>自定义构建webpack</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng eject</div></pre></td></tr></table></figure>\n<h3 id=\"实际开发\"><a href=\"#实际开发\" class=\"headerlink\" title=\"实际开发\"></a>实际开发</h3><h4 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--xun-com.component.html  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--dom绑定  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">myInput</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--鼠标事件  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"onClick($event, myInput.value)\"</span>&gt;</span>鼠标点击事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--键盘事件  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">keyBoard</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> (<span class=\"attr\">keydown.enter</span>)=<span class=\"string\">\"onEnter($event, keyBoard.value)\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--xun-com.component.ts  --&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-xun-com'</span>,</div><div class=\"line\">  templateUrl: <span class=\"string\">'./xun-com.component.html'</span>,</div><div class=\"line\">  styleUrls: [<span class=\"string\">'./xun-com.component.css'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> XunComComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  title: <span class=\"built_in\">string</span>;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.title = <span class=\"string\">'title'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 事件方法</span></div><div class=\"line\">  onClick(event, val) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(event)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(val)</div><div class=\"line\">  &#125;</div><div class=\"line\">  onEnter(event, val) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(event)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(val)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"新建服务\"><a href=\"#新建服务\" class=\"headerlink\" title=\"新建服务\"></a>新建服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g s mail</div><div class=\"line\"></div><div class=\"line\">// 输出</div><div class=\"line\">installing service</div><div class=\"line\">  create src/app/mail.service.spec.ts     // 用于单元测试</div><div class=\"line\">  create src/app/mail.service.ts          // 新建的服务</div><div class=\"line\">  WARNING Service is generated but not provided, it must be provided to be used</div></pre></td></tr></table></figure>\n<h4 id=\"配置服务\"><a href=\"#配置服务\" class=\"headerlink\" title=\"配置服务\"></a>配置服务</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; MailService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./mail.service'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\"></div><div class=\"line\">  providers: [</div><div class=\"line\">    MailService,</div><div class=\"line\">    &#123;provide: <span class=\"string\">'apiUrl'</span>, useValue: <span class=\"string\">'https://jsonplaceholder.typicode.com/'</span>&#125;</div><div class=\"line\">  ],     <span class=\"comment\">// 注入服务  </span></div><div class=\"line\">  bootstrap: [AppComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"更新服务\"><a href=\"#更新服务\" class=\"headerlink\" title=\"更新服务\"></a>更新服务</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Injectable</span>()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MailService &#123;</div><div class=\"line\">  message: <span class=\"built_in\">string</span>  =<span class=\"string\">'该消息来自MailService'</span>;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"使用服务\"><a href=\"#使用服务\" class=\"headerlink\" title=\"使用服务\"></a>使用服务</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--xun-com.component.ts  --&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MailService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../mail.service'</span>;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> mailService: MailService</span>) &#123;&#125;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></div><div class=\"line\">    @Inject(MailService) private mailService,</div><div class=\"line\">    <span class=\"meta\">@Inject</span>(<span class=\"string\">'apiUrl'</span>) <span class=\"keyword\">private</span> apiUrl) &#123;&#125;</div><div class=\"line\">  &lt;!--二选其一  --&gt;</div><div class=\"line\">  &lt;!-- 不过对于 Type 类型(函数类型) 的对象，我们一般使用 <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> mailService: MailService</span>) 方式进行注入。而 Inject 装饰器一般用来注入非 Type 类型的对象。 --&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--xun-com.component.html  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;mailService.message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"ngClass\"><a href=\"#ngClass\" class=\"headerlink\" title=\"ngClass\"></a>ngClass</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123;mousedown: isMousedown&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"ngStyle\"><a href=\"#ngStyle\" class=\"headerlink\" title=\"ngStyle\"></a>ngStyle</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--font-size支持px % em  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> [<span class=\"attr\">ngStyle</span>]=<span class=\"string\">\"&#123;color: 'red'&#125;\"</span> [<span class=\"attr\">style.font-size.px</span>]=<span class=\"string\">\"fontSize\"</span> [<span class=\"attr\">style.background-color</span>=<span class=\"string\">\"'red'\"</span>]&gt;</span></div><div class=\"line\">      Red Text</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"ngModel\"><a href=\"#ngModel\" class=\"headerlink\" title=\"ngModel\"></a>ngModel</h4><ul>\n<li><p>单独使用ngModel<br>需要给表单元素添加<code>name</code>，为<code>ngForm.value</code>对象添加<code>property</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'userName'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">'Input your userName'</span> <span class=\"attr\">ngModel</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>单向绑定[ngModel]<br>将this.name 初始化绑定到<code>ngForm.value</code>上</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'userName'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">'Input your userName'</span> [<span class=\"attr\">ngModel</span>]=<span class=\"string\">\"name\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>双向绑定[(ngModel)]</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--<span class=\"keyword\">module</span>中  --&gt;</div><div class=\"line\">import &#123;FormsModule&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\">...</div><div class=\"line\">imports: [</div><div class=\"line\">    ...</div><div class=\"line\">    FormsModule</div><div class=\"line\">  ],</div><div class=\"line\">&lt;!--组件中  --&gt;</div><div class=\"line\"><span class=\"keyword\">this</span>.inputValue = <span class=\"string\">'inputvalue'</span></div><div class=\"line\">&lt;!--模板中  --&gt;</div><div class=\"line\">&lt;input #myInput <span class=\"keyword\">type</span>=<span class=\"string\">\"text\"</span> [(ngModel)]=<span class=\"string\">\"inputValue\"</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input\"></a>@Input</h4><p>相当于props 父组件==&gt;子组件<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--子组件 xun-com.component  --&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ..., Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> XunComComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Input</span>() msg: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;!--父组件 app.component  --&gt;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</div><div class=\"line\">  msg = &#123;</div><div class=\"line\">    data: <span class=\"string\">'数据'</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--父模板 app.component  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-xun-com</span> [<span class=\"attr\">msg</span>]=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-xun-com</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--子模板 xun-com.component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>msg: &#123;&#123;msg.data&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output\"></a>@Output</h4><p>Output装饰器:  让子组件将信息通过事件的方式返回给父组件<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--子组件  --&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Output, EventEmitter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> XunComComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"meta\">@Input</span>() msg: <span class=\"built_in\">string</span>;</div><div class=\"line\">  <span class=\"meta\">@Output</span>() update = <span class=\"keyword\">new</span> EventEmitter&lt;&#123;title: <span class=\"built_in\">string</span>&#125;&gt;();</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.title = <span class=\"string\">'xun-com'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;!--子组件模板  --&gt;</div><div class=\"line\">&lt;button (click)=<span class=\"string\">\"update.emit(title)\"</span>&gt;更新&lt;<span class=\"regexp\">/button&gt;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">&lt;!--父组件  --&gt;</span></div><div class=\"line\"><span class=\"regexp\">export class AppComponent &#123;</span></div><div class=\"line\"><span class=\"regexp\">  constructor() &#123;&#125;</span></div><div class=\"line\"><span class=\"regexp\">  onUpdate(title) &#123;</span></div><div class=\"line\"><span class=\"regexp\">    console.log(title)</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\">&lt;!--父组件模板  --&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;app-xun-com (update)=\"onUpdate(title)\"&gt;&lt;/</span>app-xun-com&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"http模块\"><a href=\"#http模块\" class=\"headerlink\" title=\"http模块\"></a>http模块</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--导入模块 app.module.ts  --&gt;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  imports: [BrowserModule, FormsModule, HttpModule],</div><div class=\"line\">  declarations: [AppComponent, UserComponent],</div><div class=\"line\">  bootstrap: [AppComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">&lt;!--调用模块  --&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Http &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/map'</span>;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MembersComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  members: Member[];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: Http</span>) &#123; &#125; <span class=\"comment\">// (3)</span></div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.http.get(<span class=\"string\">`api`</span>) <span class=\"comment\">// (4)</span></div><div class=\"line\">        .map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()) <span class=\"comment\">// (5)</span></div><div class=\"line\">        .subscribe(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (data) <span class=\"keyword\">this</span>.members = data; <span class=\"comment\">// (6)</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><ul>\n<li><code>RouterModule.forRoot()</code>: 在主模块中定义主要的路由信息</li>\n<li><code>RouterModule.forChild()</code>: 在子模块中定义路由信息</li>\n<li><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>: 路由视图入口位置</li>\n<li><p>动态路由</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 配置文件</span></div><div class=\"line\">  &#123; path: <span class=\"string\">'/profile/:username'</span>, component: ProfileComponent &#125;</div><div class=\"line\"><span class=\"comment\">// 组件中</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SettingsComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  username: <span class=\"built_in\">string</span>;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> route: ActivatedRoute</span>) &#123;&#125;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.route.params.subscribe(<span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> <span class=\"keyword\">this</span>.username = params.username);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>子路由 children</p>\n</li>\n<li>loadChildren 从另一个模块中获取子路由</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 子模块</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ROUTES: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">''</span>,</div><div class=\"line\">    component: SettingsComponent,</div><div class=\"line\">    children: [</div><div class=\"line\">      &#123; path: <span class=\"string\">'profile'</span>, component: ProfileSettingsComponent &#125;,</div><div class=\"line\">      &#123; path: <span class=\"string\">'password'</span>, component: PasswordSettingsComponent &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    RouterModule.forChild(ROUTES)</div><div class=\"line\">  ],</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SettingsModule &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 父模块</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ROUTES: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'settings'</span>,</div><div class=\"line\">    loadChildren: <span class=\"string\">'./settings/settings.module#SettingsModule'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    RouterModule.forRoot(ROUTES)</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Router Directives<br><code>routerLink</code>: 跳转指令</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>路由跳转</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'/profile'</span>, event.name]);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"NgModule\"><a href=\"#NgModule\" class=\"headerlink\" title=\"NgModule\"></a>NgModule</h3><p>@NgModule接收一个用来描述模块属性的元数据对象</p>\n<ul>\n<li><code>declarations</code>:  声明本模块中的视图类</li>\n<li><code>exports</code>: declarations 的子集，可用于其它模块的组件模板</li>\n<li><code>imports</code>: 注册其他模块</li>\n<li><code>providers</code>: 添加全局服务</li>\n<li><code>bootstrap</code>: 根组件</li>\n</ul>\n<h3 id=\"Directive\"><a href=\"#Directive\" class=\"headerlink\" title=\"Directive\"></a>Directive</h3><ul>\n<li><code>Component directive</code>: 构建UI组件，继承于Directive类</li>\n<li><code>Attribute directive</code>: 改变组件的外观或行为</li>\n<li><code>Structural directive</code>: 动态添加或删除DOM元素来改变DOM布局</li>\n</ul>\n<h4 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h4><ul>\n<li><code>HostBinding</code>: 实现元素属性绑定</li>\n<li><code>Input</code>: 实现自定义元素属性输入</li>\n<li><code>HostListener</code>: 监听元素的事件</li>\n<li><code>Attribute</code>: 获取指令宿主元素上的自定义属性</li>\n</ul>\n<h4 id=\"ngFor-使用可迭代的每个项作为模板的上下文来重复模板\"><a href=\"#ngFor-使用可迭代的每个项作为模板的上下文来重复模板\" class=\"headerlink\" title=\"ngFor: 使用可迭代的每个项作为模板的上下文来重复模板\"></a>ngFor: 使用可迭代的每个项作为模板的上下文来重复模板</h4><p>首先更新mail服务，增加数组<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Injectable</span>()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MailService &#123;</div><div class=\"line\">  message: <span class=\"built_in\">string</span> = <span class=\"string\">'该消息来自MailService'</span>;</div><div class=\"line\">  messages: <span class=\"built_in\">string</span>[] = [</div><div class=\"line\">    <span class=\"string\">'天之骄子，加入修仙之路群'</span>,</div><div class=\"line\">    <span class=\"string\">'Shadows，加入修仙之路群'</span>,</div><div class=\"line\">    <span class=\"string\">'Keriy，加入修仙之路群'</span></div><div class=\"line\">  ]</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更新组件模板<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let message of mailService.messages; index as i;\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123;i&#125;&#125; - &#123;&#123;message&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"ngIf-根据表达式的值，显示或移除元素\"><a href=\"#ngIf-根据表达式的值，显示或移除元素\" class=\"headerlink\" title=\"ngIf: 根据表达式的值，显示或移除元素\"></a>ngIf: 根据表达式的值，显示或移除元素</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"SHOW\"</span>&gt;</span>show<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"ngSwitch\"><a href=\"#ngSwitch\" class=\"headerlink\" title=\"ngSwitch\"></a>ngSwitch</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> [<span class=\"attr\">ngSwitch</span>]=<span class=\"string\">'person.country'</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'UK'\"</span> <span class=\"attr\">class</span>=<span class=\"string\">'text-success'</span>&gt;</span></div><div class=\"line\">      &#123;&#123; person.name &#125;&#125; (&#123;&#123;person.country&#125;&#125;)</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'USA'\"</span> <span class=\"attr\">class</span>=<span class=\"string\">'text-secondary'</span>&gt;</span></div><div class=\"line\">      &#123;&#123; person.name &#125;&#125; (&#123;&#123;person.country&#125;&#125;)</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngSwitchDefault</span> <span class=\"attr\">class</span>=<span class=\"string\">'text-primary'</span>&gt;</span></div><div class=\"line\">    &#123;&#123; person.name &#125;&#125; (&#123;&#123;person.country&#125;&#125;)</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Template-Driven-Forms\"><a href=\"#Template-Driven-Forms\" class=\"headerlink\" title=\"Template Driven Forms\"></a>Template Driven Forms</h3><h4 id=\"创建表单\"><a href=\"#创建表单\" class=\"headerlink\" title=\"创建表单\"></a>创建表单</h4><p>ng内嵌<code>validators</code>模块<br>使用<code>userName.valid</code>判断验证，<code>userName.errors</code>输出错误信息<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--html模板  --&gt;</div><div class=\"line\">&lt;input</div><div class=\"line\">  <span class=\"keyword\">type</span>=<span class=\"string\">\"text\"</span></div><div class=\"line\">  required</div><div class=\"line\">  minlength=<span class=\"string\">\"3\"</span></div><div class=\"line\">  [(ngModel)]=<span class=\"string\">\"username\"</span></div><div class=\"line\">  #userName=<span class=\"string\">\"ngModel\"</span>&gt;</div><div class=\"line\">  &#123;&#123;userName.valid&#125;&#125;</div><div class=\"line\">&lt;div *ngIf=<span class=\"string\">\"userName.errors?.required\"</span>&gt;请您输入用户名&lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;div *ngIf=\"userName.errors?.minlength\"&gt;</span></div><div class=\"line\"><span class=\"regexp\">  用户名的长度必须大于 &#123;&#123;userName.errors?.minlength.requiredLength&#125;&#125;，当前的长度为</span></div><div class=\"line\"><span class=\"regexp\">    &#123;&#123;userName.errors?.minlength.actualLength&#125;&#125;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--ts模块  --&gt;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</div><div class=\"line\">  username = <span class=\"string\">'semlinker'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"表单提交\"><a href=\"#表单提交\" class=\"headerlink\" title=\"表单提交\"></a>表单提交</h4><p>通过 <code>#loginForm=&quot;ngForm&quot;</code> 方式获取 <code>ngForm</code> 对象，然后通过 <code>loginForm.value</code> 来获取表单的值<br><!--html模板  --><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">loginForm</span>=<span class=\"string\">\"ngForm\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(loginForm.value)\"</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<!--绑定方法  -->\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">onSubmit(value) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.dir(value);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>通过<code>ngModelGroup</code>指令对表单元素进行细化<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">loginForm</span>=<span class=\"string\">\"ngForm\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(loginForm.value)\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">fieldset</span> <span class=\"attr\">ngModelGroup</span>=<span class=\"string\">\"user\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\"><span class=\"tag\">     <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\"><span class=\"tag\">     <span class=\"attr\">required</span></span></div><div class=\"line\"><span class=\"tag\">     <span class=\"attr\">minlength</span>=<span class=\"string\">\"3\"</span></span></div><div class=\"line\"><span class=\"tag\">     <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">     [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">     #<span class=\"attr\">userName</span>=<span class=\"string\">\"ngModel\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"userName.errors?.required\"</span>&gt;</span>请您输入用户名<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"userName.errors?.minlength\"</span>&gt;</span></div><div class=\"line\">      用户名的长度必须大于 &#123;&#123;userName.errors?.minlength.requiredLength&#125;&#125;，当前的长度为</div><div class=\"line\">        &#123;&#123;userName.errors?.minlength.actualLength&#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">ngModel</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></div><div class=\"line\">    &#123;&#123;loginForm.value | json&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"验证状态样式\"><a href=\"#验证状态样式\" class=\"headerlink\" title=\"验证状态样式\"></a>验证状态样式</h4><p>可以通过 <code>#userName=&quot;ngModel&quot;</code> 方式获取 <code>ngModel</code> 对象，进而通过<code>userName.dirty</code>获取控件的状态信息<br>css类<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.input</span><span class=\"selector-class\">.ng-invalid</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-class\">.ng-valid</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>状态列表</p>\n<ul>\n<li><code>valid</code>: 表单控件有效</li>\n<li><code>invalid</code>: 表单控件无效</li>\n<li><code>pristine</code>: 表单控件值未改变</li>\n<li><code>dirty</code>: 表单控件值已改变</li>\n<li><code>touched</code>: 表单控件已被访问过</li>\n<li><code>untouched</code>: 表单控件未被访问过</li>\n</ul>\n<h4 id=\"单选多选\"><a href=\"#单选多选\" class=\"headerlink\" title=\"单选多选\"></a>单选多选</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let version of versions;\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\"><span class=\"tag\">    [<span class=\"attr\">attr.id</span>]=<span class=\"string\">\"version\"</span></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">name</span>=<span class=\"string\">\"version\"</span></span></div><div class=\"line\"><span class=\"tag\"></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">required</span></span></div><div class=\"line\"><span class=\"tag\">      [<span class=\"attr\">value</span>]=<span class=\"string\">\"version\"</span></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> [<span class=\"attr\">attr.for</span>]=<span class=\"string\">\"version\"</span>&gt;</span>&#123;&#123;version&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>使用方便，适用于简单环境</li>\n<li>通过[(ngModel)]实现数据的双向绑定</li>\n<li>最小化组件类的代码</li>\n<li>不易于单元测试</li>\n</ul>\n<h3 id=\"Reactive-Form\"><a href=\"#Reactive-Form\" class=\"headerlink\" title=\"Reactive Form\"></a>Reactive Form</h3><p><code>FormControl</code>: 一个为单个表单控件提供支持的类，可用于跟踪控件的值和验证状态.<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.myControl = <span class=\"keyword\">new</span> FormControl(<span class=\"string\">'Semlinker'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>FormGroup</code>: 包含一组 FormControl 实例，可用于跟踪 FormControl 组的值和验证状态.<br><!--组件ts  --><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> XunCsComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\">  <span class=\"comment\">// tslint:disable-next-line:member-ordering</span></div><div class=\"line\">  user: FormGroup;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.user = <span class=\"keyword\">new</span> FormGroup(&#123;</div><div class=\"line\">      name: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>),</div><div class=\"line\">      account: <span class=\"keyword\">new</span> FormGroup(&#123;</div><div class=\"line\">        email: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>),</div><div class=\"line\">        confirm: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  onSubmit() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user.value, <span class=\"keyword\">this</span>.user.valid);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<!--组件模板  -->\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">novalidate</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"user\"</span>  (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(user)\"</span> &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Full name<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Your full name\"</span></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">formControlName</span>=<span class=\"string\">\"name\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">formGroupName</span>=<span class=\"string\">\"account\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Email address<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Your email address\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"email\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Confirm address<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Confirm your email address\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"confirm\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Sign up<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h4><p>通过<code>user.invalid</code>判断表单验证是否正确<br>通过<code>user.controls.name?.errors</code>获取错误原因<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.user = <span class=\"keyword\">new</span> FormGroup(&#123;</div><div class=\"line\">  name: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>, [Validators.required, Validators.minLength(<span class=\"number\">2</span>)]),</div><div class=\"line\">  account: <span class=\"keyword\">new</span> FormGroup(&#123;</div><div class=\"line\">    email: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>, Validators.required),</div><div class=\"line\">    confirm: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>, Validators.required)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"FormBuilder\"><a href=\"#FormBuilder\" class=\"headerlink\" title=\"FormBuilder\"></a>FormBuilder</h4><p>用来简化<code>FormGroup</code>+<code>FormControl</code>结合<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.user = <span class=\"keyword\">this</span>.fb.group(&#123;</div><div class=\"line\">    name: [<span class=\"string\">''</span>, [Validators.required, Validators.minLength(<span class=\"number\">2</span>)]],</div><div class=\"line\">    account: <span class=\"keyword\">this</span>.fb.group(&#123;</div><div class=\"line\">      email: [<span class=\"string\">''</span>, Validators.required],</div><div class=\"line\">      confirm: [<span class=\"string\">''</span>, Validators.required]</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>灵活，适用于复杂场景</li>\n<li>简化html模板代码，将验证逻辑抽离到组件类中</li>\n<li>方便跟踪表单控件值变化</li>\n<li>易于单元测试</li>\n</ul>\n<h3 id=\"动态加载已声明的组件\"><a href=\"#动态加载已声明的组件\" class=\"headerlink\" title=\"动态加载已声明的组件\"></a>动态加载已声明的组件</h3><ul>\n<li>定义组件</li>\n<li><p>创建组件容器<br><code>ViewChild</code>：一个属性装饰器，用来从模板视图中获取对应的元素，可以通过模板变量获取，获取时可以通过 read 属性设置查询的条件，就是说可以把此视图转为不同的实例<br><code>ViewContainerRef</code>： 个视图容器，可以在此上面创建、插入、删除组件等等</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ViewChild</span>(<span class=\"string\">\"childContainer\"</span>, &#123; read: ViewContainerRef &#125;) container: ViewContainerRef;</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态创建组件<br><code>ComponentFactoryResolve</code>: 一个服务，动态加载组件的核心，这个服务可以将一个组件实例呈现到另一个组件视图上<br>通过调用<code>ComponentFactory</code>实例的<code>create()</code>创建组件<br>应用<code>ComponentFactoryResolver</code>服务的<code>resolveComponentFactory()</code>方法接受组件类，返回<code>ComponentFactory</code><br>在组件<code>constructor</code>注入该服务</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> resolver: ComponentFactoryResolver</span>) &#123;&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">createComponent(<span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// 删除之前的视图</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.container.clear();</div><div class=\"line\">  <span class=\"comment\">// 创建组件实例</span></div><div class=\"line\">  <span class=\"keyword\">const</span> factory: ComponentFactory&lt;ActXunComponent&gt; = <span class=\"keyword\">this</span>.resolver.resolveComponentFactory(ActXunComponent);</div><div class=\"line\">  <span class=\"comment\">// 将组件添加到容器当中</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.componentRef = <span class=\"keyword\">this</span>.container.createComponent(factory);</div><div class=\"line\">  <span class=\"comment\">// 为组建复制</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.componentRef.instance.type = <span class=\"keyword\">type</span>;</div><div class=\"line\">  <span class=\"comment\">// 订阅组件的输出属性</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.componentRef.instance.output.subscribe(<span class=\"function\">(<span class=\"params\">msg: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">console</span>.log(msg));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>销毁组件</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnDestroy() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.componentRef.destroy();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>NgModule</code>的<code>entryComponents</code>属性中添加动态组件</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  ...,</div><div class=\"line\">  declarations: [AppComponent, ActXunComponent],</div><div class=\"line\">  bootstrap: [AppComponent],</div><div class=\"line\">  entryComponents: [ActXunComponent],</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"动态加载已声明的表单\"><a href=\"#动态加载已声明的表单\" class=\"headerlink\" title=\"动态加载已声明的表单\"></a>动态加载已声明的表单</h3><h3 id=\"Pipe-管道\"><a href=\"#Pipe-管道\" class=\"headerlink\" title=\"Pipe (管道)\"></a>Pipe (管道)</h3><p>过滤器，对输入的数据进行处理。</p>\n<h4 id=\"Ng内建管道\"><a href=\"#Ng内建管道\" class=\"headerlink\" title=\"Ng内建管道\"></a>Ng内建管道</h4><ul>\n<li><p>String =&gt; String</p>\n<ul>\n<li><p>UpperCasePipe（大写转换）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;'Angular' | uppercase&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>输出ANGULAR<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LowerCasePipe (小写转换)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;'Angular' | lowercase&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>输出angular<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>TitleCasePipe (首字母大写)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;'angular' | titlecase&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>输出Angular<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Number =&gt; String</p>\n<ul>\n<li><p>DecimalPipe (数值格式化)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;expression | number[: digiInfo] &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;minIntegerDigits&#125;.&#123;minFractionDigits&#125;-&#123;maxFractionDigits&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; 3.14159265 | number: '1.3-5' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出3.14159<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>PercentPipe （百分比格式化）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;expression | percent[: digiInfo] &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;minIntegerDigits&#125;.&#123;minFractionDigits&#125;-&#123;maxFractionDigits&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; 1 | percent: '1.3-5' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出100.000%<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>CurrencyPipe (货币格式化)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;expression | currency[: currencyCode[: symbolDisplay[: digiInfo]]] &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;minIntegerDigits&#125;.&#123;minFractionDigits&#125;-&#123;maxFractionDigits&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>currencyCod是指货币代码，其值为ISO 4217标准，人民币CNY,美元USD,欧元 EUR.</div><div class=\"line\">symbolDisplay 是一个布尔值，true时显示货币符号($￥) false显示货币码<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; 1 | currency: 'USD': true &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出100.000%<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Object =&gt; String</p>\n<ul>\n<li><p>JsonPipe (对象json化)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; &#123;name: 'xuncs'&#125; | json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出&#123; \"name\": \"xuncs\" &#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>DatePipe (日期格式化)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; new Date() | date: 'shortTime' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>语法：&#123;&#123;expression | date:format&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  y 年 y使用4位数字表示年份(2017),yy使用两位数字表示(17)</div><div class=\"line\">  M 月 M 1位或两位数字(2或10、11、12),MM 两位数字表示，前面补0(02)</div><div class=\"line\">  d 日 d 一位或两位数字(9) dd两位数字，前面补0(09)</div><div class=\"line\">  E 星期 EEE 三位字母缩写的星期 EEEE 星期全称</div><div class=\"line\">  j 12小时制时间 j (9 AM) jj (09 AM)</div><div class=\"line\">  h 12小时制小时 h(9) hh (09)</div><div class=\"line\">  H 24小时制小时 H(9) HH (09)</div><div class=\"line\">  m 分 m (5) mm (05)</div><div class=\"line\">  s 秒 s (1) ss (01)</div><div class=\"line\">  z 时区 z China Standard Time</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Tools (工具类)</p>\n<ul>\n<li><p>SlicePipe (数组或字符串取切割)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; 'xuncs' | slice:0:3 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出：xun<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>语法：&#123;&#123;expression | slice: start [: end] &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>AsyncPipe<br><code>Promise</code>: 返回单个值，不可取消<br><code>Observalbe</code>: 随着时间推移发出多个值，可以取消，支持<code>map</code>,<code>filter</code>,<code>reduce</code>等操作符，延迟执行</p>\n</li>\n<li>I18nPluralPipe</li>\n<li>I18nSelectPipe</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"管道参数\"><a href=\"#管道参数\" class=\"headerlink\" title=\"管道参数\"></a>管道参数</h4><p>管道可以接收任意数量的参数。<br>用法: 参数之间用<code>:</code>隔开</p>\n<h4 id=\"管道链\"><a href=\"#管道链\" class=\"headerlink\" title=\"管道链\"></a>管道链</h4><p>将多个管道连接在一起，组成管道链对数据进行处理<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; 'angular' | slice:0:3 | uppercase &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出：ANG<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"管道分类\"><a href=\"#管道分类\" class=\"headerlink\" title=\"管道分类\"></a>管道分类</h4><ul>\n<li><p>pure管道<br>仅当管道输入值变化的时候，才执行转换操作，默认的类型是 pure 类型。(备注：输入值变化是指原始数据类型如：string、number、boolean 等的数值或对象的引用值发生变化)</p>\n</li>\n<li><p>impure管道<br>在每次变化检测期间都会执行，如鼠标点击或移动都会执行 impure 管道</p>\n</li>\n</ul>\n<h4 id=\"自定义管道-Pipe\"><a href=\"#自定义管道-Pipe\" class=\"headerlink\" title=\"自定义管道 (@Pipe)\"></a>自定义管道 (@Pipe)</h4><ul>\n<li>使用 @Pipe 装饰器定义 Pipe 的 metadata 信息，如 Pipe 的名称 - 即 name 属性</li>\n<li>实现 PipeTransform 接口中定义的 transform 方法<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g p  &lt;Name&gt; --<span class=\"keyword\">flat</span>=<span class=\"literal\">false</span>      <span class=\"comment\">// 新建管道</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Pipe, PipeTransform &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;</div><div class=\"line\">  name: <span class=\"string\">'xunTest'</span>,</div><div class=\"line\">  <span class=\"comment\">// 非纯管道</span></div><div class=\"line\">  pure: <span class=\"literal\">false</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> XunTestPipe <span class=\"keyword\">implements</span> PipeTransform &#123;</div><div class=\"line\"></div><div class=\"line\">  transform(value: <span class=\"built_in\">any</span>, args?: <span class=\"built_in\">any</span>): <span class=\"built_in\">any</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Angular4入门\"><a href=\"#Angular4入门\" class=\"headerlink\" title=\"Angular4入门\"></a>Angular4入门</h2><h3 id=\"Angular-cli\"><a href=\"#Angular-cli\" class=\"headerlink\" title=\"Angular-cli\"></a>Angular-cli</h3><h4 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install @angular/cli -g</div><div class=\"line\"></div><div class=\"line\">ng generate --help  // 查询帮助</div></pre></td></tr></table></figure>\n<h4 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng new &lt;ProjectName&gt;</div></pre></td></tr></table></figure>\n<p>相关配置<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">--dry-run           // boolean, 默认为 <span class=\"literal\">false</span>, 若设置 dry-run 则不会创建任何文件</div><div class=\"line\">--verbose           // boolean, 默认为 <span class=\"literal\">false</span></div><div class=\"line\">--link-cli          // boolean, 默认为 <span class=\"literal\">false</span>, 自动链接到 @angular/cli 包</div><div class=\"line\">--skip-install      // boolean, 默认为 <span class=\"literal\">false</span>, 表示跳过 npm install</div><div class=\"line\">--skip-git          // boolean, 默认为 <span class=\"literal\">false</span>, 表示该目录不初始化为 git 仓库</div><div class=\"line\">--skip-tests        // boolean, 默认为 <span class=\"literal\">false</span>, 表示不创建 tests 相关文件</div><div class=\"line\">--skip-commit       // boolean, 默认为 <span class=\"literal\">false</span>, 表示不进行初始提交</div><div class=\"line\">--directory         // string, 用于设置创建的目录名，默认与应用程序的同名</div><div class=\"line\">--<span class=\"built_in\">source</span>-dir        // string, 默认为 <span class=\"string\">'src'</span>, 用于设置源文件目录的名称</div><div class=\"line\">--style             // string, 默认为 <span class=\"string\">'css'</span>, 用于设置选用的样式语法 (<span class=\"string\">'css'</span>, <span class=\"string\">'less'</span> or <span class=\"string\">'scss'</span>)</div><div class=\"line\">--prefix            // string, 默认为 <span class=\"string\">'app'</span>, 用于设置创建新组件时，组件选择器使用的前缀</div><div class=\"line\">--mobile            // boolean, 默认为 <span class=\"literal\">false</span>,表示是否生成 Progressive Web App 应用程序</div><div class=\"line\">--routing           // boolean, 默认为 <span class=\"literal\">false</span>, 表示新增带有路由信息的模块，并添加到根模块中</div><div class=\"line\">--inline-style      // boolean, 默认为 <span class=\"literal\">false</span>, 表示当创建新的应用程序时，使用内联样式</div><div class=\"line\">--inline-template   // boolean, 默认为 <span class=\"literal\">false</span>, 表示当创建新的应用程序时，使用内联模板</div></pre></td></tr></table></figure></p>\n<h4 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> &lt;ProjectName&gt;</div><div class=\"line\">npm start -o</div><div class=\"line\">ng serve  --open   // 主动打开浏览器窗口</div></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g cl &lt;Name&gt; --spec            // 新建 class</div><div class=\"line\">ng g c  &lt;Name&gt;                   // 新建组件</div><div class=\"line\">ng g d  &lt;Name&gt;                   // 新建指令</div><div class=\"line\">ng g e  &lt;Name&gt;                   // 新建枚举</div><div class=\"line\">ng g m  &lt;Name&gt; --routing --spec  // 新建模块</div><div class=\"line\">ng g p  &lt;Name&gt; --flat=<span class=\"literal\">false</span>      // 新建管道</div><div class=\"line\">ng g s  &lt;Name&gt; --flat=<span class=\"literal\">false</span>       // 新建服务</div></pre></td></tr></table></figure>\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng <span class=\"built_in\">test</span></div><div class=\"line\">npm <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h4 id=\"e2e测试\"><a href=\"#e2e测试\" class=\"headerlink\" title=\"e2e测试\"></a>e2e测试</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng e2e</div></pre></td></tr></table></figure>\n<h4 id=\"构建压缩代码并实施监控变化的应用程序\"><a href=\"#构建压缩代码并实施监控变化的应用程序\" class=\"headerlink\" title=\"构建压缩代码并实施监控变化的应用程序\"></a>构建压缩代码并实施监控变化的应用程序</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng build --target=production --watch</div></pre></td></tr></table></figure>\n<h4 id=\"自定义构建webpack\"><a href=\"#自定义构建webpack\" class=\"headerlink\" title=\"自定义构建webpack\"></a>自定义构建webpack</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng eject</div></pre></td></tr></table></figure>\n<h3 id=\"实际开发\"><a href=\"#实际开发\" class=\"headerlink\" title=\"实际开发\"></a>实际开发</h3><h4 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--xun-com.component.html  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--dom绑定  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">myInput</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--鼠标事件  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"onClick($event, myInput.value)\"</span>&gt;</span>鼠标点击事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--键盘事件  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">keyBoard</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> (<span class=\"attr\">keydown.enter</span>)=<span class=\"string\">\"onEnter($event, keyBoard.value)\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--xun-com.component.ts  --&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-xun-com'</span>,</div><div class=\"line\">  templateUrl: <span class=\"string\">'./xun-com.component.html'</span>,</div><div class=\"line\">  styleUrls: [<span class=\"string\">'./xun-com.component.css'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> XunComComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  title: <span class=\"built_in\">string</span>;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.title = <span class=\"string\">'title'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 事件方法</span></div><div class=\"line\">  onClick(event, val) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(event)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(val)</div><div class=\"line\">  &#125;</div><div class=\"line\">  onEnter(event, val) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(event)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(val)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"新建服务\"><a href=\"#新建服务\" class=\"headerlink\" title=\"新建服务\"></a>新建服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g s mail</div><div class=\"line\"></div><div class=\"line\">// 输出</div><div class=\"line\">installing service</div><div class=\"line\">  create src/app/mail.service.spec.ts     // 用于单元测试</div><div class=\"line\">  create src/app/mail.service.ts          // 新建的服务</div><div class=\"line\">  WARNING Service is generated but not provided, it must be provided to be used</div></pre></td></tr></table></figure>\n<h4 id=\"配置服务\"><a href=\"#配置服务\" class=\"headerlink\" title=\"配置服务\"></a>配置服务</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; MailService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./mail.service'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\"></div><div class=\"line\">  providers: [</div><div class=\"line\">    MailService,</div><div class=\"line\">    &#123;provide: <span class=\"string\">'apiUrl'</span>, useValue: <span class=\"string\">'https://jsonplaceholder.typicode.com/'</span>&#125;</div><div class=\"line\">  ],     <span class=\"comment\">// 注入服务  </span></div><div class=\"line\">  bootstrap: [AppComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"更新服务\"><a href=\"#更新服务\" class=\"headerlink\" title=\"更新服务\"></a>更新服务</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Injectable</span>()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MailService &#123;</div><div class=\"line\">  message: <span class=\"built_in\">string</span>  =<span class=\"string\">'该消息来自MailService'</span>;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"使用服务\"><a href=\"#使用服务\" class=\"headerlink\" title=\"使用服务\"></a>使用服务</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--xun-com.component.ts  --&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MailService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../mail.service'</span>;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> mailService: MailService</span>) &#123;&#125;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></div><div class=\"line\">    @Inject(MailService) private mailService,</div><div class=\"line\">    <span class=\"meta\">@Inject</span>(<span class=\"string\">'apiUrl'</span>) <span class=\"keyword\">private</span> apiUrl) &#123;&#125;</div><div class=\"line\">  &lt;!--二选其一  --&gt;</div><div class=\"line\">  &lt;!-- 不过对于 Type 类型(函数类型) 的对象，我们一般使用 <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> mailService: MailService</span>) 方式进行注入。而 Inject 装饰器一般用来注入非 Type 类型的对象。 --&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--xun-com.component.html  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;mailService.message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"ngClass\"><a href=\"#ngClass\" class=\"headerlink\" title=\"ngClass\"></a>ngClass</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123;mousedown: isMousedown&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"ngStyle\"><a href=\"#ngStyle\" class=\"headerlink\" title=\"ngStyle\"></a>ngStyle</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--font-size支持px % em  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> [<span class=\"attr\">ngStyle</span>]=<span class=\"string\">\"&#123;color: 'red'&#125;\"</span> [<span class=\"attr\">style.font-size.px</span>]=<span class=\"string\">\"fontSize\"</span> [<span class=\"attr\">style.background-color</span>=<span class=\"string\">\"'red'\"</span>]&gt;</span></div><div class=\"line\">      Red Text</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"ngModel\"><a href=\"#ngModel\" class=\"headerlink\" title=\"ngModel\"></a>ngModel</h4><ul>\n<li><p>单独使用ngModel<br>需要给表单元素添加<code>name</code>，为<code>ngForm.value</code>对象添加<code>property</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'userName'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">'Input your userName'</span> <span class=\"attr\">ngModel</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>单向绑定[ngModel]<br>将this.name 初始化绑定到<code>ngForm.value</code>上</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'userName'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">'Input your userName'</span> [<span class=\"attr\">ngModel</span>]=<span class=\"string\">\"name\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>双向绑定[(ngModel)]</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--<span class=\"keyword\">module</span>中  --&gt;</div><div class=\"line\">import &#123;FormsModule&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\">...</div><div class=\"line\">imports: [</div><div class=\"line\">    ...</div><div class=\"line\">    FormsModule</div><div class=\"line\">  ],</div><div class=\"line\">&lt;!--组件中  --&gt;</div><div class=\"line\"><span class=\"keyword\">this</span>.inputValue = <span class=\"string\">'inputvalue'</span></div><div class=\"line\">&lt;!--模板中  --&gt;</div><div class=\"line\">&lt;input #myInput <span class=\"keyword\">type</span>=<span class=\"string\">\"text\"</span> [(ngModel)]=<span class=\"string\">\"inputValue\"</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input\"></a>@Input</h4><p>相当于props 父组件==&gt;子组件<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--子组件 xun-com.component  --&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ..., Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> XunComComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Input</span>() msg: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;!--父组件 app.component  --&gt;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</div><div class=\"line\">  msg = &#123;</div><div class=\"line\">    data: <span class=\"string\">'数据'</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--父模板 app.component  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-xun-com</span> [<span class=\"attr\">msg</span>]=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-xun-com</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--子模板 xun-com.component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>msg: &#123;&#123;msg.data&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output\"></a>@Output</h4><p>Output装饰器:  让子组件将信息通过事件的方式返回给父组件<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--子组件  --&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Output, EventEmitter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> XunComComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"meta\">@Input</span>() msg: <span class=\"built_in\">string</span>;</div><div class=\"line\">  <span class=\"meta\">@Output</span>() update = <span class=\"keyword\">new</span> EventEmitter&lt;&#123;title: <span class=\"built_in\">string</span>&#125;&gt;();</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.title = <span class=\"string\">'xun-com'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;!--子组件模板  --&gt;</div><div class=\"line\">&lt;button (click)=<span class=\"string\">\"update.emit(title)\"</span>&gt;更新&lt;<span class=\"regexp\">/button&gt;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">&lt;!--父组件  --&gt;</span></div><div class=\"line\"><span class=\"regexp\">export class AppComponent &#123;</span></div><div class=\"line\"><span class=\"regexp\">  constructor() &#123;&#125;</span></div><div class=\"line\"><span class=\"regexp\">  onUpdate(title) &#123;</span></div><div class=\"line\"><span class=\"regexp\">    console.log(title)</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\">&lt;!--父组件模板  --&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;app-xun-com (update)=\"onUpdate(title)\"&gt;&lt;/</span>app-xun-com&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"http模块\"><a href=\"#http模块\" class=\"headerlink\" title=\"http模块\"></a>http模块</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--导入模块 app.module.ts  --&gt;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  imports: [BrowserModule, FormsModule, HttpModule],</div><div class=\"line\">  declarations: [AppComponent, UserComponent],</div><div class=\"line\">  bootstrap: [AppComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">&lt;!--调用模块  --&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Http &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/map'</span>;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MembersComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  members: Member[];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: Http</span>) &#123; &#125; <span class=\"comment\">// (3)</span></div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.http.get(<span class=\"string\">`api`</span>) <span class=\"comment\">// (4)</span></div><div class=\"line\">        .map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()) <span class=\"comment\">// (5)</span></div><div class=\"line\">        .subscribe(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (data) <span class=\"keyword\">this</span>.members = data; <span class=\"comment\">// (6)</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><ul>\n<li><code>RouterModule.forRoot()</code>: 在主模块中定义主要的路由信息</li>\n<li><code>RouterModule.forChild()</code>: 在子模块中定义路由信息</li>\n<li><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>: 路由视图入口位置</li>\n<li><p>动态路由</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 配置文件</span></div><div class=\"line\">  &#123; path: <span class=\"string\">'/profile/:username'</span>, component: ProfileComponent &#125;</div><div class=\"line\"><span class=\"comment\">// 组件中</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SettingsComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  username: <span class=\"built_in\">string</span>;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> route: ActivatedRoute</span>) &#123;&#125;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.route.params.subscribe(<span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> <span class=\"keyword\">this</span>.username = params.username);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>子路由 children</p>\n</li>\n<li>loadChildren 从另一个模块中获取子路由</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 子模块</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ROUTES: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">''</span>,</div><div class=\"line\">    component: SettingsComponent,</div><div class=\"line\">    children: [</div><div class=\"line\">      &#123; path: <span class=\"string\">'profile'</span>, component: ProfileSettingsComponent &#125;,</div><div class=\"line\">      &#123; path: <span class=\"string\">'password'</span>, component: PasswordSettingsComponent &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    RouterModule.forChild(ROUTES)</div><div class=\"line\">  ],</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SettingsModule &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 父模块</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ROUTES: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'settings'</span>,</div><div class=\"line\">    loadChildren: <span class=\"string\">'./settings/settings.module#SettingsModule'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    RouterModule.forRoot(ROUTES)</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Router Directives<br><code>routerLink</code>: 跳转指令</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>路由跳转</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'/profile'</span>, event.name]);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"NgModule\"><a href=\"#NgModule\" class=\"headerlink\" title=\"NgModule\"></a>NgModule</h3><p>@NgModule接收一个用来描述模块属性的元数据对象</p>\n<ul>\n<li><code>declarations</code>:  声明本模块中的视图类</li>\n<li><code>exports</code>: declarations 的子集，可用于其它模块的组件模板</li>\n<li><code>imports</code>: 注册其他模块</li>\n<li><code>providers</code>: 添加全局服务</li>\n<li><code>bootstrap</code>: 根组件</li>\n</ul>\n<h3 id=\"Directive\"><a href=\"#Directive\" class=\"headerlink\" title=\"Directive\"></a>Directive</h3><ul>\n<li><code>Component directive</code>: 构建UI组件，继承于Directive类</li>\n<li><code>Attribute directive</code>: 改变组件的外观或行为</li>\n<li><code>Structural directive</code>: 动态添加或删除DOM元素来改变DOM布局</li>\n</ul>\n<h4 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h4><ul>\n<li><code>HostBinding</code>: 实现元素属性绑定</li>\n<li><code>Input</code>: 实现自定义元素属性输入</li>\n<li><code>HostListener</code>: 监听元素的事件</li>\n<li><code>Attribute</code>: 获取指令宿主元素上的自定义属性</li>\n</ul>\n<h4 id=\"ngFor-使用可迭代的每个项作为模板的上下文来重复模板\"><a href=\"#ngFor-使用可迭代的每个项作为模板的上下文来重复模板\" class=\"headerlink\" title=\"ngFor: 使用可迭代的每个项作为模板的上下文来重复模板\"></a>ngFor: 使用可迭代的每个项作为模板的上下文来重复模板</h4><p>首先更新mail服务，增加数组<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Injectable</span>()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MailService &#123;</div><div class=\"line\">  message: <span class=\"built_in\">string</span> = <span class=\"string\">'该消息来自MailService'</span>;</div><div class=\"line\">  messages: <span class=\"built_in\">string</span>[] = [</div><div class=\"line\">    <span class=\"string\">'天之骄子，加入修仙之路群'</span>,</div><div class=\"line\">    <span class=\"string\">'Shadows，加入修仙之路群'</span>,</div><div class=\"line\">    <span class=\"string\">'Keriy，加入修仙之路群'</span></div><div class=\"line\">  ]</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更新组件模板<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let message of mailService.messages; index as i;\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123;i&#125;&#125; - &#123;&#123;message&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"ngIf-根据表达式的值，显示或移除元素\"><a href=\"#ngIf-根据表达式的值，显示或移除元素\" class=\"headerlink\" title=\"ngIf: 根据表达式的值，显示或移除元素\"></a>ngIf: 根据表达式的值，显示或移除元素</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"SHOW\"</span>&gt;</span>show<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"ngSwitch\"><a href=\"#ngSwitch\" class=\"headerlink\" title=\"ngSwitch\"></a>ngSwitch</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> [<span class=\"attr\">ngSwitch</span>]=<span class=\"string\">'person.country'</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'UK'\"</span> <span class=\"attr\">class</span>=<span class=\"string\">'text-success'</span>&gt;</span></div><div class=\"line\">      &#123;&#123; person.name &#125;&#125; (&#123;&#123;person.country&#125;&#125;)</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'USA'\"</span> <span class=\"attr\">class</span>=<span class=\"string\">'text-secondary'</span>&gt;</span></div><div class=\"line\">      &#123;&#123; person.name &#125;&#125; (&#123;&#123;person.country&#125;&#125;)</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngSwitchDefault</span> <span class=\"attr\">class</span>=<span class=\"string\">'text-primary'</span>&gt;</span></div><div class=\"line\">    &#123;&#123; person.name &#125;&#125; (&#123;&#123;person.country&#125;&#125;)</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Template-Driven-Forms\"><a href=\"#Template-Driven-Forms\" class=\"headerlink\" title=\"Template Driven Forms\"></a>Template Driven Forms</h3><h4 id=\"创建表单\"><a href=\"#创建表单\" class=\"headerlink\" title=\"创建表单\"></a>创建表单</h4><p>ng内嵌<code>validators</code>模块<br>使用<code>userName.valid</code>判断验证，<code>userName.errors</code>输出错误信息<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--html模板  --&gt;</div><div class=\"line\">&lt;input</div><div class=\"line\">  <span class=\"keyword\">type</span>=<span class=\"string\">\"text\"</span></div><div class=\"line\">  required</div><div class=\"line\">  minlength=<span class=\"string\">\"3\"</span></div><div class=\"line\">  [(ngModel)]=<span class=\"string\">\"username\"</span></div><div class=\"line\">  #userName=<span class=\"string\">\"ngModel\"</span>&gt;</div><div class=\"line\">  &#123;&#123;userName.valid&#125;&#125;</div><div class=\"line\">&lt;div *ngIf=<span class=\"string\">\"userName.errors?.required\"</span>&gt;请您输入用户名&lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;div *ngIf=\"userName.errors?.minlength\"&gt;</span></div><div class=\"line\"><span class=\"regexp\">  用户名的长度必须大于 &#123;&#123;userName.errors?.minlength.requiredLength&#125;&#125;，当前的长度为</span></div><div class=\"line\"><span class=\"regexp\">    &#123;&#123;userName.errors?.minlength.actualLength&#125;&#125;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--ts模块  --&gt;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</div><div class=\"line\">  username = <span class=\"string\">'semlinker'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"表单提交\"><a href=\"#表单提交\" class=\"headerlink\" title=\"表单提交\"></a>表单提交</h4><p>通过 <code>#loginForm=&quot;ngForm&quot;</code> 方式获取 <code>ngForm</code> 对象，然后通过 <code>loginForm.value</code> 来获取表单的值<br><!--html模板  --><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">loginForm</span>=<span class=\"string\">\"ngForm\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(loginForm.value)\"</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<!--绑定方法  -->\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">onSubmit(value) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.dir(value);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>通过<code>ngModelGroup</code>指令对表单元素进行细化<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">loginForm</span>=<span class=\"string\">\"ngForm\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(loginForm.value)\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">fieldset</span> <span class=\"attr\">ngModelGroup</span>=<span class=\"string\">\"user\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\"><span class=\"tag\">     <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\"><span class=\"tag\">     <span class=\"attr\">required</span></span></div><div class=\"line\"><span class=\"tag\">     <span class=\"attr\">minlength</span>=<span class=\"string\">\"3\"</span></span></div><div class=\"line\"><span class=\"tag\">     <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">     [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"username\"</span></span></div><div class=\"line\"><span class=\"tag\">     #<span class=\"attr\">userName</span>=<span class=\"string\">\"ngModel\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"userName.errors?.required\"</span>&gt;</span>请您输入用户名<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"userName.errors?.minlength\"</span>&gt;</span></div><div class=\"line\">      用户名的长度必须大于 &#123;&#123;userName.errors?.minlength.requiredLength&#125;&#125;，当前的长度为</div><div class=\"line\">        &#123;&#123;userName.errors?.minlength.actualLength&#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">ngModel</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></div><div class=\"line\">    &#123;&#123;loginForm.value | json&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"验证状态样式\"><a href=\"#验证状态样式\" class=\"headerlink\" title=\"验证状态样式\"></a>验证状态样式</h4><p>可以通过 <code>#userName=&quot;ngModel&quot;</code> 方式获取 <code>ngModel</code> 对象，进而通过<code>userName.dirty</code>获取控件的状态信息<br>css类<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.input</span><span class=\"selector-class\">.ng-invalid</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-class\">.ng-valid</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>状态列表</p>\n<ul>\n<li><code>valid</code>: 表单控件有效</li>\n<li><code>invalid</code>: 表单控件无效</li>\n<li><code>pristine</code>: 表单控件值未改变</li>\n<li><code>dirty</code>: 表单控件值已改变</li>\n<li><code>touched</code>: 表单控件已被访问过</li>\n<li><code>untouched</code>: 表单控件未被访问过</li>\n</ul>\n<h4 id=\"单选多选\"><a href=\"#单选多选\" class=\"headerlink\" title=\"单选多选\"></a>单选多选</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let version of versions;\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\"><span class=\"tag\">    [<span class=\"attr\">attr.id</span>]=<span class=\"string\">\"version\"</span></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">name</span>=<span class=\"string\">\"version\"</span></span></div><div class=\"line\"><span class=\"tag\"></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">required</span></span></div><div class=\"line\"><span class=\"tag\">      [<span class=\"attr\">value</span>]=<span class=\"string\">\"version\"</span></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> [<span class=\"attr\">attr.for</span>]=<span class=\"string\">\"version\"</span>&gt;</span>&#123;&#123;version&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>使用方便，适用于简单环境</li>\n<li>通过[(ngModel)]实现数据的双向绑定</li>\n<li>最小化组件类的代码</li>\n<li>不易于单元测试</li>\n</ul>\n<h3 id=\"Reactive-Form\"><a href=\"#Reactive-Form\" class=\"headerlink\" title=\"Reactive Form\"></a>Reactive Form</h3><p><code>FormControl</code>: 一个为单个表单控件提供支持的类，可用于跟踪控件的值和验证状态.<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.myControl = <span class=\"keyword\">new</span> FormControl(<span class=\"string\">'Semlinker'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>FormGroup</code>: 包含一组 FormControl 实例，可用于跟踪 FormControl 组的值和验证状态.<br><!--组件ts  --><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> XunCsComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\">  <span class=\"comment\">// tslint:disable-next-line:member-ordering</span></div><div class=\"line\">  user: FormGroup;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.user = <span class=\"keyword\">new</span> FormGroup(&#123;</div><div class=\"line\">      name: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>),</div><div class=\"line\">      account: <span class=\"keyword\">new</span> FormGroup(&#123;</div><div class=\"line\">        email: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>),</div><div class=\"line\">        confirm: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  onSubmit() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user.value, <span class=\"keyword\">this</span>.user.valid);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<!--组件模板  -->\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">novalidate</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"user\"</span>  (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(user)\"</span> &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Full name<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Your full name\"</span></span></div><div class=\"line\"><span class=\"tag\">      <span class=\"attr\">formControlName</span>=<span class=\"string\">\"name\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">formGroupName</span>=<span class=\"string\">\"account\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Email address<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Your email address\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"email\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Confirm address<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Confirm your email address\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"confirm\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Sign up<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h4><p>通过<code>user.invalid</code>判断表单验证是否正确<br>通过<code>user.controls.name?.errors</code>获取错误原因<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.user = <span class=\"keyword\">new</span> FormGroup(&#123;</div><div class=\"line\">  name: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>, [Validators.required, Validators.minLength(<span class=\"number\">2</span>)]),</div><div class=\"line\">  account: <span class=\"keyword\">new</span> FormGroup(&#123;</div><div class=\"line\">    email: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>, Validators.required),</div><div class=\"line\">    confirm: <span class=\"keyword\">new</span> FormControl(<span class=\"string\">''</span>, Validators.required)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"FormBuilder\"><a href=\"#FormBuilder\" class=\"headerlink\" title=\"FormBuilder\"></a>FormBuilder</h4><p>用来简化<code>FormGroup</code>+<code>FormControl</code>结合<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.user = <span class=\"keyword\">this</span>.fb.group(&#123;</div><div class=\"line\">    name: [<span class=\"string\">''</span>, [Validators.required, Validators.minLength(<span class=\"number\">2</span>)]],</div><div class=\"line\">    account: <span class=\"keyword\">this</span>.fb.group(&#123;</div><div class=\"line\">      email: [<span class=\"string\">''</span>, Validators.required],</div><div class=\"line\">      confirm: [<span class=\"string\">''</span>, Validators.required]</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>灵活，适用于复杂场景</li>\n<li>简化html模板代码，将验证逻辑抽离到组件类中</li>\n<li>方便跟踪表单控件值变化</li>\n<li>易于单元测试</li>\n</ul>\n<h3 id=\"动态加载已声明的组件\"><a href=\"#动态加载已声明的组件\" class=\"headerlink\" title=\"动态加载已声明的组件\"></a>动态加载已声明的组件</h3><ul>\n<li>定义组件</li>\n<li><p>创建组件容器<br><code>ViewChild</code>：一个属性装饰器，用来从模板视图中获取对应的元素，可以通过模板变量获取，获取时可以通过 read 属性设置查询的条件，就是说可以把此视图转为不同的实例<br><code>ViewContainerRef</code>： 个视图容器，可以在此上面创建、插入、删除组件等等</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ViewChild</span>(<span class=\"string\">\"childContainer\"</span>, &#123; read: ViewContainerRef &#125;) container: ViewContainerRef;</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态创建组件<br><code>ComponentFactoryResolve</code>: 一个服务，动态加载组件的核心，这个服务可以将一个组件实例呈现到另一个组件视图上<br>通过调用<code>ComponentFactory</code>实例的<code>create()</code>创建组件<br>应用<code>ComponentFactoryResolver</code>服务的<code>resolveComponentFactory()</code>方法接受组件类，返回<code>ComponentFactory</code><br>在组件<code>constructor</code>注入该服务</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> resolver: ComponentFactoryResolver</span>) &#123;&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">createComponent(<span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// 删除之前的视图</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.container.clear();</div><div class=\"line\">  <span class=\"comment\">// 创建组件实例</span></div><div class=\"line\">  <span class=\"keyword\">const</span> factory: ComponentFactory&lt;ActXunComponent&gt; = <span class=\"keyword\">this</span>.resolver.resolveComponentFactory(ActXunComponent);</div><div class=\"line\">  <span class=\"comment\">// 将组件添加到容器当中</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.componentRef = <span class=\"keyword\">this</span>.container.createComponent(factory);</div><div class=\"line\">  <span class=\"comment\">// 为组建复制</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.componentRef.instance.type = <span class=\"keyword\">type</span>;</div><div class=\"line\">  <span class=\"comment\">// 订阅组件的输出属性</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.componentRef.instance.output.subscribe(<span class=\"function\">(<span class=\"params\">msg: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">console</span>.log(msg));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>销毁组件</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnDestroy() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.componentRef.destroy();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>NgModule</code>的<code>entryComponents</code>属性中添加动态组件</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  ...,</div><div class=\"line\">  declarations: [AppComponent, ActXunComponent],</div><div class=\"line\">  bootstrap: [AppComponent],</div><div class=\"line\">  entryComponents: [ActXunComponent],</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"动态加载已声明的表单\"><a href=\"#动态加载已声明的表单\" class=\"headerlink\" title=\"动态加载已声明的表单\"></a>动态加载已声明的表单</h3><h3 id=\"Pipe-管道\"><a href=\"#Pipe-管道\" class=\"headerlink\" title=\"Pipe (管道)\"></a>Pipe (管道)</h3><p>过滤器，对输入的数据进行处理。</p>\n<h4 id=\"Ng内建管道\"><a href=\"#Ng内建管道\" class=\"headerlink\" title=\"Ng内建管道\"></a>Ng内建管道</h4><ul>\n<li><p>String =&gt; String</p>\n<ul>\n<li><p>UpperCasePipe（大写转换）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;'Angular' | uppercase&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>输出ANGULAR<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LowerCasePipe (小写转换)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;'Angular' | lowercase&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>输出angular<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>TitleCasePipe (首字母大写)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;'angular' | titlecase&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>输出Angular<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Number =&gt; String</p>\n<ul>\n<li><p>DecimalPipe (数值格式化)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;expression | number[: digiInfo] &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;minIntegerDigits&#125;.&#123;minFractionDigits&#125;-&#123;maxFractionDigits&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; 3.14159265 | number: '1.3-5' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出3.14159<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>PercentPipe （百分比格式化）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;expression | percent[: digiInfo] &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;minIntegerDigits&#125;.&#123;minFractionDigits&#125;-&#123;maxFractionDigits&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; 1 | percent: '1.3-5' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出100.000%<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>CurrencyPipe (货币格式化)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;expression | currency[: currencyCode[: symbolDisplay[: digiInfo]]] &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;minIntegerDigits&#125;.&#123;minFractionDigits&#125;-&#123;maxFractionDigits&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>currencyCod是指货币代码，其值为ISO 4217标准，人民币CNY,美元USD,欧元 EUR.</div><div class=\"line\">symbolDisplay 是一个布尔值，true时显示货币符号($￥) false显示货币码<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; 1 | currency: 'USD': true &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出100.000%<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Object =&gt; String</p>\n<ul>\n<li><p>JsonPipe (对象json化)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; &#123;name: 'xuncs'&#125; | json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出&#123; \"name\": \"xuncs\" &#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>DatePipe (日期格式化)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; new Date() | date: 'shortTime' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>语法：&#123;&#123;expression | date:format&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  y 年 y使用4位数字表示年份(2017),yy使用两位数字表示(17)</div><div class=\"line\">  M 月 M 1位或两位数字(2或10、11、12),MM 两位数字表示，前面补0(02)</div><div class=\"line\">  d 日 d 一位或两位数字(9) dd两位数字，前面补0(09)</div><div class=\"line\">  E 星期 EEE 三位字母缩写的星期 EEEE 星期全称</div><div class=\"line\">  j 12小时制时间 j (9 AM) jj (09 AM)</div><div class=\"line\">  h 12小时制小时 h(9) hh (09)</div><div class=\"line\">  H 24小时制小时 H(9) HH (09)</div><div class=\"line\">  m 分 m (5) mm (05)</div><div class=\"line\">  s 秒 s (1) ss (01)</div><div class=\"line\">  z 时区 z China Standard Time</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Tools (工具类)</p>\n<ul>\n<li><p>SlicePipe (数组或字符串取切割)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; 'xuncs' | slice:0:3 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出：xun<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>语法：&#123;&#123;expression | slice: start [: end] &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>AsyncPipe<br><code>Promise</code>: 返回单个值，不可取消<br><code>Observalbe</code>: 随着时间推移发出多个值，可以取消，支持<code>map</code>,<code>filter</code>,<code>reduce</code>等操作符，延迟执行</p>\n</li>\n<li>I18nPluralPipe</li>\n<li>I18nSelectPipe</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"管道参数\"><a href=\"#管道参数\" class=\"headerlink\" title=\"管道参数\"></a>管道参数</h4><p>管道可以接收任意数量的参数。<br>用法: 参数之间用<code>:</code>隔开</p>\n<h4 id=\"管道链\"><a href=\"#管道链\" class=\"headerlink\" title=\"管道链\"></a>管道链</h4><p>将多个管道连接在一起，组成管道链对数据进行处理<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; 'angular' | slice:0:3 | uppercase &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输出：ANG<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"管道分类\"><a href=\"#管道分类\" class=\"headerlink\" title=\"管道分类\"></a>管道分类</h4><ul>\n<li><p>pure管道<br>仅当管道输入值变化的时候，才执行转换操作，默认的类型是 pure 类型。(备注：输入值变化是指原始数据类型如：string、number、boolean 等的数值或对象的引用值发生变化)</p>\n</li>\n<li><p>impure管道<br>在每次变化检测期间都会执行，如鼠标点击或移动都会执行 impure 管道</p>\n</li>\n</ul>\n<h4 id=\"自定义管道-Pipe\"><a href=\"#自定义管道-Pipe\" class=\"headerlink\" title=\"自定义管道 (@Pipe)\"></a>自定义管道 (@Pipe)</h4><ul>\n<li>使用 @Pipe 装饰器定义 Pipe 的 metadata 信息，如 Pipe 的名称 - 即 name 属性</li>\n<li>实现 PipeTransform 接口中定义的 transform 方法<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g p  &lt;Name&gt; --<span class=\"keyword\">flat</span>=<span class=\"literal\">false</span>      <span class=\"comment\">// 新建管道</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Pipe, PipeTransform &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;</div><div class=\"line\">  name: <span class=\"string\">'xunTest'</span>,</div><div class=\"line\">  <span class=\"comment\">// 非纯管道</span></div><div class=\"line\">  pure: <span class=\"literal\">false</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> XunTestPipe <span class=\"keyword\">implements</span> PipeTransform &#123;</div><div class=\"line\"></div><div class=\"line\">  transform(value: <span class=\"built_in\">any</span>, args?: <span class=\"built_in\">any</span>): <span class=\"built_in\">any</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"less-study","date":"2018-01-23T04:18:13.000Z","_content":"\n\n<!--more-->\n\n## Less\n\n### Variables (变量)\n变量将同类重复的值提取出来，让我们更方便的控制更改这些值，使代码更易于维护。\n\n####  用于属性\n```less\n@variable: #bbb;\n#test {\n  color: @variable;\n}\n// 编译后\n#test {\n  color: #bbb;\n}\n```\n\n####  用于选择器\n```less\n@selector: xunfeng;\n.@{selector} {  };\n// 编译后\n.xunfeng { };\n```\n\n#### URLs\n```less\n@image: \"../img\";\n\n.xunfeng {\n  background: url(\"@{image}/img.png\")\n}\n```\n\n#### Import 模块引入\n```less\n @themes: \"../../scr/themes\";\n \n @import \"@{themes}/default.less\";\n```\n\n#### Property 属性名变量\n```less\n@property: color;\n\n.xunfeng {\n  @{property}: #bbb;\n  background-@{property}: #666;\n}\n```\n#### 变量名指针？\n```less\n@test：\"m m m m m\";\n@var: \"test\";\ncontent: @@var;\n// 编译后\ncontent: \"m m m m m\";\n```\n\n#### Lazy Loading（我理解意思就是变量提升？）\n```less\n// 方法1\n.lazy-eval-scope {\n  width: @var;\n}\n\n@var: @a;\n@a: 9%;\n// 方法2\n.lazy-eval-scope {\n  width: @var;\n  @a: 9%;\n}\n\n@var: @a;\n@a: 100%;\n//都会编译为\n.lazy-eval-scope {\n  width: 9%;\n}\n```\n### Extend (继承)\n\n```less\nul {\n  &:extend(.class);\n  color: red;\n}\n.calss {\n  font-size: 16px;\n}\n// 编译后\nul {\n  font-size:16px;\n  color: red;\n}\n.class {\n  color: red;\n}\n\n// 一致效果\n.a:extend(.b) { }\n.a { &:extend(.b); }\n.c:extend(.d all) {\n  // 继承所有与.d有关的属性  例如： .d .f、 .f .d\n}\n// 一次继承多个\n.d:extend(.f, .g) { }\n.d:extend(.f):extend(.g) { }\n```\n- 可以继承嵌套选择器中的属性\n```less\n.bucket {\n  tr { \n    color: blue;\n  }\n}\n.some-class:extend(.bucket tr) {}\n// 编译后\n.bucket tr,\n.some-class {\n  color: blue;\n}\n\n.bucket {\n  tr & { \n    color: blue;\n  }\n}\n.some-class:extend(tr .bucket) {}\n// 编译后\ntr .bucket,\n.some-class {\n  color: blue;\n}\n```\n- 必须要精确匹配\n- 通配符*对继承也有影响\n- 选择器顺序也需要一致\n- `1n`与`n`在继承中不被匹配\n- 引用类 `[title=test]`, `[title='test']`, `[title=\"test\"]` 表现一致\n- `all` 匹配全部\n- `@media`控制范围\n- 简化写法\n```less\n.easyclass() {\n  display: inline-block;\n  font-size: 14px;\n}\n.easy {\n  .easyclass;\n}\n// output\n.easy {\n  display: inline-block;\n  font-size: 14px;\n}\n```\n\n### Mixins (混合)\n将现有的样式混合加入到新样式类中\n```less\n.a { color: red;}\n.b { background: blue;}\n.mixin {\n  .a(); // 二者方式皆可用\n  .b;\n}\n// ouput \n.a { color: red;}\n.b { background: blue;}\n.mixin {\n  color: red;\n  background: blue;\n}\n```\n\n不产出用于混合的样式类\n```less\n.mixin() {\n  background: red;\n}\n.class {\n  .mixin;\n}\n// output \n.class {\n  background: red;\n}\n```\n\n- 在`mixin()`类后添加`!important`会给所有`mixin()`中的属性添加`!important`\n\n- 带参数的`Mixins`\n```less \n.params-mixins(@color: red) { // 默认参数\n  background: @color;\n  color: @color;\n}\n.header {\n  .params-mixins(#bbb);\n}\n.footer {\n  .params-mixins;\n}\n// output\n.header {\n  background: #bbb;\n  color: #bbb;\n}\n.footer {\n  background: red;\n  color: red;\n}\n\n// 多参数\nmixins(@color: red; @size: 16px) {\n  color: @color;\n  font-size: @size;\n}\n```\n- `@arguments` 指代所有参数\n\n### Mixins as Function\n可继承mixin中的变量\n```less\n.average(@x, @y) {\n  @average: ((@x + @y) / 2);\n}\n\ndiv {\n  .average(16px, 50px); // \"call\" the mixin\n  padding: @average;    // use its \"return\" value\n}\n// output\ndiv {\n  padding: 33px;\n}\n```\n\n- mixin嵌套做返回值\n```less\n.unlock(@value) { // outer mixin\n  .doSomething() { // nested mixin\n    declaration: @value;\n  }\n}\n\n#namespace {\n  .unlock(5); // unlock doSomething mixin\n  .doSomething(); //nested mixin was copied here and is usable\n}\n// output\n#namespace {\n  declaration: 5;\n}\n```\n\n### 内置函数\n- color(\"#aaa\");\n将一个字符串转化为颜色\n\n- image-size(\"file.png\")\n- image-width(file)\n- image-height(file)\n返回传入的图片尺寸(px)\n\n- convert(9s, ms)\n单位换算\n\n- data-uri(file)\n将图片转化为base64格式\n\n- default()\n\n- unit(5em, px) => 5px\n单位转换\n- get-unit(5px) => px\n获取单位\n\n- svg-gradient(方位, 渐变色)\n创建渐变svg\n\n","source":"_posts/less-study.md","raw":"---\ntitle: less-study\ndate: 2018-01-23 12:18:13\ntags:\n---\n\n\n<!--more-->\n\n## Less\n\n### Variables (变量)\n变量将同类重复的值提取出来，让我们更方便的控制更改这些值，使代码更易于维护。\n\n####  用于属性\n```less\n@variable: #bbb;\n#test {\n  color: @variable;\n}\n// 编译后\n#test {\n  color: #bbb;\n}\n```\n\n####  用于选择器\n```less\n@selector: xunfeng;\n.@{selector} {  };\n// 编译后\n.xunfeng { };\n```\n\n#### URLs\n```less\n@image: \"../img\";\n\n.xunfeng {\n  background: url(\"@{image}/img.png\")\n}\n```\n\n#### Import 模块引入\n```less\n @themes: \"../../scr/themes\";\n \n @import \"@{themes}/default.less\";\n```\n\n#### Property 属性名变量\n```less\n@property: color;\n\n.xunfeng {\n  @{property}: #bbb;\n  background-@{property}: #666;\n}\n```\n#### 变量名指针？\n```less\n@test：\"m m m m m\";\n@var: \"test\";\ncontent: @@var;\n// 编译后\ncontent: \"m m m m m\";\n```\n\n#### Lazy Loading（我理解意思就是变量提升？）\n```less\n// 方法1\n.lazy-eval-scope {\n  width: @var;\n}\n\n@var: @a;\n@a: 9%;\n// 方法2\n.lazy-eval-scope {\n  width: @var;\n  @a: 9%;\n}\n\n@var: @a;\n@a: 100%;\n//都会编译为\n.lazy-eval-scope {\n  width: 9%;\n}\n```\n### Extend (继承)\n\n```less\nul {\n  &:extend(.class);\n  color: red;\n}\n.calss {\n  font-size: 16px;\n}\n// 编译后\nul {\n  font-size:16px;\n  color: red;\n}\n.class {\n  color: red;\n}\n\n// 一致效果\n.a:extend(.b) { }\n.a { &:extend(.b); }\n.c:extend(.d all) {\n  // 继承所有与.d有关的属性  例如： .d .f、 .f .d\n}\n// 一次继承多个\n.d:extend(.f, .g) { }\n.d:extend(.f):extend(.g) { }\n```\n- 可以继承嵌套选择器中的属性\n```less\n.bucket {\n  tr { \n    color: blue;\n  }\n}\n.some-class:extend(.bucket tr) {}\n// 编译后\n.bucket tr,\n.some-class {\n  color: blue;\n}\n\n.bucket {\n  tr & { \n    color: blue;\n  }\n}\n.some-class:extend(tr .bucket) {}\n// 编译后\ntr .bucket,\n.some-class {\n  color: blue;\n}\n```\n- 必须要精确匹配\n- 通配符*对继承也有影响\n- 选择器顺序也需要一致\n- `1n`与`n`在继承中不被匹配\n- 引用类 `[title=test]`, `[title='test']`, `[title=\"test\"]` 表现一致\n- `all` 匹配全部\n- `@media`控制范围\n- 简化写法\n```less\n.easyclass() {\n  display: inline-block;\n  font-size: 14px;\n}\n.easy {\n  .easyclass;\n}\n// output\n.easy {\n  display: inline-block;\n  font-size: 14px;\n}\n```\n\n### Mixins (混合)\n将现有的样式混合加入到新样式类中\n```less\n.a { color: red;}\n.b { background: blue;}\n.mixin {\n  .a(); // 二者方式皆可用\n  .b;\n}\n// ouput \n.a { color: red;}\n.b { background: blue;}\n.mixin {\n  color: red;\n  background: blue;\n}\n```\n\n不产出用于混合的样式类\n```less\n.mixin() {\n  background: red;\n}\n.class {\n  .mixin;\n}\n// output \n.class {\n  background: red;\n}\n```\n\n- 在`mixin()`类后添加`!important`会给所有`mixin()`中的属性添加`!important`\n\n- 带参数的`Mixins`\n```less \n.params-mixins(@color: red) { // 默认参数\n  background: @color;\n  color: @color;\n}\n.header {\n  .params-mixins(#bbb);\n}\n.footer {\n  .params-mixins;\n}\n// output\n.header {\n  background: #bbb;\n  color: #bbb;\n}\n.footer {\n  background: red;\n  color: red;\n}\n\n// 多参数\nmixins(@color: red; @size: 16px) {\n  color: @color;\n  font-size: @size;\n}\n```\n- `@arguments` 指代所有参数\n\n### Mixins as Function\n可继承mixin中的变量\n```less\n.average(@x, @y) {\n  @average: ((@x + @y) / 2);\n}\n\ndiv {\n  .average(16px, 50px); // \"call\" the mixin\n  padding: @average;    // use its \"return\" value\n}\n// output\ndiv {\n  padding: 33px;\n}\n```\n\n- mixin嵌套做返回值\n```less\n.unlock(@value) { // outer mixin\n  .doSomething() { // nested mixin\n    declaration: @value;\n  }\n}\n\n#namespace {\n  .unlock(5); // unlock doSomething mixin\n  .doSomething(); //nested mixin was copied here and is usable\n}\n// output\n#namespace {\n  declaration: 5;\n}\n```\n\n### 内置函数\n- color(\"#aaa\");\n将一个字符串转化为颜色\n\n- image-size(\"file.png\")\n- image-width(file)\n- image-height(file)\n返回传入的图片尺寸(px)\n\n- convert(9s, ms)\n单位换算\n\n- data-uri(file)\n将图片转化为base64格式\n\n- default()\n\n- unit(5em, px) => 5px\n单位转换\n- get-unit(5px) => px\n获取单位\n\n- svg-gradient(方位, 渐变色)\n创建渐变svg\n\n","slug":"less-study","published":1,"updated":"2018-01-23T12:47:20.193Z","_id":"cjcr55ul4000hjbzexphkis50","comments":1,"layout":"post","photos":[],"link":"","content":"<a id=\"more\"></a>\n<h2 id=\"Less\"><a href=\"#Less\" class=\"headerlink\" title=\"Less\"></a>Less</h2><h3 id=\"Variables-变量\"><a href=\"#Variables-变量\" class=\"headerlink\" title=\"Variables (变量)\"></a>Variables (变量)</h3><p>变量将同类重复的值提取出来，让我们更方便的控制更改这些值，使代码更易于维护。</p>\n<h4 id=\"用于属性\"><a href=\"#用于属性\" class=\"headerlink\" title=\"用于属性\"></a>用于属性</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@variable:</span> <span class=\"number\">#bbb</span>;</div><div class=\"line\"><span class=\"selector-id\">#test</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@variable</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"selector-id\">#test</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#bbb</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"用于选择器\"><a href=\"#用于选择器\" class=\"headerlink\" title=\"用于选择器\"></a>用于选择器</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@selector:</span> xunfeng;</div><div class=\"line\"><span class=\"selector-class\">.@&#123;selector&#125;</span> &#123;  &#125;;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"selector-class\">.xunfeng</span> &#123; &#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"URLs\"><a href=\"#URLs\" class=\"headerlink\" title=\"URLs\"></a>URLs</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@image:</span> <span class=\"string\">\"../img\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.xunfeng</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: url(<span class=\"string\">\"@&#123;image&#125;/img.png\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Import-模块引入\"><a href=\"#Import-模块引入\" class=\"headerlink\" title=\"Import 模块引入\"></a>Import 模块引入</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@themes:</span> <span class=\"string\">\"../../scr/themes\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"@&#123;themes&#125;/default.less\"</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"Property-属性名变量\"><a href=\"#Property-属性名变量\" class=\"headerlink\" title=\"Property 属性名变量\"></a>Property 属性名变量</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@property:</span> color;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.xunfeng</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">@&#123;property&#125;</span>: <span class=\"number\">#bbb</span>;</div><div class=\"line\">  <span class=\"selector-tag\">background-</span><span class=\"variable\">@&#123;property&#125;</span>: <span class=\"selector-id\">#666</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"变量名指针？\"><a href=\"#变量名指针？\" class=\"headerlink\" title=\"变量名指针？\"></a>变量名指针？</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@test</span>：<span class=\"string\">\"m m m m m\"</span>;</div><div class=\"line\"><span class=\"variable\">@var:</span> <span class=\"string\">\"test\"</span>;</div><div class=\"line\"><span class=\"attribute\">content</span>: <span class=\"variable\">@@var</span>;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"attribute\">content</span>: <span class=\"string\">\"m m m m m\"</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"Lazy-Loading（我理解意思就是变量提升？）\"><a href=\"#Lazy-Loading（我理解意思就是变量提升？）\" class=\"headerlink\" title=\"Lazy Loading（我理解意思就是变量提升？）\"></a>Lazy Loading（我理解意思就是变量提升？）</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 方法1</span></div><div class=\"line\"><span class=\"selector-class\">.lazy-eval-scope</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">@var</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@var:</span> <span class=\"variable\">@a</span>;</div><div class=\"line\"><span class=\"variable\">@a:</span> <span class=\"number\">9%</span>;</div><div class=\"line\"><span class=\"comment\">// 方法2</span></div><div class=\"line\"><span class=\"selector-class\">.lazy-eval-scope</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">@var</span>;</div><div class=\"line\">  <span class=\"variable\">@a:</span> <span class=\"number\">9%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@var:</span> <span class=\"variable\">@a</span>;</div><div class=\"line\"><span class=\"variable\">@a:</span> <span class=\"number\">100%</span>;</div><div class=\"line\"><span class=\"comment\">//都会编译为</span></div><div class=\"line\"><span class=\"selector-class\">.lazy-eval-scope</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">9%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Extend-继承\"><a href=\"#Extend-继承\" class=\"headerlink\" title=\"Extend (继承)\"></a>Extend (继承)</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:extend(.class)</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calss</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一致效果</span></div><div class=\"line\"><span class=\"selector-class\">.a</span><span class=\"selector-pseudo\">:extend(.b)</span> &#123; &#125;</div><div class=\"line\"><span class=\"selector-class\">.a</span> &#123; <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:extend(.b)</span>; &#125;</div><div class=\"line\"><span class=\"selector-class\">.c</span><span class=\"selector-pseudo\">:extend(.d</span> <span class=\"keyword\">all</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// 继承所有与.d有关的属性  例如： .d .f、 .f .d</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 一次继承多个</span></div><div class=\"line\"><span class=\"selector-class\">.d</span><span class=\"selector-pseudo\">:extend(.f</span>, <span class=\"selector-class\">.g</span>) &#123; &#125;</div><div class=\"line\"><span class=\"selector-class\">.d</span><span class=\"selector-pseudo\">:extend(.f)</span><span class=\"selector-pseudo\">:extend(.g)</span> &#123; &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>可以继承嵌套选择器中的属性</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.bucket</span> &#123;</div><div class=\"line\">  <span class=\"selector-tag\">tr</span> &#123; </div><div class=\"line\">    <span class=\"attribute\">color</span>: blue;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.some-class</span><span class=\"selector-pseudo\">:extend(.bucket</span> <span class=\"selector-tag\">tr</span>) &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"selector-class\">.bucket</span> <span class=\"selector-tag\">tr</span>,</div><div class=\"line\"><span class=\"selector-class\">.some-class</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.bucket</span> &#123;</div><div class=\"line\">  <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">&amp;</span> &#123; </div><div class=\"line\">    <span class=\"attribute\">color</span>: blue;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.some-class</span><span class=\"selector-pseudo\">:extend(tr</span> <span class=\"selector-class\">.bucket</span>) &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"selector-tag\">tr</span> <span class=\"selector-class\">.bucket</span>,</div><div class=\"line\"><span class=\"selector-class\">.some-class</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>必须要精确匹配</p>\n</li>\n<li>通配符*对继承也有影响</li>\n<li>选择器顺序也需要一致</li>\n<li><code>1n</code>与<code>n</code>在继承中不被匹配</li>\n<li>引用类 <code>[title=test]</code>, <code>[title=&#39;test&#39;]</code>, <code>[title=&quot;test&quot;]</code> 表现一致</li>\n<li><code>all</code> 匹配全部</li>\n<li><code>@media</code>控制范围</li>\n<li>简化写法<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.easyclass</span>() &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.easy</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.easyclass</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// output</span></div><div class=\"line\"><span class=\"selector-class\">.easy</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Mixins-混合\"><a href=\"#Mixins-混合\" class=\"headerlink\" title=\"Mixins (混合)\"></a>Mixins (混合)</h3><p>将现有的样式混合加入到新样式类中<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.a</span> &#123; <span class=\"attribute\">color</span>: red;&#125;</div><div class=\"line\"><span class=\"selector-class\">.b</span> &#123; <span class=\"attribute\">background</span>: blue;&#125;</div><div class=\"line\"><span class=\"selector-class\">.mixin</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.a</span>(); <span class=\"comment\">// 二者方式皆可用</span></div><div class=\"line\">  <span class=\"selector-class\">.b</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ouput </span></div><div class=\"line\"><span class=\"selector-class\">.a</span> &#123; <span class=\"attribute\">color</span>: red;&#125;</div><div class=\"line\"><span class=\"selector-class\">.b</span> &#123; <span class=\"attribute\">background</span>: blue;&#125;</div><div class=\"line\"><span class=\"selector-class\">.mixin</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">  <span class=\"attribute\">background</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不产出用于混合的样式类<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.mixin</span>() &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.mixin</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// output </span></div><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>在<code>mixin()</code>类后添加<code>!important</code>会给所有<code>mixin()</code>中的属性添加<code>!important</code></p>\n</li>\n<li><p>带参数的<code>Mixins</code></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.params-mixins</span>(<span class=\"variable\">@color</span>: red) &#123; <span class=\"comment\">// 默认参数</span></div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"variable\">@color</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.header</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.params-mixins</span>(<span class=\"number\">#bbb</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.params-mixins</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// output</span></div><div class=\"line\"><span class=\"selector-class\">.header</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#bbb</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#bbb</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: red;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多参数</span></div><div class=\"line\"><span class=\"selector-tag\">mixins</span>(<span class=\"variable\">@color</span>: red; <span class=\"variable\">@size</span>: <span class=\"number\">16px</span>) &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">@size</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>@arguments</code> 指代所有参数</p>\n</li>\n</ul>\n<h3 id=\"Mixins-as-Function\"><a href=\"#Mixins-as-Function\" class=\"headerlink\" title=\"Mixins as Function\"></a>Mixins as Function</h3><p>可继承mixin中的变量<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.average</span>(<span class=\"variable\">@x</span>, <span class=\"variable\">@y</span>) &#123;</div><div class=\"line\">  <span class=\"variable\">@average:</span> ((<span class=\"variable\">@x</span> + <span class=\"variable\">@y</span>) / <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.average</span>(<span class=\"number\">16px</span>, <span class=\"number\">50px</span>); <span class=\"comment\">// \"call\" the mixin</span></div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"variable\">@average</span>;    <span class=\"comment\">// use its \"return\" value</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// output</span></div><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">33px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>mixin嵌套做返回值<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.unlock</span>(<span class=\"variable\">@value</span>) &#123; <span class=\"comment\">// outer mixin</span></div><div class=\"line\">  <span class=\"selector-class\">.doSomething</span>() &#123; <span class=\"comment\">// nested mixin</span></div><div class=\"line\">    <span class=\"attribute\">declaration</span>: <span class=\"variable\">@value</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#namespace</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.unlock</span>(<span class=\"number\">5</span>); <span class=\"comment\">// unlock doSomething mixin</span></div><div class=\"line\">  <span class=\"selector-class\">.doSomething</span>(); <span class=\"comment\">//nested mixin was copied here and is usable</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// output</span></div><div class=\"line\"><span class=\"selector-id\">#namespace</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">declaration</span>: <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h3><ul>\n<li><p>color(“#aaa”);<br>将一个字符串转化为颜色</p>\n</li>\n<li><p>image-size(“file.png”)</p>\n</li>\n<li>image-width(file)</li>\n<li><p>image-height(file)<br>返回传入的图片尺寸(px)</p>\n</li>\n<li><p>convert(9s, ms)<br>单位换算</p>\n</li>\n<li><p>data-uri(file)<br>将图片转化为base64格式</p>\n</li>\n<li><p>default()</p>\n</li>\n<li><p>unit(5em, px) =&gt; 5px<br>单位转换</p>\n</li>\n<li><p>get-unit(5px) =&gt; px<br>获取单位</p>\n</li>\n<li><p>svg-gradient(方位, 渐变色)<br>创建渐变svg</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Less\"><a href=\"#Less\" class=\"headerlink\" title=\"Less\"></a>Less</h2><h3 id=\"Variables-变量\"><a href=\"#Variables-变量\" class=\"headerlink\" title=\"Variables (变量)\"></a>Variables (变量)</h3><p>变量将同类重复的值提取出来，让我们更方便的控制更改这些值，使代码更易于维护。</p>\n<h4 id=\"用于属性\"><a href=\"#用于属性\" class=\"headerlink\" title=\"用于属性\"></a>用于属性</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@variable:</span> <span class=\"number\">#bbb</span>;</div><div class=\"line\"><span class=\"selector-id\">#test</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@variable</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"selector-id\">#test</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#bbb</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"用于选择器\"><a href=\"#用于选择器\" class=\"headerlink\" title=\"用于选择器\"></a>用于选择器</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@selector:</span> xunfeng;</div><div class=\"line\"><span class=\"selector-class\">.@&#123;selector&#125;</span> &#123;  &#125;;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"selector-class\">.xunfeng</span> &#123; &#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"URLs\"><a href=\"#URLs\" class=\"headerlink\" title=\"URLs\"></a>URLs</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@image:</span> <span class=\"string\">\"../img\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.xunfeng</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: url(<span class=\"string\">\"@&#123;image&#125;/img.png\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Import-模块引入\"><a href=\"#Import-模块引入\" class=\"headerlink\" title=\"Import 模块引入\"></a>Import 模块引入</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@themes:</span> <span class=\"string\">\"../../scr/themes\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"@&#123;themes&#125;/default.less\"</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"Property-属性名变量\"><a href=\"#Property-属性名变量\" class=\"headerlink\" title=\"Property 属性名变量\"></a>Property 属性名变量</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@property:</span> color;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.xunfeng</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">@&#123;property&#125;</span>: <span class=\"number\">#bbb</span>;</div><div class=\"line\">  <span class=\"selector-tag\">background-</span><span class=\"variable\">@&#123;property&#125;</span>: <span class=\"selector-id\">#666</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"变量名指针？\"><a href=\"#变量名指针？\" class=\"headerlink\" title=\"变量名指针？\"></a>变量名指针？</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@test</span>：<span class=\"string\">\"m m m m m\"</span>;</div><div class=\"line\"><span class=\"variable\">@var:</span> <span class=\"string\">\"test\"</span>;</div><div class=\"line\"><span class=\"attribute\">content</span>: <span class=\"variable\">@@var</span>;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"attribute\">content</span>: <span class=\"string\">\"m m m m m\"</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"Lazy-Loading（我理解意思就是变量提升？）\"><a href=\"#Lazy-Loading（我理解意思就是变量提升？）\" class=\"headerlink\" title=\"Lazy Loading（我理解意思就是变量提升？）\"></a>Lazy Loading（我理解意思就是变量提升？）</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 方法1</span></div><div class=\"line\"><span class=\"selector-class\">.lazy-eval-scope</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">@var</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@var:</span> <span class=\"variable\">@a</span>;</div><div class=\"line\"><span class=\"variable\">@a:</span> <span class=\"number\">9%</span>;</div><div class=\"line\"><span class=\"comment\">// 方法2</span></div><div class=\"line\"><span class=\"selector-class\">.lazy-eval-scope</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">@var</span>;</div><div class=\"line\">  <span class=\"variable\">@a:</span> <span class=\"number\">9%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@var:</span> <span class=\"variable\">@a</span>;</div><div class=\"line\"><span class=\"variable\">@a:</span> <span class=\"number\">100%</span>;</div><div class=\"line\"><span class=\"comment\">//都会编译为</span></div><div class=\"line\"><span class=\"selector-class\">.lazy-eval-scope</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">9%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Extend-继承\"><a href=\"#Extend-继承\" class=\"headerlink\" title=\"Extend (继承)\"></a>Extend (继承)</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:extend(.class)</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calss</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一致效果</span></div><div class=\"line\"><span class=\"selector-class\">.a</span><span class=\"selector-pseudo\">:extend(.b)</span> &#123; &#125;</div><div class=\"line\"><span class=\"selector-class\">.a</span> &#123; <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:extend(.b)</span>; &#125;</div><div class=\"line\"><span class=\"selector-class\">.c</span><span class=\"selector-pseudo\">:extend(.d</span> <span class=\"keyword\">all</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// 继承所有与.d有关的属性  例如： .d .f、 .f .d</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 一次继承多个</span></div><div class=\"line\"><span class=\"selector-class\">.d</span><span class=\"selector-pseudo\">:extend(.f</span>, <span class=\"selector-class\">.g</span>) &#123; &#125;</div><div class=\"line\"><span class=\"selector-class\">.d</span><span class=\"selector-pseudo\">:extend(.f)</span><span class=\"selector-pseudo\">:extend(.g)</span> &#123; &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>可以继承嵌套选择器中的属性</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.bucket</span> &#123;</div><div class=\"line\">  <span class=\"selector-tag\">tr</span> &#123; </div><div class=\"line\">    <span class=\"attribute\">color</span>: blue;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.some-class</span><span class=\"selector-pseudo\">:extend(.bucket</span> <span class=\"selector-tag\">tr</span>) &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"selector-class\">.bucket</span> <span class=\"selector-tag\">tr</span>,</div><div class=\"line\"><span class=\"selector-class\">.some-class</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.bucket</span> &#123;</div><div class=\"line\">  <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">&amp;</span> &#123; </div><div class=\"line\">    <span class=\"attribute\">color</span>: blue;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.some-class</span><span class=\"selector-pseudo\">:extend(tr</span> <span class=\"selector-class\">.bucket</span>) &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 编译后</span></div><div class=\"line\"><span class=\"selector-tag\">tr</span> <span class=\"selector-class\">.bucket</span>,</div><div class=\"line\"><span class=\"selector-class\">.some-class</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>必须要精确匹配</p>\n</li>\n<li>通配符*对继承也有影响</li>\n<li>选择器顺序也需要一致</li>\n<li><code>1n</code>与<code>n</code>在继承中不被匹配</li>\n<li>引用类 <code>[title=test]</code>, <code>[title=&#39;test&#39;]</code>, <code>[title=&quot;test&quot;]</code> 表现一致</li>\n<li><code>all</code> 匹配全部</li>\n<li><code>@media</code>控制范围</li>\n<li>简化写法<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.easyclass</span>() &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.easy</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.easyclass</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// output</span></div><div class=\"line\"><span class=\"selector-class\">.easy</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Mixins-混合\"><a href=\"#Mixins-混合\" class=\"headerlink\" title=\"Mixins (混合)\"></a>Mixins (混合)</h3><p>将现有的样式混合加入到新样式类中<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.a</span> &#123; <span class=\"attribute\">color</span>: red;&#125;</div><div class=\"line\"><span class=\"selector-class\">.b</span> &#123; <span class=\"attribute\">background</span>: blue;&#125;</div><div class=\"line\"><span class=\"selector-class\">.mixin</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.a</span>(); <span class=\"comment\">// 二者方式皆可用</span></div><div class=\"line\">  <span class=\"selector-class\">.b</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ouput </span></div><div class=\"line\"><span class=\"selector-class\">.a</span> &#123; <span class=\"attribute\">color</span>: red;&#125;</div><div class=\"line\"><span class=\"selector-class\">.b</span> &#123; <span class=\"attribute\">background</span>: blue;&#125;</div><div class=\"line\"><span class=\"selector-class\">.mixin</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">  <span class=\"attribute\">background</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不产出用于混合的样式类<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.mixin</span>() &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.mixin</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// output </span></div><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>在<code>mixin()</code>类后添加<code>!important</code>会给所有<code>mixin()</code>中的属性添加<code>!important</code></p>\n</li>\n<li><p>带参数的<code>Mixins</code></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.params-mixins</span>(<span class=\"variable\">@color</span>: red) &#123; <span class=\"comment\">// 默认参数</span></div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"variable\">@color</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.header</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.params-mixins</span>(<span class=\"number\">#bbb</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.params-mixins</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// output</span></div><div class=\"line\"><span class=\"selector-class\">.header</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#bbb</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#bbb</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: red;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多参数</span></div><div class=\"line\"><span class=\"selector-tag\">mixins</span>(<span class=\"variable\">@color</span>: red; <span class=\"variable\">@size</span>: <span class=\"number\">16px</span>) &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">@size</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>@arguments</code> 指代所有参数</p>\n</li>\n</ul>\n<h3 id=\"Mixins-as-Function\"><a href=\"#Mixins-as-Function\" class=\"headerlink\" title=\"Mixins as Function\"></a>Mixins as Function</h3><p>可继承mixin中的变量<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.average</span>(<span class=\"variable\">@x</span>, <span class=\"variable\">@y</span>) &#123;</div><div class=\"line\">  <span class=\"variable\">@average:</span> ((<span class=\"variable\">@x</span> + <span class=\"variable\">@y</span>) / <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.average</span>(<span class=\"number\">16px</span>, <span class=\"number\">50px</span>); <span class=\"comment\">// \"call\" the mixin</span></div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"variable\">@average</span>;    <span class=\"comment\">// use its \"return\" value</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// output</span></div><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">33px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>mixin嵌套做返回值<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.unlock</span>(<span class=\"variable\">@value</span>) &#123; <span class=\"comment\">// outer mixin</span></div><div class=\"line\">  <span class=\"selector-class\">.doSomething</span>() &#123; <span class=\"comment\">// nested mixin</span></div><div class=\"line\">    <span class=\"attribute\">declaration</span>: <span class=\"variable\">@value</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#namespace</span> &#123;</div><div class=\"line\">  <span class=\"selector-class\">.unlock</span>(<span class=\"number\">5</span>); <span class=\"comment\">// unlock doSomething mixin</span></div><div class=\"line\">  <span class=\"selector-class\">.doSomething</span>(); <span class=\"comment\">//nested mixin was copied here and is usable</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// output</span></div><div class=\"line\"><span class=\"selector-id\">#namespace</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">declaration</span>: <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h3><ul>\n<li><p>color(“#aaa”);<br>将一个字符串转化为颜色</p>\n</li>\n<li><p>image-size(“file.png”)</p>\n</li>\n<li>image-width(file)</li>\n<li><p>image-height(file)<br>返回传入的图片尺寸(px)</p>\n</li>\n<li><p>convert(9s, ms)<br>单位换算</p>\n</li>\n<li><p>data-uri(file)<br>将图片转化为base64格式</p>\n</li>\n<li><p>default()</p>\n</li>\n<li><p>unit(5em, px) =&gt; 5px<br>单位转换</p>\n</li>\n<li><p>get-unit(5px) =&gt; px<br>获取单位</p>\n</li>\n<li><p>svg-gradient(方位, 渐变色)<br>创建渐变svg</p>\n</li>\n</ul>"},{"title":"js中的arguments","date":"2016-12-09T07:42:27.000Z","_content":"开始复习javascript的一些基础。\n\n<!--more-->\n# argument\n  是当前函数的一个内置属性，在函数代码中，使用特殊对象 arguments，开发者无需明确指出参数名，就能访问它们。\n\n- 无需明确参数即可重写函数\n- 可检测调用参数的个数\n- arguments对象的长度是由实参个数而不是形参个数决定的，没有调用的参数不能被获取\n```js\n\t\tvar arr= function(a,b,c){\n\t\t\t a+=5;\n\t\t\t b+=1;\n\t\t\t console.log(arguments[0]);\t\t\t\t\t//输出 10\n\t\t\t console.log(arguments[1]);\t\t\t\t\t//输出undefined\t\n\t\t\t console.log(arguments);\t\t\t\t\t   //输出[10]\t\t\t\t\n\t\t\t console.log(arguments.length);\t\t\t\t//输出1\n\t\t};\n\t\tarr(5);\n```\n- 函数重载：函数返回值不同或形参个数不同。\njs的函数声明没有返回值类型\nJavaScript中形参的个数严格意义上来讲只是为了方便在函数中的变量操作，实际上实参已经存储在arguments对象中了\n用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载\n```js\n\t\tvar arr= function(a,b,c){\n\t\t\tif(arguments.length==1){\n\t\t\t\tconsole.log(arguments[0]+1);\n\t\t\t}\n\t\t\telse if(arguments.length>1){\n\t\t\t\tfor(var i=0;i<arguments.length;i++){\n\t\t\t\t\tconsole.log(i+\":\"+arguments[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tarr(5);        //输出6\n\t\tarr(5,6,7);  //输出0：5，1：6，2：7\n```\n- arguments.callee\n返回此arguments对象所在的当前函数引用,递归中代替函数本身\n```js\n\t\tvar arr= function(a){\n\t\t\tif(a==1){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn  a + arguments.callee(--a);\n\t\t\t}\n\t};\n\t\tb=arr(6);\n\t\tconsole.log(b); //输出21\n```","source":"_posts/js中的arguments.md","raw":"---\ntitle: js中的arguments\ndate: 2016-12-09 15:42:27\ntags:\n  - javascript\n---\n开始复习javascript的一些基础。\n\n<!--more-->\n# argument\n  是当前函数的一个内置属性，在函数代码中，使用特殊对象 arguments，开发者无需明确指出参数名，就能访问它们。\n\n- 无需明确参数即可重写函数\n- 可检测调用参数的个数\n- arguments对象的长度是由实参个数而不是形参个数决定的，没有调用的参数不能被获取\n```js\n\t\tvar arr= function(a,b,c){\n\t\t\t a+=5;\n\t\t\t b+=1;\n\t\t\t console.log(arguments[0]);\t\t\t\t\t//输出 10\n\t\t\t console.log(arguments[1]);\t\t\t\t\t//输出undefined\t\n\t\t\t console.log(arguments);\t\t\t\t\t   //输出[10]\t\t\t\t\n\t\t\t console.log(arguments.length);\t\t\t\t//输出1\n\t\t};\n\t\tarr(5);\n```\n- 函数重载：函数返回值不同或形参个数不同。\njs的函数声明没有返回值类型\nJavaScript中形参的个数严格意义上来讲只是为了方便在函数中的变量操作，实际上实参已经存储在arguments对象中了\n用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载\n```js\n\t\tvar arr= function(a,b,c){\n\t\t\tif(arguments.length==1){\n\t\t\t\tconsole.log(arguments[0]+1);\n\t\t\t}\n\t\t\telse if(arguments.length>1){\n\t\t\t\tfor(var i=0;i<arguments.length;i++){\n\t\t\t\t\tconsole.log(i+\":\"+arguments[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tarr(5);        //输出6\n\t\tarr(5,6,7);  //输出0：5，1：6，2：7\n```\n- arguments.callee\n返回此arguments对象所在的当前函数引用,递归中代替函数本身\n```js\n\t\tvar arr= function(a){\n\t\t\tif(a==1){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn  a + arguments.callee(--a);\n\t\t\t}\n\t};\n\t\tb=arr(6);\n\t\tconsole.log(b); //输出21\n```","slug":"js中的arguments","published":1,"updated":"2018-01-22T03:07:51.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ul6000ijbze9t1f017o","content":"<p>开始复习javascript的一些基础。</p>\n<a id=\"more\"></a>\n<h1 id=\"argument\"><a href=\"#argument\" class=\"headerlink\" title=\"argument\"></a>argument</h1><p>  是当前函数的一个内置属性，在函数代码中，使用特殊对象 arguments，开发者无需明确指出参数名，就能访问它们。</p>\n<ul>\n<li>无需明确参数即可重写函数</li>\n<li>可检测调用参数的个数</li>\n<li><p>arguments对象的长度是由实参个数而不是形参个数决定的，没有调用的参数不能被获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</div><div class=\"line\">\t a+=<span class=\"number\">5</span>;</div><div class=\"line\">\t b+=<span class=\"number\">1</span>;</div><div class=\"line\">\t <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]);\t\t\t\t\t<span class=\"comment\">//输出 10</span></div><div class=\"line\">\t <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]);\t\t\t\t\t<span class=\"comment\">//输出undefined\t</span></div><div class=\"line\">\t <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);\t\t\t\t\t   <span class=\"comment\">//输出[10]\t\t\t\t</span></div><div class=\"line\">\t <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.length);\t\t\t\t<span class=\"comment\">//输出1</span></div><div class=\"line\">&#125;;</div><div class=\"line\">arr(<span class=\"number\">5</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>函数重载：函数返回值不同或形参个数不同。<br>js的函数声明没有返回值类型<br>JavaScript中形参的个数严格意义上来讲只是为了方便在函数中的变量操作，实际上实参已经存储在arguments对象中了<br>用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length&gt;<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(i+<span class=\"string\">\":\"</span>+<span class=\"built_in\">arguments</span>[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">arr(<span class=\"number\">5</span>);        <span class=\"comment\">//输出6</span></div><div class=\"line\">arr(<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>);  <span class=\"comment\">//输出0：5，1：6，2：7</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>arguments.callee<br>返回此arguments对象所在的当前函数引用,递归中代替函数本身</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">var</span> arr= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(a==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>  a + <span class=\"built_in\">arguments</span>.callee(--a);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">\tb=arr(<span class=\"number\">6</span>);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//输出21</span></div></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>开始复习javascript的一些基础。</p>","more":"<h1 id=\"argument\"><a href=\"#argument\" class=\"headerlink\" title=\"argument\"></a>argument</h1><p>  是当前函数的一个内置属性，在函数代码中，使用特殊对象 arguments，开发者无需明确指出参数名，就能访问它们。</p>\n<ul>\n<li>无需明确参数即可重写函数</li>\n<li>可检测调用参数的个数</li>\n<li><p>arguments对象的长度是由实参个数而不是形参个数决定的，没有调用的参数不能被获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</div><div class=\"line\">\t a+=<span class=\"number\">5</span>;</div><div class=\"line\">\t b+=<span class=\"number\">1</span>;</div><div class=\"line\">\t <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]);\t\t\t\t\t<span class=\"comment\">//输出 10</span></div><div class=\"line\">\t <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]);\t\t\t\t\t<span class=\"comment\">//输出undefined\t</span></div><div class=\"line\">\t <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);\t\t\t\t\t   <span class=\"comment\">//输出[10]\t\t\t\t</span></div><div class=\"line\">\t <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.length);\t\t\t\t<span class=\"comment\">//输出1</span></div><div class=\"line\">&#125;;</div><div class=\"line\">arr(<span class=\"number\">5</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>函数重载：函数返回值不同或形参个数不同。<br>js的函数声明没有返回值类型<br>JavaScript中形参的个数严格意义上来讲只是为了方便在函数中的变量操作，实际上实参已经存储在arguments对象中了<br>用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length&gt;<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(i+<span class=\"string\">\":\"</span>+<span class=\"built_in\">arguments</span>[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">arr(<span class=\"number\">5</span>);        <span class=\"comment\">//输出6</span></div><div class=\"line\">arr(<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>);  <span class=\"comment\">//输出0：5，1：6，2：7</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>arguments.callee<br>返回此arguments对象所在的当前函数引用,递归中代替函数本身</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">var</span> arr= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(a==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>  a + <span class=\"built_in\">arguments</span>.callee(--a);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">\tb=arr(<span class=\"number\">6</span>);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//输出21</span></div></pre></td></tr></table></figure></li>\n</ul>"},{"title":"css布局","date":"2017-01-25T13:58:24.000Z","_content":"开始复习复习\n\n<!--more-->\n\n#### css盒子模型\n原理：padding,border,margin三者构成一个盒子。\n\n![图片来自网络](https://sfault-image.b0.upaiyun.com/291/448/2914489531-57d7e11741de5_articlex)\n\nMargin(外边距) - 清除边框外的区域，外边距是透明的。\nBorder(边框) - 围绕在内边距和内容外的边框。\nPadding(内边距) - 清除内容周围的区域，内边距是透明的。\nContent(内容) - 盒子的内容，显示文本和图像。\n\n w3c标准：总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right\n\n IE标准：总宽度 = margin-left + width + margin-right\n\n#### css定位机制\n\n##### 普通流\n  - 元素的位置由元素在HTML文档中的位置决定，从左到右，自上而下。\n  \n  - 块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。\n  \n  - 行内框在一行中水平布置。可以使用水平内边距、边框和外边距调整它们的间距。但是，垂直内边距、边框和外边距不影响行内框的高度。由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。\n  \n##### 定位\n- 相对定位（reletive）\n\t\n\t元素保持其形状及其所占空间，相对于普通流中其他元素的偏移。\n\n- 绝对定位（absloute）\n\n\t相对于已定位的祖先元素，如果没有已定位的祖先元素则相对于最初的包含块。\n\t脱离普通流，覆盖在普通流定位之上\n\t\n- 固定定位（fixed）\n\n\t相对于浏览器窗口的绝对定位\n\t\n##### 浮动\n- 不在普通流中占据空间，但会对之后的浮动元素产生空间占位影响\n\n\n\t\n#### 布局\n\n##### 常见布局\n\n- 单列水平居中布局, 一列定宽一列自适应布局, 两列定宽一列自适应布局, 两侧定宽中间自适应三列布局。\n\n- 圣杯与双飞翼是常见的三列布局，左右两列宽度固定，中列自适应。\n\n##### 圣杯布局\n\n- 为了给两边侧栏空出位置，给container元素设置padding\n\n- 左右两个div用相对定位并分配left，right属性，用负边距消除占位\n\n- main div设置100%宽度\n\n\n```html\n<div class=\"container\">\n\t<div class=\"main\"></div>\n\t<div class=\"left\"></div>\n\t<div class=\"right\"></div>\n</div>\n```\n\n```css\nbody {\n\tpadding: 0;\n\tmargin: 0;\n    min-width: 600px; /* 2*left + right */\n}\n.container {\n    padding-left: 200px;\n    padding-right: 200px;\n}\n.main {\n    float: left;\n    width: 100%;\n    height: 300px;\n    background-color: red;\n}\n.left {\n    position: relative;\n    left: -200px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -100%;\n    background-color: blue;\n}\n.right {\n    position: relative;\n    right: -210px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -200px;\n    background-color: green;\n}\n```\n\n##### 双飞翼布局\n\n- 三列左浮动\n- 为了不让main内容被遮挡，给其设置padding\n- 用负边距给左右两列定位，消除占位\n\n```html\n<div class=\"main-con\">\n\t<div class=\"main\"></div>\n</div>\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n```\n\n```css\n.main-con {\n\tfloat: left;\n\twidth: 100%;\n}\n\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tmargin-right: 210px;\n\tbackground-color: red;\n}\n\n.left {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -100%;\n\tbackground-color: blue;\n}\n\n.right {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -200px;\n\tbackground-color: green;\n}\n```\n\n##### 两者异同\n\n- 两者都把主栏放在文档流最前面，优先加载。\n \n- 两者都是三列浮动，然后通过负边距定位消除占位形成三列布局\n\n- 中列main处理不同：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主栏嵌套在div后利用主列的左、右外边距定位。","source":"_posts/css布局.md","raw":"---\ntitle: css布局\ndate: 2017-01-25 21:58:24\ntags:\n---\n开始复习复习\n\n<!--more-->\n\n#### css盒子模型\n原理：padding,border,margin三者构成一个盒子。\n\n![图片来自网络](https://sfault-image.b0.upaiyun.com/291/448/2914489531-57d7e11741de5_articlex)\n\nMargin(外边距) - 清除边框外的区域，外边距是透明的。\nBorder(边框) - 围绕在内边距和内容外的边框。\nPadding(内边距) - 清除内容周围的区域，内边距是透明的。\nContent(内容) - 盒子的内容，显示文本和图像。\n\n w3c标准：总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right\n\n IE标准：总宽度 = margin-left + width + margin-right\n\n#### css定位机制\n\n##### 普通流\n  - 元素的位置由元素在HTML文档中的位置决定，从左到右，自上而下。\n  \n  - 块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。\n  \n  - 行内框在一行中水平布置。可以使用水平内边距、边框和外边距调整它们的间距。但是，垂直内边距、边框和外边距不影响行内框的高度。由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。\n  \n##### 定位\n- 相对定位（reletive）\n\t\n\t元素保持其形状及其所占空间，相对于普通流中其他元素的偏移。\n\n- 绝对定位（absloute）\n\n\t相对于已定位的祖先元素，如果没有已定位的祖先元素则相对于最初的包含块。\n\t脱离普通流，覆盖在普通流定位之上\n\t\n- 固定定位（fixed）\n\n\t相对于浏览器窗口的绝对定位\n\t\n##### 浮动\n- 不在普通流中占据空间，但会对之后的浮动元素产生空间占位影响\n\n\n\t\n#### 布局\n\n##### 常见布局\n\n- 单列水平居中布局, 一列定宽一列自适应布局, 两列定宽一列自适应布局, 两侧定宽中间自适应三列布局。\n\n- 圣杯与双飞翼是常见的三列布局，左右两列宽度固定，中列自适应。\n\n##### 圣杯布局\n\n- 为了给两边侧栏空出位置，给container元素设置padding\n\n- 左右两个div用相对定位并分配left，right属性，用负边距消除占位\n\n- main div设置100%宽度\n\n\n```html\n<div class=\"container\">\n\t<div class=\"main\"></div>\n\t<div class=\"left\"></div>\n\t<div class=\"right\"></div>\n</div>\n```\n\n```css\nbody {\n\tpadding: 0;\n\tmargin: 0;\n    min-width: 600px; /* 2*left + right */\n}\n.container {\n    padding-left: 200px;\n    padding-right: 200px;\n}\n.main {\n    float: left;\n    width: 100%;\n    height: 300px;\n    background-color: red;\n}\n.left {\n    position: relative;\n    left: -200px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -100%;\n    background-color: blue;\n}\n.right {\n    position: relative;\n    right: -210px;\n    float: left;\n    width: 190px;\n    height: 300px;\n    margin-left: -200px;\n    background-color: green;\n}\n```\n\n##### 双飞翼布局\n\n- 三列左浮动\n- 为了不让main内容被遮挡，给其设置padding\n- 用负边距给左右两列定位，消除占位\n\n```html\n<div class=\"main-con\">\n\t<div class=\"main\"></div>\n</div>\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n```\n\n```css\n.main-con {\n\tfloat: left;\n\twidth: 100%;\n}\n\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tmargin-right: 210px;\n\tbackground-color: red;\n}\n\n.left {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -100%;\n\tbackground-color: blue;\n}\n\n.right {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -200px;\n\tbackground-color: green;\n}\n```\n\n##### 两者异同\n\n- 两者都把主栏放在文档流最前面，优先加载。\n \n- 两者都是三列浮动，然后通过负边距定位消除占位形成三列布局\n\n- 中列main处理不同：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主栏嵌套在div后利用主列的左、右外边距定位。","slug":"css布局","published":1,"updated":"2017-10-15T02:52:28.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ul8000kjbzeg30do0xc","content":"<p>开始复习复习</p>\n<a id=\"more\"></a>\n<h4 id=\"css盒子模型\"><a href=\"#css盒子模型\" class=\"headerlink\" title=\"css盒子模型\"></a>css盒子模型</h4><p>原理：padding,border,margin三者构成一个盒子。</p>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/291/448/2914489531-57d7e11741de5_articlex\" alt=\"图片来自网络\"></p>\n<p>Margin(外边距) - 清除边框外的区域，外边距是透明的。<br>Border(边框) - 围绕在内边距和内容外的边框。<br>Padding(内边距) - 清除内容周围的区域，内边距是透明的。<br>Content(内容) - 盒子的内容，显示文本和图像。</p>\n<p> w3c标准：总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</p>\n<p> IE标准：总宽度 = margin-left + width + margin-right</p>\n<h4 id=\"css定位机制\"><a href=\"#css定位机制\" class=\"headerlink\" title=\"css定位机制\"></a>css定位机制</h4><h5 id=\"普通流\"><a href=\"#普通流\" class=\"headerlink\" title=\"普通流\"></a>普通流</h5><ul>\n<li><p>元素的位置由元素在HTML文档中的位置决定，从左到右，自上而下。</p>\n</li>\n<li><p>块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。</p>\n</li>\n<li><p>行内框在一行中水平布置。可以使用水平内边距、边框和外边距调整它们的间距。但是，垂直内边距、边框和外边距不影响行内框的高度。由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。</p>\n</li>\n</ul>\n<h5 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h5><ul>\n<li><p>相对定位（reletive）</p>\n<p>  元素保持其形状及其所占空间，相对于普通流中其他元素的偏移。</p>\n</li>\n<li><p>绝对定位（absloute）</p>\n<p>  相对于已定位的祖先元素，如果没有已定位的祖先元素则相对于最初的包含块。<br>  脱离普通流，覆盖在普通流定位之上</p>\n</li>\n<li><p>固定定位（fixed）</p>\n<p>  相对于浏览器窗口的绝对定位</p>\n</li>\n</ul>\n<h5 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h5><ul>\n<li>不在普通流中占据空间，但会对之后的浮动元素产生空间占位影响</li>\n</ul>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><h5 id=\"常见布局\"><a href=\"#常见布局\" class=\"headerlink\" title=\"常见布局\"></a>常见布局</h5><ul>\n<li><p>单列水平居中布局, 一列定宽一列自适应布局, 两列定宽一列自适应布局, 两侧定宽中间自适应三列布局。</p>\n</li>\n<li><p>圣杯与双飞翼是常见的三列布局，左右两列宽度固定，中列自适应。</p>\n</li>\n</ul>\n<h5 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h5><ul>\n<li><p>为了给两边侧栏空出位置，给container元素设置padding</p>\n</li>\n<li><p>左右两个div用相对定位并分配left，right属性，用负边距消除占位</p>\n</li>\n<li><p>main div设置100%宽度</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">600px</span>; <span class=\"comment\">/* 2*left + right */</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding-right</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.left</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">left</span>: -<span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.right</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">right</span>: -<span class=\"number\">210px</span>;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h5><ul>\n<li>三列左浮动</li>\n<li>为了不让main内容被遮挡，给其设置padding</li>\n<li>用负边距给左右两列定位，消除占位</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-con\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.main-con</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.left</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.right</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"两者异同\"><a href=\"#两者异同\" class=\"headerlink\" title=\"两者异同\"></a>两者异同</h5><ul>\n<li><p>两者都把主栏放在文档流最前面，优先加载。</p>\n</li>\n<li><p>两者都是三列浮动，然后通过负边距定位消除占位形成三列布局</p>\n</li>\n<li><p>中列main处理不同：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主栏嵌套在div后利用主列的左、右外边距定位。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>开始复习复习</p>","more":"<h4 id=\"css盒子模型\"><a href=\"#css盒子模型\" class=\"headerlink\" title=\"css盒子模型\"></a>css盒子模型</h4><p>原理：padding,border,margin三者构成一个盒子。</p>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/291/448/2914489531-57d7e11741de5_articlex\" alt=\"图片来自网络\"></p>\n<p>Margin(外边距) - 清除边框外的区域，外边距是透明的。<br>Border(边框) - 围绕在内边距和内容外的边框。<br>Padding(内边距) - 清除内容周围的区域，内边距是透明的。<br>Content(内容) - 盒子的内容，显示文本和图像。</p>\n<p> w3c标准：总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</p>\n<p> IE标准：总宽度 = margin-left + width + margin-right</p>\n<h4 id=\"css定位机制\"><a href=\"#css定位机制\" class=\"headerlink\" title=\"css定位机制\"></a>css定位机制</h4><h5 id=\"普通流\"><a href=\"#普通流\" class=\"headerlink\" title=\"普通流\"></a>普通流</h5><ul>\n<li><p>元素的位置由元素在HTML文档中的位置决定，从左到右，自上而下。</p>\n</li>\n<li><p>块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。</p>\n</li>\n<li><p>行内框在一行中水平布置。可以使用水平内边距、边框和外边距调整它们的间距。但是，垂直内边距、边框和外边距不影响行内框的高度。由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。</p>\n</li>\n</ul>\n<h5 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h5><ul>\n<li><p>相对定位（reletive）</p>\n<p>  元素保持其形状及其所占空间，相对于普通流中其他元素的偏移。</p>\n</li>\n<li><p>绝对定位（absloute）</p>\n<p>  相对于已定位的祖先元素，如果没有已定位的祖先元素则相对于最初的包含块。<br>  脱离普通流，覆盖在普通流定位之上</p>\n</li>\n<li><p>固定定位（fixed）</p>\n<p>  相对于浏览器窗口的绝对定位</p>\n</li>\n</ul>\n<h5 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h5><ul>\n<li>不在普通流中占据空间，但会对之后的浮动元素产生空间占位影响</li>\n</ul>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><h5 id=\"常见布局\"><a href=\"#常见布局\" class=\"headerlink\" title=\"常见布局\"></a>常见布局</h5><ul>\n<li><p>单列水平居中布局, 一列定宽一列自适应布局, 两列定宽一列自适应布局, 两侧定宽中间自适应三列布局。</p>\n</li>\n<li><p>圣杯与双飞翼是常见的三列布局，左右两列宽度固定，中列自适应。</p>\n</li>\n</ul>\n<h5 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h5><ul>\n<li><p>为了给两边侧栏空出位置，给container元素设置padding</p>\n</li>\n<li><p>左右两个div用相对定位并分配left，right属性，用负边距消除占位</p>\n</li>\n<li><p>main div设置100%宽度</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">600px</span>; <span class=\"comment\">/* 2*left + right */</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding-right</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.left</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">left</span>: -<span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.right</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">right</span>: -<span class=\"number\">210px</span>;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h5><ul>\n<li>三列左浮动</li>\n<li>为了不让main内容被遮挡，给其设置padding</li>\n<li>用负边距给左右两列定位，消除占位</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-con\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.main-con</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.left</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.right</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"两者异同\"><a href=\"#两者异同\" class=\"headerlink\" title=\"两者异同\"></a>两者异同</h5><ul>\n<li><p>两者都把主栏放在文档流最前面，优先加载。</p>\n</li>\n<li><p>两者都是三列浮动，然后通过负边距定位消除占位形成三列布局</p>\n</li>\n<li><p>中列main处理不同：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主栏嵌套在div后利用主列的左、右外边距定位。</p>\n</li>\n</ul>"},{"title":"leetCode","date":"2018-01-22T11:03:31.000Z","_content":"\n\n### 动态规划\n\n","source":"_posts/leetCode.md","raw":"---\ntitle: leetCode\ndate: 2018-01-22 19:03:31\ntags:\n---\n\n\n### 动态规划\n\n","slug":"leetCode","published":1,"updated":"2018-01-22T12:46:42.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ul9000mjbzeiyxg4wyt","content":"<h3 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h3>"},{"title":"Mobx","date":"2017-05-25T14:11:12.000Z","_content":"\n分析理解一下\n<!-- more -->\n\n\n## 三种状态管理方案\n\n\n### MobX\n任何源自应用状态的东西都应该自动地获得。\n在 React + MobX 组合中，MobX 提供机制来存储更新应用状态。\nReact 将应用状态渲染。\n\n#### 核心概念\n- 可观测状态 （Observable state）\n  通过 `@observable`装饰器，为类属性添加注解。\n\n```js\n// es.next\nclass Todo {\n    id = Math.random();\n    @observable title = \"\";\n    @observable finished = false;\n}\n// es5\nfunction Todo() {\n    this.id = Math.random()\n    extendObservable(this, {\n        title: \"\",\n        finished: false\n    })\n}\n```\n\n- 计算值 （Computed values）\n  通过`@computed`装饰器在相关数据发生变化时自动更新\n  产生一个二次加工的新值。\n```js\nclass TodoList {\n    @observable todos = [];\n    @computed get unfinishedTodoCount() {\n      return this.todos.filter(todo => !todo.finished).length;\n    }\n}\n```\n\n- 反应（Reactions）\n  类似于Computed，产生与计算无关的动作，例如打印日志，网络请求，更新界面等\n\n```js\n import React from 'react';\n import React from 'react-dom';\n import {inject, observer} from 'mobx-react';\n\n @inject('todos')\n @observer\n class TodoListView extends React.Component {\n   render () {\n     rerurn {\n       <div>\n        <ul>\n          {this.props.todoList.todos.map(todo =>\n            <TodoView todo={todo} key={todo.id} />\n          )}\n        </ul>\n        Tasks left: {this.props.todoList.unfinishedTodoCount}\n      </div>\n     }\n   }\n }\n\n const TodoView = observer(({todo}) => {\n   <li>\n        <input\n          type=\"checkbox\"\n          checked={todo.finished}\n          onClick={() => todo.finished = !todo.finished}/>\n        {todo.title}\n    </li>\n })\n const store = new TodoList();\n\n // 注册store\nReactDOM.render( <TodoListView todoList={store}/> document.getElementById('mount'));\n\n```\n\n- 动作（Actions）\n 更新状态的方式\n\n```js\nstore.todos.push(\n    new Todo(\"Get Coffee\"),\n    new Todo(\"Write simpler code\")\n);\nstore.todos[0].finished = true;\n```\n\n- 原则\n单项数据流\nAction -> State -> Views\n所有衍生值都会自动同步更新。\n\n\n#### 使用方法\n\n```jsx\nimport React from 'react';\nimport React from 'react-dom';\nimport {observable} from 'mobx';\nimport {observer} from 'mobx-react';\n// 定义状态数据结构\nvar appState = ovservable({\n  timer: 0\n})\n// 定义动作\nappState.TimerAdd = action(()=> {\n  appState.timer += 1;\n})\n// 创建视图响应状态变化\n@observer\nclass TimerView extends React.Component {\n  onReset()\n  render() {\n    timerAdd() {\n      this.props.appState.TimerAdd();\n    }\n    return (\n      <div>\n      {this.props.appState.timer}\n      <button onClick=\"timerAdd\">+</button>\n    )\n  }\n}\nReactDOM.render( <TimerView appState={appState}/> , document.body);\n```\n\n| MobX自始至终只有一份数据引用，没有额外的复制对象的开销，但没有中间件机制，适用于数据流简单的项目。\n\n\n### Vuex\n Vue专用的状态管理模式。\n Vuex将所有组件共享的状态数据抽取出来，作为一个全局的单例模式管理。这就构建了一个巨大的”视图“树，因此不论视图组件在树的哪个位置，都可以获取状态或触发行为。\n\n#### 核心概念\n\n - State 单一状态树\n 每个应用仅仅包含一个store实例。","source":"_posts/mobx.md","raw":"---\ntitle: Mobx\ndate: 2017-05-25 22:11:12\ntags:\n  - MobX\n---\n\n分析理解一下\n<!-- more -->\n\n\n## 三种状态管理方案\n\n\n### MobX\n任何源自应用状态的东西都应该自动地获得。\n在 React + MobX 组合中，MobX 提供机制来存储更新应用状态。\nReact 将应用状态渲染。\n\n#### 核心概念\n- 可观测状态 （Observable state）\n  通过 `@observable`装饰器，为类属性添加注解。\n\n```js\n// es.next\nclass Todo {\n    id = Math.random();\n    @observable title = \"\";\n    @observable finished = false;\n}\n// es5\nfunction Todo() {\n    this.id = Math.random()\n    extendObservable(this, {\n        title: \"\",\n        finished: false\n    })\n}\n```\n\n- 计算值 （Computed values）\n  通过`@computed`装饰器在相关数据发生变化时自动更新\n  产生一个二次加工的新值。\n```js\nclass TodoList {\n    @observable todos = [];\n    @computed get unfinishedTodoCount() {\n      return this.todos.filter(todo => !todo.finished).length;\n    }\n}\n```\n\n- 反应（Reactions）\n  类似于Computed，产生与计算无关的动作，例如打印日志，网络请求，更新界面等\n\n```js\n import React from 'react';\n import React from 'react-dom';\n import {inject, observer} from 'mobx-react';\n\n @inject('todos')\n @observer\n class TodoListView extends React.Component {\n   render () {\n     rerurn {\n       <div>\n        <ul>\n          {this.props.todoList.todos.map(todo =>\n            <TodoView todo={todo} key={todo.id} />\n          )}\n        </ul>\n        Tasks left: {this.props.todoList.unfinishedTodoCount}\n      </div>\n     }\n   }\n }\n\n const TodoView = observer(({todo}) => {\n   <li>\n        <input\n          type=\"checkbox\"\n          checked={todo.finished}\n          onClick={() => todo.finished = !todo.finished}/>\n        {todo.title}\n    </li>\n })\n const store = new TodoList();\n\n // 注册store\nReactDOM.render( <TodoListView todoList={store}/> document.getElementById('mount'));\n\n```\n\n- 动作（Actions）\n 更新状态的方式\n\n```js\nstore.todos.push(\n    new Todo(\"Get Coffee\"),\n    new Todo(\"Write simpler code\")\n);\nstore.todos[0].finished = true;\n```\n\n- 原则\n单项数据流\nAction -> State -> Views\n所有衍生值都会自动同步更新。\n\n\n#### 使用方法\n\n```jsx\nimport React from 'react';\nimport React from 'react-dom';\nimport {observable} from 'mobx';\nimport {observer} from 'mobx-react';\n// 定义状态数据结构\nvar appState = ovservable({\n  timer: 0\n})\n// 定义动作\nappState.TimerAdd = action(()=> {\n  appState.timer += 1;\n})\n// 创建视图响应状态变化\n@observer\nclass TimerView extends React.Component {\n  onReset()\n  render() {\n    timerAdd() {\n      this.props.appState.TimerAdd();\n    }\n    return (\n      <div>\n      {this.props.appState.timer}\n      <button onClick=\"timerAdd\">+</button>\n    )\n  }\n}\nReactDOM.render( <TimerView appState={appState}/> , document.body);\n```\n\n| MobX自始至终只有一份数据引用，没有额外的复制对象的开销，但没有中间件机制，适用于数据流简单的项目。\n\n\n### Vuex\n Vue专用的状态管理模式。\n Vuex将所有组件共享的状态数据抽取出来，作为一个全局的单例模式管理。这就构建了一个巨大的”视图“树，因此不论视图组件在树的哪个位置，都可以获取状态或触发行为。\n\n#### 核心概念\n\n - State 单一状态树\n 每个应用仅仅包含一个store实例。","slug":"mobx","published":1,"updated":"2017-12-03T14:25:55.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ula000ojbze0a33qthd","content":"<p>分析理解一下<br><a id=\"more\"></a></p>\n<h2 id=\"三种状态管理方案\"><a href=\"#三种状态管理方案\" class=\"headerlink\" title=\"三种状态管理方案\"></a>三种状态管理方案</h2><h3 id=\"MobX\"><a href=\"#MobX\" class=\"headerlink\" title=\"MobX\"></a>MobX</h3><p>任何源自应用状态的东西都应该自动地获得。<br>在 React + MobX 组合中，MobX 提供机制来存储更新应用状态。<br>React 将应用状态渲染。</p>\n<h4 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h4><ul>\n<li>可观测状态 （Observable state）<br>通过 <code>@observable</code>装饰器，为类属性添加注解。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// es.next</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Todo</span> </span>&#123;</div><div class=\"line\">    id = <span class=\"built_in\">Math</span>.random();</div><div class=\"line\">    @observable title = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    @observable finished = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// es5</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Todo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = <span class=\"built_in\">Math</span>.random()</div><div class=\"line\">    extendObservable(<span class=\"keyword\">this</span>, &#123;</div><div class=\"line\">        title: <span class=\"string\">\"\"</span>,</div><div class=\"line\">        finished: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>计算值 （Computed values）<br>通过<code>@computed</code>装饰器在相关数据发生变化时自动更新<br>产生一个二次加工的新值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> </span>&#123;</div><div class=\"line\">    @observable todos = [];</div><div class=\"line\">    @computed get unfinishedTodoCount() &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> !todo.finished).length;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>反应（Reactions）<br>类似于Computed，产生与计算无关的动作，例如打印日志，网络请求，更新界面等</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"> <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"> <span class=\"keyword\">import</span> &#123;inject, observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span>;</div><div class=\"line\"></div><div class=\"line\"> @inject(<span class=\"string\">'todos'</span>)</div><div class=\"line\"> @observer</div><div class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoListView</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">   render () &#123;</div><div class=\"line\">     rerurn &#123;</div><div class=\"line\">       &lt;div&gt;</div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\">          &#123;<span class=\"keyword\">this</span>.props.todoList.todos.map(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span></div><div class=\"line\">            &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;</div><div class=\"line\">          )&#125;</div><div class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></div><div class=\"line\"><span class=\"regexp\">        Tasks left: &#123;this.props.todoList.unfinishedTodoCount&#125;</span></div><div class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</div><div class=\"line\">     &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">const</span> TodoView = observer(<span class=\"function\">(<span class=\"params\">&#123;todo&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">   &lt;li&gt;</div><div class=\"line\">        &lt;input</div><div class=\"line\">          type=<span class=\"string\">\"checkbox\"</span></div><div class=\"line\">          checked=&#123;todo.finished&#125;</div><div class=\"line\">          onClick=&#123;() =&gt; todo.finished = !todo.finished&#125;/&gt;</div><div class=\"line\">        &#123;todo.title&#125;</div><div class=\"line\">    &lt;<span class=\"regexp\">/li&gt;</span></div><div class=\"line\"><span class=\"regexp\"> &#125;)</span></div><div class=\"line\"><span class=\"regexp\"> const store = new TodoList();</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\"> /</span><span class=\"regexp\">/ 注册store</span></div><div class=\"line\"><span class=\"regexp\">ReactDOM.render( &lt;TodoListView todoList=&#123;store&#125;/</span>&gt; <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mount'</span>));</div></pre></td></tr></table></figure>\n<ul>\n<li>动作（Actions）<br>更新状态的方式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">store.todos.push(</div><div class=\"line\">    <span class=\"keyword\">new</span> Todo(<span class=\"string\">\"Get Coffee\"</span>),</div><div class=\"line\">    <span class=\"keyword\">new</span> Todo(<span class=\"string\">\"Write simpler code\"</span>)</div><div class=\"line\">);</div><div class=\"line\">store.todos[<span class=\"number\">0</span>].finished = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>原则<br>单项数据流<br>Action -&gt; State -&gt; Views<br>所有衍生值都会自动同步更新。</li>\n</ul>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span>;</div><div class=\"line\"><span class=\"comment\">// 定义状态数据结构</span></div><div class=\"line\"><span class=\"keyword\">var</span> appState = ovservable(&#123;</div><div class=\"line\">  timer: <span class=\"number\">0</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 定义动作</span></div><div class=\"line\">appState.TimerAdd = action(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</div><div class=\"line\">  appState.timer += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 创建视图响应状态变化</span></div><div class=\"line\">@observer</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerView</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  onReset()</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    timerAdd() &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.props.appState.TimerAdd();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">      &#123;<span class=\"keyword\">this</span>.props.appState.timer&#125;</div><div class=\"line\">      &lt;button onClick=<span class=\"string\">\"timerAdd\"</span>&gt;+<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">ReactDOM.render( <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TimerView</span> <span class=\"attr\">appState</span>=<span class=\"string\">&#123;appState&#125;/</span>&gt;</span> , document.body);</span></div></pre></td></tr></table></figure>\n<p>| MobX自始至终只有一份数据引用，没有额外的复制对象的开销，但没有中间件机制，适用于数据流简单的项目。</p>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p> Vue专用的状态管理模式。<br> Vuex将所有组件共享的状态数据抽取出来，作为一个全局的单例模式管理。这就构建了一个巨大的”视图“树，因此不论视图组件在树的哪个位置，都可以获取状态或触发行为。</p>\n<h4 id=\"核心概念-1\"><a href=\"#核心概念-1\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h4><ul>\n<li>State 单一状态树<br>每个应用仅仅包含一个store实例。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>分析理解一下<br>","more":"</p>\n<h2 id=\"三种状态管理方案\"><a href=\"#三种状态管理方案\" class=\"headerlink\" title=\"三种状态管理方案\"></a>三种状态管理方案</h2><h3 id=\"MobX\"><a href=\"#MobX\" class=\"headerlink\" title=\"MobX\"></a>MobX</h3><p>任何源自应用状态的东西都应该自动地获得。<br>在 React + MobX 组合中，MobX 提供机制来存储更新应用状态。<br>React 将应用状态渲染。</p>\n<h4 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h4><ul>\n<li>可观测状态 （Observable state）<br>通过 <code>@observable</code>装饰器，为类属性添加注解。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// es.next</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Todo</span> </span>&#123;</div><div class=\"line\">    id = <span class=\"built_in\">Math</span>.random();</div><div class=\"line\">    @observable title = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    @observable finished = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// es5</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Todo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = <span class=\"built_in\">Math</span>.random()</div><div class=\"line\">    extendObservable(<span class=\"keyword\">this</span>, &#123;</div><div class=\"line\">        title: <span class=\"string\">\"\"</span>,</div><div class=\"line\">        finished: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>计算值 （Computed values）<br>通过<code>@computed</code>装饰器在相关数据发生变化时自动更新<br>产生一个二次加工的新值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> </span>&#123;</div><div class=\"line\">    @observable todos = [];</div><div class=\"line\">    @computed get unfinishedTodoCount() &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> !todo.finished).length;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>反应（Reactions）<br>类似于Computed，产生与计算无关的动作，例如打印日志，网络请求，更新界面等</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"> <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"> <span class=\"keyword\">import</span> &#123;inject, observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span>;</div><div class=\"line\"></div><div class=\"line\"> @inject(<span class=\"string\">'todos'</span>)</div><div class=\"line\"> @observer</div><div class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoListView</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">   render () &#123;</div><div class=\"line\">     rerurn &#123;</div><div class=\"line\">       &lt;div&gt;</div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\">          &#123;<span class=\"keyword\">this</span>.props.todoList.todos.map(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span></div><div class=\"line\">            &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;</div><div class=\"line\">          )&#125;</div><div class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></div><div class=\"line\"><span class=\"regexp\">        Tasks left: &#123;this.props.todoList.unfinishedTodoCount&#125;</span></div><div class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</div><div class=\"line\">     &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">const</span> TodoView = observer(<span class=\"function\">(<span class=\"params\">&#123;todo&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">   &lt;li&gt;</div><div class=\"line\">        &lt;input</div><div class=\"line\">          type=<span class=\"string\">\"checkbox\"</span></div><div class=\"line\">          checked=&#123;todo.finished&#125;</div><div class=\"line\">          onClick=&#123;() =&gt; todo.finished = !todo.finished&#125;/&gt;</div><div class=\"line\">        &#123;todo.title&#125;</div><div class=\"line\">    &lt;<span class=\"regexp\">/li&gt;</span></div><div class=\"line\"><span class=\"regexp\"> &#125;)</span></div><div class=\"line\"><span class=\"regexp\"> const store = new TodoList();</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\"> /</span><span class=\"regexp\">/ 注册store</span></div><div class=\"line\"><span class=\"regexp\">ReactDOM.render( &lt;TodoListView todoList=&#123;store&#125;/</span>&gt; <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mount'</span>));</div></pre></td></tr></table></figure>\n<ul>\n<li>动作（Actions）<br>更新状态的方式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">store.todos.push(</div><div class=\"line\">    <span class=\"keyword\">new</span> Todo(<span class=\"string\">\"Get Coffee\"</span>),</div><div class=\"line\">    <span class=\"keyword\">new</span> Todo(<span class=\"string\">\"Write simpler code\"</span>)</div><div class=\"line\">);</div><div class=\"line\">store.todos[<span class=\"number\">0</span>].finished = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>原则<br>单项数据流<br>Action -&gt; State -&gt; Views<br>所有衍生值都会自动同步更新。</li>\n</ul>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span>;</div><div class=\"line\"><span class=\"comment\">// 定义状态数据结构</span></div><div class=\"line\"><span class=\"keyword\">var</span> appState = ovservable(&#123;</div><div class=\"line\">  timer: <span class=\"number\">0</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 定义动作</span></div><div class=\"line\">appState.TimerAdd = action(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</div><div class=\"line\">  appState.timer += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 创建视图响应状态变化</span></div><div class=\"line\">@observer</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerView</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  onReset()</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    timerAdd() &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.props.appState.TimerAdd();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">      &#123;<span class=\"keyword\">this</span>.props.appState.timer&#125;</div><div class=\"line\">      &lt;button onClick=<span class=\"string\">\"timerAdd\"</span>&gt;+<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">ReactDOM.render( <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TimerView</span> <span class=\"attr\">appState</span>=<span class=\"string\">&#123;appState&#125;/</span>&gt;</span> , document.body);</span></div></pre></td></tr></table></figure>\n<p>| MobX自始至终只有一份数据引用，没有额外的复制对象的开销，但没有中间件机制，适用于数据流简单的项目。</p>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p> Vue专用的状态管理模式。<br> Vuex将所有组件共享的状态数据抽取出来，作为一个全局的单例模式管理。这就构建了一个巨大的”视图“树，因此不论视图组件在树的哪个位置，都可以获取状态或触发行为。</p>\n<h4 id=\"核心概念-1\"><a href=\"#核心概念-1\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h4><ul>\n<li>State 单一状态树<br>每个应用仅仅包含一个store实例。</li>\n</ul>"},{"title":"mongodb安全认证","date":"2017-06-07T09:29:07.000Z","_content":"安全认证...\n\n<!--more-->\n\n### mongodb安全认证\nMongoDB默认是不认证的，可以直接连上服务并对数据库进行操作。\n\n#### 创建一个管理员用户\n在开启验证之前必须创建一个管理员用户,管理员用户拥有userAdminAnyDatabase角色.此角色拥有管理用户的权限,注意此角色并不是最大权限的角色.\n\n```js\n> use admin\n> db.createUser(\n  {\n    user: \"admin\",  \n    pwd: \"admin\",  \n    roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]  \n  }\n)\n// 此时查询集合, 有了users\n```\n\n```shell\n> show collections\nsystem.users\nsystem.version\n\n> db.system.users.find();\n{ \"_id\" : \"admin.admin\", \"user\" : \"admin\", \"db\" : \"admin\", \"credentials\" : { \"SCRAM-SHA-1\" : { \"iterationCount\" : 10000, \"salt\" : \"5ERebAcl9LdKTIL516jalw==\", \"storedKey\" : \"bjKBgILU9djmwn8jibg4Uu54u9w=\", \"serverKey\" : \"iSTR/nMXjCv5pljY1hIPPOumCLU=\" } }, \"roles\" : [ { \"role\" : \"userAdminAnyDatabase\", \"db\" : \"admin\" } ] }\n>  db.system.version.find();\n{ \"_id\" : \"authSchema\", \"currentVersion\" : 5 }\n```\n\n#### 用管理员登录\n```shell\nmongo  -u admin -p admin --authenticationDatabase admin\n```\nuserAdminAnyDatabase拥有的权限\n```\nchangeCustomData\nchangePassword\ncreateRole\ncreateUser\ndropRole\ndropUser\ngrantRole\nrevokeRole\nviewRole\nviewUser\n```\n\n#### 超级管理员\n拥有在任何数据库中分配任何用户全选的能力\n```\n1. dbOwner\n2. userAdmin\n3. userAdminAnyDayabase\n```\n\n```shell\ndb.createUser(\n  {\n    user: \"suq\",\n    pwd: \"suq\",\n    roles: [\n       { role: \"dbOwner\", db: \"admin\" },\n       { role: \"userAdmin\", db: \"admin\" },\n       { role: \"userAdminAnyDatabase\", db: \"admin\" }\n    ]\n  }\n)\n\n/// mongodb还直接提供了一个超级管理员角色root,例如我们创建一个admin用户为超级管理员\nuse admin\ndb.createUser(\n  {\n    user: \"admin\",\n    pwd: \"admin\",\n    roles: [ { role: \"root\",db:\"admin\" }]\n \n  }\n)\n```\n\n#### 切换用户\n```sh\n> db.auth(\"admin\", \"admin\")\n```\n\n#### 创建角色\n方法： `db.createRole()`\n需求：\n  在数据库有createRole()权限\n  需要有授予指定权限的权限\n\n一般来说，内建角色`userAdmin`与`userAdminAnyDatabase`满足以上要求\n\n语法：\n```sh\n{\n  role: \"<name>\",\n  privileges: [\n     { resource: { <resource> }, actions: [ \"<action>\", ... ] },\n     ...\n  ],\n  roles: [\n     { role: \"<role>\", db: \"<database>\" } | \"<role>\",\n      ...\n  ]\n}\n```\nrole 是创建role的名字\nresource是你想授权所对应的对象\nactions是授权的动作\nroles是把某个角色授权给此角色\n\n实例：\n```sh\nuse admin\ndb.createRole(\n   {\n     role: \"myClusterwideAdmin\",\n     privileges: [\n       { resource: { cluster: true }, actions: [ \"addShard\" ] },\n       { resource: { db: \"config\", collection: \"\" }, actions: [ \"find\", \"update\", \"insert\", \"remove\" ] },\n       { resource: { db: \"users\", collection: \"usersCollection\" }, actions: [ \"update\", \"insert\", \"remove\" ] },\n       { resource: { db: \"\", collection: \"\" }, actions: [ \"find\" ] }\n     ],\n     roles: [\n       { role: \"read\", db: \"admin\" }\n     ]\n   },\n   { w: \"majority\" , wtimeout: 5000 }\n)\n```\n\n#### 查看角色权限\n方法： `db.getRole()`\n查看所有非内建角色: `db.getRoles()`\n\n#### 查看用户角色\n方法： `db.getUser()`\n查看所有用户: `db.getUsers()`\n\n#### 授予/收回角色权限\n收回: `db.revokePrivilegesFromRole()`\n授予: `db.grantPrivilegesToRole()`\n\n#### 授予/收回用户角色\n收回: `db.revokeRolesFromUser()`\n授予: `db.grantRolesToUser()`\n\n#### 修改用户密码\n```sh\n> db.changeUserPassword(\"name\", \"newpass\")\n```","source":"_posts/mongodb安全认证.md","raw":"---\ntitle: mongodb安全认证\ndate: 2017-06-07 17:29:07\ntags:\n  - mongodb\n---\n安全认证...\n\n<!--more-->\n\n### mongodb安全认证\nMongoDB默认是不认证的，可以直接连上服务并对数据库进行操作。\n\n#### 创建一个管理员用户\n在开启验证之前必须创建一个管理员用户,管理员用户拥有userAdminAnyDatabase角色.此角色拥有管理用户的权限,注意此角色并不是最大权限的角色.\n\n```js\n> use admin\n> db.createUser(\n  {\n    user: \"admin\",  \n    pwd: \"admin\",  \n    roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]  \n  }\n)\n// 此时查询集合, 有了users\n```\n\n```shell\n> show collections\nsystem.users\nsystem.version\n\n> db.system.users.find();\n{ \"_id\" : \"admin.admin\", \"user\" : \"admin\", \"db\" : \"admin\", \"credentials\" : { \"SCRAM-SHA-1\" : { \"iterationCount\" : 10000, \"salt\" : \"5ERebAcl9LdKTIL516jalw==\", \"storedKey\" : \"bjKBgILU9djmwn8jibg4Uu54u9w=\", \"serverKey\" : \"iSTR/nMXjCv5pljY1hIPPOumCLU=\" } }, \"roles\" : [ { \"role\" : \"userAdminAnyDatabase\", \"db\" : \"admin\" } ] }\n>  db.system.version.find();\n{ \"_id\" : \"authSchema\", \"currentVersion\" : 5 }\n```\n\n#### 用管理员登录\n```shell\nmongo  -u admin -p admin --authenticationDatabase admin\n```\nuserAdminAnyDatabase拥有的权限\n```\nchangeCustomData\nchangePassword\ncreateRole\ncreateUser\ndropRole\ndropUser\ngrantRole\nrevokeRole\nviewRole\nviewUser\n```\n\n#### 超级管理员\n拥有在任何数据库中分配任何用户全选的能力\n```\n1. dbOwner\n2. userAdmin\n3. userAdminAnyDayabase\n```\n\n```shell\ndb.createUser(\n  {\n    user: \"suq\",\n    pwd: \"suq\",\n    roles: [\n       { role: \"dbOwner\", db: \"admin\" },\n       { role: \"userAdmin\", db: \"admin\" },\n       { role: \"userAdminAnyDatabase\", db: \"admin\" }\n    ]\n  }\n)\n\n/// mongodb还直接提供了一个超级管理员角色root,例如我们创建一个admin用户为超级管理员\nuse admin\ndb.createUser(\n  {\n    user: \"admin\",\n    pwd: \"admin\",\n    roles: [ { role: \"root\",db:\"admin\" }]\n \n  }\n)\n```\n\n#### 切换用户\n```sh\n> db.auth(\"admin\", \"admin\")\n```\n\n#### 创建角色\n方法： `db.createRole()`\n需求：\n  在数据库有createRole()权限\n  需要有授予指定权限的权限\n\n一般来说，内建角色`userAdmin`与`userAdminAnyDatabase`满足以上要求\n\n语法：\n```sh\n{\n  role: \"<name>\",\n  privileges: [\n     { resource: { <resource> }, actions: [ \"<action>\", ... ] },\n     ...\n  ],\n  roles: [\n     { role: \"<role>\", db: \"<database>\" } | \"<role>\",\n      ...\n  ]\n}\n```\nrole 是创建role的名字\nresource是你想授权所对应的对象\nactions是授权的动作\nroles是把某个角色授权给此角色\n\n实例：\n```sh\nuse admin\ndb.createRole(\n   {\n     role: \"myClusterwideAdmin\",\n     privileges: [\n       { resource: { cluster: true }, actions: [ \"addShard\" ] },\n       { resource: { db: \"config\", collection: \"\" }, actions: [ \"find\", \"update\", \"insert\", \"remove\" ] },\n       { resource: { db: \"users\", collection: \"usersCollection\" }, actions: [ \"update\", \"insert\", \"remove\" ] },\n       { resource: { db: \"\", collection: \"\" }, actions: [ \"find\" ] }\n     ],\n     roles: [\n       { role: \"read\", db: \"admin\" }\n     ]\n   },\n   { w: \"majority\" , wtimeout: 5000 }\n)\n```\n\n#### 查看角色权限\n方法： `db.getRole()`\n查看所有非内建角色: `db.getRoles()`\n\n#### 查看用户角色\n方法： `db.getUser()`\n查看所有用户: `db.getUsers()`\n\n#### 授予/收回角色权限\n收回: `db.revokePrivilegesFromRole()`\n授予: `db.grantPrivilegesToRole()`\n\n#### 授予/收回用户角色\n收回: `db.revokeRolesFromUser()`\n授予: `db.grantRolesToUser()`\n\n#### 修改用户密码\n```sh\n> db.changeUserPassword(\"name\", \"newpass\")\n```","slug":"mongodb安全认证","published":1,"updated":"2017-06-07T12:58:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulb000qjbze4nge345b","content":"<p>安全认证…</p>\n<a id=\"more\"></a>\n<h3 id=\"mongodb安全认证\"><a href=\"#mongodb安全认证\" class=\"headerlink\" title=\"mongodb安全认证\"></a>mongodb安全认证</h3><p>MongoDB默认是不认证的，可以直接连上服务并对数据库进行操作。</p>\n<h4 id=\"创建一个管理员用户\"><a href=\"#创建一个管理员用户\" class=\"headerlink\" title=\"创建一个管理员用户\"></a>创建一个管理员用户</h4><p>在开启验证之前必须创建一个管理员用户,管理员用户拥有userAdminAnyDatabase角色.此角色拥有管理用户的权限,注意此角色并不是最大权限的角色.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; use admin</div><div class=\"line\">&gt; db.createUser(</div><div class=\"line\">  &#123;</div><div class=\"line\">    user: <span class=\"string\">\"admin\"</span>,  </div><div class=\"line\">    pwd: <span class=\"string\">\"admin\"</span>,  </div><div class=\"line\">    roles: [ &#123; <span class=\"attr\">role</span>: <span class=\"string\">\"userAdminAnyDatabase\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"admin\"</span> &#125; ]  </div><div class=\"line\">  &#125;</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\">// 此时查询集合, 有了users</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> show collections</span></div><div class=\"line\">system.users</div><div class=\"line\">system.version</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.system.users.find();</span></div><div class=\"line\">&#123; \"_id\" : \"admin.admin\", \"user\" : \"admin\", \"db\" : \"admin\", \"credentials\" : &#123; \"SCRAM-SHA-1\" : &#123; \"iterationCount\" : 10000, \"salt\" : \"5ERebAcl9LdKTIL516jalw==\", \"storedKey\" : \"bjKBgILU9djmwn8jibg4Uu54u9w=\", \"serverKey\" : \"iSTR/nMXjCv5pljY1hIPPOumCLU=\" &#125; &#125;, \"roles\" : [ &#123; \"role\" : \"userAdminAnyDatabase\", \"db\" : \"admin\" &#125; ] &#125;</div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">  db.system.version.find();</span></div><div class=\"line\">&#123; \"_id\" : \"authSchema\", \"currentVersion\" : 5 &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"用管理员登录\"><a href=\"#用管理员登录\" class=\"headerlink\" title=\"用管理员登录\"></a>用管理员登录</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongo  -u admin -p admin --authenticationDatabase admin</div></pre></td></tr></table></figure>\n<p>userAdminAnyDatabase拥有的权限<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">changeCustomData</span></div><div class=\"line\"><span class=\"symbol\">changePassword</span></div><div class=\"line\"><span class=\"symbol\">createRole</span></div><div class=\"line\"><span class=\"symbol\">createUser</span></div><div class=\"line\"><span class=\"symbol\">dropRole</span></div><div class=\"line\"><span class=\"symbol\">dropUser</span></div><div class=\"line\"><span class=\"symbol\">grantRole</span></div><div class=\"line\"><span class=\"keyword\">revokeRole</span></div><div class=\"line\"><span class=\"keyword\">viewRole</span></div><div class=\"line\"><span class=\"keyword\">viewUser</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"超级管理员\"><a href=\"#超级管理员\" class=\"headerlink\" title=\"超级管理员\"></a>超级管理员</h4><p>拥有在任何数据库中分配任何用户全选的能力<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">1. </span>dbOwner</div><div class=\"line\"><span class=\"bullet\">2. </span>userAdmin</div><div class=\"line\"><span class=\"bullet\">3. </span>userAdminAnyDayabase</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.createUser(</div><div class=\"line\">  &#123;</div><div class=\"line\">    user: \"suq\",</div><div class=\"line\">    pwd: \"suq\",</div><div class=\"line\">    roles: [</div><div class=\"line\">       &#123; role: \"dbOwner\", db: \"admin\" &#125;,</div><div class=\"line\">       &#123; role: \"userAdmin\", db: \"admin\" &#125;,</div><div class=\"line\">       &#123; role: \"userAdminAnyDatabase\", db: \"admin\" &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">/// mongodb还直接提供了一个超级管理员角色root,例如我们创建一个admin用户为超级管理员</div><div class=\"line\">use admin</div><div class=\"line\">db.createUser(</div><div class=\"line\">  &#123;</div><div class=\"line\">    user: \"admin\",</div><div class=\"line\">    pwd: \"admin\",</div><div class=\"line\">    roles: [ &#123; role: \"root\",db:\"admin\" &#125;]</div><div class=\"line\"> </div><div class=\"line\">  &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h4 id=\"切换用户\"><a href=\"#切换用户\" class=\"headerlink\" title=\"切换用户\"></a>切换用户</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.auth(<span class=\"string\">\"admin\"</span>, <span class=\"string\">\"admin\"</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"创建角色\"><a href=\"#创建角色\" class=\"headerlink\" title=\"创建角色\"></a>创建角色</h4><p>方法： <code>db.createRole()</code><br>需求：<br>  在数据库有createRole()权限<br>  需要有授予指定权限的权限</p>\n<p>一般来说，内建角色<code>userAdmin</code>与<code>userAdminAnyDatabase</code>满足以上要求</p>\n<p>语法：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  role: <span class=\"string\">\"&lt;name&gt;\"</span>,</div><div class=\"line\">  privileges: [</div><div class=\"line\">     &#123; resource: &#123; &lt;resource&gt; &#125;, actions: [ <span class=\"string\">\"&lt;action&gt;\"</span>, ... ] &#125;,</div><div class=\"line\">     ...</div><div class=\"line\">  ],</div><div class=\"line\">  roles: [</div><div class=\"line\">     &#123; role: <span class=\"string\">\"&lt;role&gt;\"</span>, db: <span class=\"string\">\"&lt;database&gt;\"</span> &#125; | <span class=\"string\">\"&lt;role&gt;\"</span>,</div><div class=\"line\">      ...</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>role 是创建role的名字<br>resource是你想授权所对应的对象<br>actions是授权的动作<br>roles是把某个角色授权给此角色</p>\n<p>实例：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">use admin</div><div class=\"line\">db.createRole(</div><div class=\"line\">   &#123;</div><div class=\"line\">     role: <span class=\"string\">\"myClusterwideAdmin\"</span>,</div><div class=\"line\">     privileges: [</div><div class=\"line\">       &#123; resource: &#123; cluster: <span class=\"literal\">true</span> &#125;, actions: [ <span class=\"string\">\"addShard\"</span> ] &#125;,</div><div class=\"line\">       &#123; resource: &#123; db: <span class=\"string\">\"config\"</span>, collection: <span class=\"string\">\"\"</span> &#125;, actions: [ <span class=\"string\">\"find\"</span>, <span class=\"string\">\"update\"</span>, <span class=\"string\">\"insert\"</span>, <span class=\"string\">\"remove\"</span> ] &#125;,</div><div class=\"line\">       &#123; resource: &#123; db: <span class=\"string\">\"users\"</span>, collection: <span class=\"string\">\"usersCollection\"</span> &#125;, actions: [ <span class=\"string\">\"update\"</span>, <span class=\"string\">\"insert\"</span>, <span class=\"string\">\"remove\"</span> ] &#125;,</div><div class=\"line\">       &#123; resource: &#123; db: <span class=\"string\">\"\"</span>, collection: <span class=\"string\">\"\"</span> &#125;, actions: [ <span class=\"string\">\"find\"</span> ] &#125;</div><div class=\"line\">     ],</div><div class=\"line\">     roles: [</div><div class=\"line\">       &#123; role: <span class=\"string\">\"read\"</span>, db: <span class=\"string\">\"admin\"</span> &#125;</div><div class=\"line\">     ]</div><div class=\"line\">   &#125;,</div><div class=\"line\">   &#123; w: <span class=\"string\">\"majority\"</span> , wtimeout: 5000 &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<h4 id=\"查看角色权限\"><a href=\"#查看角色权限\" class=\"headerlink\" title=\"查看角色权限\"></a>查看角色权限</h4><p>方法： <code>db.getRole()</code><br>查看所有非内建角色: <code>db.getRoles()</code></p>\n<h4 id=\"查看用户角色\"><a href=\"#查看用户角色\" class=\"headerlink\" title=\"查看用户角色\"></a>查看用户角色</h4><p>方法： <code>db.getUser()</code><br>查看所有用户: <code>db.getUsers()</code></p>\n<h4 id=\"授予-收回角色权限\"><a href=\"#授予-收回角色权限\" class=\"headerlink\" title=\"授予/收回角色权限\"></a>授予/收回角色权限</h4><p>收回: <code>db.revokePrivilegesFromRole()</code><br>授予: <code>db.grantPrivilegesToRole()</code></p>\n<h4 id=\"授予-收回用户角色\"><a href=\"#授予-收回用户角色\" class=\"headerlink\" title=\"授予/收回用户角色\"></a>授予/收回用户角色</h4><p>收回: <code>db.revokeRolesFromUser()</code><br>授予: <code>db.grantRolesToUser()</code></p>\n<h4 id=\"修改用户密码\"><a href=\"#修改用户密码\" class=\"headerlink\" title=\"修改用户密码\"></a>修改用户密码</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.changeUserPassword(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"newpass\"</span>)</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>安全认证…</p>","more":"<h3 id=\"mongodb安全认证\"><a href=\"#mongodb安全认证\" class=\"headerlink\" title=\"mongodb安全认证\"></a>mongodb安全认证</h3><p>MongoDB默认是不认证的，可以直接连上服务并对数据库进行操作。</p>\n<h4 id=\"创建一个管理员用户\"><a href=\"#创建一个管理员用户\" class=\"headerlink\" title=\"创建一个管理员用户\"></a>创建一个管理员用户</h4><p>在开启验证之前必须创建一个管理员用户,管理员用户拥有userAdminAnyDatabase角色.此角色拥有管理用户的权限,注意此角色并不是最大权限的角色.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; use admin</div><div class=\"line\">&gt; db.createUser(</div><div class=\"line\">  &#123;</div><div class=\"line\">    user: <span class=\"string\">\"admin\"</span>,  </div><div class=\"line\">    pwd: <span class=\"string\">\"admin\"</span>,  </div><div class=\"line\">    roles: [ &#123; <span class=\"attr\">role</span>: <span class=\"string\">\"userAdminAnyDatabase\"</span>, <span class=\"attr\">db</span>: <span class=\"string\">\"admin\"</span> &#125; ]  </div><div class=\"line\">  &#125;</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\">// 此时查询集合, 有了users</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> show collections</span></div><div class=\"line\">system.users</div><div class=\"line\">system.version</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.system.users.find();</span></div><div class=\"line\">&#123; \"_id\" : \"admin.admin\", \"user\" : \"admin\", \"db\" : \"admin\", \"credentials\" : &#123; \"SCRAM-SHA-1\" : &#123; \"iterationCount\" : 10000, \"salt\" : \"5ERebAcl9LdKTIL516jalw==\", \"storedKey\" : \"bjKBgILU9djmwn8jibg4Uu54u9w=\", \"serverKey\" : \"iSTR/nMXjCv5pljY1hIPPOumCLU=\" &#125; &#125;, \"roles\" : [ &#123; \"role\" : \"userAdminAnyDatabase\", \"db\" : \"admin\" &#125; ] &#125;</div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">  db.system.version.find();</span></div><div class=\"line\">&#123; \"_id\" : \"authSchema\", \"currentVersion\" : 5 &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"用管理员登录\"><a href=\"#用管理员登录\" class=\"headerlink\" title=\"用管理员登录\"></a>用管理员登录</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongo  -u admin -p admin --authenticationDatabase admin</div></pre></td></tr></table></figure>\n<p>userAdminAnyDatabase拥有的权限<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">changeCustomData</span></div><div class=\"line\"><span class=\"symbol\">changePassword</span></div><div class=\"line\"><span class=\"symbol\">createRole</span></div><div class=\"line\"><span class=\"symbol\">createUser</span></div><div class=\"line\"><span class=\"symbol\">dropRole</span></div><div class=\"line\"><span class=\"symbol\">dropUser</span></div><div class=\"line\"><span class=\"symbol\">grantRole</span></div><div class=\"line\"><span class=\"keyword\">revokeRole</span></div><div class=\"line\"><span class=\"keyword\">viewRole</span></div><div class=\"line\"><span class=\"keyword\">viewUser</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"超级管理员\"><a href=\"#超级管理员\" class=\"headerlink\" title=\"超级管理员\"></a>超级管理员</h4><p>拥有在任何数据库中分配任何用户全选的能力<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">1. </span>dbOwner</div><div class=\"line\"><span class=\"bullet\">2. </span>userAdmin</div><div class=\"line\"><span class=\"bullet\">3. </span>userAdminAnyDayabase</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.createUser(</div><div class=\"line\">  &#123;</div><div class=\"line\">    user: \"suq\",</div><div class=\"line\">    pwd: \"suq\",</div><div class=\"line\">    roles: [</div><div class=\"line\">       &#123; role: \"dbOwner\", db: \"admin\" &#125;,</div><div class=\"line\">       &#123; role: \"userAdmin\", db: \"admin\" &#125;,</div><div class=\"line\">       &#123; role: \"userAdminAnyDatabase\", db: \"admin\" &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">/// mongodb还直接提供了一个超级管理员角色root,例如我们创建一个admin用户为超级管理员</div><div class=\"line\">use admin</div><div class=\"line\">db.createUser(</div><div class=\"line\">  &#123;</div><div class=\"line\">    user: \"admin\",</div><div class=\"line\">    pwd: \"admin\",</div><div class=\"line\">    roles: [ &#123; role: \"root\",db:\"admin\" &#125;]</div><div class=\"line\"> </div><div class=\"line\">  &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h4 id=\"切换用户\"><a href=\"#切换用户\" class=\"headerlink\" title=\"切换用户\"></a>切换用户</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.auth(<span class=\"string\">\"admin\"</span>, <span class=\"string\">\"admin\"</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"创建角色\"><a href=\"#创建角色\" class=\"headerlink\" title=\"创建角色\"></a>创建角色</h4><p>方法： <code>db.createRole()</code><br>需求：<br>  在数据库有createRole()权限<br>  需要有授予指定权限的权限</p>\n<p>一般来说，内建角色<code>userAdmin</code>与<code>userAdminAnyDatabase</code>满足以上要求</p>\n<p>语法：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  role: <span class=\"string\">\"&lt;name&gt;\"</span>,</div><div class=\"line\">  privileges: [</div><div class=\"line\">     &#123; resource: &#123; &lt;resource&gt; &#125;, actions: [ <span class=\"string\">\"&lt;action&gt;\"</span>, ... ] &#125;,</div><div class=\"line\">     ...</div><div class=\"line\">  ],</div><div class=\"line\">  roles: [</div><div class=\"line\">     &#123; role: <span class=\"string\">\"&lt;role&gt;\"</span>, db: <span class=\"string\">\"&lt;database&gt;\"</span> &#125; | <span class=\"string\">\"&lt;role&gt;\"</span>,</div><div class=\"line\">      ...</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>role 是创建role的名字<br>resource是你想授权所对应的对象<br>actions是授权的动作<br>roles是把某个角色授权给此角色</p>\n<p>实例：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">use admin</div><div class=\"line\">db.createRole(</div><div class=\"line\">   &#123;</div><div class=\"line\">     role: <span class=\"string\">\"myClusterwideAdmin\"</span>,</div><div class=\"line\">     privileges: [</div><div class=\"line\">       &#123; resource: &#123; cluster: <span class=\"literal\">true</span> &#125;, actions: [ <span class=\"string\">\"addShard\"</span> ] &#125;,</div><div class=\"line\">       &#123; resource: &#123; db: <span class=\"string\">\"config\"</span>, collection: <span class=\"string\">\"\"</span> &#125;, actions: [ <span class=\"string\">\"find\"</span>, <span class=\"string\">\"update\"</span>, <span class=\"string\">\"insert\"</span>, <span class=\"string\">\"remove\"</span> ] &#125;,</div><div class=\"line\">       &#123; resource: &#123; db: <span class=\"string\">\"users\"</span>, collection: <span class=\"string\">\"usersCollection\"</span> &#125;, actions: [ <span class=\"string\">\"update\"</span>, <span class=\"string\">\"insert\"</span>, <span class=\"string\">\"remove\"</span> ] &#125;,</div><div class=\"line\">       &#123; resource: &#123; db: <span class=\"string\">\"\"</span>, collection: <span class=\"string\">\"\"</span> &#125;, actions: [ <span class=\"string\">\"find\"</span> ] &#125;</div><div class=\"line\">     ],</div><div class=\"line\">     roles: [</div><div class=\"line\">       &#123; role: <span class=\"string\">\"read\"</span>, db: <span class=\"string\">\"admin\"</span> &#125;</div><div class=\"line\">     ]</div><div class=\"line\">   &#125;,</div><div class=\"line\">   &#123; w: <span class=\"string\">\"majority\"</span> , wtimeout: 5000 &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<h4 id=\"查看角色权限\"><a href=\"#查看角色权限\" class=\"headerlink\" title=\"查看角色权限\"></a>查看角色权限</h4><p>方法： <code>db.getRole()</code><br>查看所有非内建角色: <code>db.getRoles()</code></p>\n<h4 id=\"查看用户角色\"><a href=\"#查看用户角色\" class=\"headerlink\" title=\"查看用户角色\"></a>查看用户角色</h4><p>方法： <code>db.getUser()</code><br>查看所有用户: <code>db.getUsers()</code></p>\n<h4 id=\"授予-收回角色权限\"><a href=\"#授予-收回角色权限\" class=\"headerlink\" title=\"授予/收回角色权限\"></a>授予/收回角色权限</h4><p>收回: <code>db.revokePrivilegesFromRole()</code><br>授予: <code>db.grantPrivilegesToRole()</code></p>\n<h4 id=\"授予-收回用户角色\"><a href=\"#授予-收回用户角色\" class=\"headerlink\" title=\"授予/收回用户角色\"></a>授予/收回用户角色</h4><p>收回: <code>db.revokeRolesFromUser()</code><br>授予: <code>db.grantRolesToUser()</code></p>\n<h4 id=\"修改用户密码\"><a href=\"#修改用户密码\" class=\"headerlink\" title=\"修改用户密码\"></a>修改用户密码</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.changeUserPassword(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"newpass\"</span>)</div></pre></td></tr></table></figure>"},{"title":"mongodb初探","date":"2017-01-24T03:56:04.000Z","_content":"初探mongodb\n\n<!--more-->\n\n# mongodb\n基于分布式文件储存的数据库，支持的数据结构非常松散，类似json的bson格式，可以储存比较复杂的数据类型。\n\n### 特点\n- 面向集合存储，易存储对象类型的数据\n- 支持动态查询\n- 支持完全索引，包含内部对象，对任何属性都可索引\n- 支持复制和故障恢复\n- 使用高效的二进制数据存储，包括大型对象（如视频等）\n- 自动处理碎片，以支持云计算层次的扩展性\n\n### 应用平台\n- 大数据\n- 内容管理和交付\n- 移动和社交基础设施\n- 用户数据管理\n- 数据平台\n\n### Mac下安装mongodb\n- [官网](https://www.mongodb.com) 下载最新版本，我使用的是3.4.1\n- 解压后放倒/usr/local/mongodb目录下\n\n```\ncp -r mongodb-osx-x86_64-3.4.1 /usr/local/mongodb  \n```\n- 在该目录下建立子目录data/db存放数据，log存放日志\n\n```\nsudo mkdir data/db\nsudo mkdir log\n```\n- 进入子目录bin创建配置文件\n\n```\ncd bin\nvim mongodb.conf \n    // 编写配置文件\nport=27017    // 数据库服务使用端口\ndbpath=/usr/local/mongodb/data/db  // 数据存放的文件位置\nlogpath=/usr/local/mongodb/log/mongodb.log    // 日志文件的存放位置\nfork = true    // 后台守护进程运行\n```\n- 启动\n第一个窗口\n```\n./mongod -f mongodb.conf  \n```\n第二个窗口\n```\n./mongo\n```\n\n","source":"_posts/mongodb初探.md","raw":"---\ntitle: mongodb初探\ndate: 2017-01-24 11:56:04\ntags:\n---\n初探mongodb\n\n<!--more-->\n\n# mongodb\n基于分布式文件储存的数据库，支持的数据结构非常松散，类似json的bson格式，可以储存比较复杂的数据类型。\n\n### 特点\n- 面向集合存储，易存储对象类型的数据\n- 支持动态查询\n- 支持完全索引，包含内部对象，对任何属性都可索引\n- 支持复制和故障恢复\n- 使用高效的二进制数据存储，包括大型对象（如视频等）\n- 自动处理碎片，以支持云计算层次的扩展性\n\n### 应用平台\n- 大数据\n- 内容管理和交付\n- 移动和社交基础设施\n- 用户数据管理\n- 数据平台\n\n### Mac下安装mongodb\n- [官网](https://www.mongodb.com) 下载最新版本，我使用的是3.4.1\n- 解压后放倒/usr/local/mongodb目录下\n\n```\ncp -r mongodb-osx-x86_64-3.4.1 /usr/local/mongodb  \n```\n- 在该目录下建立子目录data/db存放数据，log存放日志\n\n```\nsudo mkdir data/db\nsudo mkdir log\n```\n- 进入子目录bin创建配置文件\n\n```\ncd bin\nvim mongodb.conf \n    // 编写配置文件\nport=27017    // 数据库服务使用端口\ndbpath=/usr/local/mongodb/data/db  // 数据存放的文件位置\nlogpath=/usr/local/mongodb/log/mongodb.log    // 日志文件的存放位置\nfork = true    // 后台守护进程运行\n```\n- 启动\n第一个窗口\n```\n./mongod -f mongodb.conf  \n```\n第二个窗口\n```\n./mongo\n```\n\n","slug":"mongodb初探","published":1,"updated":"2017-01-24T16:03:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulc000sjbzelqp0faer","content":"<p>初探mongodb</p>\n<a id=\"more\"></a>\n<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><p>基于分布式文件储存的数据库，支持的数据结构非常松散，类似json的bson格式，可以储存比较复杂的数据类型。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>面向集合存储，易存储对象类型的数据</li>\n<li>支持动态查询</li>\n<li>支持完全索引，包含内部对象，对任何属性都可索引</li>\n<li>支持复制和故障恢复</li>\n<li>使用高效的二进制数据存储，包括大型对象（如视频等）</li>\n<li>自动处理碎片，以支持云计算层次的扩展性</li>\n</ul>\n<h3 id=\"应用平台\"><a href=\"#应用平台\" class=\"headerlink\" title=\"应用平台\"></a>应用平台</h3><ul>\n<li>大数据</li>\n<li>内容管理和交付</li>\n<li>移动和社交基础设施</li>\n<li>用户数据管理</li>\n<li>数据平台</li>\n</ul>\n<h3 id=\"Mac下安装mongodb\"><a href=\"#Mac下安装mongodb\" class=\"headerlink\" title=\"Mac下安装mongodb\"></a>Mac下安装mongodb</h3><ul>\n<li><a href=\"https://www.mongodb.com\" target=\"_blank\" rel=\"external\">官网</a> 下载最新版本，我使用的是3.4.1</li>\n<li>解压后放倒/usr/local/mongodb目录下</li>\n</ul>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp -r mongodb-osx-x86_64<span class=\"number\">-3.4</span><span class=\"number\">.1</span> /usr/local/mongodb</div></pre></td></tr></table></figure>\n<ul>\n<li>在该目录下建立子目录data/db存放数据，log存放日志</li>\n</ul>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"keyword\">mkdir</span> data/<span class=\"keyword\">db</span></div><div class=\"line\">sudo <span class=\"keyword\">mkdir</span> <span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n<ul>\n<li>进入子目录bin创建配置文件</li>\n</ul>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> bin</div><div class=\"line\">vim mongodb.<span class=\"keyword\">conf</span> </div><div class=\"line\">    <span class=\"comment\">// 编写配置文件</span></div><div class=\"line\">port=27017    <span class=\"comment\">// 数据库服务使用端口</span></div><div class=\"line\">dbpath=/usr/<span class=\"keyword\">local</span>/mongodb/data/<span class=\"keyword\">db</span>  <span class=\"comment\">// 数据存放的文件位置</span></div><div class=\"line\">logpath=/usr/<span class=\"keyword\">local</span>/mongodb/<span class=\"keyword\">log</span>/mongodb.<span class=\"keyword\">log</span>    <span class=\"comment\">// 日志文件的存放位置</span></div><div class=\"line\">fork = true    <span class=\"comment\">// 后台守护进程运行</span></div></pre></td></tr></table></figure>\n<ul>\n<li>启动<br>第一个窗口<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">./mongod</span> -f mongodb.conf</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第二个窗口<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">./mongo</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>初探mongodb</p>","more":"<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><p>基于分布式文件储存的数据库，支持的数据结构非常松散，类似json的bson格式，可以储存比较复杂的数据类型。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>面向集合存储，易存储对象类型的数据</li>\n<li>支持动态查询</li>\n<li>支持完全索引，包含内部对象，对任何属性都可索引</li>\n<li>支持复制和故障恢复</li>\n<li>使用高效的二进制数据存储，包括大型对象（如视频等）</li>\n<li>自动处理碎片，以支持云计算层次的扩展性</li>\n</ul>\n<h3 id=\"应用平台\"><a href=\"#应用平台\" class=\"headerlink\" title=\"应用平台\"></a>应用平台</h3><ul>\n<li>大数据</li>\n<li>内容管理和交付</li>\n<li>移动和社交基础设施</li>\n<li>用户数据管理</li>\n<li>数据平台</li>\n</ul>\n<h3 id=\"Mac下安装mongodb\"><a href=\"#Mac下安装mongodb\" class=\"headerlink\" title=\"Mac下安装mongodb\"></a>Mac下安装mongodb</h3><ul>\n<li><a href=\"https://www.mongodb.com\" target=\"_blank\" rel=\"external\">官网</a> 下载最新版本，我使用的是3.4.1</li>\n<li>解压后放倒/usr/local/mongodb目录下</li>\n</ul>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp -r mongodb-osx-x86_64<span class=\"number\">-3.4</span><span class=\"number\">.1</span> /usr/local/mongodb</div></pre></td></tr></table></figure>\n<ul>\n<li>在该目录下建立子目录data/db存放数据，log存放日志</li>\n</ul>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"keyword\">mkdir</span> data/<span class=\"keyword\">db</span></div><div class=\"line\">sudo <span class=\"keyword\">mkdir</span> <span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n<ul>\n<li>进入子目录bin创建配置文件</li>\n</ul>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> bin</div><div class=\"line\">vim mongodb.<span class=\"keyword\">conf</span> </div><div class=\"line\">    <span class=\"comment\">// 编写配置文件</span></div><div class=\"line\">port=27017    <span class=\"comment\">// 数据库服务使用端口</span></div><div class=\"line\">dbpath=/usr/<span class=\"keyword\">local</span>/mongodb/data/<span class=\"keyword\">db</span>  <span class=\"comment\">// 数据存放的文件位置</span></div><div class=\"line\">logpath=/usr/<span class=\"keyword\">local</span>/mongodb/<span class=\"keyword\">log</span>/mongodb.<span class=\"keyword\">log</span>    <span class=\"comment\">// 日志文件的存放位置</span></div><div class=\"line\">fork = true    <span class=\"comment\">// 后台守护进程运行</span></div></pre></td></tr></table></figure>\n<ul>\n<li>启动<br>第一个窗口<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">./mongod</span> -f mongodb.conf</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第二个窗口<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">./mongo</span></div></pre></td></tr></table></figure></p>"},{"title":"redux学习笔记","date":"2017-05-04T01:38:19.000Z","_content":"愿这次笔记能记好。\n\n<!--more-->\n\n<!--# <strong class=\"title\">React</strong>\n\n## <strong class=\"title\">创建项目</strong>\n\n``` shell\n$ git clone -o react-starter-kit -b master --single-branch       https://github.com/kriasoft/react-starter-kit.git myapp\n$ cd myapp\n$ yarn install\n$ yarn start\n```-->\n\n<!--## jsx-->\n\n\n\n### <strong class=\"title\">redux(一种架构模式)</strong>\n不同的组件之间需要共享读写一些数据。\n\n### <strong class=\"title\">dispatch</strong>\n定义 dispatch 专门负责数据的修改:\n``` js\nfunction dispatch (action) {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      usrState.name = action.name;\n      break;\n    case 'UPDATE_USER_AGE':\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n```\n\n对数据的操作必须通过dispatch函数，\n`action`是一个对象，包含`type`,`data`等内容。\n\n``` js\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\ndispacth(params);\n// 修改了name\n```\n\n所有的全局变量数据必须先通过 dispatch, 并且必须用 action 通过 switch 确定修改什么。\n因此，无需再担心共享数据状态修改的问题。\n\n\n### <strong class=\"title\">store 构建state/dispatch 的集合</strong>\n\n`createStore`\n``` js\nfunction createStore (state, stateChanger) {\n  const getState = () => state\n  const dispatch = (action) => stateChanger(state, action)\n  return {getState, dispatch}\n}\n```\n`state`：应用程序状态。\n`stateChanger`:变化方法。\n`getState`:获取state的数据。\n`dispatch`:修改数据，接收action。\n\n如下修改数据生成的方式\n``` js\nlet usrState = {\n  name: 'xun',\n  age: 18\n};\n\nconst renderApp = (user) => {\n  const userDOM = document.getElementById('user');\n  userDOM.innerHTML = `${user.name},age:${user.age}`;\n};\n\nconst createStore = (state, stateChanger) => {\n  const getState = () => state;\n  const dispatch = (action) => stateChanger(state, action);\n  return {getState, dispatch};\n};\n\nconst stateChanger = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      usrState.name = action.name;\n      break;\n    case 'UPDATE_USER_AGE':\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n```\n通过`store.dispatch`修改数据\n通过`store.getState`获取数据\n\n### <strong class=\"title\">监控数据变化</strong>\n上面的代码如果不手动renderApp的话，页面数据不会更新，因此需要自动渲染数据。\n修改`createStore`\n``` js\nconst createStore = (state, stateChanger) => {\n  const listeners = [];\n  const subscribe = (listener) => listeners.push(listener);\n  const getState = () => state;\n  const dispatch = (action) => {\n    stateChanger(state, action);\n    listeners.forEach((listener) => listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n```\n通过`store.subscribe(listener)`传入监听函数，并存入数组中\n初始化时把`renderApp`传入数组中\n``` js\nconst store = createStore(appState, stateChanger)\nstore.subscribe(() => renderApp(store.getState()))\n\nrenderApp(store.getState()) // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n// 自动更新数据...\n```\n\n### <strong class=\"title\">纯函数</strong>\n- 函数的返回结果只依赖于它的参数\n- 执行过程中不产生任何副作用\n\n### <strong class=\"title\">共享结构的对象,优化性能</strong>\n更新时，部分属性无改变，但仍旧重新渲染，耗费性能。\n`解决方案`:在渲染函数执行之前判断传入的新数据和已有的数据是否相同。\n``` js\nconst obj = { a: 1, b: 2}\nconst obj2 = { ...obj, b: 3, c: 4 } // => { a: 1, b: 3, c: 4 }\n```\n`obj2`潜复制`obj`,并能覆盖，拓展。为新旧数据对比提供支持。\n\n``` js\nlet usrState = {\n  name: 'xun',\n  age: 18\n};\n\nconst createStore = (state, stateChanger) => {\n  const listeners = [];\n  const subscribe = (listener) => listeners.push(listener);\n  const getState = () => state;\n  const dispatch = (action) => {\n    state = stateChanger(state, action);  // 覆盖原对象\n    listeners.forEach((listener) => listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n\nconst renderApp = (newAppState, oldAppState = {}) => { // 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = {}\n  if (newAppState === oldAppState) return; // 数据没有变化就不渲染了\n  console.log('render app...');\n  renderName(newAppState.name, oldAppState.name);\n  renderAge(newAppState.age, oldAppState.age);\n};\n\nconst renderName = (newName, oldName = {}) => {\n  if (newName === oldName) return; // 数据没有变化就不渲染了\n  console.log('render name...');\n  const nameDom = document.getElementById('name');\n  nameDom.innerHTML = newName.name;\n};\nconst renderAge = (newAge, oldAge = {}) => {\n  if (newAge === oldAge) return; // 数据没有变化就不渲染了\n  console.log('render age...');\n  const ageDom = document.getElementById('age');\n  ageDom.innerHTML = newAge.age;\n};\n\nconst stateChanger = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      return {\n        ...state,\n        name: action.name\n      }\n      break;\n    case 'UPDATE_USER_AGE':\n      return {\n        ...state,\n        age: action.age\n      }\n      break;\n    default:\n      return state;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\nlet oldState = store.getState(); // 缓存oldState\n\nstore.subscribe(() => {\n  const newState = store.getState(); // 数据可能变化，获取新的 state\n  renderApp(newState, oldState); // 把新旧的 state 传进去渲染\n  oldState = newState; // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n});\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n```\n### <strong class=\"title\">reducer</strong>\n让`createStore`接受一个纯函数`reducer`为参数\n`reducer`接受`action`&`state`两个参数\n如果没有传入state，返回初始化的数据，否则根据action复制/覆盖产生新state\n\n``` js\nconst createStore = (reducer) => {\n  let state = null\n  const listeners = []\n  const subscribe = (listener) => listeners.push(listener)\n  const getState = () => state\n  const dispatch = (action) => {\n    state = reducer(state, action)\n    listeners.forEach((listener) => listener())\n  }\n  dispatch({}) // 初始化 state\n  return { getState, dispatch, subscribe }\n}\nconst themeReducer (state, action) => {\n  if (!state) return {\n    themeName: 'Red Theme',\n    themeColor: 'red'\n  }\n  switch (action.type) {\n    case 'UPATE_THEME_NAME':\n      return { ...state, themeName: action.themeName }\n    case 'UPATE_THEME_COLOR':\n      return { ...state, themeColor: action.themeColor }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(themeReducer)\n```\n\n### <strong class=\"title\">REDUX的套路</strong>\n``` js\n/ 定一个 reducer\nfunction reducer (state, action) {\n  /* 初始化 state 和 switch case */\n}\n\n// 生成 store\nconst store = createStore(reducer)\n\n// 监听数据变化重新渲染页面\nstore.subscribe(() => renderApp(store.getState()))\n\n// 首次渲染页面\nrenderApp(store.getState()) \n\n// 后面可以随意 dispatch 了，页面自动更新\nstore.dispatch(...)\n```\n\n\n### redux-saga\n- 集中处理 redux 副作用问题 (异步流)\n- 被实现为 generator \n- watch/worker（监听->执行）的工作形式\n\n<style>\n.title {\n  color: RGBA(92, 201, 245, 1.00);\n}\n</style>","source":"_posts/redux.md","raw":"---\ntitle: redux学习笔记\ndate: 2017-05-04 09:38:19\ntags: \n  - react\n  - javascript\n---\n愿这次笔记能记好。\n\n<!--more-->\n\n<!--# <strong class=\"title\">React</strong>\n\n## <strong class=\"title\">创建项目</strong>\n\n``` shell\n$ git clone -o react-starter-kit -b master --single-branch       https://github.com/kriasoft/react-starter-kit.git myapp\n$ cd myapp\n$ yarn install\n$ yarn start\n```-->\n\n<!--## jsx-->\n\n\n\n### <strong class=\"title\">redux(一种架构模式)</strong>\n不同的组件之间需要共享读写一些数据。\n\n### <strong class=\"title\">dispatch</strong>\n定义 dispatch 专门负责数据的修改:\n``` js\nfunction dispatch (action) {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      usrState.name = action.name;\n      break;\n    case 'UPDATE_USER_AGE':\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n```\n\n对数据的操作必须通过dispatch函数，\n`action`是一个对象，包含`type`,`data`等内容。\n\n``` js\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\ndispacth(params);\n// 修改了name\n```\n\n所有的全局变量数据必须先通过 dispatch, 并且必须用 action 通过 switch 确定修改什么。\n因此，无需再担心共享数据状态修改的问题。\n\n\n### <strong class=\"title\">store 构建state/dispatch 的集合</strong>\n\n`createStore`\n``` js\nfunction createStore (state, stateChanger) {\n  const getState = () => state\n  const dispatch = (action) => stateChanger(state, action)\n  return {getState, dispatch}\n}\n```\n`state`：应用程序状态。\n`stateChanger`:变化方法。\n`getState`:获取state的数据。\n`dispatch`:修改数据，接收action。\n\n如下修改数据生成的方式\n``` js\nlet usrState = {\n  name: 'xun',\n  age: 18\n};\n\nconst renderApp = (user) => {\n  const userDOM = document.getElementById('user');\n  userDOM.innerHTML = `${user.name},age:${user.age}`;\n};\n\nconst createStore = (state, stateChanger) => {\n  const getState = () => state;\n  const dispatch = (action) => stateChanger(state, action);\n  return {getState, dispatch};\n};\n\nconst stateChanger = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      usrState.name = action.name;\n      break;\n    case 'UPDATE_USER_AGE':\n      userState.age = action.age;\n      break;\n    default:\n      break;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n```\n通过`store.dispatch`修改数据\n通过`store.getState`获取数据\n\n### <strong class=\"title\">监控数据变化</strong>\n上面的代码如果不手动renderApp的话，页面数据不会更新，因此需要自动渲染数据。\n修改`createStore`\n``` js\nconst createStore = (state, stateChanger) => {\n  const listeners = [];\n  const subscribe = (listener) => listeners.push(listener);\n  const getState = () => state;\n  const dispatch = (action) => {\n    stateChanger(state, action);\n    listeners.forEach((listener) => listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n```\n通过`store.subscribe(listener)`传入监听函数，并存入数组中\n初始化时把`renderApp`传入数组中\n``` js\nconst store = createStore(appState, stateChanger)\nstore.subscribe(() => renderApp(store.getState()))\n\nrenderApp(store.getState()) // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n// 自动更新数据...\n```\n\n### <strong class=\"title\">纯函数</strong>\n- 函数的返回结果只依赖于它的参数\n- 执行过程中不产生任何副作用\n\n### <strong class=\"title\">共享结构的对象,优化性能</strong>\n更新时，部分属性无改变，但仍旧重新渲染，耗费性能。\n`解决方案`:在渲染函数执行之前判断传入的新数据和已有的数据是否相同。\n``` js\nconst obj = { a: 1, b: 2}\nconst obj2 = { ...obj, b: 3, c: 4 } // => { a: 1, b: 3, c: 4 }\n```\n`obj2`潜复制`obj`,并能覆盖，拓展。为新旧数据对比提供支持。\n\n``` js\nlet usrState = {\n  name: 'xun',\n  age: 18\n};\n\nconst createStore = (state, stateChanger) => {\n  const listeners = [];\n  const subscribe = (listener) => listeners.push(listener);\n  const getState = () => state;\n  const dispatch = (action) => {\n    state = stateChanger(state, action);  // 覆盖原对象\n    listeners.forEach((listener) => listener());\n  };\n  return {getState, dispatch, subscribe};\n};\n\nconst renderApp = (newAppState, oldAppState = {}) => { // 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = {}\n  if (newAppState === oldAppState) return; // 数据没有变化就不渲染了\n  console.log('render app...');\n  renderName(newAppState.name, oldAppState.name);\n  renderAge(newAppState.age, oldAppState.age);\n};\n\nconst renderName = (newName, oldName = {}) => {\n  if (newName === oldName) return; // 数据没有变化就不渲染了\n  console.log('render name...');\n  const nameDom = document.getElementById('name');\n  nameDom.innerHTML = newName.name;\n};\nconst renderAge = (newAge, oldAge = {}) => {\n  if (newAge === oldAge) return; // 数据没有变化就不渲染了\n  console.log('render age...');\n  const ageDom = document.getElementById('age');\n  ageDom.innerHTML = newAge.age;\n};\n\nconst stateChanger = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_USER_NAME':\n      return {\n        ...state,\n        name: action.name\n      }\n      break;\n    case 'UPDATE_USER_AGE':\n      return {\n        ...state,\n        age: action.age\n      }\n      break;\n    default:\n      return state;\n  };\n};\n\nconst store = createStore(usrState, stateChanger);\nlet oldState = store.getState(); // 缓存oldState\n\nstore.subscribe(() => {\n  const newState = store.getState(); // 数据可能变化，获取新的 state\n  renderApp(newState, oldState); // 把新旧的 state 传进去渲染\n  oldState = newState; // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染\n});\n\nrenderApp(store.getState()); // 首次渲染页面\n\nconst params = {type: 'UPDATE_USER_NAME', name: 'name'};\nstore.dispatch(params);\n\nrednerApp(store.getState()); // 渲染新数据\n```\n### <strong class=\"title\">reducer</strong>\n让`createStore`接受一个纯函数`reducer`为参数\n`reducer`接受`action`&`state`两个参数\n如果没有传入state，返回初始化的数据，否则根据action复制/覆盖产生新state\n\n``` js\nconst createStore = (reducer) => {\n  let state = null\n  const listeners = []\n  const subscribe = (listener) => listeners.push(listener)\n  const getState = () => state\n  const dispatch = (action) => {\n    state = reducer(state, action)\n    listeners.forEach((listener) => listener())\n  }\n  dispatch({}) // 初始化 state\n  return { getState, dispatch, subscribe }\n}\nconst themeReducer (state, action) => {\n  if (!state) return {\n    themeName: 'Red Theme',\n    themeColor: 'red'\n  }\n  switch (action.type) {\n    case 'UPATE_THEME_NAME':\n      return { ...state, themeName: action.themeName }\n    case 'UPATE_THEME_COLOR':\n      return { ...state, themeColor: action.themeColor }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(themeReducer)\n```\n\n### <strong class=\"title\">REDUX的套路</strong>\n``` js\n/ 定一个 reducer\nfunction reducer (state, action) {\n  /* 初始化 state 和 switch case */\n}\n\n// 生成 store\nconst store = createStore(reducer)\n\n// 监听数据变化重新渲染页面\nstore.subscribe(() => renderApp(store.getState()))\n\n// 首次渲染页面\nrenderApp(store.getState()) \n\n// 后面可以随意 dispatch 了，页面自动更新\nstore.dispatch(...)\n```\n\n\n### redux-saga\n- 集中处理 redux 副作用问题 (异步流)\n- 被实现为 generator \n- watch/worker（监听->执行）的工作形式\n\n<style>\n.title {\n  color: RGBA(92, 201, 245, 1.00);\n}\n</style>","slug":"redux","published":1,"updated":"2017-12-03T15:19:55.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55uld000vjbzen500bac3","content":"<p>愿这次笔记能记好。</p>\n<a id=\"more\"></a>\n<!--# <strong class=\"title\">React</strong>\n\n## <strong class=\"title\">创建项目</strong>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> -o react-starter-kit -b master --single-branch       https://github.com/kriasoft/react-starter-kit.git myapp</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> myapp</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn install</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn start</span></div><div class=\"line\">```--&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--## jsx--&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;strong class=\"title\"&gt;redux(一种架构模式)&lt;/strong&gt;</span></span></div><div class=\"line\">不同的组件之间需要共享读写一些数据。</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;strong class=\"title\"&gt;dispatch&lt;/strong&gt;</span></span></div><div class=\"line\">定义 dispatch 专门负责数据的修改:</div><div class=\"line\">``` js</div><div class=\"line\">function dispatch (action) &#123;</div><div class=\"line\">  switch (action.type) &#123;</div><div class=\"line\">    case 'UPDATE_USER_NAME':</div><div class=\"line\">      usrState.name = action.name;</div><div class=\"line\">      break;</div><div class=\"line\">    case 'UPDATE_USER_AGE':</div><div class=\"line\">      userState.age = action.age;</div><div class=\"line\">      break;</div><div class=\"line\">    default:</div><div class=\"line\">      break;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>对数据的操作必须通过dispatch函数，<br><code>action</code>是一个对象，包含<code>type</code>,<code>data</code>等内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> params = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_USER_NAME'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'name'</span>&#125;;</div><div class=\"line\">dispacth(params);</div><div class=\"line\"><span class=\"comment\">// 修改了name</span></div></pre></td></tr></table></figure>\n<p>所有的全局变量数据必须先通过 dispatch, 并且必须用 action 通过 switch 确定修改什么。<br>因此，无需再担心共享数据状态修改的问题。</p>\n<h3 id=\"store-构建state-dispatch-的集合\"><a href=\"#store-构建state-dispatch-的集合\" class=\"headerlink\" title=\"store 构建state/dispatch 的集合\"></a><strong class=\"title\">store 构建state/dispatch 的集合</strong></h3><p><code>createStore</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span> (<span class=\"params\">state, stateChanger</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state</div><div class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> stateChanger(state, action)</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;getState, dispatch&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>state</code>：应用程序状态。<br><code>stateChanger</code>:变化方法。<br><code>getState</code>:获取state的数据。<br><code>dispatch</code>:修改数据，接收action。</p>\n<p>如下修改数据生成的方式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> usrState = &#123;</div><div class=\"line\">  name: <span class=\"string\">'xun'</span>,</div><div class=\"line\">  age: <span class=\"number\">18</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> renderApp = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> userDOM = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'user'</span>);</div><div class=\"line\">  userDOM.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;user.name&#125;</span>,age:<span class=\"subst\">$&#123;user.age&#125;</span>`</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> createStore = <span class=\"function\">(<span class=\"params\">state, stateChanger</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state;</div><div class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> stateChanger(state, action);</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;getState, dispatch&#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> stateChanger = <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_USER_NAME'</span>:</div><div class=\"line\">      usrState.name = action.name;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_USER_AGE'</span>:</div><div class=\"line\">      userState.age = action.age;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(usrState, stateChanger);</div><div class=\"line\"></div><div class=\"line\">renderApp(store.getState()); <span class=\"comment\">// 首次渲染页面</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> params = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_USER_NAME'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'name'</span>&#125;;</div><div class=\"line\">store.dispatch(params);</div><div class=\"line\"></div><div class=\"line\">rednerApp(store.getState()); <span class=\"comment\">// 渲染新数据</span></div></pre></td></tr></table></figure></p>\n<p>通过<code>store.dispatch</code>修改数据<br>通过<code>store.getState</code>获取数据</p>\n<h3 id=\"监控数据变化\"><a href=\"#监控数据变化\" class=\"headerlink\" title=\"监控数据变化\"></a><strong class=\"title\">监控数据变化</strong></h3><p>上面的代码如果不手动renderApp的话，页面数据不会更新，因此需要自动渲染数据。<br>修改<code>createStore</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> createStore = <span class=\"function\">(<span class=\"params\">state, stateChanger</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> listeners = [];</div><div class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener);</div><div class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state;</div><div class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</div><div class=\"line\">    stateChanger(state, action);</div><div class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener());</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;getState, dispatch, subscribe&#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>通过<code>store.subscribe(listener)</code>传入监听函数，并存入数组中<br>初始化时把<code>renderApp</code>传入数组中<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(appState, stateChanger)</div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> renderApp(store.getState()))</div><div class=\"line\"></div><div class=\"line\">renderApp(store.getState()) <span class=\"comment\">// 首次渲染页面</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> params = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_USER_NAME'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'name'</span>&#125;;</div><div class=\"line\">store.dispatch(params);</div><div class=\"line\"><span class=\"comment\">// 自动更新数据...</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a><strong class=\"title\">纯函数</strong></h3><ul>\n<li>函数的返回结果只依赖于它的参数</li>\n<li>执行过程中不产生任何副作用</li>\n</ul>\n<h3 id=\"共享结构的对象-优化性能\"><a href=\"#共享结构的对象-优化性能\" class=\"headerlink\" title=\"共享结构的对象,优化性能\"></a><strong class=\"title\">共享结构的对象,优化性能</strong></h3><p>更新时，部分属性无改变，但仍旧重新渲染，耗费性能。<br><code>解决方案</code>:在渲染函数执行之前判断传入的新数据和已有的数据是否相同。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; ...obj, <span class=\"attr\">b</span>: <span class=\"number\">3</span>, <span class=\"attr\">c</span>: <span class=\"number\">4</span> &#125; <span class=\"comment\">// =&gt; &#123; a: 1, b: 3, c: 4 &#125;</span></div></pre></td></tr></table></figure></p>\n<p><code>obj2</code>潜复制<code>obj</code>,并能覆盖，拓展。为新旧数据对比提供支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> usrState = &#123;</div><div class=\"line\">  name: <span class=\"string\">'xun'</span>,</div><div class=\"line\">  age: <span class=\"number\">18</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> createStore = <span class=\"function\">(<span class=\"params\">state, stateChanger</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> listeners = [];</div><div class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener);</div><div class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state;</div><div class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</div><div class=\"line\">    state = stateChanger(state, action);  <span class=\"comment\">// 覆盖原对象</span></div><div class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener());</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;getState, dispatch, subscribe&#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> renderApp = <span class=\"function\">(<span class=\"params\">newAppState, oldAppState = &#123;&#125;</span>) =&gt;</span> &#123; <span class=\"comment\">// 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = &#123;&#125;</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (newAppState === oldAppState) <span class=\"keyword\">return</span>; <span class=\"comment\">// 数据没有变化就不渲染了</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'render app...'</span>);</div><div class=\"line\">  renderName(newAppState.name, oldAppState.name);</div><div class=\"line\">  renderAge(newAppState.age, oldAppState.age);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> renderName = <span class=\"function\">(<span class=\"params\">newName, oldName = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (newName === oldName) <span class=\"keyword\">return</span>; <span class=\"comment\">// 数据没有变化就不渲染了</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'render name...'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> nameDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'name'</span>);</div><div class=\"line\">  nameDom.innerHTML = newName.name;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> renderAge = <span class=\"function\">(<span class=\"params\">newAge, oldAge = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (newAge === oldAge) <span class=\"keyword\">return</span>; <span class=\"comment\">// 数据没有变化就不渲染了</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'render age...'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> ageDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'age'</span>);</div><div class=\"line\">  ageDom.innerHTML = newAge.age;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> stateChanger = <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_USER_NAME'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        name: action.name</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_USER_AGE'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        age: action.age</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(usrState, stateChanger);</div><div class=\"line\"><span class=\"keyword\">let</span> oldState = store.getState(); <span class=\"comment\">// 缓存oldState</span></div><div class=\"line\"></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> newState = store.getState(); <span class=\"comment\">// 数据可能变化，获取新的 state</span></div><div class=\"line\">  renderApp(newState, oldState); <span class=\"comment\">// 把新旧的 state 传进去渲染</span></div><div class=\"line\">  oldState = newState; <span class=\"comment\">// 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">renderApp(store.getState()); <span class=\"comment\">// 首次渲染页面</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> params = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_USER_NAME'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'name'</span>&#125;;</div><div class=\"line\">store.dispatch(params);</div><div class=\"line\"></div><div class=\"line\">rednerApp(store.getState()); <span class=\"comment\">// 渲染新数据</span></div></pre></td></tr></table></figure>\n<h3 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a><strong class=\"title\">reducer</strong></h3><p>让<code>createStore</code>接受一个纯函数<code>reducer</code>为参数<br><code>reducer</code>接受<code>action</code>&amp;<code>state</code>两个参数<br>如果没有传入state，返回初始化的数据，否则根据action复制/覆盖产生新state</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> createStore = <span class=\"function\">(<span class=\"params\">reducer</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> state = <span class=\"literal\">null</span></div><div class=\"line\">  <span class=\"keyword\">const</span> listeners = []</div><div class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener)</div><div class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state</div><div class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</div><div class=\"line\">    state = reducer(state, action)</div><div class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener())</div><div class=\"line\">  &#125;</div><div class=\"line\">  dispatch(&#123;&#125;) <span class=\"comment\">// 初始化 state</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; getState, dispatch, subscribe &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> themeReducer (state, action) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!state) <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    themeName: <span class=\"string\">'Red Theme'</span>,</div><div class=\"line\">    themeColor: <span class=\"string\">'red'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPATE_THEME_NAME'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">themeName</span>: action.themeName &#125;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPATE_THEME_COLOR'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">themeColor</span>: action.themeColor &#125;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(themeReducer)</div></pre></td></tr></table></figure>\n<h3 id=\"REDUX的套路\"><a href=\"#REDUX的套路\" class=\"headerlink\" title=\"REDUX的套路\"></a><strong class=\"title\">REDUX的套路</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ 定一个 reducer</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span> (<span class=\"params\">state, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/* 初始化 state 和 switch case */</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 生成 store</span></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 监听数据变化重新渲染页面</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> renderApp(store.getState()))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 首次渲染页面</span></div><div class=\"line\">renderApp(store.getState()) </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 后面可以随意 dispatch 了，页面自动更新</span></div><div class=\"line\">store.dispatch(...)</div></pre></td></tr></table></figure>\n<h3 id=\"redux-saga\"><a href=\"#redux-saga\" class=\"headerlink\" title=\"redux-saga\"></a>redux-saga</h3><ul>\n<li>集中处理 redux 副作用问题 (异步流)</li>\n<li>被实现为 generator </li>\n<li>watch/worker（监听-&gt;执行）的工作形式</li>\n</ul>\n<style>\n.title {\n  color: RGBA(92, 201, 245, 1.00);\n}\n</style>-->","site":{"data":{}},"excerpt":"<p>愿这次笔记能记好。</p>","more":"<!--# <strong class=\"title\">React</strong>\n\n## <strong class=\"title\">创建项目</strong>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> -o react-starter-kit -b master --single-branch       https://github.com/kriasoft/react-starter-kit.git myapp</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> myapp</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn install</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn start</span></div><div class=\"line\">```--&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--## jsx--&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;strong class=\"title\"&gt;redux(一种架构模式)&lt;/strong&gt;</span></span></div><div class=\"line\">不同的组件之间需要共享读写一些数据。</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## &lt;strong class=\"title\"&gt;dispatch&lt;/strong&gt;</span></span></div><div class=\"line\">定义 dispatch 专门负责数据的修改:</div><div class=\"line\">``` js</div><div class=\"line\">function dispatch (action) &#123;</div><div class=\"line\">  switch (action.type) &#123;</div><div class=\"line\">    case 'UPDATE_USER_NAME':</div><div class=\"line\">      usrState.name = action.name;</div><div class=\"line\">      break;</div><div class=\"line\">    case 'UPDATE_USER_AGE':</div><div class=\"line\">      userState.age = action.age;</div><div class=\"line\">      break;</div><div class=\"line\">    default:</div><div class=\"line\">      break;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>对数据的操作必须通过dispatch函数，<br><code>action</code>是一个对象，包含<code>type</code>,<code>data</code>等内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> params = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_USER_NAME'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'name'</span>&#125;;</div><div class=\"line\">dispacth(params);</div><div class=\"line\"><span class=\"comment\">// 修改了name</span></div></pre></td></tr></table></figure>\n<p>所有的全局变量数据必须先通过 dispatch, 并且必须用 action 通过 switch 确定修改什么。<br>因此，无需再担心共享数据状态修改的问题。</p>\n<h3 id=\"store-构建state-dispatch-的集合\"><a href=\"#store-构建state-dispatch-的集合\" class=\"headerlink\" title=\"store 构建state/dispatch 的集合\"></a><strong class=\"title\">store 构建state/dispatch 的集合</strong></h3><p><code>createStore</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span> (<span class=\"params\">state, stateChanger</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state</div><div class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> stateChanger(state, action)</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;getState, dispatch&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>state</code>：应用程序状态。<br><code>stateChanger</code>:变化方法。<br><code>getState</code>:获取state的数据。<br><code>dispatch</code>:修改数据，接收action。</p>\n<p>如下修改数据生成的方式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> usrState = &#123;</div><div class=\"line\">  name: <span class=\"string\">'xun'</span>,</div><div class=\"line\">  age: <span class=\"number\">18</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> renderApp = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> userDOM = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'user'</span>);</div><div class=\"line\">  userDOM.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;user.name&#125;</span>,age:<span class=\"subst\">$&#123;user.age&#125;</span>`</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> createStore = <span class=\"function\">(<span class=\"params\">state, stateChanger</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state;</div><div class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> stateChanger(state, action);</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;getState, dispatch&#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> stateChanger = <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_USER_NAME'</span>:</div><div class=\"line\">      usrState.name = action.name;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_USER_AGE'</span>:</div><div class=\"line\">      userState.age = action.age;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(usrState, stateChanger);</div><div class=\"line\"></div><div class=\"line\">renderApp(store.getState()); <span class=\"comment\">// 首次渲染页面</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> params = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_USER_NAME'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'name'</span>&#125;;</div><div class=\"line\">store.dispatch(params);</div><div class=\"line\"></div><div class=\"line\">rednerApp(store.getState()); <span class=\"comment\">// 渲染新数据</span></div></pre></td></tr></table></figure></p>\n<p>通过<code>store.dispatch</code>修改数据<br>通过<code>store.getState</code>获取数据</p>\n<h3 id=\"监控数据变化\"><a href=\"#监控数据变化\" class=\"headerlink\" title=\"监控数据变化\"></a><strong class=\"title\">监控数据变化</strong></h3><p>上面的代码如果不手动renderApp的话，页面数据不会更新，因此需要自动渲染数据。<br>修改<code>createStore</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> createStore = <span class=\"function\">(<span class=\"params\">state, stateChanger</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> listeners = [];</div><div class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener);</div><div class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state;</div><div class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</div><div class=\"line\">    stateChanger(state, action);</div><div class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener());</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;getState, dispatch, subscribe&#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>通过<code>store.subscribe(listener)</code>传入监听函数，并存入数组中<br>初始化时把<code>renderApp</code>传入数组中<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(appState, stateChanger)</div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> renderApp(store.getState()))</div><div class=\"line\"></div><div class=\"line\">renderApp(store.getState()) <span class=\"comment\">// 首次渲染页面</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> params = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_USER_NAME'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'name'</span>&#125;;</div><div class=\"line\">store.dispatch(params);</div><div class=\"line\"><span class=\"comment\">// 自动更新数据...</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a><strong class=\"title\">纯函数</strong></h3><ul>\n<li>函数的返回结果只依赖于它的参数</li>\n<li>执行过程中不产生任何副作用</li>\n</ul>\n<h3 id=\"共享结构的对象-优化性能\"><a href=\"#共享结构的对象-优化性能\" class=\"headerlink\" title=\"共享结构的对象,优化性能\"></a><strong class=\"title\">共享结构的对象,优化性能</strong></h3><p>更新时，部分属性无改变，但仍旧重新渲染，耗费性能。<br><code>解决方案</code>:在渲染函数执行之前判断传入的新数据和已有的数据是否相同。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; ...obj, <span class=\"attr\">b</span>: <span class=\"number\">3</span>, <span class=\"attr\">c</span>: <span class=\"number\">4</span> &#125; <span class=\"comment\">// =&gt; &#123; a: 1, b: 3, c: 4 &#125;</span></div></pre></td></tr></table></figure></p>\n<p><code>obj2</code>潜复制<code>obj</code>,并能覆盖，拓展。为新旧数据对比提供支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> usrState = &#123;</div><div class=\"line\">  name: <span class=\"string\">'xun'</span>,</div><div class=\"line\">  age: <span class=\"number\">18</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> createStore = <span class=\"function\">(<span class=\"params\">state, stateChanger</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> listeners = [];</div><div class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener);</div><div class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state;</div><div class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</div><div class=\"line\">    state = stateChanger(state, action);  <span class=\"comment\">// 覆盖原对象</span></div><div class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener());</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;getState, dispatch, subscribe&#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> renderApp = <span class=\"function\">(<span class=\"params\">newAppState, oldAppState = &#123;&#125;</span>) =&gt;</span> &#123; <span class=\"comment\">// 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = &#123;&#125;</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (newAppState === oldAppState) <span class=\"keyword\">return</span>; <span class=\"comment\">// 数据没有变化就不渲染了</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'render app...'</span>);</div><div class=\"line\">  renderName(newAppState.name, oldAppState.name);</div><div class=\"line\">  renderAge(newAppState.age, oldAppState.age);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> renderName = <span class=\"function\">(<span class=\"params\">newName, oldName = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (newName === oldName) <span class=\"keyword\">return</span>; <span class=\"comment\">// 数据没有变化就不渲染了</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'render name...'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> nameDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'name'</span>);</div><div class=\"line\">  nameDom.innerHTML = newName.name;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> renderAge = <span class=\"function\">(<span class=\"params\">newAge, oldAge = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (newAge === oldAge) <span class=\"keyword\">return</span>; <span class=\"comment\">// 数据没有变化就不渲染了</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'render age...'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> ageDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'age'</span>);</div><div class=\"line\">  ageDom.innerHTML = newAge.age;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> stateChanger = <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_USER_NAME'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        name: action.name</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPDATE_USER_AGE'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        age: action.age</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(usrState, stateChanger);</div><div class=\"line\"><span class=\"keyword\">let</span> oldState = store.getState(); <span class=\"comment\">// 缓存oldState</span></div><div class=\"line\"></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> newState = store.getState(); <span class=\"comment\">// 数据可能变化，获取新的 state</span></div><div class=\"line\">  renderApp(newState, oldState); <span class=\"comment\">// 把新旧的 state 传进去渲染</span></div><div class=\"line\">  oldState = newState; <span class=\"comment\">// 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">renderApp(store.getState()); <span class=\"comment\">// 首次渲染页面</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> params = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'UPDATE_USER_NAME'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'name'</span>&#125;;</div><div class=\"line\">store.dispatch(params);</div><div class=\"line\"></div><div class=\"line\">rednerApp(store.getState()); <span class=\"comment\">// 渲染新数据</span></div></pre></td></tr></table></figure>\n<h3 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a><strong class=\"title\">reducer</strong></h3><p>让<code>createStore</code>接受一个纯函数<code>reducer</code>为参数<br><code>reducer</code>接受<code>action</code>&amp;<code>state</code>两个参数<br>如果没有传入state，返回初始化的数据，否则根据action复制/覆盖产生新state</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> createStore = <span class=\"function\">(<span class=\"params\">reducer</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> state = <span class=\"literal\">null</span></div><div class=\"line\">  <span class=\"keyword\">const</span> listeners = []</div><div class=\"line\">  <span class=\"keyword\">const</span> subscribe = <span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listeners.push(listener)</div><div class=\"line\">  <span class=\"keyword\">const</span> getState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> state</div><div class=\"line\">  <span class=\"keyword\">const</span> dispatch = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</div><div class=\"line\">    state = reducer(state, action)</div><div class=\"line\">    listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> listener())</div><div class=\"line\">  &#125;</div><div class=\"line\">  dispatch(&#123;&#125;) <span class=\"comment\">// 初始化 state</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; getState, dispatch, subscribe &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> themeReducer (state, action) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!state) <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    themeName: <span class=\"string\">'Red Theme'</span>,</div><div class=\"line\">    themeColor: <span class=\"string\">'red'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPATE_THEME_NAME'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">themeName</span>: action.themeName &#125;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'UPATE_THEME_COLOR'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">themeColor</span>: action.themeColor &#125;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(themeReducer)</div></pre></td></tr></table></figure>\n<h3 id=\"REDUX的套路\"><a href=\"#REDUX的套路\" class=\"headerlink\" title=\"REDUX的套路\"></a><strong class=\"title\">REDUX的套路</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ 定一个 reducer</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span> (<span class=\"params\">state, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/* 初始化 state 和 switch case */</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 生成 store</span></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 监听数据变化重新渲染页面</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> renderApp(store.getState()))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 首次渲染页面</span></div><div class=\"line\">renderApp(store.getState()) </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 后面可以随意 dispatch 了，页面自动更新</span></div><div class=\"line\">store.dispatch(...)</div></pre></td></tr></table></figure>\n<h3 id=\"redux-saga\"><a href=\"#redux-saga\" class=\"headerlink\" title=\"redux-saga\"></a>redux-saga</h3><ul>\n<li>集中处理 redux 副作用问题 (异步流)</li>\n<li>被实现为 generator </li>\n<li>watch/worker（监听-&gt;执行）的工作形式</li>\n</ul>\n<style>\n.title {\n  color: RGBA(92, 201, 245, 1.00);\n}\n</style>-->"},{"title":"mongodb的一些操作","date":"2017-03-30T02:50:52.000Z","_content":"\n我要学习！！\n<!--more-->\n\n### Collection集合中的基本操作\n1.查看帮助\n```\ndb.test.help()\n```\n2.查询当前集合的数据条数\n```\ndb.test.count()\n```\n3.查看数据空间大小\n```\ndb.test.dataSize()\n```\n4.得到当前聚合所在的db\n```\ndb.test.getDB()\n```\n5.得到当前聚合的状态\n```\ndb.test.stats()\n```\n6.聚合集合总大小\n```\ndb.test.totalSize()\n```\n7.聚合集合存储空间大小\n```\ndb.test.storageSize()\n```\n8.shard版本信息\n```\ndb.test.getShardVersion()\n```\n9.聚合集合重命名\n```\ndb.test.renameCollection('newName')\n```\n10.删除当前聚集集合\n```\ndb.test.drop()\n```\n\n\n### 聚集集合查询\n1.查询所有记录\n```\ndb.test.find()\n// 默认每页显示20条记录，可用 it 迭代查询下一页数据\n// 可以用 DBquery.shellBatchSize = 50 更改每页数据\n```\n2.查询过滤指定键中含有的重复数据\n```\ndb.test.distinct(\"name\")\n```\n3.查询 title = 指定值的数据\n```\ndb.test.find({title:\"xuncs\"})\n```\n4.查询 age > 18 的数据\n```\ndb.test.find({age:{$gt:18}})\n```\n5.查询 age < 18 的数据\n```\ndb.test.find({age:{$lt:18}})\n```\n6.查询 age >= 18 的数据\n```\ndb.test.find({age:{$gte:18}})\n```\n7.查询 age <= 18 的数据\n```\ndb.test.find({age:{$lte:18}})\n```\n8.查询 age > 18&& age < 24\n```\ndb.test.find({age:{$gt:18,$lt:24}})\n```\n9.查询 title中包含 xun 的数据\n```\ndb.xuncs.find({title:/xun/})\n```\n10.查询 title 中以 xun 开头的数据\n```\ndb.xuncs.find({title:/^xun/})\n```\n11.查询指定列, title，date数据\n```\ndb.xuncs.find({},{title: 1,date: 1})\n```\n12.查询指定列 且有要求查询\n```\ndb.xuncs.find({age:{$gt: 15}}, {age: 1})\n```\n13.排序\n```\ndb.xuncs.find().sort({age: 1})  // 升序\ndb.xuncs.find().sort({age: -1}) // 降序\n```\n14.查询指定数据\n```\ndb.xuncs.find()({title: 'xuncs'}) // 查询title = 'xuncs' 的data\n```\n15.查询前n条数据\n```\ndb.xuncs.find().limit(n)\n```\n16.查询n条之后的数据\n```\ndb.xuncs.find().skip(n)\n```\n17.查询n-m之间的数据\n```\ndb.xuncs.find().limit(m).skip(n)\n```\n18.or与查询\n```\ndb.xuncs.find({$or:[{age: 18},{age: 28}]})  // 查询 age = 18 || age = 28\n```\n19.查询第一条数据\n```\ndb.xuncs.findOne()\n```\n20.查询某个结果集的记录条数\n```\ndb.xuncs.find({age: {$gte:18}}).count()\n```\n21.查询某列含有该键值的数据\n```\ndb.xuncs.find({title: {$exists: true}})\n```\n\n\n### 索引\n1.创建索引\n```\ndb.xuncs.ensureIndex({title: 1})\ndb.xuncs.ensureIndex({title: 1, ts: -1})\n```\n2.查询当前聚合集合所有索引\n```\ndb.xuncs.getIdexes()\n```\n3.查看总索引记录大小\n```\ndb.xuncs.totalIndexSize()\n```\n4.读取当前集合的所有index信息\n```\ndb.xuncs.reIndex()\n```\n5.删除指定索引\n```\ndb.xuncs.dropIndex('title_1')\n```\n6.删除所有索引\n```\ndb.xuncs.dropIndexes()\n```\n\n### 增删改\n1.添加\n```\ndb.xuncs.save({title: 'xuncs', age: 18, sex: true, date: new Date()})\ndb.xuncs.insert({title: \"insert\"})\ndb.xuncs.batchInsert([{'title': 'batch1'},{'title': 'batch2'}])  // 批量添加\n```\n2.修改\n```\ndb.xuncs.update({title: 'xuncs'}, {$set: {age: 20}})\n// 修改数据中第一条title = 'xuncs'的age为20\ndb.xuncs.update({title: 'xuncs'}, {$set: {age: 22}}, false, true)\n// 修改数据中所有条目title = 'xuncs'的age为22\ndb.xuncs.update({title: 'xuncs'}, {$inc: {age: 50}})\n// $inc 增加\n```\n3.删除\n```\ndb.xuncs.remove // 删除xuncs集合中所有文档\ndb.xuncs.remove({age: 18})\n```\n4.查询修改删除\n```\ndb.xuncs.findAndModify({\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  update: {$set: {name: 'aaa'}, $inc: {age:2}}\n})\ndb.runCommand({ findandmodify: \"xuncs\",\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  /*update: {$set: {name: 'aaa'}, $inc: {age:2}}*/\n  remove: true\n})\n// update与remove中有一个必须参数，其他参数可选\n```\n","source":"_posts/mongodb的一些操作.md","raw":"---\ntitle: mongodb的一些操作\ndate: 2017-03-30 10:50:52\ntags:\n---\n\n我要学习！！\n<!--more-->\n\n### Collection集合中的基本操作\n1.查看帮助\n```\ndb.test.help()\n```\n2.查询当前集合的数据条数\n```\ndb.test.count()\n```\n3.查看数据空间大小\n```\ndb.test.dataSize()\n```\n4.得到当前聚合所在的db\n```\ndb.test.getDB()\n```\n5.得到当前聚合的状态\n```\ndb.test.stats()\n```\n6.聚合集合总大小\n```\ndb.test.totalSize()\n```\n7.聚合集合存储空间大小\n```\ndb.test.storageSize()\n```\n8.shard版本信息\n```\ndb.test.getShardVersion()\n```\n9.聚合集合重命名\n```\ndb.test.renameCollection('newName')\n```\n10.删除当前聚集集合\n```\ndb.test.drop()\n```\n\n\n### 聚集集合查询\n1.查询所有记录\n```\ndb.test.find()\n// 默认每页显示20条记录，可用 it 迭代查询下一页数据\n// 可以用 DBquery.shellBatchSize = 50 更改每页数据\n```\n2.查询过滤指定键中含有的重复数据\n```\ndb.test.distinct(\"name\")\n```\n3.查询 title = 指定值的数据\n```\ndb.test.find({title:\"xuncs\"})\n```\n4.查询 age > 18 的数据\n```\ndb.test.find({age:{$gt:18}})\n```\n5.查询 age < 18 的数据\n```\ndb.test.find({age:{$lt:18}})\n```\n6.查询 age >= 18 的数据\n```\ndb.test.find({age:{$gte:18}})\n```\n7.查询 age <= 18 的数据\n```\ndb.test.find({age:{$lte:18}})\n```\n8.查询 age > 18&& age < 24\n```\ndb.test.find({age:{$gt:18,$lt:24}})\n```\n9.查询 title中包含 xun 的数据\n```\ndb.xuncs.find({title:/xun/})\n```\n10.查询 title 中以 xun 开头的数据\n```\ndb.xuncs.find({title:/^xun/})\n```\n11.查询指定列, title，date数据\n```\ndb.xuncs.find({},{title: 1,date: 1})\n```\n12.查询指定列 且有要求查询\n```\ndb.xuncs.find({age:{$gt: 15}}, {age: 1})\n```\n13.排序\n```\ndb.xuncs.find().sort({age: 1})  // 升序\ndb.xuncs.find().sort({age: -1}) // 降序\n```\n14.查询指定数据\n```\ndb.xuncs.find()({title: 'xuncs'}) // 查询title = 'xuncs' 的data\n```\n15.查询前n条数据\n```\ndb.xuncs.find().limit(n)\n```\n16.查询n条之后的数据\n```\ndb.xuncs.find().skip(n)\n```\n17.查询n-m之间的数据\n```\ndb.xuncs.find().limit(m).skip(n)\n```\n18.or与查询\n```\ndb.xuncs.find({$or:[{age: 18},{age: 28}]})  // 查询 age = 18 || age = 28\n```\n19.查询第一条数据\n```\ndb.xuncs.findOne()\n```\n20.查询某个结果集的记录条数\n```\ndb.xuncs.find({age: {$gte:18}}).count()\n```\n21.查询某列含有该键值的数据\n```\ndb.xuncs.find({title: {$exists: true}})\n```\n\n\n### 索引\n1.创建索引\n```\ndb.xuncs.ensureIndex({title: 1})\ndb.xuncs.ensureIndex({title: 1, ts: -1})\n```\n2.查询当前聚合集合所有索引\n```\ndb.xuncs.getIdexes()\n```\n3.查看总索引记录大小\n```\ndb.xuncs.totalIndexSize()\n```\n4.读取当前集合的所有index信息\n```\ndb.xuncs.reIndex()\n```\n5.删除指定索引\n```\ndb.xuncs.dropIndex('title_1')\n```\n6.删除所有索引\n```\ndb.xuncs.dropIndexes()\n```\n\n### 增删改\n1.添加\n```\ndb.xuncs.save({title: 'xuncs', age: 18, sex: true, date: new Date()})\ndb.xuncs.insert({title: \"insert\"})\ndb.xuncs.batchInsert([{'title': 'batch1'},{'title': 'batch2'}])  // 批量添加\n```\n2.修改\n```\ndb.xuncs.update({title: 'xuncs'}, {$set: {age: 20}})\n// 修改数据中第一条title = 'xuncs'的age为20\ndb.xuncs.update({title: 'xuncs'}, {$set: {age: 22}}, false, true)\n// 修改数据中所有条目title = 'xuncs'的age为22\ndb.xuncs.update({title: 'xuncs'}, {$inc: {age: 50}})\n// $inc 增加\n```\n3.删除\n```\ndb.xuncs.remove // 删除xuncs集合中所有文档\ndb.xuncs.remove({age: 18})\n```\n4.查询修改删除\n```\ndb.xuncs.findAndModify({\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  update: {$set: {name: 'aaa'}, $inc: {age:2}}\n})\ndb.runCommand({ findandmodify: \"xuncs\",\n  query: {age: {$gte:18}},\n  sort: {age: -1},\n  /*update: {$set: {name: 'aaa'}, $inc: {age:2}}*/\n  remove: true\n})\n// update与remove中有一个必须参数，其他参数可选\n```\n","slug":"mongodb的一些操作","published":1,"updated":"2017-04-01T03:35:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ule000xjbzei6hq5svs","content":"<p>我要学习！！<br><a id=\"more\"></a></p>\n<h3 id=\"Collection集合中的基本操作\"><a href=\"#Collection集合中的基本操作\" class=\"headerlink\" title=\"Collection集合中的基本操作\"></a>Collection集合中的基本操作</h3><p>1.查看帮助<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">db</span>.<span class=\"keyword\">test</span>.<span class=\"keyword\">help</span>()</div></pre></td></tr></table></figure></p>\n<p>2.查询当前集合的数据条数<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">db</span>.<span class=\"keyword\">test</span>.<span class=\"keyword\">count</span>()</div></pre></td></tr></table></figure></p>\n<p>3.查看数据空间大小<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.dataSize</span>()</div></pre></td></tr></table></figure></p>\n<p>4.得到当前聚合所在的db<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.getDB</span>()</div></pre></td></tr></table></figure></p>\n<p>5.得到当前聚合的状态<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.stats</span>()</div></pre></td></tr></table></figure></p>\n<p>6.聚合集合总大小<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.totalSize</span>()</div></pre></td></tr></table></figure></p>\n<p>7.聚合集合存储空间大小<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.storageSize</span>()</div></pre></td></tr></table></figure></p>\n<p>8.shard版本信息<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.getShardVersion</span>()</div></pre></td></tr></table></figure></p>\n<p>9.聚合集合重命名<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.renameCollection</span>(<span class=\"string\">'newName'</span>)</div></pre></td></tr></table></figure></p>\n<p>10.删除当前聚集集合<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">db</span>.<span class=\"keyword\">test</span>.<span class=\"keyword\">drop</span>()</div></pre></td></tr></table></figure></p>\n<h3 id=\"聚集集合查询\"><a href=\"#聚集集合查询\" class=\"headerlink\" title=\"聚集集合查询\"></a>聚集集合查询</h3><p>1.查询所有记录<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>()</div><div class=\"line\"><span class=\"comment\">// 默认每页显示20条记录，可用 it 迭代查询下一页数据</span></div><div class=\"line\"><span class=\"comment\">// 可以用 DBquery.shellBatchSize = 50 更改每页数据</span></div></pre></td></tr></table></figure></p>\n<p>2.查询过滤指定键中含有的重复数据<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">db</span>.<span class=\"keyword\">test</span>.<span class=\"keyword\">distinct</span>(<span class=\"string\">\"name\"</span>)</div></pre></td></tr></table></figure></p>\n<p>3.查询 title = 指定值的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">title</span>:<span class=\"string\">\"xuncs\"</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>4.查询 age &gt; 18 的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$gt:<span class=\"number\">18</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>5.查询 age &lt; 18 的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$lt:<span class=\"number\">18</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>6.查询 age &gt;= 18 的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$gte:<span class=\"number\">18</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>7.查询 age &lt;= 18 的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$lte:<span class=\"number\">18</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>8.查询 age &gt; 18&amp;&amp; age &lt; 24<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$gt:<span class=\"number\">18</span>,$lt:<span class=\"number\">24</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>9.查询 title中包含 xun 的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">title</span>:/xun/&#125;)</div></pre></td></tr></table></figure></p>\n<p>10.查询 title 中以 xun 开头的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">title</span>:/^xun/&#125;)</div></pre></td></tr></table></figure></p>\n<p>11.查询指定列, title，date数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;&#125;,&#123;<span class=\"attribute\">title</span>: <span class=\"number\">1</span>,date: <span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>12.查询指定列 且有要求查询<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$gt: <span class=\"number\">15</span>&#125;&#125;, &#123;<span class=\"attribute\">age</span>: <span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>13.排序<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>().sort(&#123;age: <span class=\"number\">1</span>&#125;)  <span class=\"comment\">// 升序</span></div><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>().sort(&#123;age: -<span class=\"number\">1</span>&#125;) <span class=\"comment\">// 降序</span></div></pre></td></tr></table></figure></p>\n<p>14.查询指定数据<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>()(&#123;title: <span class=\"string\">'xuncs'</span>&#125;) <span class=\"comment\">// 查询title = 'xuncs' 的data</span></div></pre></td></tr></table></figure></p>\n<p>15.查询前n条数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(<span class=\"selector-tag\">n</span>)</div></pre></td></tr></table></figure></p>\n<p>16.查询n条之后的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.skip</span>(<span class=\"selector-tag\">n</span>)</div></pre></td></tr></table></figure></p>\n<p>17.查询n-m之间的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(<span class=\"selector-tag\">m</span>)<span class=\"selector-class\">.skip</span>(<span class=\"selector-tag\">n</span>)</div></pre></td></tr></table></figure></p>\n<p>18.or与查询<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;$<span class=\"attribute\">or</span>:[&#123;<span class=\"attribute\">age</span>: <span class=\"number\">18</span>&#125;,&#123;<span class=\"attribute\">age</span>: <span class=\"number\">28</span>&#125;]&#125;)  <span class=\"comment\">// 查询 age = 18 || age = 28</span></div></pre></td></tr></table></figure></p>\n<p>19.查询第一条数据<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.findOne</span>()</div></pre></td></tr></table></figure></p>\n<p>20.查询某个结果集的记录条数<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>: &#123;$gte:<span class=\"number\">18</span>&#125;&#125;)<span class=\"selector-class\">.count</span>()</div></pre></td></tr></table></figure></p>\n<p>21.查询某列含有该键值的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">title</span>: &#123;$exists: true&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>1.创建索引<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.ensureIndex</span>(&#123;<span class=\"attribute\">title</span>: <span class=\"number\">1</span>&#125;)</div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.ensureIndex</span>(&#123;<span class=\"attribute\">title</span>: <span class=\"number\">1</span>, ts: -<span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>2.查询当前聚合集合所有索引<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.getIdexes</span>()</div></pre></td></tr></table></figure></p>\n<p>3.查看总索引记录大小<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.totalIndexSize</span>()</div></pre></td></tr></table></figure></p>\n<p>4.读取当前集合的所有index信息<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.reIndex</span>()</div></pre></td></tr></table></figure></p>\n<p>5.删除指定索引<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.dropIndex</span>(<span class=\"string\">'title_1'</span>)</div></pre></td></tr></table></figure></p>\n<p>6.删除所有索引<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.dropIndexes</span>()</div></pre></td></tr></table></figure></p>\n<h3 id=\"增删改\"><a href=\"#增删改\" class=\"headerlink\" title=\"增删改\"></a>增删改</h3><p>1.添加<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.save</span>(&#123;title: <span class=\"string\">'xuncs'</span>, age: <span class=\"number\">18</span>, sex: true, date: new Date()&#125;)</div><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.insert</span>(&#123;title: <span class=\"string\">\"insert\"</span>&#125;)</div><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.batchInsert</span>([&#123;<span class=\"string\">'title'</span>: <span class=\"string\">'batch1'</span>&#125;,&#123;<span class=\"string\">'title'</span>: <span class=\"string\">'batch2'</span>&#125;])  <span class=\"comment\">// 批量添加</span></div></pre></td></tr></table></figure></p>\n<p>2.修改<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.xuncs.<span class=\"keyword\">update</span>(&#123;title: <span class=\"string\">'xuncs'</span>&#125;, &#123;$set: &#123;age: <span class=\"number\">20</span>&#125;&#125;)</div><div class=\"line\">// 修改数据中第一条title = <span class=\"string\">'xuncs'</span>的age为<span class=\"number\">20</span></div><div class=\"line\">db.xuncs.<span class=\"keyword\">update</span>(&#123;title: <span class=\"string\">'xuncs'</span>&#125;, &#123;$set: &#123;age: <span class=\"number\">22</span>&#125;&#125;, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</div><div class=\"line\">// 修改数据中所有条目title = <span class=\"string\">'xuncs'</span>的age为<span class=\"number\">22</span></div><div class=\"line\">db.xuncs.<span class=\"keyword\">update</span>(&#123;title: <span class=\"string\">'xuncs'</span>&#125;, &#123;$inc: &#123;age: <span class=\"number\">50</span>&#125;&#125;)</div><div class=\"line\">// $inc 增加</div></pre></td></tr></table></figure></p>\n<p>3.删除<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.remove</span> <span class=\"comment\">// 删除xuncs集合中所有文档</span></div><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.remove</span>(&#123;age: <span class=\"number\">18</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>4.查询修改删除<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.xuncs.findAndModify(&#123;</div><div class=\"line\">  query: &#123;age: &#123;$gte:<span class=\"number\">18</span>&#125;&#125;,</div><div class=\"line\">  sort: &#123;age: -<span class=\"number\">1</span>&#125;,</div><div class=\"line\">  update: &#123;$set: &#123;name: <span class=\"string\">'aaa'</span>&#125;, $inc: &#123;age:<span class=\"number\">2</span>&#125;&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">db.runCommand(&#123; findandmodify: <span class=\"string\">\"xuncs\"</span>,</div><div class=\"line\">  query: &#123;age: &#123;$gte:<span class=\"number\">18</span>&#125;&#125;,</div><div class=\"line\">  sort: &#123;age: -<span class=\"number\">1</span>&#125;,</div><div class=\"line\">  /*update: &#123;$set: &#123;name: <span class=\"string\">'aaa'</span>&#125;, $inc: &#123;age:<span class=\"number\">2</span>&#125;&#125;*/</div><div class=\"line\">  remove: true</div><div class=\"line\">&#125;)</div><div class=\"line\">// <span class=\"keyword\">update</span>与remove中有一个必须参数，其他参数可选</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>我要学习！！<br>","more":"</p>\n<h3 id=\"Collection集合中的基本操作\"><a href=\"#Collection集合中的基本操作\" class=\"headerlink\" title=\"Collection集合中的基本操作\"></a>Collection集合中的基本操作</h3><p>1.查看帮助<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">db</span>.<span class=\"keyword\">test</span>.<span class=\"keyword\">help</span>()</div></pre></td></tr></table></figure></p>\n<p>2.查询当前集合的数据条数<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">db</span>.<span class=\"keyword\">test</span>.<span class=\"keyword\">count</span>()</div></pre></td></tr></table></figure></p>\n<p>3.查看数据空间大小<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.dataSize</span>()</div></pre></td></tr></table></figure></p>\n<p>4.得到当前聚合所在的db<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.getDB</span>()</div></pre></td></tr></table></figure></p>\n<p>5.得到当前聚合的状态<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.stats</span>()</div></pre></td></tr></table></figure></p>\n<p>6.聚合集合总大小<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.totalSize</span>()</div></pre></td></tr></table></figure></p>\n<p>7.聚合集合存储空间大小<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.storageSize</span>()</div></pre></td></tr></table></figure></p>\n<p>8.shard版本信息<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.getShardVersion</span>()</div></pre></td></tr></table></figure></p>\n<p>9.聚合集合重命名<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.renameCollection</span>(<span class=\"string\">'newName'</span>)</div></pre></td></tr></table></figure></p>\n<p>10.删除当前聚集集合<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">db</span>.<span class=\"keyword\">test</span>.<span class=\"keyword\">drop</span>()</div></pre></td></tr></table></figure></p>\n<h3 id=\"聚集集合查询\"><a href=\"#聚集集合查询\" class=\"headerlink\" title=\"聚集集合查询\"></a>聚集集合查询</h3><p>1.查询所有记录<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>()</div><div class=\"line\"><span class=\"comment\">// 默认每页显示20条记录，可用 it 迭代查询下一页数据</span></div><div class=\"line\"><span class=\"comment\">// 可以用 DBquery.shellBatchSize = 50 更改每页数据</span></div></pre></td></tr></table></figure></p>\n<p>2.查询过滤指定键中含有的重复数据<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">db</span>.<span class=\"keyword\">test</span>.<span class=\"keyword\">distinct</span>(<span class=\"string\">\"name\"</span>)</div></pre></td></tr></table></figure></p>\n<p>3.查询 title = 指定值的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">title</span>:<span class=\"string\">\"xuncs\"</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>4.查询 age &gt; 18 的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$gt:<span class=\"number\">18</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>5.查询 age &lt; 18 的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$lt:<span class=\"number\">18</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>6.查询 age &gt;= 18 的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$gte:<span class=\"number\">18</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>7.查询 age &lt;= 18 的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$lte:<span class=\"number\">18</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>8.查询 age &gt; 18&amp;&amp; age &lt; 24<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$gt:<span class=\"number\">18</span>,$lt:<span class=\"number\">24</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>9.查询 title中包含 xun 的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">title</span>:/xun/&#125;)</div></pre></td></tr></table></figure></p>\n<p>10.查询 title 中以 xun 开头的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">title</span>:/^xun/&#125;)</div></pre></td></tr></table></figure></p>\n<p>11.查询指定列, title，date数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;&#125;,&#123;<span class=\"attribute\">title</span>: <span class=\"number\">1</span>,date: <span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>12.查询指定列 且有要求查询<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>:&#123;$gt: <span class=\"number\">15</span>&#125;&#125;, &#123;<span class=\"attribute\">age</span>: <span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>13.排序<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>().sort(&#123;age: <span class=\"number\">1</span>&#125;)  <span class=\"comment\">// 升序</span></div><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>().sort(&#123;age: -<span class=\"number\">1</span>&#125;) <span class=\"comment\">// 降序</span></div></pre></td></tr></table></figure></p>\n<p>14.查询指定数据<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>()(&#123;title: <span class=\"string\">'xuncs'</span>&#125;) <span class=\"comment\">// 查询title = 'xuncs' 的data</span></div></pre></td></tr></table></figure></p>\n<p>15.查询前n条数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(<span class=\"selector-tag\">n</span>)</div></pre></td></tr></table></figure></p>\n<p>16.查询n条之后的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.skip</span>(<span class=\"selector-tag\">n</span>)</div></pre></td></tr></table></figure></p>\n<p>17.查询n-m之间的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(<span class=\"selector-tag\">m</span>)<span class=\"selector-class\">.skip</span>(<span class=\"selector-tag\">n</span>)</div></pre></td></tr></table></figure></p>\n<p>18.or与查询<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;$<span class=\"attribute\">or</span>:[&#123;<span class=\"attribute\">age</span>: <span class=\"number\">18</span>&#125;,&#123;<span class=\"attribute\">age</span>: <span class=\"number\">28</span>&#125;]&#125;)  <span class=\"comment\">// 查询 age = 18 || age = 28</span></div></pre></td></tr></table></figure></p>\n<p>19.查询第一条数据<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.findOne</span>()</div></pre></td></tr></table></figure></p>\n<p>20.查询某个结果集的记录条数<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">age</span>: &#123;$gte:<span class=\"number\">18</span>&#125;&#125;)<span class=\"selector-class\">.count</span>()</div></pre></td></tr></table></figure></p>\n<p>21.查询某列含有该键值的数据<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">title</span>: &#123;$exists: true&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>1.创建索引<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.ensureIndex</span>(&#123;<span class=\"attribute\">title</span>: <span class=\"number\">1</span>&#125;)</div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.ensureIndex</span>(&#123;<span class=\"attribute\">title</span>: <span class=\"number\">1</span>, ts: -<span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>2.查询当前聚合集合所有索引<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.getIdexes</span>()</div></pre></td></tr></table></figure></p>\n<p>3.查看总索引记录大小<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.totalIndexSize</span>()</div></pre></td></tr></table></figure></p>\n<p>4.读取当前集合的所有index信息<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.reIndex</span>()</div></pre></td></tr></table></figure></p>\n<p>5.删除指定索引<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.dropIndex</span>(<span class=\"string\">'title_1'</span>)</div></pre></td></tr></table></figure></p>\n<p>6.删除所有索引<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.dropIndexes</span>()</div></pre></td></tr></table></figure></p>\n<h3 id=\"增删改\"><a href=\"#增删改\" class=\"headerlink\" title=\"增删改\"></a>增删改</h3><p>1.添加<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.save</span>(&#123;title: <span class=\"string\">'xuncs'</span>, age: <span class=\"number\">18</span>, sex: true, date: new Date()&#125;)</div><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.insert</span>(&#123;title: <span class=\"string\">\"insert\"</span>&#125;)</div><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.batchInsert</span>([&#123;<span class=\"string\">'title'</span>: <span class=\"string\">'batch1'</span>&#125;,&#123;<span class=\"string\">'title'</span>: <span class=\"string\">'batch2'</span>&#125;])  <span class=\"comment\">// 批量添加</span></div></pre></td></tr></table></figure></p>\n<p>2.修改<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.xuncs.<span class=\"keyword\">update</span>(&#123;title: <span class=\"string\">'xuncs'</span>&#125;, &#123;$set: &#123;age: <span class=\"number\">20</span>&#125;&#125;)</div><div class=\"line\">// 修改数据中第一条title = <span class=\"string\">'xuncs'</span>的age为<span class=\"number\">20</span></div><div class=\"line\">db.xuncs.<span class=\"keyword\">update</span>(&#123;title: <span class=\"string\">'xuncs'</span>&#125;, &#123;$set: &#123;age: <span class=\"number\">22</span>&#125;&#125;, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</div><div class=\"line\">// 修改数据中所有条目title = <span class=\"string\">'xuncs'</span>的age为<span class=\"number\">22</span></div><div class=\"line\">db.xuncs.<span class=\"keyword\">update</span>(&#123;title: <span class=\"string\">'xuncs'</span>&#125;, &#123;$inc: &#123;age: <span class=\"number\">50</span>&#125;&#125;)</div><div class=\"line\">// $inc 增加</div></pre></td></tr></table></figure></p>\n<p>3.删除<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.remove</span> <span class=\"comment\">// 删除xuncs集合中所有文档</span></div><div class=\"line\">db<span class=\"selector-class\">.xuncs</span><span class=\"selector-class\">.remove</span>(&#123;age: <span class=\"number\">18</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>4.查询修改删除<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.xuncs.findAndModify(&#123;</div><div class=\"line\">  query: &#123;age: &#123;$gte:<span class=\"number\">18</span>&#125;&#125;,</div><div class=\"line\">  sort: &#123;age: -<span class=\"number\">1</span>&#125;,</div><div class=\"line\">  update: &#123;$set: &#123;name: <span class=\"string\">'aaa'</span>&#125;, $inc: &#123;age:<span class=\"number\">2</span>&#125;&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">db.runCommand(&#123; findandmodify: <span class=\"string\">\"xuncs\"</span>,</div><div class=\"line\">  query: &#123;age: &#123;$gte:<span class=\"number\">18</span>&#125;&#125;,</div><div class=\"line\">  sort: &#123;age: -<span class=\"number\">1</span>&#125;,</div><div class=\"line\">  /*update: &#123;$set: &#123;name: <span class=\"string\">'aaa'</span>&#125;, $inc: &#123;age:<span class=\"number\">2</span>&#125;&#125;*/</div><div class=\"line\">  remove: true</div><div class=\"line\">&#125;)</div><div class=\"line\">// <span class=\"keyword\">update</span>与remove中有一个必须参数，其他参数可选</div></pre></td></tr></table></figure></p>"},{"title":"promise","date":"2017-12-03T15:06:16.000Z","_content":"\n## Promise——处理异步操作\n\n### 介绍\n- 对象的状态不受外界影响\n  - `pending` 准备中\n  - `fulfilled` 已成功\n  - `rejected`  已失败\n- 一旦状态改变，就不会再变，任何时候都可以得到这个结果\n  - `pending` => `rejected`\n  - `pending` => `fulfilled`\n\n- 缺点\n  - 建立后立即执行，无法取消\n  - 如果不设置回调函数，Promise内部抛出的错误，不会反应到外部\n  - 当处于pending状态时，无法得知目前进展到哪一个阶段\n\n### 使用\n接收一个包含resolve与reject参数的函数作为参数\n- `reslove`: `pending` => `fulfilled`\n- `reject`: `pending` => `rejected`\n```js\nconst myFirstPromise = new Promise((resolve, reject) => {\n  // ?异步操作，最终调用:\n  //\n    resolve(someValue); // fulfilled\n  // ?或\n    reject(\"failure reason\"); // rejected\n});\n\n// 用.then指定回调函数\n\n\n  // 异步加载图片\nfunction loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image();\n\n    image.onload = function() {\n      resolve(image);\n    };\n\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url));\n    };\n\n    image.src = url;\n  });\n}\n```\n### Promise.prototype.then\nthen() 方法返回一个Promise，它最多需要有两个参数：Promise 的成功和失败情况的回调函数。\n```js\np.then(value => {\n  // fulfilled\n},error => {\n  // rejected\n})\n//  最后返回Promise对象\n```\n\n### Promise.prototype.catch\ncatch() 方法返回一个Promise，只处理拒绝的情况。它的行为与调用Promise.prototype.then(undefined, onRejected) 相同。\n\n### Promise.all\n当所有给定的可迭代完成时执行resolve，或者任何promises失败时执行reject。\n```js\nlet p1 = Promise.resolve(3);\nlet p2 = 1337;\nlet p3 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 100, \"foo\");\n}); \n\nPromise.all([p1, p2, p3]).then(values => { \n    console.log(values); \n    // [3, 1337, \"foo\"] \n});\n```\n\n### Promise.race\nrace函数返回一个Promise，它将与第一个传递的promise相同的完成方式被完成。它可以是完成resolves，也可以是失败rejects，这要取决于第一个完成的方式是两个中的哪个。\n\n### Promise.reject(reason)\n静态函数Promise.reject返回一个被拒绝的Promise。使用是Error实例的reason对调试和选择性错误捕捉很有帮助\n\n### Promise.resolve(value)\n静态方法 Promise.resolve返回一个promise对象，这个promise对象是被解析后（resolved）的。\n\n## 实现原理\n```js\nfunction xPromise(fn) {\n  // 安全验证\n  if (typeof this !== 'object') {\n    throw new TypeError('Promises must be constructed via new');\n  }\n  if (typeof fn !== 'function') {\n    throw new TypeError('Promise constructor\\'s argument is not a function');\n  }\n  this._status = 'pending'; // 初始状态\n  this._value = null;   // promise执行结果\n  this._deferreds = []; // then中的回调函数\n\n  try\n}","source":"_posts/promise.md","raw":"---\ntitle: promise\ndate: 2017-12-03 23:06:16\ntags:\n---\n\n## Promise——处理异步操作\n\n### 介绍\n- 对象的状态不受外界影响\n  - `pending` 准备中\n  - `fulfilled` 已成功\n  - `rejected`  已失败\n- 一旦状态改变，就不会再变，任何时候都可以得到这个结果\n  - `pending` => `rejected`\n  - `pending` => `fulfilled`\n\n- 缺点\n  - 建立后立即执行，无法取消\n  - 如果不设置回调函数，Promise内部抛出的错误，不会反应到外部\n  - 当处于pending状态时，无法得知目前进展到哪一个阶段\n\n### 使用\n接收一个包含resolve与reject参数的函数作为参数\n- `reslove`: `pending` => `fulfilled`\n- `reject`: `pending` => `rejected`\n```js\nconst myFirstPromise = new Promise((resolve, reject) => {\n  // ?异步操作，最终调用:\n  //\n    resolve(someValue); // fulfilled\n  // ?或\n    reject(\"failure reason\"); // rejected\n});\n\n// 用.then指定回调函数\n\n\n  // 异步加载图片\nfunction loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image();\n\n    image.onload = function() {\n      resolve(image);\n    };\n\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url));\n    };\n\n    image.src = url;\n  });\n}\n```\n### Promise.prototype.then\nthen() 方法返回一个Promise，它最多需要有两个参数：Promise 的成功和失败情况的回调函数。\n```js\np.then(value => {\n  // fulfilled\n},error => {\n  // rejected\n})\n//  最后返回Promise对象\n```\n\n### Promise.prototype.catch\ncatch() 方法返回一个Promise，只处理拒绝的情况。它的行为与调用Promise.prototype.then(undefined, onRejected) 相同。\n\n### Promise.all\n当所有给定的可迭代完成时执行resolve，或者任何promises失败时执行reject。\n```js\nlet p1 = Promise.resolve(3);\nlet p2 = 1337;\nlet p3 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 100, \"foo\");\n}); \n\nPromise.all([p1, p2, p3]).then(values => { \n    console.log(values); \n    // [3, 1337, \"foo\"] \n});\n```\n\n### Promise.race\nrace函数返回一个Promise，它将与第一个传递的promise相同的完成方式被完成。它可以是完成resolves，也可以是失败rejects，这要取决于第一个完成的方式是两个中的哪个。\n\n### Promise.reject(reason)\n静态函数Promise.reject返回一个被拒绝的Promise。使用是Error实例的reason对调试和选择性错误捕捉很有帮助\n\n### Promise.resolve(value)\n静态方法 Promise.resolve返回一个promise对象，这个promise对象是被解析后（resolved）的。\n\n## 实现原理\n```js\nfunction xPromise(fn) {\n  // 安全验证\n  if (typeof this !== 'object') {\n    throw new TypeError('Promises must be constructed via new');\n  }\n  if (typeof fn !== 'function') {\n    throw new TypeError('Promise constructor\\'s argument is not a function');\n  }\n  this._status = 'pending'; // 初始状态\n  this._value = null;   // promise执行结果\n  this._deferreds = []; // then中的回调函数\n\n  try\n}","slug":"promise","published":1,"updated":"2017-12-20T10:59:10.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulg0010jbzegth77ldr","content":"<h2 id=\"Promise——处理异步操作\"><a href=\"#Promise——处理异步操作\" class=\"headerlink\" title=\"Promise——处理异步操作\"></a>Promise——处理异步操作</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li>对象的状态不受外界影响<ul>\n<li><code>pending</code> 准备中</li>\n<li><code>fulfilled</code> 已成功</li>\n<li><code>rejected</code>  已失败</li>\n</ul>\n</li>\n<li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果</p>\n<ul>\n<li><code>pending</code> =&gt; <code>rejected</code></li>\n<li><code>pending</code> =&gt; <code>fulfilled</code></li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>建立后立即执行，无法取消</li>\n<li>如果不设置回调函数，Promise内部抛出的错误，不会反应到外部</li>\n<li>当处于pending状态时，无法得知目前进展到哪一个阶段</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>接收一个包含resolve与reject参数的函数作为参数</p>\n<ul>\n<li><code>reslove</code>: <code>pending</code> =&gt; <code>fulfilled</code></li>\n<li><code>reject</code>: <code>pending</code> =&gt; <code>rejected</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> myFirstPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ?异步操作，最终调用:</span></div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">    resolve(someValue); <span class=\"comment\">// fulfilled</span></div><div class=\"line\">  <span class=\"comment\">// ?或</span></div><div class=\"line\">    reject(<span class=\"string\">\"failure reason\"</span>); <span class=\"comment\">// rejected</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用.then指定回调函数</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 异步加载图片</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImageAsync</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image();</div><div class=\"line\"></div><div class=\"line\">    image.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      resolve(image);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    image.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Could not load image at '</span> + url));</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    image.src = url;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then\"></a>Promise.prototype.then</h3><p>then() 方法返回一个Promise，它最多需要有两个参数：Promise 的成功和失败情况的回调函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// fulfilled</span></div><div class=\"line\">&#125;,error =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// rejected</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//  最后返回Promise对象</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch\"></a>Promise.prototype.catch</h3><p>catch() 方法返回一个Promise，只处理拒绝的情况。它的行为与调用Promise.prototype.then(undefined, onRejected) 相同。</p>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>当所有给定的可迭代完成时执行resolve，或者任何promises失败时执行reject。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"number\">1337</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"foo\"</span>);</div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2, p3]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(values); </div><div class=\"line\">    <span class=\"comment\">// [3, 1337, \"foo\"] </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p>race函数返回一个Promise，它将与第一个传递的promise相同的完成方式被完成。它可以是完成resolves，也可以是失败rejects，这要取决于第一个完成的方式是两个中的哪个。</p>\n<h3 id=\"Promise-reject-reason\"><a href=\"#Promise-reject-reason\" class=\"headerlink\" title=\"Promise.reject(reason)\"></a>Promise.reject(reason)</h3><p>静态函数Promise.reject返回一个被拒绝的Promise。使用是Error实例的reason对调试和选择性错误捕捉很有帮助</p>\n<h3 id=\"Promise-resolve-value\"><a href=\"#Promise-resolve-value\" class=\"headerlink\" title=\"Promise.resolve(value)\"></a>Promise.resolve(value)</h3><p>静态方法 Promise.resolve返回一个promise对象，这个promise对象是被解析后（resolved）的。</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>```js<br>function xPromise(fn) {<br>  // 安全验证<br>  if (typeof this !== ‘object’) {<br>    throw new TypeError(‘Promises must be constructed via new’);<br>  }<br>  if (typeof fn !== ‘function’) {<br>    throw new TypeError(‘Promise constructor\\’s argument is not a function’);<br>  }<br>  this._status = ‘pending’; // 初始状态<br>  this._value = null;   // promise执行结果<br>  this._deferreds = []; // then中的回调函数</p>\n<p>  try<br>}</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Promise——处理异步操作\"><a href=\"#Promise——处理异步操作\" class=\"headerlink\" title=\"Promise——处理异步操作\"></a>Promise——处理异步操作</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li>对象的状态不受外界影响<ul>\n<li><code>pending</code> 准备中</li>\n<li><code>fulfilled</code> 已成功</li>\n<li><code>rejected</code>  已失败</li>\n</ul>\n</li>\n<li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果</p>\n<ul>\n<li><code>pending</code> =&gt; <code>rejected</code></li>\n<li><code>pending</code> =&gt; <code>fulfilled</code></li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>建立后立即执行，无法取消</li>\n<li>如果不设置回调函数，Promise内部抛出的错误，不会反应到外部</li>\n<li>当处于pending状态时，无法得知目前进展到哪一个阶段</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>接收一个包含resolve与reject参数的函数作为参数</p>\n<ul>\n<li><code>reslove</code>: <code>pending</code> =&gt; <code>fulfilled</code></li>\n<li><code>reject</code>: <code>pending</code> =&gt; <code>rejected</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> myFirstPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ?异步操作，最终调用:</span></div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">    resolve(someValue); <span class=\"comment\">// fulfilled</span></div><div class=\"line\">  <span class=\"comment\">// ?或</span></div><div class=\"line\">    reject(<span class=\"string\">\"failure reason\"</span>); <span class=\"comment\">// rejected</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用.then指定回调函数</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 异步加载图片</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImageAsync</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image();</div><div class=\"line\"></div><div class=\"line\">    image.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      resolve(image);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    image.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Could not load image at '</span> + url));</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    image.src = url;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then\"></a>Promise.prototype.then</h3><p>then() 方法返回一个Promise，它最多需要有两个参数：Promise 的成功和失败情况的回调函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// fulfilled</span></div><div class=\"line\">&#125;,error =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// rejected</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//  最后返回Promise对象</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch\"></a>Promise.prototype.catch</h3><p>catch() 方法返回一个Promise，只处理拒绝的情况。它的行为与调用Promise.prototype.then(undefined, onRejected) 相同。</p>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>当所有给定的可迭代完成时执行resolve，或者任何promises失败时执行reject。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"number\">1337</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"foo\"</span>);</div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2, p3]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(values); </div><div class=\"line\">    <span class=\"comment\">// [3, 1337, \"foo\"] </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p>race函数返回一个Promise，它将与第一个传递的promise相同的完成方式被完成。它可以是完成resolves，也可以是失败rejects，这要取决于第一个完成的方式是两个中的哪个。</p>\n<h3 id=\"Promise-reject-reason\"><a href=\"#Promise-reject-reason\" class=\"headerlink\" title=\"Promise.reject(reason)\"></a>Promise.reject(reason)</h3><p>静态函数Promise.reject返回一个被拒绝的Promise。使用是Error实例的reason对调试和选择性错误捕捉很有帮助</p>\n<h3 id=\"Promise-resolve-value\"><a href=\"#Promise-resolve-value\" class=\"headerlink\" title=\"Promise.resolve(value)\"></a>Promise.resolve(value)</h3><p>静态方法 Promise.resolve返回一个promise对象，这个promise对象是被解析后（resolved）的。</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>```js<br>function xPromise(fn) {<br>  // 安全验证<br>  if (typeof this !== ‘object’) {<br>    throw new TypeError(‘Promises must be constructed via new’);<br>  }<br>  if (typeof fn !== ‘function’) {<br>    throw new TypeError(‘Promise constructor\\’s argument is not a function’);<br>  }<br>  this._status = ‘pending’; // 初始状态<br>  this._value = null;   // promise执行结果<br>  this._deferreds = []; // then中的回调函数</p>\n<p>  try<br>}</p>\n"},{"title":"three.js入门","date":"2017-03-06T15:03:49.000Z","_content":"非常想学习webGL和three.js，这次借着百度前端学院来学一波！\n\n<!--more-->\n\n## 起步\n直接引用 three.js\n\n### 三大组件\n场景 (scene)，相机 (camera)，渲染器 (renderer)\n\n#### scene\n场景是所有物体的容器\n```js\nvar scene = new THREE.Scene();\n```\n\n#### camera\n相机决定了场景中那个角度的景色会显示出来,角度不同看到的景色也不同\n```js\nvar camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);// 透视相机\n```\n\n#### renderer\n渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制\n```js\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n```\n渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的\n\n- 添加物体到场景中\n\n```js\nvar geometry = new THREE.CubeGeometry(1,1,1);\nvar material = new THREE.MeshBasicMaterial({color: 0x00ff00});\nvar cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n```\n\n- 渲染\n\n```js\nrenderer.render(scene, camera);\n```\n\n### 画一条线\n\n#### 定义几何体\n\n```js\nvar geometry = new THREE.Geometry();\n```\n几何体中的变量`vertices`可以存放点\n\n##### 定义线条的材质\n\n```js\nTHREE.LineBasicMaterial(parameters)\nparameters: {\n  Color: '线条的颜色，用16进制来表示，默认的颜色是白色',\n  Linewidth: '线条的宽度，默认为1'，\n  Linecap: '线条两端的外观，默认是圆角端点',\n  Linejoin: '两个线条的连接点处的外观，默认是“round”，表示圆角',\n  VertexColors: '定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值',\n  Fog: '定义材质的颜色是否受全局雾效的影响'\n}\n```\n\n```js\nvar material = new THREE.LineBasicMaterial( { vertexColors: true } )\n```\n\n#### 定义顶点颜色\n\n```js\nvar color1 = new THREE.Color( 0x444444 );\nvar color2 = new THREE.Color( 0xFF0000 );\n```\n\n#### 定义顶点位置,存放到几何体geometry中\n\n```js\nvar p1 = new THREE.Vector3( -100, 0, 100 );\nvar p2 = new THREE.Vector3( 100, 0, -100 );\ngeometry.vertices.push(p1);\ngeometry.vertices.push(p2);\n```\n\n#### 给顶点设置颜色\n\n```js\ngeometry.colors.push( color1, color2 );\n```\n\n#### 定义一条线\n\n```js\nvar line = new THREE.Line( geometry, material, THREE.LinePieces );\nscene.add(line);\n```\n\n#### 右手坐标系\nx轴正方向向右，y轴正方向向上，z轴由屏幕从里向外。\n\n#### 线条的深入理解\n","source":"_posts/three-js入门.md","raw":"---\ntitle: three.js入门\ndate: 2017-03-06 23:03:49\ntags:\n---\n非常想学习webGL和three.js，这次借着百度前端学院来学一波！\n\n<!--more-->\n\n## 起步\n直接引用 three.js\n\n### 三大组件\n场景 (scene)，相机 (camera)，渲染器 (renderer)\n\n#### scene\n场景是所有物体的容器\n```js\nvar scene = new THREE.Scene();\n```\n\n#### camera\n相机决定了场景中那个角度的景色会显示出来,角度不同看到的景色也不同\n```js\nvar camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);// 透视相机\n```\n\n#### renderer\n渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制\n```js\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n```\n渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的\n\n- 添加物体到场景中\n\n```js\nvar geometry = new THREE.CubeGeometry(1,1,1);\nvar material = new THREE.MeshBasicMaterial({color: 0x00ff00});\nvar cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n```\n\n- 渲染\n\n```js\nrenderer.render(scene, camera);\n```\n\n### 画一条线\n\n#### 定义几何体\n\n```js\nvar geometry = new THREE.Geometry();\n```\n几何体中的变量`vertices`可以存放点\n\n##### 定义线条的材质\n\n```js\nTHREE.LineBasicMaterial(parameters)\nparameters: {\n  Color: '线条的颜色，用16进制来表示，默认的颜色是白色',\n  Linewidth: '线条的宽度，默认为1'，\n  Linecap: '线条两端的外观，默认是圆角端点',\n  Linejoin: '两个线条的连接点处的外观，默认是“round”，表示圆角',\n  VertexColors: '定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值',\n  Fog: '定义材质的颜色是否受全局雾效的影响'\n}\n```\n\n```js\nvar material = new THREE.LineBasicMaterial( { vertexColors: true } )\n```\n\n#### 定义顶点颜色\n\n```js\nvar color1 = new THREE.Color( 0x444444 );\nvar color2 = new THREE.Color( 0xFF0000 );\n```\n\n#### 定义顶点位置,存放到几何体geometry中\n\n```js\nvar p1 = new THREE.Vector3( -100, 0, 100 );\nvar p2 = new THREE.Vector3( 100, 0, -100 );\ngeometry.vertices.push(p1);\ngeometry.vertices.push(p2);\n```\n\n#### 给顶点设置颜色\n\n```js\ngeometry.colors.push( color1, color2 );\n```\n\n#### 定义一条线\n\n```js\nvar line = new THREE.Line( geometry, material, THREE.LinePieces );\nscene.add(line);\n```\n\n#### 右手坐标系\nx轴正方向向右，y轴正方向向上，z轴由屏幕从里向外。\n\n#### 线条的深入理解\n","slug":"three-js入门","published":1,"updated":"2017-10-15T02:51:50.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulh0012jbzeradximfm","content":"<p>非常想学习webGL和three.js，这次借着百度前端学院来学一波！</p>\n<a id=\"more\"></a>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p>直接引用 three.js</p>\n<h3 id=\"三大组件\"><a href=\"#三大组件\" class=\"headerlink\" title=\"三大组件\"></a>三大组件</h3><p>场景 (scene)，相机 (camera)，渲染器 (renderer)</p>\n<h4 id=\"scene\"><a href=\"#scene\" class=\"headerlink\" title=\"scene\"></a>scene</h4><p>场景是所有物体的容器<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scene = <span class=\"keyword\">new</span> THREE.Scene();</div></pre></td></tr></table></figure></p>\n<h4 id=\"camera\"><a href=\"#camera\" class=\"headerlink\" title=\"camera\"></a>camera</h4><p>相机决定了场景中那个角度的景色会显示出来,角度不同看到的景色也不同<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> camera = <span class=\"keyword\">new</span> THREE.PerspectiveCamera(<span class=\"number\">75</span>, <span class=\"built_in\">window</span>.innerWidth/<span class=\"built_in\">window</span>.innerHeight, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span>);<span class=\"comment\">// 透视相机</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"renderer\"><a href=\"#renderer\" class=\"headerlink\" title=\"renderer\"></a>renderer</h4><p>渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer();</div><div class=\"line\">renderer.setSize(<span class=\"built_in\">window</span>.innerWidth, <span class=\"built_in\">window</span>.innerHeight);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(renderer.domElement);</div></pre></td></tr></table></figure></p>\n<p>渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的</p>\n<ul>\n<li>添加物体到场景中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.CubeGeometry(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> THREE.MeshBasicMaterial(&#123;<span class=\"attr\">color</span>: <span class=\"number\">0x00ff00</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> cube = <span class=\"keyword\">new</span> THREE.Mesh(geometry, material);</div><div class=\"line\">scene.add(cube);</div></pre></td></tr></table></figure>\n<ul>\n<li>渲染</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderer.render(scene, camera);</div></pre></td></tr></table></figure>\n<h3 id=\"画一条线\"><a href=\"#画一条线\" class=\"headerlink\" title=\"画一条线\"></a>画一条线</h3><h4 id=\"定义几何体\"><a href=\"#定义几何体\" class=\"headerlink\" title=\"定义几何体\"></a>定义几何体</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.Geometry();</div></pre></td></tr></table></figure>\n<p>几何体中的变量<code>vertices</code>可以存放点</p>\n<h5 id=\"定义线条的材质\"><a href=\"#定义线条的材质\" class=\"headerlink\" title=\"定义线条的材质\"></a>定义线条的材质</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">THREE.LineBasicMaterial(parameters)</div><div class=\"line\">parameters: &#123;</div><div class=\"line\">  Color: <span class=\"string\">'线条的颜色，用16进制来表示，默认的颜色是白色'</span>,</div><div class=\"line\">  Linewidth: <span class=\"string\">'线条的宽度，默认为1'</span>，</div><div class=\"line\">  Linecap: <span class=\"string\">'线条两端的外观，默认是圆角端点'</span>,</div><div class=\"line\">  Linejoin: <span class=\"string\">'两个线条的连接点处的外观，默认是“round”，表示圆角'</span>,</div><div class=\"line\">  VertexColors: <span class=\"string\">'定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值'</span>,</div><div class=\"line\">  Fog: <span class=\"string\">'定义材质的颜色是否受全局雾效的影响'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> THREE.LineBasicMaterial( &#123; <span class=\"attr\">vertexColors</span>: <span class=\"literal\">true</span> &#125; )</div></pre></td></tr></table></figure>\n<h4 id=\"定义顶点颜色\"><a href=\"#定义顶点颜色\" class=\"headerlink\" title=\"定义顶点颜色\"></a>定义顶点颜色</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> color1 = <span class=\"keyword\">new</span> THREE.Color( <span class=\"number\">0x444444</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> color2 = <span class=\"keyword\">new</span> THREE.Color( <span class=\"number\">0xFF0000</span> );</div></pre></td></tr></table></figure>\n<h4 id=\"定义顶点位置-存放到几何体geometry中\"><a href=\"#定义顶点位置-存放到几何体geometry中\" class=\"headerlink\" title=\"定义顶点位置,存放到几何体geometry中\"></a>定义顶点位置,存放到几何体geometry中</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> THREE.Vector3( <span class=\"number\">-100</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> THREE.Vector3( <span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">-100</span> );</div><div class=\"line\">geometry.vertices.push(p1);</div><div class=\"line\">geometry.vertices.push(p2);</div></pre></td></tr></table></figure>\n<h4 id=\"给顶点设置颜色\"><a href=\"#给顶点设置颜色\" class=\"headerlink\" title=\"给顶点设置颜色\"></a>给顶点设置颜色</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">geometry.colors.push( color1, color2 );</div></pre></td></tr></table></figure>\n<h4 id=\"定义一条线\"><a href=\"#定义一条线\" class=\"headerlink\" title=\"定义一条线\"></a>定义一条线</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> line = <span class=\"keyword\">new</span> THREE.Line( geometry, material, THREE.LinePieces );</div><div class=\"line\">scene.add(line);</div></pre></td></tr></table></figure>\n<h4 id=\"右手坐标系\"><a href=\"#右手坐标系\" class=\"headerlink\" title=\"右手坐标系\"></a>右手坐标系</h4><p>x轴正方向向右，y轴正方向向上，z轴由屏幕从里向外。</p>\n<h4 id=\"线条的深入理解\"><a href=\"#线条的深入理解\" class=\"headerlink\" title=\"线条的深入理解\"></a>线条的深入理解</h4>","site":{"data":{}},"excerpt":"<p>非常想学习webGL和three.js，这次借着百度前端学院来学一波！</p>","more":"<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p>直接引用 three.js</p>\n<h3 id=\"三大组件\"><a href=\"#三大组件\" class=\"headerlink\" title=\"三大组件\"></a>三大组件</h3><p>场景 (scene)，相机 (camera)，渲染器 (renderer)</p>\n<h4 id=\"scene\"><a href=\"#scene\" class=\"headerlink\" title=\"scene\"></a>scene</h4><p>场景是所有物体的容器<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scene = <span class=\"keyword\">new</span> THREE.Scene();</div></pre></td></tr></table></figure></p>\n<h4 id=\"camera\"><a href=\"#camera\" class=\"headerlink\" title=\"camera\"></a>camera</h4><p>相机决定了场景中那个角度的景色会显示出来,角度不同看到的景色也不同<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> camera = <span class=\"keyword\">new</span> THREE.PerspectiveCamera(<span class=\"number\">75</span>, <span class=\"built_in\">window</span>.innerWidth/<span class=\"built_in\">window</span>.innerHeight, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span>);<span class=\"comment\">// 透视相机</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"renderer\"><a href=\"#renderer\" class=\"headerlink\" title=\"renderer\"></a>renderer</h4><p>渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer();</div><div class=\"line\">renderer.setSize(<span class=\"built_in\">window</span>.innerWidth, <span class=\"built_in\">window</span>.innerHeight);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(renderer.domElement);</div></pre></td></tr></table></figure></p>\n<p>渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的</p>\n<ul>\n<li>添加物体到场景中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.CubeGeometry(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> THREE.MeshBasicMaterial(&#123;<span class=\"attr\">color</span>: <span class=\"number\">0x00ff00</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> cube = <span class=\"keyword\">new</span> THREE.Mesh(geometry, material);</div><div class=\"line\">scene.add(cube);</div></pre></td></tr></table></figure>\n<ul>\n<li>渲染</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderer.render(scene, camera);</div></pre></td></tr></table></figure>\n<h3 id=\"画一条线\"><a href=\"#画一条线\" class=\"headerlink\" title=\"画一条线\"></a>画一条线</h3><h4 id=\"定义几何体\"><a href=\"#定义几何体\" class=\"headerlink\" title=\"定义几何体\"></a>定义几何体</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.Geometry();</div></pre></td></tr></table></figure>\n<p>几何体中的变量<code>vertices</code>可以存放点</p>\n<h5 id=\"定义线条的材质\"><a href=\"#定义线条的材质\" class=\"headerlink\" title=\"定义线条的材质\"></a>定义线条的材质</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">THREE.LineBasicMaterial(parameters)</div><div class=\"line\">parameters: &#123;</div><div class=\"line\">  Color: <span class=\"string\">'线条的颜色，用16进制来表示，默认的颜色是白色'</span>,</div><div class=\"line\">  Linewidth: <span class=\"string\">'线条的宽度，默认为1'</span>，</div><div class=\"line\">  Linecap: <span class=\"string\">'线条两端的外观，默认是圆角端点'</span>,</div><div class=\"line\">  Linejoin: <span class=\"string\">'两个线条的连接点处的外观，默认是“round”，表示圆角'</span>,</div><div class=\"line\">  VertexColors: <span class=\"string\">'定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值'</span>,</div><div class=\"line\">  Fog: <span class=\"string\">'定义材质的颜色是否受全局雾效的影响'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> THREE.LineBasicMaterial( &#123; <span class=\"attr\">vertexColors</span>: <span class=\"literal\">true</span> &#125; )</div></pre></td></tr></table></figure>\n<h4 id=\"定义顶点颜色\"><a href=\"#定义顶点颜色\" class=\"headerlink\" title=\"定义顶点颜色\"></a>定义顶点颜色</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> color1 = <span class=\"keyword\">new</span> THREE.Color( <span class=\"number\">0x444444</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> color2 = <span class=\"keyword\">new</span> THREE.Color( <span class=\"number\">0xFF0000</span> );</div></pre></td></tr></table></figure>\n<h4 id=\"定义顶点位置-存放到几何体geometry中\"><a href=\"#定义顶点位置-存放到几何体geometry中\" class=\"headerlink\" title=\"定义顶点位置,存放到几何体geometry中\"></a>定义顶点位置,存放到几何体geometry中</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> THREE.Vector3( <span class=\"number\">-100</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> THREE.Vector3( <span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">-100</span> );</div><div class=\"line\">geometry.vertices.push(p1);</div><div class=\"line\">geometry.vertices.push(p2);</div></pre></td></tr></table></figure>\n<h4 id=\"给顶点设置颜色\"><a href=\"#给顶点设置颜色\" class=\"headerlink\" title=\"给顶点设置颜色\"></a>给顶点设置颜色</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">geometry.colors.push( color1, color2 );</div></pre></td></tr></table></figure>\n<h4 id=\"定义一条线\"><a href=\"#定义一条线\" class=\"headerlink\" title=\"定义一条线\"></a>定义一条线</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> line = <span class=\"keyword\">new</span> THREE.Line( geometry, material, THREE.LinePieces );</div><div class=\"line\">scene.add(line);</div></pre></td></tr></table></figure>\n<h4 id=\"右手坐标系\"><a href=\"#右手坐标系\" class=\"headerlink\" title=\"右手坐标系\"></a>右手坐标系</h4><p>x轴正方向向右，y轴正方向向上，z轴由屏幕从里向外。</p>\n<h4 id=\"线条的深入理解\"><a href=\"#线条的深入理解\" class=\"headerlink\" title=\"线条的深入理解\"></a>线条的深入理解</h4>"},{"title":"softwareEngineering","date":"2017-11-29T07:02:47.000Z","_content":"\n<!--more-->\n\n#### 软件的含义\n- 提供功能与性能的指令 / 计算机程序  的集合\n- 处理信息的数据逻辑\n- 按照商业逻辑处理\n- 产品文档\n\n#### 软件的特点\n- 表现形式： 逻辑性产品，复杂，无磨损，开发环境受限，成本高\n- 生产方式： 脑力，手工开发\n- 要求： 受计算机系统限制，涉及社会等因素\n\n#### 软件危机\n\n##### 表现\n- 开发成本/进度预估不准\n- 用户不满意\n- 质量差\n- 不可维护\n- 缺少文档\n- 成本过高\n- 开发速度过慢\n\n##### 原因\n- 客观：逻辑复杂，规模庞大\n- 主管：开发方式不正确，忽视需求分析/维护/写文档\n\n##### 解决途径\n- 按工程化的原则和方法组织软件开发工作\n\n#### 软件工程基本原理\n- 阶段性生命周期\n- 阶段评审\n- 产品控制\n- 现代程序设计架构\n- 结果清晰审查\n- 开发人员少而精\n- 不断迭代产品\n\n#####  研究内容\n- 软件开发技术\n- 软件工程管理\n\n##### 三要素\n- 方法\n- 工具\n- 过程\n\n##### 生命周期\n- 可行性分析与设计阶段\n- 需求分析阶段\n- 设计阶段\n- 实现阶段\n- 测试阶段\n- 运维阶段\n\n#### 软件过程\n指软件整个生命周期，从需求获取，需求分析，设计，实现，测试，发布和维护一个过程模型。\n\n##### 过程模型\n- 传统开发模型\n\t- 瀑布模型\n\t\t特征：一次性单向开发，质量保证，文档规范\n\t\t适合：需求明确的项目\n\t\t优点：质量保证，严格品控\n\t\t缺点：周期长，不灵活，难变动\n\t- 快速原型模型\n\t\t特征：快速构建，用户测试反馈，成本低\n\t\t适合：需求模糊的中小型软件\n\t\t优点：快速，符合用户预期\n\t\t缺点：难管理，变动大，架构规范\n- 演化开发模型\n\t- 增量模型\n\t\t特征：对功能以一系列增量的方式开发\n\t\t适合：小而可用的软件\n\t\t优点：灵活，降低风险，可持续开发\n\t- 螺旋模型\n\t\t特征：每个阶段都风险评估的快速原型模型\n\t\t适合：内部开发的大规模软件项目\n\t\t优点：减少过多测试或测试不足带来的风险，项目稳定\n\t\t一个周期：确定目标=>确定方案=>风险评估=>开发=>评估，计划\n- 喷泉模型\n\t特征：每个阶段相互重叠\n\t优点：提高效率，节省时间，适合面向对象\n\t缺点：不利于管理，规范，文档重要\n\n##### 开发方法\n- 面向过程的结构化方法\n\t优点：\n- 面向对象的开发方法\n\t= 对象+类+继承+消息\n\tOOA：分析对象，外部关联，内部结构\n\tOOD：归纳抽象类，规范接口\n\n#### 软件需求\n用户对目标软件在功能、行为、性能、设计约束等方面的期望\n\n##### 软件需求工程的必要性\n需求分析是介于系统分析和软件设计阶段之间的重要桥梁\n以系统规格说明和项目规划做基点，从软件的角度调整分析\n需求分析师软件设计实现测试维护的主要基础\n良好的需求分析有助于避免早起错误，提高效率，降低成本\n\n##### 需求分析的任务\n- 确定系统的功能需求\n- 数据分析\n- 定义逻辑模型\n- 适应需求变更\n\n##### 需求分析原则\n- 从用户的角度考虑\n- 以流程为主线\n- 注重复用\n- 划分需求优先级\n- 需求变更及时反馈\n\n##### 需求分析内容\n- 功能需求\n- 性能需求\n- 领域需求\n- 其他需求\n\n#### 结构化需求分析和建模\n- 核心：数据\n- 实体关系模型\n\t描述数据建模过程，刻画系统静态特征\n- 数据流图\n\t对功能，操作流程进行分解，完成功能建模\n- 状态转换图\n\t系统行为建模，通过外部事件触发\n\n##### 数据模型\n实体-联系图，描述数据对象间的关系\n\n##### 功能模型\n数据流图，描绘数据在软件中的变换逻辑过程\n\n##### 行为模型\n状态转换图，描绘系统通过各种行为模式在不同状态间转换的方式\n\n##### 建模目的\n- 使分析系统化\n- 模型是评审的焦点，是确定系统完整性，一致性，规格说明准确性的关键\n- 模型是设计的基础\n\n##### 建模的原因\n- 在建模中了解系统\n- 通过抽象降低复杂性\n- 有助于回忆细节\n- 有助于开发间，与用户交流\n- 提供开发维护文档\n\n##### 数据字典\n- 数据流\n- 数据流分量\n- 数据存储\n- 处理\n\n#### 软件设计\n\n##### 目的\n构造一个高内聚，高可靠性，高维护性，高效率的软件模型\n为提高软件质量做基础\n\n- 过程设计：状态转换图，控制规格说明，加工规格说明\n- 接口设计：数据流图\n- 体系结构设计：数据流图\n- 数据设计：数据词典，实体关系图\n\n##### 原则\n- 分而治之，模块化\n- 重用设计模式\n- 可跟踪性\n- 灵活性\n- 一致性\n\n\n##### 概要设计\n将软件需求转化为数据结构和软件的系统结构，确定模块间相互关系\n\n##### 详细设计设计\n通过结构细化得到数据结构与算法\n\n##### 总体设计过程\n- 设想供选择的方案\n- 选择合理方案\n- 推荐最佳方案\n- 功能分解\n\t- 结构设计 模块化组件化设计\n\t- 过程设计 模块处理过程\n- 设计软件结构\n- 数据库设计\n\n##### 设计原理\n- 抽象与逐步求精 \n\t控制复杂性\n- 模块化\n\t使程序获得智能化管理\n- 信息隐藏\n\t隐藏的信息只能通过暴露的接口访问\n\t提高模块独立性，减少维护的影响\n- 内聚度\n\t衡量一个模块内部各个元素彼此间的紧密程度\n\t- 7：偶然性内聚\n\t- 6：逻辑性内聚\n\t- 5：时间性内聚\n\t- 4：过程性内聚\n\t- 3：通信性内聚\n\t- 2：顺序性内聚\n\t- 1：功能性内聚\n- 耦合度\n\t衡量不同模块间相互依赖的紧密程度\n\t- 7：非直接耦合\n\t- 6：数据耦合\n\t- 5：特征耦合\n\t- 4：控制耦合\n\t- 3：外部耦合\n\t- 2：公共耦合\n\t- 1：内容耦合\n\n##### 启发式原则\n- 改进软件结构提高模块独立性\n- 模块规模适中\n- 深度、宽度、扇入和扇出适当\n- 模块的作用域应在控制域之内\n- 设计单入口单出口的模块，力争降低模块接口复杂度\n- 模块功能可预测\n\n#### 结构化设计方法\n\n##### 思想\n- 基于模块独立性和信息隐藏原则\n- 自顶向下，逐步求精\n- 分解与抽象结合\n- 应用结构化程序设计\n\n##### 面向数据流 SD\n- 确定信息流的类型\n- 划定流界\n- 将数据流图映射为程序结构\n- 提取层次控制结构\n- 通过设计复审和使用启发式策略进一步精化\n\n##### 变换分析法 迭代\n在数据流图中，数据流经过输入，系统变换，输出，完成数据分析。\n- 复审基本系统模型\n- 复审精化软件数据流图\n- 确定DFD特性，判断是变换流还是事务流\n- 划定输入流和输出流界限，孤立变换中心\n- 依次分解\n\n##### 事物分析法\n- 复审基本系统模型\n- 复审并精化软件数据流图\n- 确定数据流图特性\n- 指出事务中心，确认动作路径的数据流特性\n- 把数据流图映射为事务处理型的程序结构\n- 分解并精化石斛结构及动作路径\n- 使用启发式设计策略，精化程序结构雏形，改良软件质量\n\n##### 面向数据结构 DSSD\n- 确定数据结构特征\n- 用顺序/选择/重复三种基本形式表示数据\n- 把数据结构表示映射为软件的控制结构\n- 用与具体方法配套的设计指南进一步精化控制结构\n- 开发软件的过程性描述\n\n#### 软件实现及测试\n\n##### 程序设计语言分类\n- 机器语言\n- 汇编语言\n- 高级语言\n\n- 基础语言(BASIC,FORTRAN,COBOL,ALGOL)\n- 结构语言(PL/1,PASCAL,C．ADA)\n- 专用语言(FORTH,PROLOG,LISP)\n- 系统实现语言(C)\n- 静态高级语言(COBOL,FORTRAN)\n- 动态高级语言\n- 块结构高级语言(ALGOL,PASCAL)\n- 可视化编程语言(VB,VC,PB,BC,C++BUILDER) \n\n##### 编程语言特点\n- 心理学观点\n\t- 一致性\n\t- 多义性\n\t- 局限性\n\t- 易编码性\n\t- 可移植性\n\t- 可维护性\n\t- 配套开发工具\n- 工程观点\n\t- 易于把设计翻译为代码\n\t- 编译器效率\n\t- 源代码可移植性\n\t- 开发法工具可用性\n\t- 可维护性\n\n##### 编写风格要求\n- 节简化 提供简洁代码\n\t- 避免程序中不必要的动作和变量\n\t- 避免变量名重载\n\t- 减小程序体积\n\t- 提高运行速度\n\t- 避免模块冗杂\n\t- 避免全局变量副作用\n- 模块化 把代码划分为内聚度高，富有意义的功能块\n\t- 确保物理和逻辑功能密切想逛\n\t- 限定一个模块完成一个功能\n\t- 检查代码重复率\n- 简单化 去掉过分复制和不必要的矫揉造作\n\t- 采用简单的算法\n\t- 简单的数据结构\n\t- 对象命名一致性\n\t- 简化算术，逻辑表达式\n- 结构化 把程序的各个构建组织成一个有效的系统\n\t- 按标准化的次序说明数据\n\t- 按字母顺序说明对象名\n\t- 使用读者明了的结构化程序部件\n\t- 根据应用背景排列程序各部分\n\t- 不随意为效率而牺牲可读性\n\t- 让机器多做重复工作\n\t- 用公共函数调用代替重复出现的表达式\n\t- 检查参数传递情况\n\t- 检查多层嵌套循环\n\t- 坚持使用统一缩进规则\n\t- 只编写单入口单出口的代码\n- 文档化\n\t- 有效的使用注释\n\t- 使用含义鲜明的变量名\n\t- 协调使用程序块注释和程序行注释\n\t- 始终坚持写文档\n- 格式化 使程序布局合理清晰明了\n\t- 有效的使用编程空间\n\t- 适当插入括号 排出多义性\n\t- 有效使用空格\n\n##### 测试模型\n- V \n定义了软件测试如何与软件工程各阶段相融合，描述了各级别软件测试与软件开发各阶段的对应关系\n- W\n- H\n对W模型在更高层次上的线性抽象。在任何一个开发流程，只要有必要，且测试配置已准备就绪，即可进行测试活动\n\n\n##### 测试原则\n- 应尽早地和不断地进行测试\n- 开发人员应尽量避免参加测试\n- 注重测试用例的设计和选择\n- 增量式测试\n- 充分注意测试的群集现象\n- 合理安排测试计划，严格执行测试计划\n- 全面统计和分析测试结果\n- 保存测试文档，并及时更新\n\n##### 白盒测试\n结构测试，α测试\n- 逻辑测试，完全了解结构及处理过程\n- 按照内部逻辑测试，检查是否能按预期工作\n- 分类： 逻辑覆盖、循环测试，路径测试\n- 设计原则\n\t- 保证所有判断的分支至少执行一次\n\t- 保证所有循环体至少循环一次\n\t- 保证判断和循环的所有边界的可能取值都执行一次\n \t- 保证每条独立路径都执行一次\n\n##### 黑盒测试\n功能测试，β测试\n- 不考虑内部结构和处理过程\n- 仅测试输入输出是否完整正确\n- 错误：功能错误，界面错误，数据结构错误，性能错误，初始化错误\n- 方案考虑\n\t- 如何测试功能有效性\n\t-  哪些类型的输入可构成好测试用例\n    - 系统是否对特定的输入值特别敏感\n    - 怎样化定数据类的边界\n    - 系统能够承受什么样的数据率和数据量\n    - 数据的特定组合将对系统运行产生什么影响\n\n#### 面向对象\nOO=Objects + Classes + Inheritance + Communication with messages\n                                                                    \n##### 面向对象方法\n- 任何事物都是对象构成\n- 把所有对象组合划分为类，类中包含数据方法\n- 继承派生\n- 对象之间通过消息传递联系\n\n##### 优点\n- 与人类习惯的思维方法一致\n- 稳定性好\n- 代码利用率高\n- 可维护性强\n\n##### 对象\n对象是对属性值和操作的封装体，是类的实例化。\n- 模块独立性\n- 动态连接性\n- 易维护性\n\n##### 类\n对具有相同属性和行为的一个或多个对象的抽象描述\n- 由方法和数据构成\n- 类的实例化是对象\n- 对象的内部状态只能通过内部方法修改\n- 类是一解决一类问题的模块，提供方法，数据模板\n\n##### 实例\n类的具体对象\n\n##### 消息\n- 接收消息的对象\n- 消息选择符\n- 零或多个变元\n\n##### 方法\n对象所执行的操作\n\n##### 属性\n类中定义的抽象数据\n\n##### 继承\n子类继承父类的数据和方法，可传递\n- 减少代码，提高复用性\n- 清晰体现相关类的层次结构\n- 自动传播代码\n- 在基础类上构造扩展\n- 多重继承\n- 单一继承\n\n##### 模型\n- 对象模型：描述系统数据结构，静态结构\n\t- 确定类&对象\n\t- 确定关联\n\t- 划分主题（根据问题领域）\n\t- 确定属性\n\t- 识别继承关系\n\n- 动态模型：描述系统控制结构，交互次序\n\t- 编写典型交互行为的脚本\n\t- 从脚本中提取出事件\n\t- 排列事件发生的次序，状态图\n\t- 比较状态图，检查一致性\n- 功能模型：描述系统功能，数据变换\n\t- 画出基本系统模型图\n\t- 画出功能级数据流图\n\t- 描述处理框功能\n\n\n##### 层次\n- 主题层（范畴层）：定义主题\n- 类&对象层：确定对象\n- 结构层：确定结构\n- 属性层：定义属性和实例联系\n- 服务层：定义操作和消息联系\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/softwareEngineering.md","raw":"---\ntitle: softwareEngineering\ndate: 2017-11-29 15:02:47\ntags:\n---\n\n<!--more-->\n\n#### 软件的含义\n- 提供功能与性能的指令 / 计算机程序  的集合\n- 处理信息的数据逻辑\n- 按照商业逻辑处理\n- 产品文档\n\n#### 软件的特点\n- 表现形式： 逻辑性产品，复杂，无磨损，开发环境受限，成本高\n- 生产方式： 脑力，手工开发\n- 要求： 受计算机系统限制，涉及社会等因素\n\n#### 软件危机\n\n##### 表现\n- 开发成本/进度预估不准\n- 用户不满意\n- 质量差\n- 不可维护\n- 缺少文档\n- 成本过高\n- 开发速度过慢\n\n##### 原因\n- 客观：逻辑复杂，规模庞大\n- 主管：开发方式不正确，忽视需求分析/维护/写文档\n\n##### 解决途径\n- 按工程化的原则和方法组织软件开发工作\n\n#### 软件工程基本原理\n- 阶段性生命周期\n- 阶段评审\n- 产品控制\n- 现代程序设计架构\n- 结果清晰审查\n- 开发人员少而精\n- 不断迭代产品\n\n#####  研究内容\n- 软件开发技术\n- 软件工程管理\n\n##### 三要素\n- 方法\n- 工具\n- 过程\n\n##### 生命周期\n- 可行性分析与设计阶段\n- 需求分析阶段\n- 设计阶段\n- 实现阶段\n- 测试阶段\n- 运维阶段\n\n#### 软件过程\n指软件整个生命周期，从需求获取，需求分析，设计，实现，测试，发布和维护一个过程模型。\n\n##### 过程模型\n- 传统开发模型\n\t- 瀑布模型\n\t\t特征：一次性单向开发，质量保证，文档规范\n\t\t适合：需求明确的项目\n\t\t优点：质量保证，严格品控\n\t\t缺点：周期长，不灵活，难变动\n\t- 快速原型模型\n\t\t特征：快速构建，用户测试反馈，成本低\n\t\t适合：需求模糊的中小型软件\n\t\t优点：快速，符合用户预期\n\t\t缺点：难管理，变动大，架构规范\n- 演化开发模型\n\t- 增量模型\n\t\t特征：对功能以一系列增量的方式开发\n\t\t适合：小而可用的软件\n\t\t优点：灵活，降低风险，可持续开发\n\t- 螺旋模型\n\t\t特征：每个阶段都风险评估的快速原型模型\n\t\t适合：内部开发的大规模软件项目\n\t\t优点：减少过多测试或测试不足带来的风险，项目稳定\n\t\t一个周期：确定目标=>确定方案=>风险评估=>开发=>评估，计划\n- 喷泉模型\n\t特征：每个阶段相互重叠\n\t优点：提高效率，节省时间，适合面向对象\n\t缺点：不利于管理，规范，文档重要\n\n##### 开发方法\n- 面向过程的结构化方法\n\t优点：\n- 面向对象的开发方法\n\t= 对象+类+继承+消息\n\tOOA：分析对象，外部关联，内部结构\n\tOOD：归纳抽象类，规范接口\n\n#### 软件需求\n用户对目标软件在功能、行为、性能、设计约束等方面的期望\n\n##### 软件需求工程的必要性\n需求分析是介于系统分析和软件设计阶段之间的重要桥梁\n以系统规格说明和项目规划做基点，从软件的角度调整分析\n需求分析师软件设计实现测试维护的主要基础\n良好的需求分析有助于避免早起错误，提高效率，降低成本\n\n##### 需求分析的任务\n- 确定系统的功能需求\n- 数据分析\n- 定义逻辑模型\n- 适应需求变更\n\n##### 需求分析原则\n- 从用户的角度考虑\n- 以流程为主线\n- 注重复用\n- 划分需求优先级\n- 需求变更及时反馈\n\n##### 需求分析内容\n- 功能需求\n- 性能需求\n- 领域需求\n- 其他需求\n\n#### 结构化需求分析和建模\n- 核心：数据\n- 实体关系模型\n\t描述数据建模过程，刻画系统静态特征\n- 数据流图\n\t对功能，操作流程进行分解，完成功能建模\n- 状态转换图\n\t系统行为建模，通过外部事件触发\n\n##### 数据模型\n实体-联系图，描述数据对象间的关系\n\n##### 功能模型\n数据流图，描绘数据在软件中的变换逻辑过程\n\n##### 行为模型\n状态转换图，描绘系统通过各种行为模式在不同状态间转换的方式\n\n##### 建模目的\n- 使分析系统化\n- 模型是评审的焦点，是确定系统完整性，一致性，规格说明准确性的关键\n- 模型是设计的基础\n\n##### 建模的原因\n- 在建模中了解系统\n- 通过抽象降低复杂性\n- 有助于回忆细节\n- 有助于开发间，与用户交流\n- 提供开发维护文档\n\n##### 数据字典\n- 数据流\n- 数据流分量\n- 数据存储\n- 处理\n\n#### 软件设计\n\n##### 目的\n构造一个高内聚，高可靠性，高维护性，高效率的软件模型\n为提高软件质量做基础\n\n- 过程设计：状态转换图，控制规格说明，加工规格说明\n- 接口设计：数据流图\n- 体系结构设计：数据流图\n- 数据设计：数据词典，实体关系图\n\n##### 原则\n- 分而治之，模块化\n- 重用设计模式\n- 可跟踪性\n- 灵活性\n- 一致性\n\n\n##### 概要设计\n将软件需求转化为数据结构和软件的系统结构，确定模块间相互关系\n\n##### 详细设计设计\n通过结构细化得到数据结构与算法\n\n##### 总体设计过程\n- 设想供选择的方案\n- 选择合理方案\n- 推荐最佳方案\n- 功能分解\n\t- 结构设计 模块化组件化设计\n\t- 过程设计 模块处理过程\n- 设计软件结构\n- 数据库设计\n\n##### 设计原理\n- 抽象与逐步求精 \n\t控制复杂性\n- 模块化\n\t使程序获得智能化管理\n- 信息隐藏\n\t隐藏的信息只能通过暴露的接口访问\n\t提高模块独立性，减少维护的影响\n- 内聚度\n\t衡量一个模块内部各个元素彼此间的紧密程度\n\t- 7：偶然性内聚\n\t- 6：逻辑性内聚\n\t- 5：时间性内聚\n\t- 4：过程性内聚\n\t- 3：通信性内聚\n\t- 2：顺序性内聚\n\t- 1：功能性内聚\n- 耦合度\n\t衡量不同模块间相互依赖的紧密程度\n\t- 7：非直接耦合\n\t- 6：数据耦合\n\t- 5：特征耦合\n\t- 4：控制耦合\n\t- 3：外部耦合\n\t- 2：公共耦合\n\t- 1：内容耦合\n\n##### 启发式原则\n- 改进软件结构提高模块独立性\n- 模块规模适中\n- 深度、宽度、扇入和扇出适当\n- 模块的作用域应在控制域之内\n- 设计单入口单出口的模块，力争降低模块接口复杂度\n- 模块功能可预测\n\n#### 结构化设计方法\n\n##### 思想\n- 基于模块独立性和信息隐藏原则\n- 自顶向下，逐步求精\n- 分解与抽象结合\n- 应用结构化程序设计\n\n##### 面向数据流 SD\n- 确定信息流的类型\n- 划定流界\n- 将数据流图映射为程序结构\n- 提取层次控制结构\n- 通过设计复审和使用启发式策略进一步精化\n\n##### 变换分析法 迭代\n在数据流图中，数据流经过输入，系统变换，输出，完成数据分析。\n- 复审基本系统模型\n- 复审精化软件数据流图\n- 确定DFD特性，判断是变换流还是事务流\n- 划定输入流和输出流界限，孤立变换中心\n- 依次分解\n\n##### 事物分析法\n- 复审基本系统模型\n- 复审并精化软件数据流图\n- 确定数据流图特性\n- 指出事务中心，确认动作路径的数据流特性\n- 把数据流图映射为事务处理型的程序结构\n- 分解并精化石斛结构及动作路径\n- 使用启发式设计策略，精化程序结构雏形，改良软件质量\n\n##### 面向数据结构 DSSD\n- 确定数据结构特征\n- 用顺序/选择/重复三种基本形式表示数据\n- 把数据结构表示映射为软件的控制结构\n- 用与具体方法配套的设计指南进一步精化控制结构\n- 开发软件的过程性描述\n\n#### 软件实现及测试\n\n##### 程序设计语言分类\n- 机器语言\n- 汇编语言\n- 高级语言\n\n- 基础语言(BASIC,FORTRAN,COBOL,ALGOL)\n- 结构语言(PL/1,PASCAL,C．ADA)\n- 专用语言(FORTH,PROLOG,LISP)\n- 系统实现语言(C)\n- 静态高级语言(COBOL,FORTRAN)\n- 动态高级语言\n- 块结构高级语言(ALGOL,PASCAL)\n- 可视化编程语言(VB,VC,PB,BC,C++BUILDER) \n\n##### 编程语言特点\n- 心理学观点\n\t- 一致性\n\t- 多义性\n\t- 局限性\n\t- 易编码性\n\t- 可移植性\n\t- 可维护性\n\t- 配套开发工具\n- 工程观点\n\t- 易于把设计翻译为代码\n\t- 编译器效率\n\t- 源代码可移植性\n\t- 开发法工具可用性\n\t- 可维护性\n\n##### 编写风格要求\n- 节简化 提供简洁代码\n\t- 避免程序中不必要的动作和变量\n\t- 避免变量名重载\n\t- 减小程序体积\n\t- 提高运行速度\n\t- 避免模块冗杂\n\t- 避免全局变量副作用\n- 模块化 把代码划分为内聚度高，富有意义的功能块\n\t- 确保物理和逻辑功能密切想逛\n\t- 限定一个模块完成一个功能\n\t- 检查代码重复率\n- 简单化 去掉过分复制和不必要的矫揉造作\n\t- 采用简单的算法\n\t- 简单的数据结构\n\t- 对象命名一致性\n\t- 简化算术，逻辑表达式\n- 结构化 把程序的各个构建组织成一个有效的系统\n\t- 按标准化的次序说明数据\n\t- 按字母顺序说明对象名\n\t- 使用读者明了的结构化程序部件\n\t- 根据应用背景排列程序各部分\n\t- 不随意为效率而牺牲可读性\n\t- 让机器多做重复工作\n\t- 用公共函数调用代替重复出现的表达式\n\t- 检查参数传递情况\n\t- 检查多层嵌套循环\n\t- 坚持使用统一缩进规则\n\t- 只编写单入口单出口的代码\n- 文档化\n\t- 有效的使用注释\n\t- 使用含义鲜明的变量名\n\t- 协调使用程序块注释和程序行注释\n\t- 始终坚持写文档\n- 格式化 使程序布局合理清晰明了\n\t- 有效的使用编程空间\n\t- 适当插入括号 排出多义性\n\t- 有效使用空格\n\n##### 测试模型\n- V \n定义了软件测试如何与软件工程各阶段相融合，描述了各级别软件测试与软件开发各阶段的对应关系\n- W\n- H\n对W模型在更高层次上的线性抽象。在任何一个开发流程，只要有必要，且测试配置已准备就绪，即可进行测试活动\n\n\n##### 测试原则\n- 应尽早地和不断地进行测试\n- 开发人员应尽量避免参加测试\n- 注重测试用例的设计和选择\n- 增量式测试\n- 充分注意测试的群集现象\n- 合理安排测试计划，严格执行测试计划\n- 全面统计和分析测试结果\n- 保存测试文档，并及时更新\n\n##### 白盒测试\n结构测试，α测试\n- 逻辑测试，完全了解结构及处理过程\n- 按照内部逻辑测试，检查是否能按预期工作\n- 分类： 逻辑覆盖、循环测试，路径测试\n- 设计原则\n\t- 保证所有判断的分支至少执行一次\n\t- 保证所有循环体至少循环一次\n\t- 保证判断和循环的所有边界的可能取值都执行一次\n \t- 保证每条独立路径都执行一次\n\n##### 黑盒测试\n功能测试，β测试\n- 不考虑内部结构和处理过程\n- 仅测试输入输出是否完整正确\n- 错误：功能错误，界面错误，数据结构错误，性能错误，初始化错误\n- 方案考虑\n\t- 如何测试功能有效性\n\t-  哪些类型的输入可构成好测试用例\n    - 系统是否对特定的输入值特别敏感\n    - 怎样化定数据类的边界\n    - 系统能够承受什么样的数据率和数据量\n    - 数据的特定组合将对系统运行产生什么影响\n\n#### 面向对象\nOO=Objects + Classes + Inheritance + Communication with messages\n                                                                    \n##### 面向对象方法\n- 任何事物都是对象构成\n- 把所有对象组合划分为类，类中包含数据方法\n- 继承派生\n- 对象之间通过消息传递联系\n\n##### 优点\n- 与人类习惯的思维方法一致\n- 稳定性好\n- 代码利用率高\n- 可维护性强\n\n##### 对象\n对象是对属性值和操作的封装体，是类的实例化。\n- 模块独立性\n- 动态连接性\n- 易维护性\n\n##### 类\n对具有相同属性和行为的一个或多个对象的抽象描述\n- 由方法和数据构成\n- 类的实例化是对象\n- 对象的内部状态只能通过内部方法修改\n- 类是一解决一类问题的模块，提供方法，数据模板\n\n##### 实例\n类的具体对象\n\n##### 消息\n- 接收消息的对象\n- 消息选择符\n- 零或多个变元\n\n##### 方法\n对象所执行的操作\n\n##### 属性\n类中定义的抽象数据\n\n##### 继承\n子类继承父类的数据和方法，可传递\n- 减少代码，提高复用性\n- 清晰体现相关类的层次结构\n- 自动传播代码\n- 在基础类上构造扩展\n- 多重继承\n- 单一继承\n\n##### 模型\n- 对象模型：描述系统数据结构，静态结构\n\t- 确定类&对象\n\t- 确定关联\n\t- 划分主题（根据问题领域）\n\t- 确定属性\n\t- 识别继承关系\n\n- 动态模型：描述系统控制结构，交互次序\n\t- 编写典型交互行为的脚本\n\t- 从脚本中提取出事件\n\t- 排列事件发生的次序，状态图\n\t- 比较状态图，检查一致性\n- 功能模型：描述系统功能，数据变换\n\t- 画出基本系统模型图\n\t- 画出功能级数据流图\n\t- 描述处理框功能\n\n\n##### 层次\n- 主题层（范畴层）：定义主题\n- 类&对象层：确定对象\n- 结构层：确定结构\n- 属性层：定义属性和实例联系\n- 服务层：定义操作和消息联系\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"softwareEngineering","published":1,"updated":"2017-11-29T15:17:23.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55uli0014jbzemb84cwbv","content":"<a id=\"more\"></a>\n<h4 id=\"软件的含义\"><a href=\"#软件的含义\" class=\"headerlink\" title=\"软件的含义\"></a>软件的含义</h4><ul>\n<li>提供功能与性能的指令 / 计算机程序  的集合</li>\n<li>处理信息的数据逻辑</li>\n<li>按照商业逻辑处理</li>\n<li>产品文档</li>\n</ul>\n<h4 id=\"软件的特点\"><a href=\"#软件的特点\" class=\"headerlink\" title=\"软件的特点\"></a>软件的特点</h4><ul>\n<li>表现形式： 逻辑性产品，复杂，无磨损，开发环境受限，成本高</li>\n<li>生产方式： 脑力，手工开发</li>\n<li>要求： 受计算机系统限制，涉及社会等因素</li>\n</ul>\n<h4 id=\"软件危机\"><a href=\"#软件危机\" class=\"headerlink\" title=\"软件危机\"></a>软件危机</h4><h5 id=\"表现\"><a href=\"#表现\" class=\"headerlink\" title=\"表现\"></a>表现</h5><ul>\n<li>开发成本/进度预估不准</li>\n<li>用户不满意</li>\n<li>质量差</li>\n<li>不可维护</li>\n<li>缺少文档</li>\n<li>成本过高</li>\n<li>开发速度过慢</li>\n</ul>\n<h5 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h5><ul>\n<li>客观：逻辑复杂，规模庞大</li>\n<li>主管：开发方式不正确，忽视需求分析/维护/写文档</li>\n</ul>\n<h5 id=\"解决途径\"><a href=\"#解决途径\" class=\"headerlink\" title=\"解决途径\"></a>解决途径</h5><ul>\n<li>按工程化的原则和方法组织软件开发工作</li>\n</ul>\n<h4 id=\"软件工程基本原理\"><a href=\"#软件工程基本原理\" class=\"headerlink\" title=\"软件工程基本原理\"></a>软件工程基本原理</h4><ul>\n<li>阶段性生命周期</li>\n<li>阶段评审</li>\n<li>产品控制</li>\n<li>现代程序设计架构</li>\n<li>结果清晰审查</li>\n<li>开发人员少而精</li>\n<li>不断迭代产品</li>\n</ul>\n<h5 id=\"研究内容\"><a href=\"#研究内容\" class=\"headerlink\" title=\"研究内容\"></a>研究内容</h5><ul>\n<li>软件开发技术</li>\n<li>软件工程管理</li>\n</ul>\n<h5 id=\"三要素\"><a href=\"#三要素\" class=\"headerlink\" title=\"三要素\"></a>三要素</h5><ul>\n<li>方法</li>\n<li>工具</li>\n<li>过程</li>\n</ul>\n<h5 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h5><ul>\n<li>可行性分析与设计阶段</li>\n<li>需求分析阶段</li>\n<li>设计阶段</li>\n<li>实现阶段</li>\n<li>测试阶段</li>\n<li>运维阶段</li>\n</ul>\n<h4 id=\"软件过程\"><a href=\"#软件过程\" class=\"headerlink\" title=\"软件过程\"></a>软件过程</h4><p>指软件整个生命周期，从需求获取，需求分析，设计，实现，测试，发布和维护一个过程模型。</p>\n<h5 id=\"过程模型\"><a href=\"#过程模型\" class=\"headerlink\" title=\"过程模型\"></a>过程模型</h5><ul>\n<li>传统开发模型<ul>\n<li>瀑布模型<br>  特征：一次性单向开发，质量保证，文档规范<br>  适合：需求明确的项目<br>  优点：质量保证，严格品控<br>  缺点：周期长，不灵活，难变动</li>\n<li>快速原型模型<br>  特征：快速构建，用户测试反馈，成本低<br>  适合：需求模糊的中小型软件<br>  优点：快速，符合用户预期<br>  缺点：难管理，变动大，架构规范</li>\n</ul>\n</li>\n<li>演化开发模型<ul>\n<li>增量模型<br>  特征：对功能以一系列增量的方式开发<br>  适合：小而可用的软件<br>  优点：灵活，降低风险，可持续开发</li>\n<li>螺旋模型<br>  特征：每个阶段都风险评估的快速原型模型<br>  适合：内部开发的大规模软件项目<br>  优点：减少过多测试或测试不足带来的风险，项目稳定<br>  一个周期：确定目标=&gt;确定方案=&gt;风险评估=&gt;开发=&gt;评估，计划</li>\n</ul>\n</li>\n<li>喷泉模型<br>  特征：每个阶段相互重叠<br>  优点：提高效率，节省时间，适合面向对象<br>  缺点：不利于管理，规范，文档重要</li>\n</ul>\n<h5 id=\"开发方法\"><a href=\"#开发方法\" class=\"headerlink\" title=\"开发方法\"></a>开发方法</h5><ul>\n<li>面向过程的结构化方法<br>  优点：</li>\n<li>面向对象的开发方法<br>  = 对象+类+继承+消息<br>  OOA：分析对象，外部关联，内部结构<br>  OOD：归纳抽象类，规范接口</li>\n</ul>\n<h4 id=\"软件需求\"><a href=\"#软件需求\" class=\"headerlink\" title=\"软件需求\"></a>软件需求</h4><p>用户对目标软件在功能、行为、性能、设计约束等方面的期望</p>\n<h5 id=\"软件需求工程的必要性\"><a href=\"#软件需求工程的必要性\" class=\"headerlink\" title=\"软件需求工程的必要性\"></a>软件需求工程的必要性</h5><p>需求分析是介于系统分析和软件设计阶段之间的重要桥梁<br>以系统规格说明和项目规划做基点，从软件的角度调整分析<br>需求分析师软件设计实现测试维护的主要基础<br>良好的需求分析有助于避免早起错误，提高效率，降低成本</p>\n<h5 id=\"需求分析的任务\"><a href=\"#需求分析的任务\" class=\"headerlink\" title=\"需求分析的任务\"></a>需求分析的任务</h5><ul>\n<li>确定系统的功能需求</li>\n<li>数据分析</li>\n<li>定义逻辑模型</li>\n<li>适应需求变更</li>\n</ul>\n<h5 id=\"需求分析原则\"><a href=\"#需求分析原则\" class=\"headerlink\" title=\"需求分析原则\"></a>需求分析原则</h5><ul>\n<li>从用户的角度考虑</li>\n<li>以流程为主线</li>\n<li>注重复用</li>\n<li>划分需求优先级</li>\n<li>需求变更及时反馈</li>\n</ul>\n<h5 id=\"需求分析内容\"><a href=\"#需求分析内容\" class=\"headerlink\" title=\"需求分析内容\"></a>需求分析内容</h5><ul>\n<li>功能需求</li>\n<li>性能需求</li>\n<li>领域需求</li>\n<li>其他需求</li>\n</ul>\n<h4 id=\"结构化需求分析和建模\"><a href=\"#结构化需求分析和建模\" class=\"headerlink\" title=\"结构化需求分析和建模\"></a>结构化需求分析和建模</h4><ul>\n<li>核心：数据</li>\n<li>实体关系模型<br>  描述数据建模过程，刻画系统静态特征</li>\n<li>数据流图<br>  对功能，操作流程进行分解，完成功能建模</li>\n<li>状态转换图<br>  系统行为建模，通过外部事件触发</li>\n</ul>\n<h5 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h5><p>实体-联系图，描述数据对象间的关系</p>\n<h5 id=\"功能模型\"><a href=\"#功能模型\" class=\"headerlink\" title=\"功能模型\"></a>功能模型</h5><p>数据流图，描绘数据在软件中的变换逻辑过程</p>\n<h5 id=\"行为模型\"><a href=\"#行为模型\" class=\"headerlink\" title=\"行为模型\"></a>行为模型</h5><p>状态转换图，描绘系统通过各种行为模式在不同状态间转换的方式</p>\n<h5 id=\"建模目的\"><a href=\"#建模目的\" class=\"headerlink\" title=\"建模目的\"></a>建模目的</h5><ul>\n<li>使分析系统化</li>\n<li>模型是评审的焦点，是确定系统完整性，一致性，规格说明准确性的关键</li>\n<li>模型是设计的基础</li>\n</ul>\n<h5 id=\"建模的原因\"><a href=\"#建模的原因\" class=\"headerlink\" title=\"建模的原因\"></a>建模的原因</h5><ul>\n<li>在建模中了解系统</li>\n<li>通过抽象降低复杂性</li>\n<li>有助于回忆细节</li>\n<li>有助于开发间，与用户交流</li>\n<li>提供开发维护文档</li>\n</ul>\n<h5 id=\"数据字典\"><a href=\"#数据字典\" class=\"headerlink\" title=\"数据字典\"></a>数据字典</h5><ul>\n<li>数据流</li>\n<li>数据流分量</li>\n<li>数据存储</li>\n<li>处理</li>\n</ul>\n<h4 id=\"软件设计\"><a href=\"#软件设计\" class=\"headerlink\" title=\"软件设计\"></a>软件设计</h4><h5 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h5><p>构造一个高内聚，高可靠性，高维护性，高效率的软件模型<br>为提高软件质量做基础</p>\n<ul>\n<li>过程设计：状态转换图，控制规格说明，加工规格说明</li>\n<li>接口设计：数据流图</li>\n<li>体系结构设计：数据流图</li>\n<li>数据设计：数据词典，实体关系图</li>\n</ul>\n<h5 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h5><ul>\n<li>分而治之，模块化</li>\n<li>重用设计模式</li>\n<li>可跟踪性</li>\n<li>灵活性</li>\n<li>一致性</li>\n</ul>\n<h5 id=\"概要设计\"><a href=\"#概要设计\" class=\"headerlink\" title=\"概要设计\"></a>概要设计</h5><p>将软件需求转化为数据结构和软件的系统结构，确定模块间相互关系</p>\n<h5 id=\"详细设计设计\"><a href=\"#详细设计设计\" class=\"headerlink\" title=\"详细设计设计\"></a>详细设计设计</h5><p>通过结构细化得到数据结构与算法</p>\n<h5 id=\"总体设计过程\"><a href=\"#总体设计过程\" class=\"headerlink\" title=\"总体设计过程\"></a>总体设计过程</h5><ul>\n<li>设想供选择的方案</li>\n<li>选择合理方案</li>\n<li>推荐最佳方案</li>\n<li>功能分解<ul>\n<li>结构设计 模块化组件化设计</li>\n<li>过程设计 模块处理过程</li>\n</ul>\n</li>\n<li>设计软件结构</li>\n<li>数据库设计</li>\n</ul>\n<h5 id=\"设计原理\"><a href=\"#设计原理\" class=\"headerlink\" title=\"设计原理\"></a>设计原理</h5><ul>\n<li>抽象与逐步求精<br>  控制复杂性</li>\n<li>模块化<br>  使程序获得智能化管理</li>\n<li>信息隐藏<br>  隐藏的信息只能通过暴露的接口访问<br>  提高模块独立性，减少维护的影响</li>\n<li>内聚度<br>  衡量一个模块内部各个元素彼此间的紧密程度<ul>\n<li>7：偶然性内聚</li>\n<li>6：逻辑性内聚</li>\n<li>5：时间性内聚</li>\n<li>4：过程性内聚</li>\n<li>3：通信性内聚</li>\n<li>2：顺序性内聚</li>\n<li>1：功能性内聚</li>\n</ul>\n</li>\n<li>耦合度<br>  衡量不同模块间相互依赖的紧密程度<ul>\n<li>7：非直接耦合</li>\n<li>6：数据耦合</li>\n<li>5：特征耦合</li>\n<li>4：控制耦合</li>\n<li>3：外部耦合</li>\n<li>2：公共耦合</li>\n<li>1：内容耦合</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"启发式原则\"><a href=\"#启发式原则\" class=\"headerlink\" title=\"启发式原则\"></a>启发式原则</h5><ul>\n<li>改进软件结构提高模块独立性</li>\n<li>模块规模适中</li>\n<li>深度、宽度、扇入和扇出适当</li>\n<li>模块的作用域应在控制域之内</li>\n<li>设计单入口单出口的模块，力争降低模块接口复杂度</li>\n<li>模块功能可预测</li>\n</ul>\n<h4 id=\"结构化设计方法\"><a href=\"#结构化设计方法\" class=\"headerlink\" title=\"结构化设计方法\"></a>结构化设计方法</h4><h5 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h5><ul>\n<li>基于模块独立性和信息隐藏原则</li>\n<li>自顶向下，逐步求精</li>\n<li>分解与抽象结合</li>\n<li>应用结构化程序设计</li>\n</ul>\n<h5 id=\"面向数据流-SD\"><a href=\"#面向数据流-SD\" class=\"headerlink\" title=\"面向数据流 SD\"></a>面向数据流 SD</h5><ul>\n<li>确定信息流的类型</li>\n<li>划定流界</li>\n<li>将数据流图映射为程序结构</li>\n<li>提取层次控制结构</li>\n<li>通过设计复审和使用启发式策略进一步精化</li>\n</ul>\n<h5 id=\"变换分析法-迭代\"><a href=\"#变换分析法-迭代\" class=\"headerlink\" title=\"变换分析法 迭代\"></a>变换分析法 迭代</h5><p>在数据流图中，数据流经过输入，系统变换，输出，完成数据分析。</p>\n<ul>\n<li>复审基本系统模型</li>\n<li>复审精化软件数据流图</li>\n<li>确定DFD特性，判断是变换流还是事务流</li>\n<li>划定输入流和输出流界限，孤立变换中心</li>\n<li>依次分解</li>\n</ul>\n<h5 id=\"事物分析法\"><a href=\"#事物分析法\" class=\"headerlink\" title=\"事物分析法\"></a>事物分析法</h5><ul>\n<li>复审基本系统模型</li>\n<li>复审并精化软件数据流图</li>\n<li>确定数据流图特性</li>\n<li>指出事务中心，确认动作路径的数据流特性</li>\n<li>把数据流图映射为事务处理型的程序结构</li>\n<li>分解并精化石斛结构及动作路径</li>\n<li>使用启发式设计策略，精化程序结构雏形，改良软件质量</li>\n</ul>\n<h5 id=\"面向数据结构-DSSD\"><a href=\"#面向数据结构-DSSD\" class=\"headerlink\" title=\"面向数据结构 DSSD\"></a>面向数据结构 DSSD</h5><ul>\n<li>确定数据结构特征</li>\n<li>用顺序/选择/重复三种基本形式表示数据</li>\n<li>把数据结构表示映射为软件的控制结构</li>\n<li>用与具体方法配套的设计指南进一步精化控制结构</li>\n<li>开发软件的过程性描述</li>\n</ul>\n<h4 id=\"软件实现及测试\"><a href=\"#软件实现及测试\" class=\"headerlink\" title=\"软件实现及测试\"></a>软件实现及测试</h4><h5 id=\"程序设计语言分类\"><a href=\"#程序设计语言分类\" class=\"headerlink\" title=\"程序设计语言分类\"></a>程序设计语言分类</h5><ul>\n<li>机器语言</li>\n<li>汇编语言</li>\n<li><p>高级语言</p>\n</li>\n<li><p>基础语言(BASIC,FORTRAN,COBOL,ALGOL)</p>\n</li>\n<li>结构语言(PL/1,PASCAL,C．ADA)</li>\n<li>专用语言(FORTH,PROLOG,LISP)</li>\n<li>系统实现语言(C)</li>\n<li>静态高级语言(COBOL,FORTRAN)</li>\n<li>动态高级语言</li>\n<li>块结构高级语言(ALGOL,PASCAL)</li>\n<li>可视化编程语言(VB,VC,PB,BC,C++BUILDER) </li>\n</ul>\n<h5 id=\"编程语言特点\"><a href=\"#编程语言特点\" class=\"headerlink\" title=\"编程语言特点\"></a>编程语言特点</h5><ul>\n<li>心理学观点<ul>\n<li>一致性</li>\n<li>多义性</li>\n<li>局限性</li>\n<li>易编码性</li>\n<li>可移植性</li>\n<li>可维护性</li>\n<li>配套开发工具</li>\n</ul>\n</li>\n<li>工程观点<ul>\n<li>易于把设计翻译为代码</li>\n<li>编译器效率</li>\n<li>源代码可移植性</li>\n<li>开发法工具可用性</li>\n<li>可维护性</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"编写风格要求\"><a href=\"#编写风格要求\" class=\"headerlink\" title=\"编写风格要求\"></a>编写风格要求</h5><ul>\n<li>节简化 提供简洁代码<ul>\n<li>避免程序中不必要的动作和变量</li>\n<li>避免变量名重载</li>\n<li>减小程序体积</li>\n<li>提高运行速度</li>\n<li>避免模块冗杂</li>\n<li>避免全局变量副作用</li>\n</ul>\n</li>\n<li>模块化 把代码划分为内聚度高，富有意义的功能块<ul>\n<li>确保物理和逻辑功能密切想逛</li>\n<li>限定一个模块完成一个功能</li>\n<li>检查代码重复率</li>\n</ul>\n</li>\n<li>简单化 去掉过分复制和不必要的矫揉造作<ul>\n<li>采用简单的算法</li>\n<li>简单的数据结构</li>\n<li>对象命名一致性</li>\n<li>简化算术，逻辑表达式</li>\n</ul>\n</li>\n<li>结构化 把程序的各个构建组织成一个有效的系统<ul>\n<li>按标准化的次序说明数据</li>\n<li>按字母顺序说明对象名</li>\n<li>使用读者明了的结构化程序部件</li>\n<li>根据应用背景排列程序各部分</li>\n<li>不随意为效率而牺牲可读性</li>\n<li>让机器多做重复工作</li>\n<li>用公共函数调用代替重复出现的表达式</li>\n<li>检查参数传递情况</li>\n<li>检查多层嵌套循环</li>\n<li>坚持使用统一缩进规则</li>\n<li>只编写单入口单出口的代码</li>\n</ul>\n</li>\n<li>文档化<ul>\n<li>有效的使用注释</li>\n<li>使用含义鲜明的变量名</li>\n<li>协调使用程序块注释和程序行注释</li>\n<li>始终坚持写文档</li>\n</ul>\n</li>\n<li>格式化 使程序布局合理清晰明了<ul>\n<li>有效的使用编程空间</li>\n<li>适当插入括号 排出多义性</li>\n<li>有效使用空格</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"测试模型\"><a href=\"#测试模型\" class=\"headerlink\" title=\"测试模型\"></a>测试模型</h5><ul>\n<li>V<br>定义了软件测试如何与软件工程各阶段相融合，描述了各级别软件测试与软件开发各阶段的对应关系</li>\n<li>W</li>\n<li>H<br>对W模型在更高层次上的线性抽象。在任何一个开发流程，只要有必要，且测试配置已准备就绪，即可进行测试活动</li>\n</ul>\n<h5 id=\"测试原则\"><a href=\"#测试原则\" class=\"headerlink\" title=\"测试原则\"></a>测试原则</h5><ul>\n<li>应尽早地和不断地进行测试</li>\n<li>开发人员应尽量避免参加测试</li>\n<li>注重测试用例的设计和选择</li>\n<li>增量式测试</li>\n<li>充分注意测试的群集现象</li>\n<li>合理安排测试计划，严格执行测试计划</li>\n<li>全面统计和分析测试结果</li>\n<li>保存测试文档，并及时更新</li>\n</ul>\n<h5 id=\"白盒测试\"><a href=\"#白盒测试\" class=\"headerlink\" title=\"白盒测试\"></a>白盒测试</h5><p>结构测试，α测试</p>\n<ul>\n<li>逻辑测试，完全了解结构及处理过程</li>\n<li>按照内部逻辑测试，检查是否能按预期工作</li>\n<li>分类： 逻辑覆盖、循环测试，路径测试</li>\n<li>设计原则<ul>\n<li>保证所有判断的分支至少执行一次</li>\n<li>保证所有循环体至少循环一次</li>\n<li>保证判断和循环的所有边界的可能取值都执行一次<ul>\n<li>保证每条独立路径都执行一次</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"黑盒测试\"><a href=\"#黑盒测试\" class=\"headerlink\" title=\"黑盒测试\"></a>黑盒测试</h5><p>功能测试，β测试</p>\n<ul>\n<li>不考虑内部结构和处理过程</li>\n<li>仅测试输入输出是否完整正确</li>\n<li>错误：功能错误，界面错误，数据结构错误，性能错误，初始化错误</li>\n<li>方案考虑<ul>\n<li>如何测试功能有效性</li>\n<li>哪些类型的输入可构成好测试用例</li>\n<li>系统是否对特定的输入值特别敏感</li>\n<li>怎样化定数据类的边界</li>\n<li>系统能够承受什么样的数据率和数据量</li>\n<li>数据的特定组合将对系统运行产生什么影响</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>OO=Objects + Classes + Inheritance + Communication with messages</p>\n<h5 id=\"面向对象方法\"><a href=\"#面向对象方法\" class=\"headerlink\" title=\"面向对象方法\"></a>面向对象方法</h5><ul>\n<li>任何事物都是对象构成</li>\n<li>把所有对象组合划分为类，类中包含数据方法</li>\n<li>继承派生</li>\n<li>对象之间通过消息传递联系</li>\n</ul>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>与人类习惯的思维方法一致</li>\n<li>稳定性好</li>\n<li>代码利用率高</li>\n<li>可维护性强</li>\n</ul>\n<h5 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h5><p>对象是对属性值和操作的封装体，是类的实例化。</p>\n<ul>\n<li>模块独立性</li>\n<li>动态连接性</li>\n<li>易维护性</li>\n</ul>\n<h5 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h5><p>对具有相同属性和行为的一个或多个对象的抽象描述</p>\n<ul>\n<li>由方法和数据构成</li>\n<li>类的实例化是对象</li>\n<li>对象的内部状态只能通过内部方法修改</li>\n<li>类是一解决一类问题的模块，提供方法，数据模板</li>\n</ul>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>类的具体对象</p>\n<h5 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h5><ul>\n<li>接收消息的对象</li>\n<li>消息选择符</li>\n<li>零或多个变元</li>\n</ul>\n<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><p>对象所执行的操作</p>\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><p>类中定义的抽象数据</p>\n<h5 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h5><p>子类继承父类的数据和方法，可传递</p>\n<ul>\n<li>减少代码，提高复用性</li>\n<li>清晰体现相关类的层次结构</li>\n<li>自动传播代码</li>\n<li>在基础类上构造扩展</li>\n<li>多重继承</li>\n<li>单一继承</li>\n</ul>\n<h5 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h5><ul>\n<li><p>对象模型：描述系统数据结构，静态结构</p>\n<ul>\n<li>确定类&amp;对象</li>\n<li>确定关联</li>\n<li>划分主题（根据问题领域）</li>\n<li>确定属性</li>\n<li>识别继承关系</li>\n</ul>\n</li>\n<li><p>动态模型：描述系统控制结构，交互次序</p>\n<ul>\n<li>编写典型交互行为的脚本</li>\n<li>从脚本中提取出事件</li>\n<li>排列事件发生的次序，状态图</li>\n<li>比较状态图，检查一致性</li>\n</ul>\n</li>\n<li>功能模型：描述系统功能，数据变换<ul>\n<li>画出基本系统模型图</li>\n<li>画出功能级数据流图</li>\n<li>描述处理框功能</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"层次\"><a href=\"#层次\" class=\"headerlink\" title=\"层次\"></a>层次</h5><ul>\n<li>主题层（范畴层）：定义主题</li>\n<li>类&amp;对象层：确定对象</li>\n<li>结构层：确定结构</li>\n<li>属性层：定义属性和实例联系</li>\n<li>服务层：定义操作和消息联系</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"软件的含义\"><a href=\"#软件的含义\" class=\"headerlink\" title=\"软件的含义\"></a>软件的含义</h4><ul>\n<li>提供功能与性能的指令 / 计算机程序  的集合</li>\n<li>处理信息的数据逻辑</li>\n<li>按照商业逻辑处理</li>\n<li>产品文档</li>\n</ul>\n<h4 id=\"软件的特点\"><a href=\"#软件的特点\" class=\"headerlink\" title=\"软件的特点\"></a>软件的特点</h4><ul>\n<li>表现形式： 逻辑性产品，复杂，无磨损，开发环境受限，成本高</li>\n<li>生产方式： 脑力，手工开发</li>\n<li>要求： 受计算机系统限制，涉及社会等因素</li>\n</ul>\n<h4 id=\"软件危机\"><a href=\"#软件危机\" class=\"headerlink\" title=\"软件危机\"></a>软件危机</h4><h5 id=\"表现\"><a href=\"#表现\" class=\"headerlink\" title=\"表现\"></a>表现</h5><ul>\n<li>开发成本/进度预估不准</li>\n<li>用户不满意</li>\n<li>质量差</li>\n<li>不可维护</li>\n<li>缺少文档</li>\n<li>成本过高</li>\n<li>开发速度过慢</li>\n</ul>\n<h5 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h5><ul>\n<li>客观：逻辑复杂，规模庞大</li>\n<li>主管：开发方式不正确，忽视需求分析/维护/写文档</li>\n</ul>\n<h5 id=\"解决途径\"><a href=\"#解决途径\" class=\"headerlink\" title=\"解决途径\"></a>解决途径</h5><ul>\n<li>按工程化的原则和方法组织软件开发工作</li>\n</ul>\n<h4 id=\"软件工程基本原理\"><a href=\"#软件工程基本原理\" class=\"headerlink\" title=\"软件工程基本原理\"></a>软件工程基本原理</h4><ul>\n<li>阶段性生命周期</li>\n<li>阶段评审</li>\n<li>产品控制</li>\n<li>现代程序设计架构</li>\n<li>结果清晰审查</li>\n<li>开发人员少而精</li>\n<li>不断迭代产品</li>\n</ul>\n<h5 id=\"研究内容\"><a href=\"#研究内容\" class=\"headerlink\" title=\"研究内容\"></a>研究内容</h5><ul>\n<li>软件开发技术</li>\n<li>软件工程管理</li>\n</ul>\n<h5 id=\"三要素\"><a href=\"#三要素\" class=\"headerlink\" title=\"三要素\"></a>三要素</h5><ul>\n<li>方法</li>\n<li>工具</li>\n<li>过程</li>\n</ul>\n<h5 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h5><ul>\n<li>可行性分析与设计阶段</li>\n<li>需求分析阶段</li>\n<li>设计阶段</li>\n<li>实现阶段</li>\n<li>测试阶段</li>\n<li>运维阶段</li>\n</ul>\n<h4 id=\"软件过程\"><a href=\"#软件过程\" class=\"headerlink\" title=\"软件过程\"></a>软件过程</h4><p>指软件整个生命周期，从需求获取，需求分析，设计，实现，测试，发布和维护一个过程模型。</p>\n<h5 id=\"过程模型\"><a href=\"#过程模型\" class=\"headerlink\" title=\"过程模型\"></a>过程模型</h5><ul>\n<li>传统开发模型<ul>\n<li>瀑布模型<br>  特征：一次性单向开发，质量保证，文档规范<br>  适合：需求明确的项目<br>  优点：质量保证，严格品控<br>  缺点：周期长，不灵活，难变动</li>\n<li>快速原型模型<br>  特征：快速构建，用户测试反馈，成本低<br>  适合：需求模糊的中小型软件<br>  优点：快速，符合用户预期<br>  缺点：难管理，变动大，架构规范</li>\n</ul>\n</li>\n<li>演化开发模型<ul>\n<li>增量模型<br>  特征：对功能以一系列增量的方式开发<br>  适合：小而可用的软件<br>  优点：灵活，降低风险，可持续开发</li>\n<li>螺旋模型<br>  特征：每个阶段都风险评估的快速原型模型<br>  适合：内部开发的大规模软件项目<br>  优点：减少过多测试或测试不足带来的风险，项目稳定<br>  一个周期：确定目标=&gt;确定方案=&gt;风险评估=&gt;开发=&gt;评估，计划</li>\n</ul>\n</li>\n<li>喷泉模型<br>  特征：每个阶段相互重叠<br>  优点：提高效率，节省时间，适合面向对象<br>  缺点：不利于管理，规范，文档重要</li>\n</ul>\n<h5 id=\"开发方法\"><a href=\"#开发方法\" class=\"headerlink\" title=\"开发方法\"></a>开发方法</h5><ul>\n<li>面向过程的结构化方法<br>  优点：</li>\n<li>面向对象的开发方法<br>  = 对象+类+继承+消息<br>  OOA：分析对象，外部关联，内部结构<br>  OOD：归纳抽象类，规范接口</li>\n</ul>\n<h4 id=\"软件需求\"><a href=\"#软件需求\" class=\"headerlink\" title=\"软件需求\"></a>软件需求</h4><p>用户对目标软件在功能、行为、性能、设计约束等方面的期望</p>\n<h5 id=\"软件需求工程的必要性\"><a href=\"#软件需求工程的必要性\" class=\"headerlink\" title=\"软件需求工程的必要性\"></a>软件需求工程的必要性</h5><p>需求分析是介于系统分析和软件设计阶段之间的重要桥梁<br>以系统规格说明和项目规划做基点，从软件的角度调整分析<br>需求分析师软件设计实现测试维护的主要基础<br>良好的需求分析有助于避免早起错误，提高效率，降低成本</p>\n<h5 id=\"需求分析的任务\"><a href=\"#需求分析的任务\" class=\"headerlink\" title=\"需求分析的任务\"></a>需求分析的任务</h5><ul>\n<li>确定系统的功能需求</li>\n<li>数据分析</li>\n<li>定义逻辑模型</li>\n<li>适应需求变更</li>\n</ul>\n<h5 id=\"需求分析原则\"><a href=\"#需求分析原则\" class=\"headerlink\" title=\"需求分析原则\"></a>需求分析原则</h5><ul>\n<li>从用户的角度考虑</li>\n<li>以流程为主线</li>\n<li>注重复用</li>\n<li>划分需求优先级</li>\n<li>需求变更及时反馈</li>\n</ul>\n<h5 id=\"需求分析内容\"><a href=\"#需求分析内容\" class=\"headerlink\" title=\"需求分析内容\"></a>需求分析内容</h5><ul>\n<li>功能需求</li>\n<li>性能需求</li>\n<li>领域需求</li>\n<li>其他需求</li>\n</ul>\n<h4 id=\"结构化需求分析和建模\"><a href=\"#结构化需求分析和建模\" class=\"headerlink\" title=\"结构化需求分析和建模\"></a>结构化需求分析和建模</h4><ul>\n<li>核心：数据</li>\n<li>实体关系模型<br>  描述数据建模过程，刻画系统静态特征</li>\n<li>数据流图<br>  对功能，操作流程进行分解，完成功能建模</li>\n<li>状态转换图<br>  系统行为建模，通过外部事件触发</li>\n</ul>\n<h5 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h5><p>实体-联系图，描述数据对象间的关系</p>\n<h5 id=\"功能模型\"><a href=\"#功能模型\" class=\"headerlink\" title=\"功能模型\"></a>功能模型</h5><p>数据流图，描绘数据在软件中的变换逻辑过程</p>\n<h5 id=\"行为模型\"><a href=\"#行为模型\" class=\"headerlink\" title=\"行为模型\"></a>行为模型</h5><p>状态转换图，描绘系统通过各种行为模式在不同状态间转换的方式</p>\n<h5 id=\"建模目的\"><a href=\"#建模目的\" class=\"headerlink\" title=\"建模目的\"></a>建模目的</h5><ul>\n<li>使分析系统化</li>\n<li>模型是评审的焦点，是确定系统完整性，一致性，规格说明准确性的关键</li>\n<li>模型是设计的基础</li>\n</ul>\n<h5 id=\"建模的原因\"><a href=\"#建模的原因\" class=\"headerlink\" title=\"建模的原因\"></a>建模的原因</h5><ul>\n<li>在建模中了解系统</li>\n<li>通过抽象降低复杂性</li>\n<li>有助于回忆细节</li>\n<li>有助于开发间，与用户交流</li>\n<li>提供开发维护文档</li>\n</ul>\n<h5 id=\"数据字典\"><a href=\"#数据字典\" class=\"headerlink\" title=\"数据字典\"></a>数据字典</h5><ul>\n<li>数据流</li>\n<li>数据流分量</li>\n<li>数据存储</li>\n<li>处理</li>\n</ul>\n<h4 id=\"软件设计\"><a href=\"#软件设计\" class=\"headerlink\" title=\"软件设计\"></a>软件设计</h4><h5 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h5><p>构造一个高内聚，高可靠性，高维护性，高效率的软件模型<br>为提高软件质量做基础</p>\n<ul>\n<li>过程设计：状态转换图，控制规格说明，加工规格说明</li>\n<li>接口设计：数据流图</li>\n<li>体系结构设计：数据流图</li>\n<li>数据设计：数据词典，实体关系图</li>\n</ul>\n<h5 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h5><ul>\n<li>分而治之，模块化</li>\n<li>重用设计模式</li>\n<li>可跟踪性</li>\n<li>灵活性</li>\n<li>一致性</li>\n</ul>\n<h5 id=\"概要设计\"><a href=\"#概要设计\" class=\"headerlink\" title=\"概要设计\"></a>概要设计</h5><p>将软件需求转化为数据结构和软件的系统结构，确定模块间相互关系</p>\n<h5 id=\"详细设计设计\"><a href=\"#详细设计设计\" class=\"headerlink\" title=\"详细设计设计\"></a>详细设计设计</h5><p>通过结构细化得到数据结构与算法</p>\n<h5 id=\"总体设计过程\"><a href=\"#总体设计过程\" class=\"headerlink\" title=\"总体设计过程\"></a>总体设计过程</h5><ul>\n<li>设想供选择的方案</li>\n<li>选择合理方案</li>\n<li>推荐最佳方案</li>\n<li>功能分解<ul>\n<li>结构设计 模块化组件化设计</li>\n<li>过程设计 模块处理过程</li>\n</ul>\n</li>\n<li>设计软件结构</li>\n<li>数据库设计</li>\n</ul>\n<h5 id=\"设计原理\"><a href=\"#设计原理\" class=\"headerlink\" title=\"设计原理\"></a>设计原理</h5><ul>\n<li>抽象与逐步求精<br>  控制复杂性</li>\n<li>模块化<br>  使程序获得智能化管理</li>\n<li>信息隐藏<br>  隐藏的信息只能通过暴露的接口访问<br>  提高模块独立性，减少维护的影响</li>\n<li>内聚度<br>  衡量一个模块内部各个元素彼此间的紧密程度<ul>\n<li>7：偶然性内聚</li>\n<li>6：逻辑性内聚</li>\n<li>5：时间性内聚</li>\n<li>4：过程性内聚</li>\n<li>3：通信性内聚</li>\n<li>2：顺序性内聚</li>\n<li>1：功能性内聚</li>\n</ul>\n</li>\n<li>耦合度<br>  衡量不同模块间相互依赖的紧密程度<ul>\n<li>7：非直接耦合</li>\n<li>6：数据耦合</li>\n<li>5：特征耦合</li>\n<li>4：控制耦合</li>\n<li>3：外部耦合</li>\n<li>2：公共耦合</li>\n<li>1：内容耦合</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"启发式原则\"><a href=\"#启发式原则\" class=\"headerlink\" title=\"启发式原则\"></a>启发式原则</h5><ul>\n<li>改进软件结构提高模块独立性</li>\n<li>模块规模适中</li>\n<li>深度、宽度、扇入和扇出适当</li>\n<li>模块的作用域应在控制域之内</li>\n<li>设计单入口单出口的模块，力争降低模块接口复杂度</li>\n<li>模块功能可预测</li>\n</ul>\n<h4 id=\"结构化设计方法\"><a href=\"#结构化设计方法\" class=\"headerlink\" title=\"结构化设计方法\"></a>结构化设计方法</h4><h5 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h5><ul>\n<li>基于模块独立性和信息隐藏原则</li>\n<li>自顶向下，逐步求精</li>\n<li>分解与抽象结合</li>\n<li>应用结构化程序设计</li>\n</ul>\n<h5 id=\"面向数据流-SD\"><a href=\"#面向数据流-SD\" class=\"headerlink\" title=\"面向数据流 SD\"></a>面向数据流 SD</h5><ul>\n<li>确定信息流的类型</li>\n<li>划定流界</li>\n<li>将数据流图映射为程序结构</li>\n<li>提取层次控制结构</li>\n<li>通过设计复审和使用启发式策略进一步精化</li>\n</ul>\n<h5 id=\"变换分析法-迭代\"><a href=\"#变换分析法-迭代\" class=\"headerlink\" title=\"变换分析法 迭代\"></a>变换分析法 迭代</h5><p>在数据流图中，数据流经过输入，系统变换，输出，完成数据分析。</p>\n<ul>\n<li>复审基本系统模型</li>\n<li>复审精化软件数据流图</li>\n<li>确定DFD特性，判断是变换流还是事务流</li>\n<li>划定输入流和输出流界限，孤立变换中心</li>\n<li>依次分解</li>\n</ul>\n<h5 id=\"事物分析法\"><a href=\"#事物分析法\" class=\"headerlink\" title=\"事物分析法\"></a>事物分析法</h5><ul>\n<li>复审基本系统模型</li>\n<li>复审并精化软件数据流图</li>\n<li>确定数据流图特性</li>\n<li>指出事务中心，确认动作路径的数据流特性</li>\n<li>把数据流图映射为事务处理型的程序结构</li>\n<li>分解并精化石斛结构及动作路径</li>\n<li>使用启发式设计策略，精化程序结构雏形，改良软件质量</li>\n</ul>\n<h5 id=\"面向数据结构-DSSD\"><a href=\"#面向数据结构-DSSD\" class=\"headerlink\" title=\"面向数据结构 DSSD\"></a>面向数据结构 DSSD</h5><ul>\n<li>确定数据结构特征</li>\n<li>用顺序/选择/重复三种基本形式表示数据</li>\n<li>把数据结构表示映射为软件的控制结构</li>\n<li>用与具体方法配套的设计指南进一步精化控制结构</li>\n<li>开发软件的过程性描述</li>\n</ul>\n<h4 id=\"软件实现及测试\"><a href=\"#软件实现及测试\" class=\"headerlink\" title=\"软件实现及测试\"></a>软件实现及测试</h4><h5 id=\"程序设计语言分类\"><a href=\"#程序设计语言分类\" class=\"headerlink\" title=\"程序设计语言分类\"></a>程序设计语言分类</h5><ul>\n<li>机器语言</li>\n<li>汇编语言</li>\n<li><p>高级语言</p>\n</li>\n<li><p>基础语言(BASIC,FORTRAN,COBOL,ALGOL)</p>\n</li>\n<li>结构语言(PL/1,PASCAL,C．ADA)</li>\n<li>专用语言(FORTH,PROLOG,LISP)</li>\n<li>系统实现语言(C)</li>\n<li>静态高级语言(COBOL,FORTRAN)</li>\n<li>动态高级语言</li>\n<li>块结构高级语言(ALGOL,PASCAL)</li>\n<li>可视化编程语言(VB,VC,PB,BC,C++BUILDER) </li>\n</ul>\n<h5 id=\"编程语言特点\"><a href=\"#编程语言特点\" class=\"headerlink\" title=\"编程语言特点\"></a>编程语言特点</h5><ul>\n<li>心理学观点<ul>\n<li>一致性</li>\n<li>多义性</li>\n<li>局限性</li>\n<li>易编码性</li>\n<li>可移植性</li>\n<li>可维护性</li>\n<li>配套开发工具</li>\n</ul>\n</li>\n<li>工程观点<ul>\n<li>易于把设计翻译为代码</li>\n<li>编译器效率</li>\n<li>源代码可移植性</li>\n<li>开发法工具可用性</li>\n<li>可维护性</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"编写风格要求\"><a href=\"#编写风格要求\" class=\"headerlink\" title=\"编写风格要求\"></a>编写风格要求</h5><ul>\n<li>节简化 提供简洁代码<ul>\n<li>避免程序中不必要的动作和变量</li>\n<li>避免变量名重载</li>\n<li>减小程序体积</li>\n<li>提高运行速度</li>\n<li>避免模块冗杂</li>\n<li>避免全局变量副作用</li>\n</ul>\n</li>\n<li>模块化 把代码划分为内聚度高，富有意义的功能块<ul>\n<li>确保物理和逻辑功能密切想逛</li>\n<li>限定一个模块完成一个功能</li>\n<li>检查代码重复率</li>\n</ul>\n</li>\n<li>简单化 去掉过分复制和不必要的矫揉造作<ul>\n<li>采用简单的算法</li>\n<li>简单的数据结构</li>\n<li>对象命名一致性</li>\n<li>简化算术，逻辑表达式</li>\n</ul>\n</li>\n<li>结构化 把程序的各个构建组织成一个有效的系统<ul>\n<li>按标准化的次序说明数据</li>\n<li>按字母顺序说明对象名</li>\n<li>使用读者明了的结构化程序部件</li>\n<li>根据应用背景排列程序各部分</li>\n<li>不随意为效率而牺牲可读性</li>\n<li>让机器多做重复工作</li>\n<li>用公共函数调用代替重复出现的表达式</li>\n<li>检查参数传递情况</li>\n<li>检查多层嵌套循环</li>\n<li>坚持使用统一缩进规则</li>\n<li>只编写单入口单出口的代码</li>\n</ul>\n</li>\n<li>文档化<ul>\n<li>有效的使用注释</li>\n<li>使用含义鲜明的变量名</li>\n<li>协调使用程序块注释和程序行注释</li>\n<li>始终坚持写文档</li>\n</ul>\n</li>\n<li>格式化 使程序布局合理清晰明了<ul>\n<li>有效的使用编程空间</li>\n<li>适当插入括号 排出多义性</li>\n<li>有效使用空格</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"测试模型\"><a href=\"#测试模型\" class=\"headerlink\" title=\"测试模型\"></a>测试模型</h5><ul>\n<li>V<br>定义了软件测试如何与软件工程各阶段相融合，描述了各级别软件测试与软件开发各阶段的对应关系</li>\n<li>W</li>\n<li>H<br>对W模型在更高层次上的线性抽象。在任何一个开发流程，只要有必要，且测试配置已准备就绪，即可进行测试活动</li>\n</ul>\n<h5 id=\"测试原则\"><a href=\"#测试原则\" class=\"headerlink\" title=\"测试原则\"></a>测试原则</h5><ul>\n<li>应尽早地和不断地进行测试</li>\n<li>开发人员应尽量避免参加测试</li>\n<li>注重测试用例的设计和选择</li>\n<li>增量式测试</li>\n<li>充分注意测试的群集现象</li>\n<li>合理安排测试计划，严格执行测试计划</li>\n<li>全面统计和分析测试结果</li>\n<li>保存测试文档，并及时更新</li>\n</ul>\n<h5 id=\"白盒测试\"><a href=\"#白盒测试\" class=\"headerlink\" title=\"白盒测试\"></a>白盒测试</h5><p>结构测试，α测试</p>\n<ul>\n<li>逻辑测试，完全了解结构及处理过程</li>\n<li>按照内部逻辑测试，检查是否能按预期工作</li>\n<li>分类： 逻辑覆盖、循环测试，路径测试</li>\n<li>设计原则<ul>\n<li>保证所有判断的分支至少执行一次</li>\n<li>保证所有循环体至少循环一次</li>\n<li>保证判断和循环的所有边界的可能取值都执行一次<ul>\n<li>保证每条独立路径都执行一次</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"黑盒测试\"><a href=\"#黑盒测试\" class=\"headerlink\" title=\"黑盒测试\"></a>黑盒测试</h5><p>功能测试，β测试</p>\n<ul>\n<li>不考虑内部结构和处理过程</li>\n<li>仅测试输入输出是否完整正确</li>\n<li>错误：功能错误，界面错误，数据结构错误，性能错误，初始化错误</li>\n<li>方案考虑<ul>\n<li>如何测试功能有效性</li>\n<li>哪些类型的输入可构成好测试用例</li>\n<li>系统是否对特定的输入值特别敏感</li>\n<li>怎样化定数据类的边界</li>\n<li>系统能够承受什么样的数据率和数据量</li>\n<li>数据的特定组合将对系统运行产生什么影响</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>OO=Objects + Classes + Inheritance + Communication with messages</p>\n<h5 id=\"面向对象方法\"><a href=\"#面向对象方法\" class=\"headerlink\" title=\"面向对象方法\"></a>面向对象方法</h5><ul>\n<li>任何事物都是对象构成</li>\n<li>把所有对象组合划分为类，类中包含数据方法</li>\n<li>继承派生</li>\n<li>对象之间通过消息传递联系</li>\n</ul>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>与人类习惯的思维方法一致</li>\n<li>稳定性好</li>\n<li>代码利用率高</li>\n<li>可维护性强</li>\n</ul>\n<h5 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h5><p>对象是对属性值和操作的封装体，是类的实例化。</p>\n<ul>\n<li>模块独立性</li>\n<li>动态连接性</li>\n<li>易维护性</li>\n</ul>\n<h5 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h5><p>对具有相同属性和行为的一个或多个对象的抽象描述</p>\n<ul>\n<li>由方法和数据构成</li>\n<li>类的实例化是对象</li>\n<li>对象的内部状态只能通过内部方法修改</li>\n<li>类是一解决一类问题的模块，提供方法，数据模板</li>\n</ul>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>类的具体对象</p>\n<h5 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h5><ul>\n<li>接收消息的对象</li>\n<li>消息选择符</li>\n<li>零或多个变元</li>\n</ul>\n<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><p>对象所执行的操作</p>\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><p>类中定义的抽象数据</p>\n<h5 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h5><p>子类继承父类的数据和方法，可传递</p>\n<ul>\n<li>减少代码，提高复用性</li>\n<li>清晰体现相关类的层次结构</li>\n<li>自动传播代码</li>\n<li>在基础类上构造扩展</li>\n<li>多重继承</li>\n<li>单一继承</li>\n</ul>\n<h5 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h5><ul>\n<li><p>对象模型：描述系统数据结构，静态结构</p>\n<ul>\n<li>确定类&amp;对象</li>\n<li>确定关联</li>\n<li>划分主题（根据问题领域）</li>\n<li>确定属性</li>\n<li>识别继承关系</li>\n</ul>\n</li>\n<li><p>动态模型：描述系统控制结构，交互次序</p>\n<ul>\n<li>编写典型交互行为的脚本</li>\n<li>从脚本中提取出事件</li>\n<li>排列事件发生的次序，状态图</li>\n<li>比较状态图，检查一致性</li>\n</ul>\n</li>\n<li>功能模型：描述系统功能，数据变换<ul>\n<li>画出基本系统模型图</li>\n<li>画出功能级数据流图</li>\n<li>描述处理框功能</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"层次\"><a href=\"#层次\" class=\"headerlink\" title=\"层次\"></a>层次</h5><ul>\n<li>主题层（范畴层）：定义主题</li>\n<li>类&amp;对象层：确定对象</li>\n<li>结构层：确定结构</li>\n<li>属性层：定义属性和实例联系</li>\n<li>服务层：定义操作和消息联系</li>\n</ul>"},{"title":"ts数据结构","date":"2017-10-15T02:49:43.000Z","_content":"学习TypeScript...\n<!--more-->\n\n### 栈\n后进先出\n```ts\nexport default class Stack<T> {\n  private count: number;\n  private items: any;\n\n  constructor() {\n    this.count = 0;\n    this.items = {};\n  }\n\n  push(element: T) {\n    this.items[this.count] = element;\n    this.count++;\n  }\n\n  pop() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    this.count--;\n    const result = this.items[this.count];\n    delete this.items[this.count];\n    return result;\n  }\n\n  peek() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items[this.count - 1];\n  }\n\n  isEmpty() {\n    return this.count === 0;\n  }\n\n  size() {\n    return this.count;\n  }\n\n  clear() {\n    this.items = {};\n    this.count = 0;\n  }\n\n  toString() {\n    if (this.isEmpty()) {\n      return '';\n    }\n    let objString;\n    for (let i = 0; i < this.count; i++) {\n      objString = `${objString},${this.items[i]}`;\n    }\n    return objString;\n  }\n}\n```\n\n### 队列\nFIFO 先进先出\n```ts\n// object\nexport default class Queue<T> {\n  private count: number;\n  private lowestCount: number;\n  private items: any;\n\n  constructor() {\n    this.count = 0;\n    this.lowestCount = 0;\n    this.items = {};\n  }\n  /**\n   * @description 向队列尾部添加一个\n   * @param el 新的项\n   */\n  enqueue(el: T) {\n    this.items[this.count] = el;\n    this.count++;\n  }\n  /**\n   * @description 移除队列的第一项，并返回移除的元素\n   */\n  dequeue() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    const res = this.items[this.lowestCount];\n    delete this.items[this.lowestCount];\n    this.lowestCount++;\n    return res;\n  }\n  peek() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items[this.lowestCount];\n  }\n  clear() {\n    this.items = {};\n    this.count = 0;\n    this.lowestCount = 0;\n  }\n  toString() {\n    let objString = 'obj:';\n    for (let i = this.lowestCount; i < this.count; i++) {\n      objString += `${this.items[i]},`;\n    }\n    return objString;\n  }\n  size() {\n    return this.count - this.lowestCount;\n  }\n  isEmpty() {\n    return this.size() === 0;\n  }\n}\n\n// array\nexport default class Queue<T> {\n  private items: T[];\n\n  constructor() {\n    this.items = [];\n  }\n  enqueue(el: T) {\n    this.items.push(el);\n  }\n\n  dequeue() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items.shift();\n  }\n  peek() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items[0];\n  }\n  clear() {\n    this.items = [];\n\n  }\n  toString() {\n    let objString = 'obj:';\n    for (const i of this.items) {\n      objString += `${i}`;\n    }\n    return objString;\n  }\n  size() {\n    return this.items.length;\n  }\n  isEmpty() {\n    return this.size() === 0;\n  }\n}\n```","source":"_posts/ts数据结构.md","raw":"---\ntitle: ts数据结构\ndate: 2017-10-15 10:49:43\ntags:\n---\n学习TypeScript...\n<!--more-->\n\n### 栈\n后进先出\n```ts\nexport default class Stack<T> {\n  private count: number;\n  private items: any;\n\n  constructor() {\n    this.count = 0;\n    this.items = {};\n  }\n\n  push(element: T) {\n    this.items[this.count] = element;\n    this.count++;\n  }\n\n  pop() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    this.count--;\n    const result = this.items[this.count];\n    delete this.items[this.count];\n    return result;\n  }\n\n  peek() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items[this.count - 1];\n  }\n\n  isEmpty() {\n    return this.count === 0;\n  }\n\n  size() {\n    return this.count;\n  }\n\n  clear() {\n    this.items = {};\n    this.count = 0;\n  }\n\n  toString() {\n    if (this.isEmpty()) {\n      return '';\n    }\n    let objString;\n    for (let i = 0; i < this.count; i++) {\n      objString = `${objString},${this.items[i]}`;\n    }\n    return objString;\n  }\n}\n```\n\n### 队列\nFIFO 先进先出\n```ts\n// object\nexport default class Queue<T> {\n  private count: number;\n  private lowestCount: number;\n  private items: any;\n\n  constructor() {\n    this.count = 0;\n    this.lowestCount = 0;\n    this.items = {};\n  }\n  /**\n   * @description 向队列尾部添加一个\n   * @param el 新的项\n   */\n  enqueue(el: T) {\n    this.items[this.count] = el;\n    this.count++;\n  }\n  /**\n   * @description 移除队列的第一项，并返回移除的元素\n   */\n  dequeue() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    const res = this.items[this.lowestCount];\n    delete this.items[this.lowestCount];\n    this.lowestCount++;\n    return res;\n  }\n  peek() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items[this.lowestCount];\n  }\n  clear() {\n    this.items = {};\n    this.count = 0;\n    this.lowestCount = 0;\n  }\n  toString() {\n    let objString = 'obj:';\n    for (let i = this.lowestCount; i < this.count; i++) {\n      objString += `${this.items[i]},`;\n    }\n    return objString;\n  }\n  size() {\n    return this.count - this.lowestCount;\n  }\n  isEmpty() {\n    return this.size() === 0;\n  }\n}\n\n// array\nexport default class Queue<T> {\n  private items: T[];\n\n  constructor() {\n    this.items = [];\n  }\n  enqueue(el: T) {\n    this.items.push(el);\n  }\n\n  dequeue() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items.shift();\n  }\n  peek() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items[0];\n  }\n  clear() {\n    this.items = [];\n\n  }\n  toString() {\n    let objString = 'obj:';\n    for (const i of this.items) {\n      objString += `${i}`;\n    }\n    return objString;\n  }\n  size() {\n    return this.items.length;\n  }\n  isEmpty() {\n    return this.size() === 0;\n  }\n}\n```","slug":"ts数据结构","published":1,"updated":"2017-10-15T07:19:26.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulj0016jbzem6qr3hs1","content":"<p>学习TypeScript…<br><a id=\"more\"></a></p>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>后进先出<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> Stack&lt;T&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> count: <span class=\"built_in\">number</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> items: <span class=\"built_in\">any</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  push(element: T) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.count] = element;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count++;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  pop() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count--;</div><div class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.count];</div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.count];</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  peek() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.count - <span class=\"number\">1</span>];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  isEmpty() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count === <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  size() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  clear() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">let</span> objString;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.count; i++) &#123;</div><div class=\"line\">      objString = <span class=\"string\">`<span class=\"subst\">$&#123;objString&#125;</span>,<span class=\"subst\">$&#123;this.items[i]&#125;</span>`</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> objString;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>FIFO 先进先出<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// object</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> Queue&lt;T&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> count: <span class=\"built_in\">number</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> lowestCount: <span class=\"built_in\">number</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> items: <span class=\"built_in\">any</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lowestCount = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 向队列尾部添加一个</span></div><div class=\"line\"><span class=\"comment\">   * @param el 新的项</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  enqueue(el: T) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.count] = el;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count++;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 移除队列的第一项，并返回移除的元素</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  dequeue() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.lowestCount];</div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.lowestCount];</div><div class=\"line\">    <span class=\"keyword\">this</span>.lowestCount++;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">  &#125;</div><div class=\"line\">  peek() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.lowestCount];</div><div class=\"line\">  &#125;</div><div class=\"line\">  clear() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lowestCount = <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> objString = <span class=\"string\">'obj:'</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"keyword\">this</span>.lowestCount; i &lt; <span class=\"keyword\">this</span>.count; i++) &#123;</div><div class=\"line\">      objString += <span class=\"string\">`<span class=\"subst\">$&#123;this.items[i]&#125;</span>,`</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> objString;</div><div class=\"line\">  &#125;</div><div class=\"line\">  size() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count - <span class=\"keyword\">this</span>.lowestCount;</div><div class=\"line\">  &#125;</div><div class=\"line\">  isEmpty() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size() === <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// array</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> Queue&lt;T&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> items: T[];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = [];</div><div class=\"line\">  &#125;</div><div class=\"line\">  enqueue(el: T) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items.push(el);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  dequeue() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.shift();</div><div class=\"line\">  &#125;</div><div class=\"line\">  peek() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items[<span class=\"number\">0</span>];</div><div class=\"line\">  &#125;</div><div class=\"line\">  clear() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = [];</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> objString = <span class=\"string\">'obj:'</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i of <span class=\"keyword\">this</span>.items) &#123;</div><div class=\"line\">      objString += <span class=\"string\">`<span class=\"subst\">$&#123;i&#125;</span>`</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> objString;</div><div class=\"line\">  &#125;</div><div class=\"line\">  size() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.length;</div><div class=\"line\">  &#125;</div><div class=\"line\">  isEmpty() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size() === <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>学习TypeScript…<br>","more":"</p>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>后进先出<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> Stack&lt;T&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> count: <span class=\"built_in\">number</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> items: <span class=\"built_in\">any</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  push(element: T) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.count] = element;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count++;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  pop() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count--;</div><div class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.count];</div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.count];</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  peek() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.count - <span class=\"number\">1</span>];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  isEmpty() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count === <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  size() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  clear() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">let</span> objString;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.count; i++) &#123;</div><div class=\"line\">      objString = <span class=\"string\">`<span class=\"subst\">$&#123;objString&#125;</span>,<span class=\"subst\">$&#123;this.items[i]&#125;</span>`</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> objString;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>FIFO 先进先出<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// object</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> Queue&lt;T&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> count: <span class=\"built_in\">number</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> lowestCount: <span class=\"built_in\">number</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> items: <span class=\"built_in\">any</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lowestCount = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 向队列尾部添加一个</span></div><div class=\"line\"><span class=\"comment\">   * @param el 新的项</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  enqueue(el: T) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.count] = el;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count++;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 移除队列的第一项，并返回移除的元素</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  dequeue() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.lowestCount];</div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.lowestCount];</div><div class=\"line\">    <span class=\"keyword\">this</span>.lowestCount++;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">  &#125;</div><div class=\"line\">  peek() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items[<span class=\"keyword\">this</span>.lowestCount];</div><div class=\"line\">  &#125;</div><div class=\"line\">  clear() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lowestCount = <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> objString = <span class=\"string\">'obj:'</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"keyword\">this</span>.lowestCount; i &lt; <span class=\"keyword\">this</span>.count; i++) &#123;</div><div class=\"line\">      objString += <span class=\"string\">`<span class=\"subst\">$&#123;this.items[i]&#125;</span>,`</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> objString;</div><div class=\"line\">  &#125;</div><div class=\"line\">  size() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count - <span class=\"keyword\">this</span>.lowestCount;</div><div class=\"line\">  &#125;</div><div class=\"line\">  isEmpty() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size() === <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// array</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> Queue&lt;T&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> items: T[];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = [];</div><div class=\"line\">  &#125;</div><div class=\"line\">  enqueue(el: T) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items.push(el);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  dequeue() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.shift();</div><div class=\"line\">  &#125;</div><div class=\"line\">  peek() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isEmpty()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items[<span class=\"number\">0</span>];</div><div class=\"line\">  &#125;</div><div class=\"line\">  clear() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = [];</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> objString = <span class=\"string\">'obj:'</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i of <span class=\"keyword\">this</span>.items) &#123;</div><div class=\"line\">      objString += <span class=\"string\">`<span class=\"subst\">$&#123;i&#125;</span>`</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> objString;</div><div class=\"line\">  &#125;</div><div class=\"line\">  size() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.length;</div><div class=\"line\">  &#125;</div><div class=\"line\">  isEmpty() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size() === <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"translate-koa2","date":"2017-04-03T06:54:21.000Z","_content":"\n边学英语边学koa\n\n<!--more-->\n\n## KOA\n\n### koa\n基于node.js的下一代web框架\n\n### Introduction\nkoa是由Express开发团队设计的新型Web框架，旨在为Web应用和Apis提供更小，更具表现力和更强大基础。通过组合利用generators，可以避免回调嵌套并大大提高处理错误的能力。koa不在核心中捆绑任何中间件，仅仅提供了一套轻量优雅的方法库，使得编写服务更加便捷。\n\n### 安装\nkoa需要 node >= ^7.6.0版本来支持ES2015和async。\n你可以安装node版本控制器来升级到需求版本。\n```\nnpm install n -g\nn 7.6.0\nnpm install koa\nnode my-koa-app.js\n```\n\n### Async与Babel\n要想在node低于^7.6.0的环境，koa中使用Async函数，我们推荐使用[babel's require hook](https://babeljs.io/docs/usage/babel-register/)\n```\nrequire('babel-core/register');\n// require the rest of the app that needs to be transpiled after the hook\nconst app = require('./app');\n```\n为了解析和转换Async函数， 你至少应该有[transform-async-to-generator](http://babeljs.io/docs/plugins/transform-async-to-generator/)或[transform-async-to-module-method](http://babeljs.io/docs/plugins/transform-async-to-module-method/)插件。\n举个例，在你的`.babelrc`文件中，你应该有如下配置:\n```\n{\n  \"plugins\": [\"transform-async-to-generator\"]\n}\n```\n你当然也可以使用[Stage 3 preset](http://babeljs.io/docs/plugins/preset-stage-3/)代替\n> 讲道理干嘛这么麻烦。。不如用node^7.6.0\n\n### Application\nkoa应用是一个包含一系列中间件的对象，这些中间件函数根据request请求按照类似堆栈的方式构成依次执行。Koa类似于其他您可能使用过的中间件系统（如Ruby‘s Rack，Connect等）。然而Koa的核心设计思路是为其他低等级的中间件层提供高级语法糖，以提高其可操作性和稳定性，并使编写中间件变得更便捷。\n\nKoa包含了像content-negotiation(内容协商)、cache freshness（缓存刷新）、proxy support（代理支持）和 redirection（重定向）等常用任务方法。尽管有相当大数量的函数支持，Koa仅仅包含很小一部分，因为Koa没有中间件捆绑。\n\n编写一个 hello world 应用：\n```\nconst Koa = require('koa');\nconst app = new Koa();\n\napp.use(ctx => {\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n### Cascading—级联\nKoa中间件以更传统的方式级联，像你习惯使用的一些类似工具——在过去这使得用户很难友好的使用node频繁回调。然而通过使用Async函数，我们能\"真正\"实现中间件。Connect的实现是简单地通过一系列的函数传递控制权，直到一个函数返回。而Koa则是通调用下一个中间件，然后将控制权逐级返还到上级中间件。\n\n下面的例子将返回 `Hello World`，然而当请求开始时，将先经过x-response-time和logging中间件，记录中间件执行起始时间，然后继续通过response中间件得到控制权。当一个中间件调用 next() 时，该函数暂停并将控制权传递给定义的下一个中间件。当没有更多的下级中间件执行，堆栈将释放，并且将逆序执行每个中间件的代码。\n\n> 原文并未使用箭头函数\n\n  ```\n const Koa = require('koa');\n const app = new Koa();\n\n// x-response-time\n\napp.use(async (ctx, next) => {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n });\n\n // logger\n\n app.use(async (ctx, next) => {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n });\n\n// response\n\napp.use(ctx => {\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n### Settings\n应用配置是实例app的属性，目前支持以下配置：\n  - app.env 默认为NODE_DEV或development\n  - app.proxy 如果为true，则header域将被信任\n  - app.subdomainOffset 默认为2 表示.subdomains所忽略的字符偏移量\n\n### app.listen(...)\n Koa应用并不是一个HTTP服务器的单一映射表现方式。一个或多个Koa应用可以被一起挂载，形成一个具有单一HTTP服务器的较大型的应用。\n\n 创建并返回一个HTTP服务器，将给定的参数传递给Server#listen()。[(参数配置参考)](https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback)\n 以下为创建一个绑定3000端口的简单Koa应用：\n\n  ```\n const Koa = require('koa');\nconst app = new Koa();\napp.listen(3000);\n```\n\napp.listen(...)实际上以下代码的语法糖：\n\n```\nconst http = require('http');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\n```\n\n这意味这你可以同时启动HTTP和HTTPS或多个地址相同的引用程序：\n\n```\nconst http = require('http');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\nhttp.createServer(app.callback().listen(3000));\n```\n\n### app.callback()\n返回一个适用于http。createServer()方法的回调函数来处理请求。你也可以使用这个回调函数将你的Koa应用挂载到 Connect/Express 应用上。\n\n### app.use(function)\n将给定的中间件添加到应用中[(参考Middleware)](https://github.com/koajs/koa/wiki#middleware)\n\n### app.keys =\n设置签名Cookie密钥\n该密钥将会被传递给[KEyGrip](https://github.com/koajs/koa/wiki#middleware)。\n你也可以传递自己生成的KEyGrip实例。如下：\n```\napp.keys = [ 'im a newer secret', 'i like turtle'];\napp.keys = new KeyGrip(['im a newer secret', 'i like turtle'], 'sha256');\n```\n在进行cookie签名时。，这些键只有在设置signed 为 true 时才会使用密钥进行加密：\n```\nthis.cookies.set('name', 'tobi', {signed: true});\n```\n\n### app.context\napp.context是从ctx中创建的原型。你可以通过编辑app.context添加额外的属性到ctx上。这对于添加属性或方法到ctx上在整个应用程序上使用非常有用，这也可能会更为有效（无中间件）并更容易（更少使用require())牺牲更多依赖在ctx上，这可以被视为反模式。\n\n举个例，添加一个数据库引用到ctx:\n```\napp.context.db = db();\napp.use(async (ctx) => {\n  console.log(ctx.db);\n});\n```\n---\nNote：\n - ctx上的许多属性定义时使用了，getters，setters和Object.defineProperty()。你只能编辑这些属性（不推荐）通过使用Object.defineProperty app.context()。[(See more)](https://github.com/koajs/koa/issues/652)\n - 这一段有点晕。。。\n\n### 错误处理\n默认情况下，Koa会讲所有错误日志输出到stderr中，除非 app。silent = true。默认错误处理页不会在 err.status = 404 或 err.expose = true 时输出错误。想要执行自定义错误处理逻辑（例如 centralized logging），你可以添加“error”事件监听器。\n```\napp.on('error', err => {\n  log.error('serrver error', err);\n});\n```\n\n如果在 req／res 周期中出现error，并且不能够影响客户端时，Context实例也会被传递到error事件监听器的回调函数中：\n```\napp.on('error', (err, ctx) => {\n  log.error('server error', err, ctx);\n});\n```\n\n当发生错误并且仍然可以响应客户端时，例如没有数据被写入到socker中时，Koa将返回一个 500／服务器内部错误。\n无论哪种情况，Koa都会生成一个应用级别的错误，来实现日志记录。\n\n## Context\nKoa Context将node的request和response对象封装到一个单独的对象中，为编写web应用和API提供了很多有用的方法。这些操作在开发HTTP服务器中经常被使用，因此被添加在context这一层级总而不是更高层级的框架中，这将迫使中间件需要重新实现这些公共的方法。\nContext 根据每个request创建，并在中间件中作为接收器（receiver ）或通过 ctx 标识符来引用\n如下代码展示：\n```\napp.use(async (ctx, next) => {\n  ctx; // is the Context\n  ctx.request; // is a koa Request\n  ctx.response; // is a koa Response\n})\n```\n许多Context的访问器和方法为了方便起见，简单地委托给ctx.request和ctx.response 所对应的等价方法。\n举个例子，ctx.type和ctx.length 代理了 response对象中对应的方法， ctx.path和ctx.method代理了 resquest 对象中对应的方法。\n\n### API\nContext 具体的方法和访问器。\n\n### ctx.req\nNode的request对象\n\n### ctx.res\nNode的response对象\n\nKoa不支持直接调用底层response处理。请避免使用以下Node属性：\n  - res.statusCode\n  - res.writeHead()\n  - res.write()\n  - res.end()\n\n### ctx.request\nKoa 的 Request 对象。\n\n### ctx.response\nKoa 的 Response 对象。\n\n### ctx.state\n自定义命名空间，用于将信息从中间件传递到前端视图层\n```\nctx.state.user = await User.find(id);\n```\n\n### ctx.app\n应用实例引用。\n\n### ctx.cookies.get(name, [options])\n获取 cookie 中 name 的值 options为可选参数。\n  - signed：对cookie请求时需要设置签名。\n\nKoa 使用 [cookies模块](https://github.com/pillarjs/cookies),options参数只是简单地直接传递。\n\n### ctx.cookies.set(name, value, [options])\n设置 cookie 中 name值， options为可选参数。\n  - maxAge: 表示 Date.now() 到期的毫米数， number.\n  - signed: Cookie 签名\n  - expires: Cookie有效时间\n  - path: Cookie路径，默认为`/'`\n  - domain: Cookie的域\n  - secure: Cookie安全协议 false表示Cookie通过HTTP协议传送，true表示Cookie通过HTTPS协议传送。\n  - httpOnly: 服务器可访问的Cookie 默认为true\n  - overwrite: 一个布尔值，表示是否覆盖重写以前设置的同名的Cookie（默认为false）如果为true，在设置这个新Cookie时，将在同一个请求中设置所有相同名称的Cookie（不论路径或域）并从Set-Cookie头部中过滤掉。\n\nKoa 使用 [cookies模块](https://github.com/pillarjs/cookies),options参数只是简单地直接传递。\n\n### ctx.throw([msg], [status], [properties])\nHelper方法抛出一个.status属性默认为500的错误。该方法允许Koa准确的响应处理状态。\nKoa允许以下组合：\n```\nctx.throw(403);\nctx.throw('name required', 400);\nctx.throw(400, 'name required');\nctx.throw('something exploded');\n```\n举个例子 `ctx.throw('name required', 400)`等价于：\n```\nconst err = new Error('name required');\nerr.status = 400;\nerr.expose = true;\nthrow err;\n```\n请注意，这些是用户级错误，并会被标记为err.expose,这意味着消息会被准确描述为对客户端的响应，而并非使用在您不想泄漏失败细节的情景中。\n\n你可以根据需要将合并后的属性对象船钓错误中去，这对于向上级中间件请求的友好的机器化错误有着很好的装饰作用\n```\nctx.throw(401, 'access_denied', { user: user });\nctx.throw('access_denied', { user: user });\n```\nKoa 使用[http-errors](https://github.com/jshttp/http-errors)来创建错误。\n\n### ctx.assert(value, [status], [msg], [properties])\n当 !value时，Helper方法抛出类似于.throw()的错误。\n相当于node中的[assert](https://nodejs.org/api/assert.html)方法\n```\nctx.assert(ctx.state.user, 401, 'User not found. Please login!');\n```\nKoa 使用[http-assert](https://github.com/jshttp/http-assert)判断\n\n### ctx.respond\n为了避免Koa的内置响应处理，你可以直接设置 ctx.respond = false;\n如果你想使用原生的res对象代替Koa操作response，那么请使用这种方法。\n\n请注意，Koa并不支持这种使用方式，因为这有可能破坏Koa中间件和Koa本身的一些功能。\n这只能作为一种hack的方式，并只对希望在Koa的函数和中间件中使用传统的fn(req, res)的人带来便捷。\n\n### Request aliases\n以下的访问器别名与 [Request](#Request) 等价：\n```\nctx.header\nctx.headers\nctx.method\nctx.method=\nctx.url\nctx.url=\nctx.originalUrl\nctx.originalUrlctx.href\nctx.path\nctx.path=\nctx.query\nctx.query=\nctx.querystring\nctx.querystring=\nctx.host\nctx.hostname\nctx.fresh\nctx.stale\nctx.socket\nctx.protocol\nctx.secure\nctx.ip\nctx.ips\nctx.subdomains\nctx.is()\nctx.accepts()\nctx.acceptsEncodings()\nctx.acceptsLanguages()\nctx.get()\n```\n\n### Response aliases\n以下访问器别名与 [Response](#response)等价:\n```\nctx.body\nctx.body=\nctx.status\nctx.status=\nctx.message\nctx.message=\nctx.length\nctx.length=\nctx.type\nctx.type=\nctx.headerSent\nctx.rdirect()\nctx.attachment()\nctx.set()\nctx.append()\nctx.remove()\nctx.lastModified=\nctx.etag=\n```\n\n## <span id=\"request\">Request</span>\nKoa的Request对象是对node的Request对象进一步抽象，封装。\n提供了对日常HTTP服务器开发有用的一些功能函数\n\n### API\n\n#### request.header\n请求头对象\n\n#### request.headers\n请求头对象的别名\n\n#### request.method\n请求方法\n\n#### request.method=\n设置请求方法，在实现中间件时有很大作用，例如methodOverride()\n\n#### request.length\n以数字的形式返回request的内容长度(Content-lenght),或者返回undefined\n\n#### request.url\n获取请求url地址\n\n#### request.url=\n设置请求地址，用于重写url\n\n#### request.originalUrl\n获取请求原始url\n\n#### request.origin\n获取url来源，包括protocol和host\n```\nctx.request.origin\n// => http://example.com\n```\n\n#### request.href\n获取请求完整的URL，包括protpcol，host和url\n```\nctx.request.href\n// => http://example.com/foo/bar?q=1\n```\n\n#### request.path\n获取请求路径名。\n\n#### request.path=\n设置请求路径名，并保存'?'后面的部分（请求参数）\n\n#### request.querystring\n获取请求的查询参数(url中?后边的部分)不包含？\n\n#### request.querystring=\n设置查询参数\n\n#### request.search\n获取请求的查询参数，包含?\n\n#### request.search=\n设置请求的查询参数。\n\n#### request.host\n获取当前host(hostname: port) 当 app.proxy = true 时, 支持X-Forwarded-Host。\n\n#### request.hostname\n获取hostname，当 app.proxy = ture 时, 支持X-Forwarded-Host.\n\n#### request.type\n获取当前请求的 Conetent-Type 不包含如`charset`这样的参数。\n```\nconst ct = ctx.request.type\n// => \"image/png\"\n```\n\n#### request.charset\n获取当前请求的 charset 没有则返回undefined\n```\nctx.request.charset\n// => \"utf-8\"\n```\n\n#### request.query\n获取解析后的查询字符串，当请求中没有查询字符串时则返回一个空对象。\n请注意，这个方法不支持嵌套对象。\n例如：`color=blue&size=small`\n```\n{\n  color: 'blue',\n  size: 'small'\n}\n```\n\n#### request.query=\n根据给定的对象设置查询字符串。\n请注意，这个方法不支持嵌套对象。\n```\nctx.query = {next: '/login'}\n```\n\n#### request.fresh\n\n\n## <span id=\"response\">Response</span>\n","source":"_posts/translate-koa2.md","raw":"---\ntitle: translate-koa2\ndate: 2017-04-03 14:54:21\ntags:\n  - javascript\n  - node\n  - koa2\n---\n\n边学英语边学koa\n\n<!--more-->\n\n## KOA\n\n### koa\n基于node.js的下一代web框架\n\n### Introduction\nkoa是由Express开发团队设计的新型Web框架，旨在为Web应用和Apis提供更小，更具表现力和更强大基础。通过组合利用generators，可以避免回调嵌套并大大提高处理错误的能力。koa不在核心中捆绑任何中间件，仅仅提供了一套轻量优雅的方法库，使得编写服务更加便捷。\n\n### 安装\nkoa需要 node >= ^7.6.0版本来支持ES2015和async。\n你可以安装node版本控制器来升级到需求版本。\n```\nnpm install n -g\nn 7.6.0\nnpm install koa\nnode my-koa-app.js\n```\n\n### Async与Babel\n要想在node低于^7.6.0的环境，koa中使用Async函数，我们推荐使用[babel's require hook](https://babeljs.io/docs/usage/babel-register/)\n```\nrequire('babel-core/register');\n// require the rest of the app that needs to be transpiled after the hook\nconst app = require('./app');\n```\n为了解析和转换Async函数， 你至少应该有[transform-async-to-generator](http://babeljs.io/docs/plugins/transform-async-to-generator/)或[transform-async-to-module-method](http://babeljs.io/docs/plugins/transform-async-to-module-method/)插件。\n举个例，在你的`.babelrc`文件中，你应该有如下配置:\n```\n{\n  \"plugins\": [\"transform-async-to-generator\"]\n}\n```\n你当然也可以使用[Stage 3 preset](http://babeljs.io/docs/plugins/preset-stage-3/)代替\n> 讲道理干嘛这么麻烦。。不如用node^7.6.0\n\n### Application\nkoa应用是一个包含一系列中间件的对象，这些中间件函数根据request请求按照类似堆栈的方式构成依次执行。Koa类似于其他您可能使用过的中间件系统（如Ruby‘s Rack，Connect等）。然而Koa的核心设计思路是为其他低等级的中间件层提供高级语法糖，以提高其可操作性和稳定性，并使编写中间件变得更便捷。\n\nKoa包含了像content-negotiation(内容协商)、cache freshness（缓存刷新）、proxy support（代理支持）和 redirection（重定向）等常用任务方法。尽管有相当大数量的函数支持，Koa仅仅包含很小一部分，因为Koa没有中间件捆绑。\n\n编写一个 hello world 应用：\n```\nconst Koa = require('koa');\nconst app = new Koa();\n\napp.use(ctx => {\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n### Cascading—级联\nKoa中间件以更传统的方式级联，像你习惯使用的一些类似工具——在过去这使得用户很难友好的使用node频繁回调。然而通过使用Async函数，我们能\"真正\"实现中间件。Connect的实现是简单地通过一系列的函数传递控制权，直到一个函数返回。而Koa则是通调用下一个中间件，然后将控制权逐级返还到上级中间件。\n\n下面的例子将返回 `Hello World`，然而当请求开始时，将先经过x-response-time和logging中间件，记录中间件执行起始时间，然后继续通过response中间件得到控制权。当一个中间件调用 next() 时，该函数暂停并将控制权传递给定义的下一个中间件。当没有更多的下级中间件执行，堆栈将释放，并且将逆序执行每个中间件的代码。\n\n> 原文并未使用箭头函数\n\n  ```\n const Koa = require('koa');\n const app = new Koa();\n\n// x-response-time\n\napp.use(async (ctx, next) => {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n });\n\n // logger\n\n app.use(async (ctx, next) => {\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n });\n\n// response\n\napp.use(ctx => {\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n### Settings\n应用配置是实例app的属性，目前支持以下配置：\n  - app.env 默认为NODE_DEV或development\n  - app.proxy 如果为true，则header域将被信任\n  - app.subdomainOffset 默认为2 表示.subdomains所忽略的字符偏移量\n\n### app.listen(...)\n Koa应用并不是一个HTTP服务器的单一映射表现方式。一个或多个Koa应用可以被一起挂载，形成一个具有单一HTTP服务器的较大型的应用。\n\n 创建并返回一个HTTP服务器，将给定的参数传递给Server#listen()。[(参数配置参考)](https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback)\n 以下为创建一个绑定3000端口的简单Koa应用：\n\n  ```\n const Koa = require('koa');\nconst app = new Koa();\napp.listen(3000);\n```\n\napp.listen(...)实际上以下代码的语法糖：\n\n```\nconst http = require('http');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\n```\n\n这意味这你可以同时启动HTTP和HTTPS或多个地址相同的引用程序：\n\n```\nconst http = require('http');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback().listen(3000));\nhttp.createServer(app.callback().listen(3000));\n```\n\n### app.callback()\n返回一个适用于http。createServer()方法的回调函数来处理请求。你也可以使用这个回调函数将你的Koa应用挂载到 Connect/Express 应用上。\n\n### app.use(function)\n将给定的中间件添加到应用中[(参考Middleware)](https://github.com/koajs/koa/wiki#middleware)\n\n### app.keys =\n设置签名Cookie密钥\n该密钥将会被传递给[KEyGrip](https://github.com/koajs/koa/wiki#middleware)。\n你也可以传递自己生成的KEyGrip实例。如下：\n```\napp.keys = [ 'im a newer secret', 'i like turtle'];\napp.keys = new KeyGrip(['im a newer secret', 'i like turtle'], 'sha256');\n```\n在进行cookie签名时。，这些键只有在设置signed 为 true 时才会使用密钥进行加密：\n```\nthis.cookies.set('name', 'tobi', {signed: true});\n```\n\n### app.context\napp.context是从ctx中创建的原型。你可以通过编辑app.context添加额外的属性到ctx上。这对于添加属性或方法到ctx上在整个应用程序上使用非常有用，这也可能会更为有效（无中间件）并更容易（更少使用require())牺牲更多依赖在ctx上，这可以被视为反模式。\n\n举个例，添加一个数据库引用到ctx:\n```\napp.context.db = db();\napp.use(async (ctx) => {\n  console.log(ctx.db);\n});\n```\n---\nNote：\n - ctx上的许多属性定义时使用了，getters，setters和Object.defineProperty()。你只能编辑这些属性（不推荐）通过使用Object.defineProperty app.context()。[(See more)](https://github.com/koajs/koa/issues/652)\n - 这一段有点晕。。。\n\n### 错误处理\n默认情况下，Koa会讲所有错误日志输出到stderr中，除非 app。silent = true。默认错误处理页不会在 err.status = 404 或 err.expose = true 时输出错误。想要执行自定义错误处理逻辑（例如 centralized logging），你可以添加“error”事件监听器。\n```\napp.on('error', err => {\n  log.error('serrver error', err);\n});\n```\n\n如果在 req／res 周期中出现error，并且不能够影响客户端时，Context实例也会被传递到error事件监听器的回调函数中：\n```\napp.on('error', (err, ctx) => {\n  log.error('server error', err, ctx);\n});\n```\n\n当发生错误并且仍然可以响应客户端时，例如没有数据被写入到socker中时，Koa将返回一个 500／服务器内部错误。\n无论哪种情况，Koa都会生成一个应用级别的错误，来实现日志记录。\n\n## Context\nKoa Context将node的request和response对象封装到一个单独的对象中，为编写web应用和API提供了很多有用的方法。这些操作在开发HTTP服务器中经常被使用，因此被添加在context这一层级总而不是更高层级的框架中，这将迫使中间件需要重新实现这些公共的方法。\nContext 根据每个request创建，并在中间件中作为接收器（receiver ）或通过 ctx 标识符来引用\n如下代码展示：\n```\napp.use(async (ctx, next) => {\n  ctx; // is the Context\n  ctx.request; // is a koa Request\n  ctx.response; // is a koa Response\n})\n```\n许多Context的访问器和方法为了方便起见，简单地委托给ctx.request和ctx.response 所对应的等价方法。\n举个例子，ctx.type和ctx.length 代理了 response对象中对应的方法， ctx.path和ctx.method代理了 resquest 对象中对应的方法。\n\n### API\nContext 具体的方法和访问器。\n\n### ctx.req\nNode的request对象\n\n### ctx.res\nNode的response对象\n\nKoa不支持直接调用底层response处理。请避免使用以下Node属性：\n  - res.statusCode\n  - res.writeHead()\n  - res.write()\n  - res.end()\n\n### ctx.request\nKoa 的 Request 对象。\n\n### ctx.response\nKoa 的 Response 对象。\n\n### ctx.state\n自定义命名空间，用于将信息从中间件传递到前端视图层\n```\nctx.state.user = await User.find(id);\n```\n\n### ctx.app\n应用实例引用。\n\n### ctx.cookies.get(name, [options])\n获取 cookie 中 name 的值 options为可选参数。\n  - signed：对cookie请求时需要设置签名。\n\nKoa 使用 [cookies模块](https://github.com/pillarjs/cookies),options参数只是简单地直接传递。\n\n### ctx.cookies.set(name, value, [options])\n设置 cookie 中 name值， options为可选参数。\n  - maxAge: 表示 Date.now() 到期的毫米数， number.\n  - signed: Cookie 签名\n  - expires: Cookie有效时间\n  - path: Cookie路径，默认为`/'`\n  - domain: Cookie的域\n  - secure: Cookie安全协议 false表示Cookie通过HTTP协议传送，true表示Cookie通过HTTPS协议传送。\n  - httpOnly: 服务器可访问的Cookie 默认为true\n  - overwrite: 一个布尔值，表示是否覆盖重写以前设置的同名的Cookie（默认为false）如果为true，在设置这个新Cookie时，将在同一个请求中设置所有相同名称的Cookie（不论路径或域）并从Set-Cookie头部中过滤掉。\n\nKoa 使用 [cookies模块](https://github.com/pillarjs/cookies),options参数只是简单地直接传递。\n\n### ctx.throw([msg], [status], [properties])\nHelper方法抛出一个.status属性默认为500的错误。该方法允许Koa准确的响应处理状态。\nKoa允许以下组合：\n```\nctx.throw(403);\nctx.throw('name required', 400);\nctx.throw(400, 'name required');\nctx.throw('something exploded');\n```\n举个例子 `ctx.throw('name required', 400)`等价于：\n```\nconst err = new Error('name required');\nerr.status = 400;\nerr.expose = true;\nthrow err;\n```\n请注意，这些是用户级错误，并会被标记为err.expose,这意味着消息会被准确描述为对客户端的响应，而并非使用在您不想泄漏失败细节的情景中。\n\n你可以根据需要将合并后的属性对象船钓错误中去，这对于向上级中间件请求的友好的机器化错误有着很好的装饰作用\n```\nctx.throw(401, 'access_denied', { user: user });\nctx.throw('access_denied', { user: user });\n```\nKoa 使用[http-errors](https://github.com/jshttp/http-errors)来创建错误。\n\n### ctx.assert(value, [status], [msg], [properties])\n当 !value时，Helper方法抛出类似于.throw()的错误。\n相当于node中的[assert](https://nodejs.org/api/assert.html)方法\n```\nctx.assert(ctx.state.user, 401, 'User not found. Please login!');\n```\nKoa 使用[http-assert](https://github.com/jshttp/http-assert)判断\n\n### ctx.respond\n为了避免Koa的内置响应处理，你可以直接设置 ctx.respond = false;\n如果你想使用原生的res对象代替Koa操作response，那么请使用这种方法。\n\n请注意，Koa并不支持这种使用方式，因为这有可能破坏Koa中间件和Koa本身的一些功能。\n这只能作为一种hack的方式，并只对希望在Koa的函数和中间件中使用传统的fn(req, res)的人带来便捷。\n\n### Request aliases\n以下的访问器别名与 [Request](#Request) 等价：\n```\nctx.header\nctx.headers\nctx.method\nctx.method=\nctx.url\nctx.url=\nctx.originalUrl\nctx.originalUrlctx.href\nctx.path\nctx.path=\nctx.query\nctx.query=\nctx.querystring\nctx.querystring=\nctx.host\nctx.hostname\nctx.fresh\nctx.stale\nctx.socket\nctx.protocol\nctx.secure\nctx.ip\nctx.ips\nctx.subdomains\nctx.is()\nctx.accepts()\nctx.acceptsEncodings()\nctx.acceptsLanguages()\nctx.get()\n```\n\n### Response aliases\n以下访问器别名与 [Response](#response)等价:\n```\nctx.body\nctx.body=\nctx.status\nctx.status=\nctx.message\nctx.message=\nctx.length\nctx.length=\nctx.type\nctx.type=\nctx.headerSent\nctx.rdirect()\nctx.attachment()\nctx.set()\nctx.append()\nctx.remove()\nctx.lastModified=\nctx.etag=\n```\n\n## <span id=\"request\">Request</span>\nKoa的Request对象是对node的Request对象进一步抽象，封装。\n提供了对日常HTTP服务器开发有用的一些功能函数\n\n### API\n\n#### request.header\n请求头对象\n\n#### request.headers\n请求头对象的别名\n\n#### request.method\n请求方法\n\n#### request.method=\n设置请求方法，在实现中间件时有很大作用，例如methodOverride()\n\n#### request.length\n以数字的形式返回request的内容长度(Content-lenght),或者返回undefined\n\n#### request.url\n获取请求url地址\n\n#### request.url=\n设置请求地址，用于重写url\n\n#### request.originalUrl\n获取请求原始url\n\n#### request.origin\n获取url来源，包括protocol和host\n```\nctx.request.origin\n// => http://example.com\n```\n\n#### request.href\n获取请求完整的URL，包括protpcol，host和url\n```\nctx.request.href\n// => http://example.com/foo/bar?q=1\n```\n\n#### request.path\n获取请求路径名。\n\n#### request.path=\n设置请求路径名，并保存'?'后面的部分（请求参数）\n\n#### request.querystring\n获取请求的查询参数(url中?后边的部分)不包含？\n\n#### request.querystring=\n设置查询参数\n\n#### request.search\n获取请求的查询参数，包含?\n\n#### request.search=\n设置请求的查询参数。\n\n#### request.host\n获取当前host(hostname: port) 当 app.proxy = true 时, 支持X-Forwarded-Host。\n\n#### request.hostname\n获取hostname，当 app.proxy = ture 时, 支持X-Forwarded-Host.\n\n#### request.type\n获取当前请求的 Conetent-Type 不包含如`charset`这样的参数。\n```\nconst ct = ctx.request.type\n// => \"image/png\"\n```\n\n#### request.charset\n获取当前请求的 charset 没有则返回undefined\n```\nctx.request.charset\n// => \"utf-8\"\n```\n\n#### request.query\n获取解析后的查询字符串，当请求中没有查询字符串时则返回一个空对象。\n请注意，这个方法不支持嵌套对象。\n例如：`color=blue&size=small`\n```\n{\n  color: 'blue',\n  size: 'small'\n}\n```\n\n#### request.query=\n根据给定的对象设置查询字符串。\n请注意，这个方法不支持嵌套对象。\n```\nctx.query = {next: '/login'}\n```\n\n#### request.fresh\n\n\n## <span id=\"response\">Response</span>\n","slug":"translate-koa2","published":1,"updated":"2017-04-04T11:46:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulk0018jbzes4s2m9x3","content":"<p>边学英语边学koa</p>\n<a id=\"more\"></a>\n<h2 id=\"KOA\"><a href=\"#KOA\" class=\"headerlink\" title=\"KOA\"></a>KOA</h2><h3 id=\"koa\"><a href=\"#koa\" class=\"headerlink\" title=\"koa\"></a>koa</h3><p>基于node.js的下一代web框架</p>\n<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>koa是由Express开发团队设计的新型Web框架，旨在为Web应用和Apis提供更小，更具表现力和更强大基础。通过组合利用generators，可以避免回调嵌套并大大提高处理错误的能力。koa不在核心中捆绑任何中间件，仅仅提供了一套轻量优雅的方法库，使得编写服务更加便捷。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>koa需要 node &gt;= ^7.6.0版本来支持ES2015和async。<br>你可以安装node版本控制器来升级到需求版本。<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install n -g</div><div class=\"line\">n <span class=\"number\">7.6</span>.<span class=\"number\">0</span></div><div class=\"line\">npm install koa</div><div class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">my-koa-app</span>.js</div></pre></td></tr></table></figure></p>\n<h3 id=\"Async与Babel\"><a href=\"#Async与Babel\" class=\"headerlink\" title=\"Async与Babel\"></a>Async与Babel</h3><p>要想在node低于^7.6.0的环境，koa中使用Async函数，我们推荐使用<a href=\"https://babeljs.io/docs/usage/babel-register/\" target=\"_blank\" rel=\"external\">babel’s require hook</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-core/register'</span>);</div><div class=\"line\"><span class=\"comment\">// require the rest of the app that needs to be transpiled after the hook</span></div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'./app'</span>);</div></pre></td></tr></table></figure></p>\n<p>为了解析和转换Async函数， 你至少应该有<a href=\"http://babeljs.io/docs/plugins/transform-async-to-generator/\" target=\"_blank\" rel=\"external\">transform-async-to-generator</a>或<a href=\"http://babeljs.io/docs/plugins/transform-async-to-module-method/\" target=\"_blank\" rel=\"external\">transform-async-to-module-method</a>插件。<br>举个例，在你的<code>.babelrc</code>文件中，你应该有如下配置:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-async-to-generator\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你当然也可以使用<a href=\"http://babeljs.io/docs/plugins/preset-stage-3/\" target=\"_blank\" rel=\"external\">Stage 3 preset</a>代替</p>\n<blockquote>\n<p>讲道理干嘛这么麻烦。。不如用node^7.6.0</p>\n</blockquote>\n<h3 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h3><p>koa应用是一个包含一系列中间件的对象，这些中间件函数根据request请求按照类似堆栈的方式构成依次执行。Koa类似于其他您可能使用过的中间件系统（如Ruby‘s Rack，Connect等）。然而Koa的核心设计思路是为其他低等级的中间件层提供高级语法糖，以提高其可操作性和稳定性，并使编写中间件变得更便捷。</p>\n<p>Koa包含了像content-negotiation(内容协商)、cache freshness（缓存刷新）、proxy support（代理支持）和 redirection（重定向）等常用任务方法。尽管有相当大数量的函数支持，Koa仅仅包含很小一部分，因为Koa没有中间件捆绑。</p>\n<p>编写一个 hello world 应用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</div><div class=\"line\">  ctx.body = <span class=\"string\">'Hello World'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Cascading—级联\"><a href=\"#Cascading—级联\" class=\"headerlink\" title=\"Cascading—级联\"></a>Cascading—级联</h3><p>Koa中间件以更传统的方式级联，像你习惯使用的一些类似工具——在过去这使得用户很难友好的使用node频繁回调。然而通过使用Async函数，我们能”真正”实现中间件。Connect的实现是简单地通过一系列的函数传递控制权，直到一个函数返回。而Koa则是通调用下一个中间件，然后将控制权逐级返还到上级中间件。</p>\n<p>下面的例子将返回 <code>Hello World</code>，然而当请求开始时，将先经过x-response-time和logging中间件，记录中间件执行起始时间，然后继续通过response中间件得到控制权。当一个中间件调用 next() 时，该函数暂停并将控制权传递给定义的下一个中间件。当没有更多的下级中间件执行，堆栈将释放，并且将逆序执行每个中间件的代码。</p>\n<blockquote>\n<p>原文并未使用箭头函数</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"> <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// x-response-time</span></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">  <span class=\"keyword\">await</span> next();</div><div class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - start;</div><div class=\"line\">  ctx.set(<span class=\"string\">'X-Response-Time'</span>, <span class=\"string\">`<span class=\"subst\">$&#123;ms&#125;</span>ms`</span>);</div><div class=\"line\"> &#125;);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// logger</span></div><div class=\"line\"></div><div class=\"line\"> app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">  <span class=\"keyword\">await</span> next();</div><div class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - start;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;ctx.method&#125;</span> <span class=\"subst\">$&#123;ctx.url&#125;</span> - <span class=\"subst\">$&#123;ms&#125;</span>`</span>);</div><div class=\"line\"> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// response</span></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</div><div class=\"line\">  ctx.body = <span class=\"string\">'Hello World'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h3><p>应用配置是实例app的属性，目前支持以下配置：</p>\n<ul>\n<li>app.env 默认为NODE_DEV或development</li>\n<li>app.proxy 如果为true，则header域将被信任</li>\n<li>app.subdomainOffset 默认为2 表示.subdomains所忽略的字符偏移量</li>\n</ul>\n<h3 id=\"app-listen-…\"><a href=\"#app-listen-…\" class=\"headerlink\" title=\"app.listen(…)\"></a>app.listen(…)</h3><p> Koa应用并不是一个HTTP服务器的单一映射表现方式。一个或多个Koa应用可以被一起挂载，形成一个具有单一HTTP服务器的较大型的应用。</p>\n<p> 创建并返回一个HTTP服务器，将给定的参数传递给Server#listen()。<a href=\"https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback\" target=\"_blank\" rel=\"external\">(参数配置参考)</a><br> 以下为创建一个绑定3000端口的简单Koa应用：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<p>app.listen(…)实际上以下代码的语法糖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\">http.createServer(app.callback().listen(<span class=\"number\">3000</span>));</div></pre></td></tr></table></figure>\n<p>这意味这你可以同时启动HTTP和HTTPS或多个地址相同的引用程序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\">http.createServer(app.callback().listen(<span class=\"number\">3000</span>));</div><div class=\"line\">http.createServer(app.callback().listen(<span class=\"number\">3000</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"app-callback\"><a href=\"#app-callback\" class=\"headerlink\" title=\"app.callback()\"></a>app.callback()</h3><p>返回一个适用于http。createServer()方法的回调函数来处理请求。你也可以使用这个回调函数将你的Koa应用挂载到 Connect/Express 应用上。</p>\n<h3 id=\"app-use-function\"><a href=\"#app-use-function\" class=\"headerlink\" title=\"app.use(function)\"></a>app.use(function)</h3><p>将给定的中间件添加到应用中<a href=\"https://github.com/koajs/koa/wiki#middleware\" target=\"_blank\" rel=\"external\">(参考Middleware)</a></p>\n<h3 id=\"app-keys\"><a href=\"#app-keys\" class=\"headerlink\" title=\"app.keys =\"></a>app.keys =</h3><p>设置签名Cookie密钥<br>该密钥将会被传递给<a href=\"https://github.com/koajs/koa/wiki#middleware\" target=\"_blank\" rel=\"external\">KEyGrip</a>。<br>你也可以传递自己生成的KEyGrip实例。如下：<br><figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.keys = [ <span class=\"symbol\">'im</span> a newer secret', <span class=\"symbol\">'i</span> like turtle'];</div><div class=\"line\">app.keys = new <span class=\"type\">KeyGrip</span>([<span class=\"symbol\">'im</span> a newer secret', <span class=\"symbol\">'i</span> like turtle'], <span class=\"symbol\">'sha256'</span>);</div></pre></td></tr></table></figure></p>\n<p>在进行cookie签名时。，这些键只有在设置signed 为 true 时才会使用密钥进行加密：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.cookies.<span class=\"keyword\">set</span>(<span class=\"string\">'name'</span>, <span class=\"string\">'tobi'</span>, &#123;signed: <span class=\"literal\">true</span>&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"app-context\"><a href=\"#app-context\" class=\"headerlink\" title=\"app.context\"></a>app.context</h3><p>app.context是从ctx中创建的原型。你可以通过编辑app.context添加额外的属性到ctx上。这对于添加属性或方法到ctx上在整个应用程序上使用非常有用，这也可能会更为有效（无中间件）并更容易（更少使用require())牺牲更多依赖在ctx上，这可以被视为反模式。</p>\n<p>举个例，添加一个数据库引用到ctx:<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">app</span>.context.<span class=\"keyword\">db</span> = <span class=\"keyword\">db</span>();</div><div class=\"line\"><span class=\"keyword\">app</span>.<span class=\"keyword\">use</span>(async (ctx) =&gt; &#123;</div><div class=\"line\">  console.<span class=\"built_in\">log</span>(ctx.<span class=\"keyword\">db</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<p>Note：</p>\n<ul>\n<li>ctx上的许多属性定义时使用了，getters，setters和Object.defineProperty()。你只能编辑这些属性（不推荐）通过使用Object.defineProperty app.context()。<a href=\"https://github.com/koajs/koa/issues/652\" target=\"_blank\" rel=\"external\">(See more)</a></li>\n<li>这一段有点晕。。。</li>\n</ul>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>默认情况下，Koa会讲所有错误日志输出到stderr中，除非 app。silent = true。默认错误处理页不会在 err.status = 404 或 err.expose = true 时输出错误。想要执行自定义错误处理逻辑（例如 centralized logging），你可以添加“error”事件监听器。<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">app</span>.<span class=\"keyword\">on</span>('<span class=\"keyword\">error</span>', <span class=\"keyword\">err</span> =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">log</span>.<span class=\"keyword\">error</span>('serrver <span class=\"keyword\">error</span>', <span class=\"keyword\">err</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果在 req／res 周期中出现error，并且不能够影响客户端时，Context实例也会被传递到error事件监听器的回调函数中：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">app</span>.<span class=\"keyword\">on</span>('<span class=\"keyword\">error</span>', (<span class=\"keyword\">err</span>, ctx) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">log</span>.<span class=\"keyword\">error</span>('server <span class=\"keyword\">error</span>', <span class=\"keyword\">err</span>, ctx);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>当发生错误并且仍然可以响应客户端时，例如没有数据被写入到socker中时，Koa将返回一个 500／服务器内部错误。<br>无论哪种情况，Koa都会生成一个应用级别的错误，来实现日志记录。</p>\n<h2 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h2><p>Koa Context将node的request和response对象封装到一个单独的对象中，为编写web应用和API提供了很多有用的方法。这些操作在开发HTTP服务器中经常被使用，因此被添加在context这一层级总而不是更高层级的框架中，这将迫使中间件需要重新实现这些公共的方法。<br>Context 根据每个request创建，并在中间件中作为接收器（receiver ）或通过 ctx 标识符来引用<br>如下代码展示：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</div><div class=\"line\">  ctx; <span class=\"comment\">// is the Context</span></div><div class=\"line\">  ctx.request; <span class=\"comment\">// is a koa Request</span></div><div class=\"line\">  ctx.response; <span class=\"comment\">// is a koa Response</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>许多Context的访问器和方法为了方便起见，简单地委托给ctx.request和ctx.response 所对应的等价方法。<br>举个例子，ctx.type和ctx.length 代理了 response对象中对应的方法， ctx.path和ctx.method代理了 resquest 对象中对应的方法。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Context 具体的方法和访问器。</p>\n<h3 id=\"ctx-req\"><a href=\"#ctx-req\" class=\"headerlink\" title=\"ctx.req\"></a>ctx.req</h3><p>Node的request对象</p>\n<h3 id=\"ctx-res\"><a href=\"#ctx-res\" class=\"headerlink\" title=\"ctx.res\"></a>ctx.res</h3><p>Node的response对象</p>\n<p>Koa不支持直接调用底层response处理。请避免使用以下Node属性：</p>\n<ul>\n<li>res.statusCode</li>\n<li>res.writeHead()</li>\n<li>res.write()</li>\n<li>res.end()</li>\n</ul>\n<h3 id=\"ctx-request\"><a href=\"#ctx-request\" class=\"headerlink\" title=\"ctx.request\"></a>ctx.request</h3><p>Koa 的 Request 对象。</p>\n<h3 id=\"ctx-response\"><a href=\"#ctx-response\" class=\"headerlink\" title=\"ctx.response\"></a>ctx.response</h3><p>Koa 的 Response 对象。</p>\n<h3 id=\"ctx-state\"><a href=\"#ctx-state\" class=\"headerlink\" title=\"ctx.state\"></a>ctx.state</h3><p>自定义命名空间，用于将信息从中间件传递到前端视图层<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.<span class=\"keyword\">state</span>.<span class=\"keyword\">user</span> = await User.find(id);</div></pre></td></tr></table></figure></p>\n<h3 id=\"ctx-app\"><a href=\"#ctx-app\" class=\"headerlink\" title=\"ctx.app\"></a>ctx.app</h3><p>应用实例引用。</p>\n<h3 id=\"ctx-cookies-get-name-options\"><a href=\"#ctx-cookies-get-name-options\" class=\"headerlink\" title=\"ctx.cookies.get(name, [options])\"></a>ctx.cookies.get(name, [options])</h3><p>获取 cookie 中 name 的值 options为可选参数。</p>\n<ul>\n<li>signed：对cookie请求时需要设置签名。</li>\n</ul>\n<p>Koa 使用 <a href=\"https://github.com/pillarjs/cookies\" target=\"_blank\" rel=\"external\">cookies模块</a>,options参数只是简单地直接传递。</p>\n<h3 id=\"ctx-cookies-set-name-value-options\"><a href=\"#ctx-cookies-set-name-value-options\" class=\"headerlink\" title=\"ctx.cookies.set(name, value, [options])\"></a>ctx.cookies.set(name, value, [options])</h3><p>设置 cookie 中 name值， options为可选参数。</p>\n<ul>\n<li>maxAge: 表示 Date.now() 到期的毫米数， number.</li>\n<li>signed: Cookie 签名</li>\n<li>expires: Cookie有效时间</li>\n<li>path: Cookie路径，默认为<code>/&#39;</code></li>\n<li>domain: Cookie的域</li>\n<li>secure: Cookie安全协议 false表示Cookie通过HTTP协议传送，true表示Cookie通过HTTPS协议传送。</li>\n<li>httpOnly: 服务器可访问的Cookie 默认为true</li>\n<li>overwrite: 一个布尔值，表示是否覆盖重写以前设置的同名的Cookie（默认为false）如果为true，在设置这个新Cookie时，将在同一个请求中设置所有相同名称的Cookie（不论路径或域）并从Set-Cookie头部中过滤掉。</li>\n</ul>\n<p>Koa 使用 <a href=\"https://github.com/pillarjs/cookies\" target=\"_blank\" rel=\"external\">cookies模块</a>,options参数只是简单地直接传递。</p>\n<h3 id=\"ctx-throw-msg-status-properties\"><a href=\"#ctx-throw-msg-status-properties\" class=\"headerlink\" title=\"ctx.throw([msg], [status], [properties])\"></a>ctx.throw([msg], [status], [properties])</h3><p>Helper方法抛出一个.status属性默认为500的错误。该方法允许Koa准确的响应处理状态。<br>Koa允许以下组合：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.<span class=\"keyword\">throw</span>(<span class=\"number\">403</span>);</div><div class=\"line\">ctx.<span class=\"keyword\">throw</span>(<span class=\"string\">'name required'</span>, <span class=\"number\">400</span>);</div><div class=\"line\">ctx.<span class=\"keyword\">throw</span>(<span class=\"number\">400</span>, <span class=\"string\">'name required'</span>);</div><div class=\"line\">ctx.<span class=\"keyword\">throw</span>(<span class=\"string\">'something exploded'</span>);</div></pre></td></tr></table></figure></p>\n<p>举个例子 <code>ctx.throw(&#39;name required&#39;, 400)</code>等价于：<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">err</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">Error</span>(<span class=\"comment\">'name required');</span></div><div class=\"line\"><span class=\"built_in\">err</span>.status = <span class=\"number\">400</span>;</div><div class=\"line\"><span class=\"built_in\">err</span>.expose = <span class=\"literal\">true</span>;</div><div class=\"line\">throw <span class=\"built_in\">err</span>;</div></pre></td></tr></table></figure></p>\n<p>请注意，这些是用户级错误，并会被标记为err.expose,这意味着消息会被准确描述为对客户端的响应，而并非使用在您不想泄漏失败细节的情景中。</p>\n<p>你可以根据需要将合并后的属性对象船钓错误中去，这对于向上级中间件请求的友好的机器化错误有着很好的装饰作用<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.throw(<span class=\"number\">401</span>, <span class=\"string\">'access_denied'</span>, &#123; <span class=\"keyword\">user</span>: <span class=\"keyword\">user</span> &#125;);</div><div class=\"line\">ctx.throw(<span class=\"string\">'access_denied'</span>, &#123; <span class=\"keyword\">user</span>: <span class=\"keyword\">user</span> &#125;);</div></pre></td></tr></table></figure></p>\n<p>Koa 使用<a href=\"https://github.com/jshttp/http-errors\" target=\"_blank\" rel=\"external\">http-errors</a>来创建错误。</p>\n<h3 id=\"ctx-assert-value-status-msg-properties\"><a href=\"#ctx-assert-value-status-msg-properties\" class=\"headerlink\" title=\"ctx.assert(value, [status], [msg], [properties])\"></a>ctx.assert(value, [status], [msg], [properties])</h3><p>当 !value时，Helper方法抛出类似于.throw()的错误。<br>相当于node中的<a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\" rel=\"external\">assert</a>方法<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.assert(ctx.<span class=\"keyword\">state</span>.<span class=\"keyword\">user</span>, <span class=\"number\">401</span>, 'User not found. Please login!');</div></pre></td></tr></table></figure></p>\n<p>Koa 使用<a href=\"https://github.com/jshttp/http-assert\" target=\"_blank\" rel=\"external\">http-assert</a>判断</p>\n<h3 id=\"ctx-respond\"><a href=\"#ctx-respond\" class=\"headerlink\" title=\"ctx.respond\"></a>ctx.respond</h3><p>为了避免Koa的内置响应处理，你可以直接设置 ctx.respond = false;<br>如果你想使用原生的res对象代替Koa操作response，那么请使用这种方法。</p>\n<p>请注意，Koa并不支持这种使用方式，因为这有可能破坏Koa中间件和Koa本身的一些功能。<br>这只能作为一种hack的方式，并只对希望在Koa的函数和中间件中使用传统的fn(req, res)的人带来便捷。</p>\n<h3 id=\"Request-aliases\"><a href=\"#Request-aliases\" class=\"headerlink\" title=\"Request aliases\"></a>Request aliases</h3><p>以下的访问器别名与 <a href=\"#Request\">Request</a> 等价：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.header</div><div class=\"line\">ctx.headers</div><div class=\"line\">ctx.method</div><div class=\"line\">ctx.method=</div><div class=\"line\">ctx.url</div><div class=\"line\">ctx.url=</div><div class=\"line\">ctx.originalUrl</div><div class=\"line\">ctx<span class=\"selector-class\">.originalUrlctx</span><span class=\"selector-class\">.href</span></div><div class=\"line\">ctx.path</div><div class=\"line\">ctx.path=</div><div class=\"line\">ctx.query</div><div class=\"line\">ctx.query=</div><div class=\"line\">ctx.querystring</div><div class=\"line\">ctx.querystring=</div><div class=\"line\">ctx.host</div><div class=\"line\">ctx.hostname</div><div class=\"line\">ctx.fresh</div><div class=\"line\">ctx.stale</div><div class=\"line\">ctx.socket</div><div class=\"line\">ctx.protocol</div><div class=\"line\">ctx.secure</div><div class=\"line\">ctx.ip</div><div class=\"line\">ctx.ips</div><div class=\"line\">ctx.subdomains</div><div class=\"line\">ctx.is()</div><div class=\"line\">ctx.accepts()</div><div class=\"line\">ctx.acceptsEncodings()</div><div class=\"line\">ctx.acceptsLanguages()</div><div class=\"line\">ctx.get()</div></pre></td></tr></table></figure></p>\n<h3 id=\"Response-aliases\"><a href=\"#Response-aliases\" class=\"headerlink\" title=\"Response aliases\"></a>Response aliases</h3><p>以下访问器别名与 <a href=\"#response\">Response</a>等价:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.body</div><div class=\"line\">ctx.body=</div><div class=\"line\">ctx.status</div><div class=\"line\">ctx.status=</div><div class=\"line\">ctx.message</div><div class=\"line\">ctx.message=</div><div class=\"line\">ctx.length</div><div class=\"line\">ctx.length=</div><div class=\"line\">ctx.type</div><div class=\"line\">ctx.type=</div><div class=\"line\">ctx.headerSent</div><div class=\"line\">ctx.rdirect()</div><div class=\"line\">ctx.attachment()</div><div class=\"line\">ctx.set()</div><div class=\"line\">ctx.append()</div><div class=\"line\">ctx.remove()</div><div class=\"line\">ctx.lastModified=</div><div class=\"line\">ctx.etag=</div></pre></td></tr></table></figure></p>\n<h2 id=\"Request\"><a href=\"#Request\" class=\"headerlink\" title=\"Request\"></a><span id=\"request\">Request</span></h2><p>Koa的Request对象是对node的Request对象进一步抽象，封装。<br>提供了对日常HTTP服务器开发有用的一些功能函数</p>\n<h3 id=\"API-1\"><a href=\"#API-1\" class=\"headerlink\" title=\"API\"></a>API</h3><h4 id=\"request-header\"><a href=\"#request-header\" class=\"headerlink\" title=\"request.header\"></a>request.header</h4><p>请求头对象</p>\n<h4 id=\"request-headers\"><a href=\"#request-headers\" class=\"headerlink\" title=\"request.headers\"></a>request.headers</h4><p>请求头对象的别名</p>\n<h4 id=\"request-method\"><a href=\"#request-method\" class=\"headerlink\" title=\"request.method\"></a>request.method</h4><p>请求方法</p>\n<h4 id=\"request-method-1\"><a href=\"#request-method-1\" class=\"headerlink\" title=\"request.method=\"></a>request.method=</h4><p>设置请求方法，在实现中间件时有很大作用，例如methodOverride()</p>\n<h4 id=\"request-length\"><a href=\"#request-length\" class=\"headerlink\" title=\"request.length\"></a>request.length</h4><p>以数字的形式返回request的内容长度(Content-lenght),或者返回undefined</p>\n<h4 id=\"request-url\"><a href=\"#request-url\" class=\"headerlink\" title=\"request.url\"></a>request.url</h4><p>获取请求url地址</p>\n<h4 id=\"request-url-1\"><a href=\"#request-url-1\" class=\"headerlink\" title=\"request.url=\"></a>request.url=</h4><p>设置请求地址，用于重写url</p>\n<h4 id=\"request-originalUrl\"><a href=\"#request-originalUrl\" class=\"headerlink\" title=\"request.originalUrl\"></a>request.originalUrl</h4><p>获取请求原始url</p>\n<h4 id=\"request-origin\"><a href=\"#request-origin\" class=\"headerlink\" title=\"request.origin\"></a>request.origin</h4><p>获取url来源，包括protocol和host<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx<span class=\"selector-class\">.request</span><span class=\"selector-class\">.origin</span></div><div class=\"line\"><span class=\"comment\">// =&gt; http://example.com</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"request-href\"><a href=\"#request-href\" class=\"headerlink\" title=\"request.href\"></a>request.href</h4><p>获取请求完整的URL，包括protpcol，host和url<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx<span class=\"selector-class\">.request</span><span class=\"selector-class\">.href</span></div><div class=\"line\"><span class=\"comment\">// =&gt; http://example.com/foo/bar?q=1</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"request-path\"><a href=\"#request-path\" class=\"headerlink\" title=\"request.path\"></a>request.path</h4><p>获取请求路径名。</p>\n<h4 id=\"request-path-1\"><a href=\"#request-path-1\" class=\"headerlink\" title=\"request.path=\"></a>request.path=</h4><p>设置请求路径名，并保存’?’后面的部分（请求参数）</p>\n<h4 id=\"request-querystring\"><a href=\"#request-querystring\" class=\"headerlink\" title=\"request.querystring\"></a>request.querystring</h4><p>获取请求的查询参数(url中?后边的部分)不包含？</p>\n<h4 id=\"request-querystring-1\"><a href=\"#request-querystring-1\" class=\"headerlink\" title=\"request.querystring=\"></a>request.querystring=</h4><p>设置查询参数</p>\n<h4 id=\"request-search\"><a href=\"#request-search\" class=\"headerlink\" title=\"request.search\"></a>request.search</h4><p>获取请求的查询参数，包含?</p>\n<h4 id=\"request-search-1\"><a href=\"#request-search-1\" class=\"headerlink\" title=\"request.search=\"></a>request.search=</h4><p>设置请求的查询参数。</p>\n<h4 id=\"request-host\"><a href=\"#request-host\" class=\"headerlink\" title=\"request.host\"></a>request.host</h4><p>获取当前host(hostname: port) 当 app.proxy = true 时, 支持X-Forwarded-Host。</p>\n<h4 id=\"request-hostname\"><a href=\"#request-hostname\" class=\"headerlink\" title=\"request.hostname\"></a>request.hostname</h4><p>获取hostname，当 app.proxy = ture 时, 支持X-Forwarded-Host.</p>\n<h4 id=\"request-type\"><a href=\"#request-type\" class=\"headerlink\" title=\"request.type\"></a>request.type</h4><p>获取当前请求的 Conetent-Type 不包含如<code>charset</code>这样的参数。<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">ct</span> = ctx.request.<span class=\"keyword\">type</span></div><div class=\"line\"><span class=\"comment\">// =&gt; \"image/png\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"request-charset\"><a href=\"#request-charset\" class=\"headerlink\" title=\"request.charset\"></a>request.charset</h4><p>获取当前请求的 charset 没有则返回undefined<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx<span class=\"selector-class\">.request</span><span class=\"selector-class\">.charset</span></div><div class=\"line\"><span class=\"comment\">// =&gt; \"utf-8\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"request-query\"><a href=\"#request-query\" class=\"headerlink\" title=\"request.query\"></a>request.query</h4><p>获取解析后的查询字符串，当请求中没有查询字符串时则返回一个空对象。<br>请注意，这个方法不支持嵌套对象。<br>例如：<code>color=blue&amp;size=small</code><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"string\">'blue'</span>,</div><div class=\"line\">  size: <span class=\"string\">'small'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"request-query-1\"><a href=\"#request-query-1\" class=\"headerlink\" title=\"request.query=\"></a>request.query=</h4><p>根据给定的对象设置查询字符串。<br>请注意，这个方法不支持嵌套对象。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx<span class=\"selector-class\">.query</span> = &#123;next: <span class=\"string\">'/login'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"request-fresh\"><a href=\"#request-fresh\" class=\"headerlink\" title=\"request.fresh\"></a>request.fresh</h4><h2 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a><span id=\"response\">Response</span></h2>","site":{"data":{}},"excerpt":"<p>边学英语边学koa</p>","more":"<h2 id=\"KOA\"><a href=\"#KOA\" class=\"headerlink\" title=\"KOA\"></a>KOA</h2><h3 id=\"koa\"><a href=\"#koa\" class=\"headerlink\" title=\"koa\"></a>koa</h3><p>基于node.js的下一代web框架</p>\n<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>koa是由Express开发团队设计的新型Web框架，旨在为Web应用和Apis提供更小，更具表现力和更强大基础。通过组合利用generators，可以避免回调嵌套并大大提高处理错误的能力。koa不在核心中捆绑任何中间件，仅仅提供了一套轻量优雅的方法库，使得编写服务更加便捷。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>koa需要 node &gt;= ^7.6.0版本来支持ES2015和async。<br>你可以安装node版本控制器来升级到需求版本。<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install n -g</div><div class=\"line\">n <span class=\"number\">7.6</span>.<span class=\"number\">0</span></div><div class=\"line\">npm install koa</div><div class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">my-koa-app</span>.js</div></pre></td></tr></table></figure></p>\n<h3 id=\"Async与Babel\"><a href=\"#Async与Babel\" class=\"headerlink\" title=\"Async与Babel\"></a>Async与Babel</h3><p>要想在node低于^7.6.0的环境，koa中使用Async函数，我们推荐使用<a href=\"https://babeljs.io/docs/usage/babel-register/\" target=\"_blank\" rel=\"external\">babel’s require hook</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-core/register'</span>);</div><div class=\"line\"><span class=\"comment\">// require the rest of the app that needs to be transpiled after the hook</span></div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'./app'</span>);</div></pre></td></tr></table></figure></p>\n<p>为了解析和转换Async函数， 你至少应该有<a href=\"http://babeljs.io/docs/plugins/transform-async-to-generator/\" target=\"_blank\" rel=\"external\">transform-async-to-generator</a>或<a href=\"http://babeljs.io/docs/plugins/transform-async-to-module-method/\" target=\"_blank\" rel=\"external\">transform-async-to-module-method</a>插件。<br>举个例，在你的<code>.babelrc</code>文件中，你应该有如下配置:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-async-to-generator\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你当然也可以使用<a href=\"http://babeljs.io/docs/plugins/preset-stage-3/\" target=\"_blank\" rel=\"external\">Stage 3 preset</a>代替</p>\n<blockquote>\n<p>讲道理干嘛这么麻烦。。不如用node^7.6.0</p>\n</blockquote>\n<h3 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h3><p>koa应用是一个包含一系列中间件的对象，这些中间件函数根据request请求按照类似堆栈的方式构成依次执行。Koa类似于其他您可能使用过的中间件系统（如Ruby‘s Rack，Connect等）。然而Koa的核心设计思路是为其他低等级的中间件层提供高级语法糖，以提高其可操作性和稳定性，并使编写中间件变得更便捷。</p>\n<p>Koa包含了像content-negotiation(内容协商)、cache freshness（缓存刷新）、proxy support（代理支持）和 redirection（重定向）等常用任务方法。尽管有相当大数量的函数支持，Koa仅仅包含很小一部分，因为Koa没有中间件捆绑。</p>\n<p>编写一个 hello world 应用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</div><div class=\"line\">  ctx.body = <span class=\"string\">'Hello World'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Cascading—级联\"><a href=\"#Cascading—级联\" class=\"headerlink\" title=\"Cascading—级联\"></a>Cascading—级联</h3><p>Koa中间件以更传统的方式级联，像你习惯使用的一些类似工具——在过去这使得用户很难友好的使用node频繁回调。然而通过使用Async函数，我们能”真正”实现中间件。Connect的实现是简单地通过一系列的函数传递控制权，直到一个函数返回。而Koa则是通调用下一个中间件，然后将控制权逐级返还到上级中间件。</p>\n<p>下面的例子将返回 <code>Hello World</code>，然而当请求开始时，将先经过x-response-time和logging中间件，记录中间件执行起始时间，然后继续通过response中间件得到控制权。当一个中间件调用 next() 时，该函数暂停并将控制权传递给定义的下一个中间件。当没有更多的下级中间件执行，堆栈将释放，并且将逆序执行每个中间件的代码。</p>\n<blockquote>\n<p>原文并未使用箭头函数</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"> <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// x-response-time</span></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">  <span class=\"keyword\">await</span> next();</div><div class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - start;</div><div class=\"line\">  ctx.set(<span class=\"string\">'X-Response-Time'</span>, <span class=\"string\">`<span class=\"subst\">$&#123;ms&#125;</span>ms`</span>);</div><div class=\"line\"> &#125;);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// logger</span></div><div class=\"line\"></div><div class=\"line\"> app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">  <span class=\"keyword\">await</span> next();</div><div class=\"line\">  <span class=\"keyword\">const</span> ms = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - start;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;ctx.method&#125;</span> <span class=\"subst\">$&#123;ctx.url&#125;</span> - <span class=\"subst\">$&#123;ms&#125;</span>`</span>);</div><div class=\"line\"> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// response</span></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</div><div class=\"line\">  ctx.body = <span class=\"string\">'Hello World'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h3><p>应用配置是实例app的属性，目前支持以下配置：</p>\n<ul>\n<li>app.env 默认为NODE_DEV或development</li>\n<li>app.proxy 如果为true，则header域将被信任</li>\n<li>app.subdomainOffset 默认为2 表示.subdomains所忽略的字符偏移量</li>\n</ul>\n<h3 id=\"app-listen-…\"><a href=\"#app-listen-…\" class=\"headerlink\" title=\"app.listen(…)\"></a>app.listen(…)</h3><p> Koa应用并不是一个HTTP服务器的单一映射表现方式。一个或多个Koa应用可以被一起挂载，形成一个具有单一HTTP服务器的较大型的应用。</p>\n<p> 创建并返回一个HTTP服务器，将给定的参数传递给Server#listen()。<a href=\"https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback\" target=\"_blank\" rel=\"external\">(参数配置参考)</a><br> 以下为创建一个绑定3000端口的简单Koa应用：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<p>app.listen(…)实际上以下代码的语法糖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\">http.createServer(app.callback().listen(<span class=\"number\">3000</span>));</div></pre></td></tr></table></figure>\n<p>这意味这你可以同时启动HTTP和HTTPS或多个地址相同的引用程序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\">http.createServer(app.callback().listen(<span class=\"number\">3000</span>));</div><div class=\"line\">http.createServer(app.callback().listen(<span class=\"number\">3000</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"app-callback\"><a href=\"#app-callback\" class=\"headerlink\" title=\"app.callback()\"></a>app.callback()</h3><p>返回一个适用于http。createServer()方法的回调函数来处理请求。你也可以使用这个回调函数将你的Koa应用挂载到 Connect/Express 应用上。</p>\n<h3 id=\"app-use-function\"><a href=\"#app-use-function\" class=\"headerlink\" title=\"app.use(function)\"></a>app.use(function)</h3><p>将给定的中间件添加到应用中<a href=\"https://github.com/koajs/koa/wiki#middleware\" target=\"_blank\" rel=\"external\">(参考Middleware)</a></p>\n<h3 id=\"app-keys\"><a href=\"#app-keys\" class=\"headerlink\" title=\"app.keys =\"></a>app.keys =</h3><p>设置签名Cookie密钥<br>该密钥将会被传递给<a href=\"https://github.com/koajs/koa/wiki#middleware\" target=\"_blank\" rel=\"external\">KEyGrip</a>。<br>你也可以传递自己生成的KEyGrip实例。如下：<br><figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.keys = [ <span class=\"symbol\">'im</span> a newer secret', <span class=\"symbol\">'i</span> like turtle'];</div><div class=\"line\">app.keys = new <span class=\"type\">KeyGrip</span>([<span class=\"symbol\">'im</span> a newer secret', <span class=\"symbol\">'i</span> like turtle'], <span class=\"symbol\">'sha256'</span>);</div></pre></td></tr></table></figure></p>\n<p>在进行cookie签名时。，这些键只有在设置signed 为 true 时才会使用密钥进行加密：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.cookies.<span class=\"keyword\">set</span>(<span class=\"string\">'name'</span>, <span class=\"string\">'tobi'</span>, &#123;signed: <span class=\"literal\">true</span>&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"app-context\"><a href=\"#app-context\" class=\"headerlink\" title=\"app.context\"></a>app.context</h3><p>app.context是从ctx中创建的原型。你可以通过编辑app.context添加额外的属性到ctx上。这对于添加属性或方法到ctx上在整个应用程序上使用非常有用，这也可能会更为有效（无中间件）并更容易（更少使用require())牺牲更多依赖在ctx上，这可以被视为反模式。</p>\n<p>举个例，添加一个数据库引用到ctx:<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">app</span>.context.<span class=\"keyword\">db</span> = <span class=\"keyword\">db</span>();</div><div class=\"line\"><span class=\"keyword\">app</span>.<span class=\"keyword\">use</span>(async (ctx) =&gt; &#123;</div><div class=\"line\">  console.<span class=\"built_in\">log</span>(ctx.<span class=\"keyword\">db</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<p>Note：</p>\n<ul>\n<li>ctx上的许多属性定义时使用了，getters，setters和Object.defineProperty()。你只能编辑这些属性（不推荐）通过使用Object.defineProperty app.context()。<a href=\"https://github.com/koajs/koa/issues/652\" target=\"_blank\" rel=\"external\">(See more)</a></li>\n<li>这一段有点晕。。。</li>\n</ul>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>默认情况下，Koa会讲所有错误日志输出到stderr中，除非 app。silent = true。默认错误处理页不会在 err.status = 404 或 err.expose = true 时输出错误。想要执行自定义错误处理逻辑（例如 centralized logging），你可以添加“error”事件监听器。<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">app</span>.<span class=\"keyword\">on</span>('<span class=\"keyword\">error</span>', <span class=\"keyword\">err</span> =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">log</span>.<span class=\"keyword\">error</span>('serrver <span class=\"keyword\">error</span>', <span class=\"keyword\">err</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果在 req／res 周期中出现error，并且不能够影响客户端时，Context实例也会被传递到error事件监听器的回调函数中：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">app</span>.<span class=\"keyword\">on</span>('<span class=\"keyword\">error</span>', (<span class=\"keyword\">err</span>, ctx) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">log</span>.<span class=\"keyword\">error</span>('server <span class=\"keyword\">error</span>', <span class=\"keyword\">err</span>, ctx);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>当发生错误并且仍然可以响应客户端时，例如没有数据被写入到socker中时，Koa将返回一个 500／服务器内部错误。<br>无论哪种情况，Koa都会生成一个应用级别的错误，来实现日志记录。</p>\n<h2 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h2><p>Koa Context将node的request和response对象封装到一个单独的对象中，为编写web应用和API提供了很多有用的方法。这些操作在开发HTTP服务器中经常被使用，因此被添加在context这一层级总而不是更高层级的框架中，这将迫使中间件需要重新实现这些公共的方法。<br>Context 根据每个request创建，并在中间件中作为接收器（receiver ）或通过 ctx 标识符来引用<br>如下代码展示：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</div><div class=\"line\">  ctx; <span class=\"comment\">// is the Context</span></div><div class=\"line\">  ctx.request; <span class=\"comment\">// is a koa Request</span></div><div class=\"line\">  ctx.response; <span class=\"comment\">// is a koa Response</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>许多Context的访问器和方法为了方便起见，简单地委托给ctx.request和ctx.response 所对应的等价方法。<br>举个例子，ctx.type和ctx.length 代理了 response对象中对应的方法， ctx.path和ctx.method代理了 resquest 对象中对应的方法。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Context 具体的方法和访问器。</p>\n<h3 id=\"ctx-req\"><a href=\"#ctx-req\" class=\"headerlink\" title=\"ctx.req\"></a>ctx.req</h3><p>Node的request对象</p>\n<h3 id=\"ctx-res\"><a href=\"#ctx-res\" class=\"headerlink\" title=\"ctx.res\"></a>ctx.res</h3><p>Node的response对象</p>\n<p>Koa不支持直接调用底层response处理。请避免使用以下Node属性：</p>\n<ul>\n<li>res.statusCode</li>\n<li>res.writeHead()</li>\n<li>res.write()</li>\n<li>res.end()</li>\n</ul>\n<h3 id=\"ctx-request\"><a href=\"#ctx-request\" class=\"headerlink\" title=\"ctx.request\"></a>ctx.request</h3><p>Koa 的 Request 对象。</p>\n<h3 id=\"ctx-response\"><a href=\"#ctx-response\" class=\"headerlink\" title=\"ctx.response\"></a>ctx.response</h3><p>Koa 的 Response 对象。</p>\n<h3 id=\"ctx-state\"><a href=\"#ctx-state\" class=\"headerlink\" title=\"ctx.state\"></a>ctx.state</h3><p>自定义命名空间，用于将信息从中间件传递到前端视图层<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.<span class=\"keyword\">state</span>.<span class=\"keyword\">user</span> = await User.find(id);</div></pre></td></tr></table></figure></p>\n<h3 id=\"ctx-app\"><a href=\"#ctx-app\" class=\"headerlink\" title=\"ctx.app\"></a>ctx.app</h3><p>应用实例引用。</p>\n<h3 id=\"ctx-cookies-get-name-options\"><a href=\"#ctx-cookies-get-name-options\" class=\"headerlink\" title=\"ctx.cookies.get(name, [options])\"></a>ctx.cookies.get(name, [options])</h3><p>获取 cookie 中 name 的值 options为可选参数。</p>\n<ul>\n<li>signed：对cookie请求时需要设置签名。</li>\n</ul>\n<p>Koa 使用 <a href=\"https://github.com/pillarjs/cookies\" target=\"_blank\" rel=\"external\">cookies模块</a>,options参数只是简单地直接传递。</p>\n<h3 id=\"ctx-cookies-set-name-value-options\"><a href=\"#ctx-cookies-set-name-value-options\" class=\"headerlink\" title=\"ctx.cookies.set(name, value, [options])\"></a>ctx.cookies.set(name, value, [options])</h3><p>设置 cookie 中 name值， options为可选参数。</p>\n<ul>\n<li>maxAge: 表示 Date.now() 到期的毫米数， number.</li>\n<li>signed: Cookie 签名</li>\n<li>expires: Cookie有效时间</li>\n<li>path: Cookie路径，默认为<code>/&#39;</code></li>\n<li>domain: Cookie的域</li>\n<li>secure: Cookie安全协议 false表示Cookie通过HTTP协议传送，true表示Cookie通过HTTPS协议传送。</li>\n<li>httpOnly: 服务器可访问的Cookie 默认为true</li>\n<li>overwrite: 一个布尔值，表示是否覆盖重写以前设置的同名的Cookie（默认为false）如果为true，在设置这个新Cookie时，将在同一个请求中设置所有相同名称的Cookie（不论路径或域）并从Set-Cookie头部中过滤掉。</li>\n</ul>\n<p>Koa 使用 <a href=\"https://github.com/pillarjs/cookies\" target=\"_blank\" rel=\"external\">cookies模块</a>,options参数只是简单地直接传递。</p>\n<h3 id=\"ctx-throw-msg-status-properties\"><a href=\"#ctx-throw-msg-status-properties\" class=\"headerlink\" title=\"ctx.throw([msg], [status], [properties])\"></a>ctx.throw([msg], [status], [properties])</h3><p>Helper方法抛出一个.status属性默认为500的错误。该方法允许Koa准确的响应处理状态。<br>Koa允许以下组合：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.<span class=\"keyword\">throw</span>(<span class=\"number\">403</span>);</div><div class=\"line\">ctx.<span class=\"keyword\">throw</span>(<span class=\"string\">'name required'</span>, <span class=\"number\">400</span>);</div><div class=\"line\">ctx.<span class=\"keyword\">throw</span>(<span class=\"number\">400</span>, <span class=\"string\">'name required'</span>);</div><div class=\"line\">ctx.<span class=\"keyword\">throw</span>(<span class=\"string\">'something exploded'</span>);</div></pre></td></tr></table></figure></p>\n<p>举个例子 <code>ctx.throw(&#39;name required&#39;, 400)</code>等价于：<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">err</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">Error</span>(<span class=\"comment\">'name required');</span></div><div class=\"line\"><span class=\"built_in\">err</span>.status = <span class=\"number\">400</span>;</div><div class=\"line\"><span class=\"built_in\">err</span>.expose = <span class=\"literal\">true</span>;</div><div class=\"line\">throw <span class=\"built_in\">err</span>;</div></pre></td></tr></table></figure></p>\n<p>请注意，这些是用户级错误，并会被标记为err.expose,这意味着消息会被准确描述为对客户端的响应，而并非使用在您不想泄漏失败细节的情景中。</p>\n<p>你可以根据需要将合并后的属性对象船钓错误中去，这对于向上级中间件请求的友好的机器化错误有着很好的装饰作用<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.throw(<span class=\"number\">401</span>, <span class=\"string\">'access_denied'</span>, &#123; <span class=\"keyword\">user</span>: <span class=\"keyword\">user</span> &#125;);</div><div class=\"line\">ctx.throw(<span class=\"string\">'access_denied'</span>, &#123; <span class=\"keyword\">user</span>: <span class=\"keyword\">user</span> &#125;);</div></pre></td></tr></table></figure></p>\n<p>Koa 使用<a href=\"https://github.com/jshttp/http-errors\" target=\"_blank\" rel=\"external\">http-errors</a>来创建错误。</p>\n<h3 id=\"ctx-assert-value-status-msg-properties\"><a href=\"#ctx-assert-value-status-msg-properties\" class=\"headerlink\" title=\"ctx.assert(value, [status], [msg], [properties])\"></a>ctx.assert(value, [status], [msg], [properties])</h3><p>当 !value时，Helper方法抛出类似于.throw()的错误。<br>相当于node中的<a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\" rel=\"external\">assert</a>方法<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.assert(ctx.<span class=\"keyword\">state</span>.<span class=\"keyword\">user</span>, <span class=\"number\">401</span>, 'User not found. Please login!');</div></pre></td></tr></table></figure></p>\n<p>Koa 使用<a href=\"https://github.com/jshttp/http-assert\" target=\"_blank\" rel=\"external\">http-assert</a>判断</p>\n<h3 id=\"ctx-respond\"><a href=\"#ctx-respond\" class=\"headerlink\" title=\"ctx.respond\"></a>ctx.respond</h3><p>为了避免Koa的内置响应处理，你可以直接设置 ctx.respond = false;<br>如果你想使用原生的res对象代替Koa操作response，那么请使用这种方法。</p>\n<p>请注意，Koa并不支持这种使用方式，因为这有可能破坏Koa中间件和Koa本身的一些功能。<br>这只能作为一种hack的方式，并只对希望在Koa的函数和中间件中使用传统的fn(req, res)的人带来便捷。</p>\n<h3 id=\"Request-aliases\"><a href=\"#Request-aliases\" class=\"headerlink\" title=\"Request aliases\"></a>Request aliases</h3><p>以下的访问器别名与 <a href=\"#Request\">Request</a> 等价：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.header</div><div class=\"line\">ctx.headers</div><div class=\"line\">ctx.method</div><div class=\"line\">ctx.method=</div><div class=\"line\">ctx.url</div><div class=\"line\">ctx.url=</div><div class=\"line\">ctx.originalUrl</div><div class=\"line\">ctx<span class=\"selector-class\">.originalUrlctx</span><span class=\"selector-class\">.href</span></div><div class=\"line\">ctx.path</div><div class=\"line\">ctx.path=</div><div class=\"line\">ctx.query</div><div class=\"line\">ctx.query=</div><div class=\"line\">ctx.querystring</div><div class=\"line\">ctx.querystring=</div><div class=\"line\">ctx.host</div><div class=\"line\">ctx.hostname</div><div class=\"line\">ctx.fresh</div><div class=\"line\">ctx.stale</div><div class=\"line\">ctx.socket</div><div class=\"line\">ctx.protocol</div><div class=\"line\">ctx.secure</div><div class=\"line\">ctx.ip</div><div class=\"line\">ctx.ips</div><div class=\"line\">ctx.subdomains</div><div class=\"line\">ctx.is()</div><div class=\"line\">ctx.accepts()</div><div class=\"line\">ctx.acceptsEncodings()</div><div class=\"line\">ctx.acceptsLanguages()</div><div class=\"line\">ctx.get()</div></pre></td></tr></table></figure></p>\n<h3 id=\"Response-aliases\"><a href=\"#Response-aliases\" class=\"headerlink\" title=\"Response aliases\"></a>Response aliases</h3><p>以下访问器别名与 <a href=\"#response\">Response</a>等价:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.body</div><div class=\"line\">ctx.body=</div><div class=\"line\">ctx.status</div><div class=\"line\">ctx.status=</div><div class=\"line\">ctx.message</div><div class=\"line\">ctx.message=</div><div class=\"line\">ctx.length</div><div class=\"line\">ctx.length=</div><div class=\"line\">ctx.type</div><div class=\"line\">ctx.type=</div><div class=\"line\">ctx.headerSent</div><div class=\"line\">ctx.rdirect()</div><div class=\"line\">ctx.attachment()</div><div class=\"line\">ctx.set()</div><div class=\"line\">ctx.append()</div><div class=\"line\">ctx.remove()</div><div class=\"line\">ctx.lastModified=</div><div class=\"line\">ctx.etag=</div></pre></td></tr></table></figure></p>\n<h2 id=\"Request\"><a href=\"#Request\" class=\"headerlink\" title=\"Request\"></a><span id=\"request\">Request</span></h2><p>Koa的Request对象是对node的Request对象进一步抽象，封装。<br>提供了对日常HTTP服务器开发有用的一些功能函数</p>\n<h3 id=\"API-1\"><a href=\"#API-1\" class=\"headerlink\" title=\"API\"></a>API</h3><h4 id=\"request-header\"><a href=\"#request-header\" class=\"headerlink\" title=\"request.header\"></a>request.header</h4><p>请求头对象</p>\n<h4 id=\"request-headers\"><a href=\"#request-headers\" class=\"headerlink\" title=\"request.headers\"></a>request.headers</h4><p>请求头对象的别名</p>\n<h4 id=\"request-method\"><a href=\"#request-method\" class=\"headerlink\" title=\"request.method\"></a>request.method</h4><p>请求方法</p>\n<h4 id=\"request-method-1\"><a href=\"#request-method-1\" class=\"headerlink\" title=\"request.method=\"></a>request.method=</h4><p>设置请求方法，在实现中间件时有很大作用，例如methodOverride()</p>\n<h4 id=\"request-length\"><a href=\"#request-length\" class=\"headerlink\" title=\"request.length\"></a>request.length</h4><p>以数字的形式返回request的内容长度(Content-lenght),或者返回undefined</p>\n<h4 id=\"request-url\"><a href=\"#request-url\" class=\"headerlink\" title=\"request.url\"></a>request.url</h4><p>获取请求url地址</p>\n<h4 id=\"request-url-1\"><a href=\"#request-url-1\" class=\"headerlink\" title=\"request.url=\"></a>request.url=</h4><p>设置请求地址，用于重写url</p>\n<h4 id=\"request-originalUrl\"><a href=\"#request-originalUrl\" class=\"headerlink\" title=\"request.originalUrl\"></a>request.originalUrl</h4><p>获取请求原始url</p>\n<h4 id=\"request-origin\"><a href=\"#request-origin\" class=\"headerlink\" title=\"request.origin\"></a>request.origin</h4><p>获取url来源，包括protocol和host<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx<span class=\"selector-class\">.request</span><span class=\"selector-class\">.origin</span></div><div class=\"line\"><span class=\"comment\">// =&gt; http://example.com</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"request-href\"><a href=\"#request-href\" class=\"headerlink\" title=\"request.href\"></a>request.href</h4><p>获取请求完整的URL，包括protpcol，host和url<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx<span class=\"selector-class\">.request</span><span class=\"selector-class\">.href</span></div><div class=\"line\"><span class=\"comment\">// =&gt; http://example.com/foo/bar?q=1</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"request-path\"><a href=\"#request-path\" class=\"headerlink\" title=\"request.path\"></a>request.path</h4><p>获取请求路径名。</p>\n<h4 id=\"request-path-1\"><a href=\"#request-path-1\" class=\"headerlink\" title=\"request.path=\"></a>request.path=</h4><p>设置请求路径名，并保存’?’后面的部分（请求参数）</p>\n<h4 id=\"request-querystring\"><a href=\"#request-querystring\" class=\"headerlink\" title=\"request.querystring\"></a>request.querystring</h4><p>获取请求的查询参数(url中?后边的部分)不包含？</p>\n<h4 id=\"request-querystring-1\"><a href=\"#request-querystring-1\" class=\"headerlink\" title=\"request.querystring=\"></a>request.querystring=</h4><p>设置查询参数</p>\n<h4 id=\"request-search\"><a href=\"#request-search\" class=\"headerlink\" title=\"request.search\"></a>request.search</h4><p>获取请求的查询参数，包含?</p>\n<h4 id=\"request-search-1\"><a href=\"#request-search-1\" class=\"headerlink\" title=\"request.search=\"></a>request.search=</h4><p>设置请求的查询参数。</p>\n<h4 id=\"request-host\"><a href=\"#request-host\" class=\"headerlink\" title=\"request.host\"></a>request.host</h4><p>获取当前host(hostname: port) 当 app.proxy = true 时, 支持X-Forwarded-Host。</p>\n<h4 id=\"request-hostname\"><a href=\"#request-hostname\" class=\"headerlink\" title=\"request.hostname\"></a>request.hostname</h4><p>获取hostname，当 app.proxy = ture 时, 支持X-Forwarded-Host.</p>\n<h4 id=\"request-type\"><a href=\"#request-type\" class=\"headerlink\" title=\"request.type\"></a>request.type</h4><p>获取当前请求的 Conetent-Type 不包含如<code>charset</code>这样的参数。<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">ct</span> = ctx.request.<span class=\"keyword\">type</span></div><div class=\"line\"><span class=\"comment\">// =&gt; \"image/png\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"request-charset\"><a href=\"#request-charset\" class=\"headerlink\" title=\"request.charset\"></a>request.charset</h4><p>获取当前请求的 charset 没有则返回undefined<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx<span class=\"selector-class\">.request</span><span class=\"selector-class\">.charset</span></div><div class=\"line\"><span class=\"comment\">// =&gt; \"utf-8\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"request-query\"><a href=\"#request-query\" class=\"headerlink\" title=\"request.query\"></a>request.query</h4><p>获取解析后的查询字符串，当请求中没有查询字符串时则返回一个空对象。<br>请注意，这个方法不支持嵌套对象。<br>例如：<code>color=blue&amp;size=small</code><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"string\">'blue'</span>,</div><div class=\"line\">  size: <span class=\"string\">'small'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"request-query-1\"><a href=\"#request-query-1\" class=\"headerlink\" title=\"request.query=\"></a>request.query=</h4><p>根据给定的对象设置查询字符串。<br>请注意，这个方法不支持嵌套对象。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx<span class=\"selector-class\">.query</span> = &#123;next: <span class=\"string\">'/login'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"request-fresh\"><a href=\"#request-fresh\" class=\"headerlink\" title=\"request.fresh\"></a>request.fresh</h4><h2 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a><span id=\"response\">Response</span></h2>"},{"layout":"[layout]","title":"第一篇博客","date":"2016-11-20T16:01:09.000Z","type":"tags","_content":"折腾了一天了，本不应该耗这么久，然而win10的node总是要闹点小脾气。。\n\n<!--more-->\n","source":"_posts/第一篇博客.md","raw":"layout: '[layout]'\ntitle: 第一篇博客\ndate: 2016-11-21 00:01:09\ntype: \"tags\"\ntags:\n  - Xunfeng\n  - 黑天很黑\n---\n折腾了一天了，本不应该耗这么久，然而win10的node总是要闹点小脾气。。\n\n<!--more-->\n","slug":"第一篇博客","published":1,"updated":"2016-11-21T16:05:12.000Z","comments":1,"photos":[],"link":"","_id":"cjcr55ulm001ajbze1nfv3gc0","content":"<p>折腾了一天了，本不应该耗这么久，然而win10的node总是要闹点小脾气。。</p>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<p>折腾了一天了，本不应该耗这么久，然而win10的node总是要闹点小脾气。。</p>","more":""},{"title":"window API","date":"2017-11-30T07:23:29.000Z","_content":"翻阅MDN文档，打牢基础，记录一些实用的API。\n<!--more-->\n\n## Window\n`Window`是一个包含DOM文档的对象。\n\n### 窗口状态\n- `cloesd`：窗口是否关闭\n- `opener`： 保存打开当前窗口的另一窗口的引用，不存在返回`null`\n- `fullScreen`：窗口是否处于全屏模式\n- `devicePixelRatio`：当前显示设备的物理像素分辨率与CSS像素分辨率的比值\n- `onresize` 窗口大小时改变触发resize事件\n\n### 窗口视图\n- `innerHegiht` 浏览器窗口的视口的高度\n- `innerWidth`  浏览器窗口的视口的宽度\n- `outerHeight` 浏览器外层窗口的视口的高度\n- `outerWidth`  浏览器外层窗口的视口的宽度\n\n### `document`\n\n\n###  窗口框架\n- `frameElement` 返回嵌入当前`window`对象的元素\n- `frames` 返回一个类数组对象,返回当前窗口的所有子框架元素\n- `parent` 返回当前窗口的父窗口\n- `length` 返回该窗口中包含的框架(`frame&iframe`)的数量\n\n### history\n提供操作浏览器会话历史的接口\n- `history.back()`： 后退\n- `history.forward()`： 前进\n- `history.go(num)`：移动num个页面\n- `history.pushState(state, title, url)`  创建新的历史记录条目，更新state，title，url，但不会加载新url\n\t- `state`  状态对象\n\t- `title`  标题\n\t- `URL`    新的历史URL记录\n- `history.replaceState(state, title, url)` 修改当前历史记录，更新state，title，url，但不会加载新url\n- `window.onpopstate` 当处于激活状态的历史记录条目变化时触发，event包含state属性的拷贝\n- `history.state`：获取当前历史记录的state\n\n### location\n包含有关文档当前位置的信息\n- `assign(url)` 加载新url\n- `reload()` 从服务器重新加载当前页面\n- `replace()` 重加载\n- `hash`\n- `host`\n- `hostname`\n- `href`\n- `origin`\n- `pathname`\n- `port`\n- `protocol`\n- `search`\n\n### WebStorage\n- `sessionStorage` 存在于浏览器打开时\n- `localStorage` 存在于定义的生命周期中，浏览器关闭后仍然存在\n- `getItem(name)`  从存储中获取键值为`name`的数数据项\n- `setItem(key, value)` 创建或更新值\n- `clear()` 清空域名对应的整个存储对象\n- `removeItem(key)` 移除指定项\n- `onstorage` 事件，当storage更新时触发\n\t```js\n\twindow.addEventListener('storage', function(e) {\n\t\tconsole.log(e.key);\n\t\tconsole.log(e.oldValue);\n\t\tconsole.log(e.newValue);\n\t\tconsole.log(e.url);\n\t\tconsole.log(e.storageArea);\n\t\t// doing something\n\t})\n\t```\n\n### EventHandlers\n- `onload` 窗口加载事件触发时调用\n- `onblur` 元素失去焦点时触发\n- `onfocus`\n- `onchange`\n- `onclick`\n- `ondblclick`  双击鼠标左键\n- `oncontextmenu`  右键菜单功能是否激活\n- `onerror`\n\t```js\n\twindow.onerror = (message, source, lineno, colno, error) => {\n\t\t// 错误信息\n\t\t// 发生错误的url\n\t\t// 行号\n\t\t// 列号\n\t\t// 错误对象\n\t}\n\telement.onerror = (event) => {}\n\t```\n- `oninput` `<input />`的value值由输入设备改变触发\n- `onreset` 只有在用户点击表单中的reset按钮时才会被触发\n- `onselect` 只有在文本框和文本域内选择文本才会触发select事件\n- `onsubmit` 提交表单\n- `onkeypress` 按下键盘键触发\n- `onmousedown` 鼠标点击触发\n- `onmousemove` 在当前元素上移动鼠标触发\n- `onmouseout`  鼠标离开当前元素\n- `onmouseover` 鼠标移动到当前元素上\n- `onmouseup`   鼠标释放点击\n- `onwheel` 相应元素上滚动滑轮触发\n- `onscroll` 元素滚动时触发\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/window-API.md","raw":"---\ntitle: window API\ndate: 2017-11-30 15:23:29\ntags:\n\t- 前端\n---\n翻阅MDN文档，打牢基础，记录一些实用的API。\n<!--more-->\n\n## Window\n`Window`是一个包含DOM文档的对象。\n\n### 窗口状态\n- `cloesd`：窗口是否关闭\n- `opener`： 保存打开当前窗口的另一窗口的引用，不存在返回`null`\n- `fullScreen`：窗口是否处于全屏模式\n- `devicePixelRatio`：当前显示设备的物理像素分辨率与CSS像素分辨率的比值\n- `onresize` 窗口大小时改变触发resize事件\n\n### 窗口视图\n- `innerHegiht` 浏览器窗口的视口的高度\n- `innerWidth`  浏览器窗口的视口的宽度\n- `outerHeight` 浏览器外层窗口的视口的高度\n- `outerWidth`  浏览器外层窗口的视口的宽度\n\n### `document`\n\n\n###  窗口框架\n- `frameElement` 返回嵌入当前`window`对象的元素\n- `frames` 返回一个类数组对象,返回当前窗口的所有子框架元素\n- `parent` 返回当前窗口的父窗口\n- `length` 返回该窗口中包含的框架(`frame&iframe`)的数量\n\n### history\n提供操作浏览器会话历史的接口\n- `history.back()`： 后退\n- `history.forward()`： 前进\n- `history.go(num)`：移动num个页面\n- `history.pushState(state, title, url)`  创建新的历史记录条目，更新state，title，url，但不会加载新url\n\t- `state`  状态对象\n\t- `title`  标题\n\t- `URL`    新的历史URL记录\n- `history.replaceState(state, title, url)` 修改当前历史记录，更新state，title，url，但不会加载新url\n- `window.onpopstate` 当处于激活状态的历史记录条目变化时触发，event包含state属性的拷贝\n- `history.state`：获取当前历史记录的state\n\n### location\n包含有关文档当前位置的信息\n- `assign(url)` 加载新url\n- `reload()` 从服务器重新加载当前页面\n- `replace()` 重加载\n- `hash`\n- `host`\n- `hostname`\n- `href`\n- `origin`\n- `pathname`\n- `port`\n- `protocol`\n- `search`\n\n### WebStorage\n- `sessionStorage` 存在于浏览器打开时\n- `localStorage` 存在于定义的生命周期中，浏览器关闭后仍然存在\n- `getItem(name)`  从存储中获取键值为`name`的数数据项\n- `setItem(key, value)` 创建或更新值\n- `clear()` 清空域名对应的整个存储对象\n- `removeItem(key)` 移除指定项\n- `onstorage` 事件，当storage更新时触发\n\t```js\n\twindow.addEventListener('storage', function(e) {\n\t\tconsole.log(e.key);\n\t\tconsole.log(e.oldValue);\n\t\tconsole.log(e.newValue);\n\t\tconsole.log(e.url);\n\t\tconsole.log(e.storageArea);\n\t\t// doing something\n\t})\n\t```\n\n### EventHandlers\n- `onload` 窗口加载事件触发时调用\n- `onblur` 元素失去焦点时触发\n- `onfocus`\n- `onchange`\n- `onclick`\n- `ondblclick`  双击鼠标左键\n- `oncontextmenu`  右键菜单功能是否激活\n- `onerror`\n\t```js\n\twindow.onerror = (message, source, lineno, colno, error) => {\n\t\t// 错误信息\n\t\t// 发生错误的url\n\t\t// 行号\n\t\t// 列号\n\t\t// 错误对象\n\t}\n\telement.onerror = (event) => {}\n\t```\n- `oninput` `<input />`的value值由输入设备改变触发\n- `onreset` 只有在用户点击表单中的reset按钮时才会被触发\n- `onselect` 只有在文本框和文本域内选择文本才会触发select事件\n- `onsubmit` 提交表单\n- `onkeypress` 按下键盘键触发\n- `onmousedown` 鼠标点击触发\n- `onmousemove` 在当前元素上移动鼠标触发\n- `onmouseout`  鼠标离开当前元素\n- `onmouseover` 鼠标移动到当前元素上\n- `onmouseup`   鼠标释放点击\n- `onwheel` 相应元素上滚动滑轮触发\n- `onscroll` 元素滚动时触发\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"window-API","published":1,"updated":"2017-12-01T02:08:09.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55uln001bjbzeq7wz09s2","content":"<p>翻阅MDN文档，打牢基础，记录一些实用的API。<br><a id=\"more\"></a></p>\n<h2 id=\"Window\"><a href=\"#Window\" class=\"headerlink\" title=\"Window\"></a>Window</h2><p><code>Window</code>是一个包含DOM文档的对象。</p>\n<h3 id=\"窗口状态\"><a href=\"#窗口状态\" class=\"headerlink\" title=\"窗口状态\"></a>窗口状态</h3><ul>\n<li><code>cloesd</code>：窗口是否关闭</li>\n<li><code>opener</code>： 保存打开当前窗口的另一窗口的引用，不存在返回<code>null</code></li>\n<li><code>fullScreen</code>：窗口是否处于全屏模式</li>\n<li><code>devicePixelRatio</code>：当前显示设备的物理像素分辨率与CSS像素分辨率的比值</li>\n<li><code>onresize</code> 窗口大小时改变触发resize事件</li>\n</ul>\n<h3 id=\"窗口视图\"><a href=\"#窗口视图\" class=\"headerlink\" title=\"窗口视图\"></a>窗口视图</h3><ul>\n<li><code>innerHegiht</code> 浏览器窗口的视口的高度</li>\n<li><code>innerWidth</code>  浏览器窗口的视口的宽度</li>\n<li><code>outerHeight</code> 浏览器外层窗口的视口的高度</li>\n<li><code>outerWidth</code>  浏览器外层窗口的视口的宽度</li>\n</ul>\n<h3 id=\"document\"><a href=\"#document\" class=\"headerlink\" title=\"document\"></a><code>document</code></h3><h3 id=\"窗口框架\"><a href=\"#窗口框架\" class=\"headerlink\" title=\"窗口框架\"></a>窗口框架</h3><ul>\n<li><code>frameElement</code> 返回嵌入当前<code>window</code>对象的元素</li>\n<li><code>frames</code> 返回一个类数组对象,返回当前窗口的所有子框架元素</li>\n<li><code>parent</code> 返回当前窗口的父窗口</li>\n<li><code>length</code> 返回该窗口中包含的框架(<code>frame&amp;iframe</code>)的数量</li>\n</ul>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><p>提供操作浏览器会话历史的接口</p>\n<ul>\n<li><code>history.back()</code>： 后退</li>\n<li><code>history.forward()</code>： 前进</li>\n<li><code>history.go(num)</code>：移动num个页面</li>\n<li><code>history.pushState(state, title, url)</code>  创建新的历史记录条目，更新state，title，url，但不会加载新url<ul>\n<li><code>state</code>  状态对象</li>\n<li><code>title</code>  标题</li>\n<li><code>URL</code>    新的历史URL记录</li>\n</ul>\n</li>\n<li><code>history.replaceState(state, title, url)</code> 修改当前历史记录，更新state，title，url，但不会加载新url</li>\n<li><code>window.onpopstate</code> 当处于激活状态的历史记录条目变化时触发，event包含state属性的拷贝</li>\n<li><code>history.state</code>：获取当前历史记录的state</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><p>包含有关文档当前位置的信息</p>\n<ul>\n<li><code>assign(url)</code> 加载新url</li>\n<li><code>reload()</code> 从服务器重新加载当前页面</li>\n<li><code>replace()</code> 重加载</li>\n<li><code>hash</code></li>\n<li><code>host</code></li>\n<li><code>hostname</code></li>\n<li><code>href</code></li>\n<li><code>origin</code></li>\n<li><code>pathname</code></li>\n<li><code>port</code></li>\n<li><code>protocol</code></li>\n<li><code>search</code></li>\n</ul>\n<h3 id=\"WebStorage\"><a href=\"#WebStorage\" class=\"headerlink\" title=\"WebStorage\"></a>WebStorage</h3><ul>\n<li><code>sessionStorage</code> 存在于浏览器打开时</li>\n<li><code>localStorage</code> 存在于定义的生命周期中，浏览器关闭后仍然存在</li>\n<li><code>getItem(name)</code>  从存储中获取键值为<code>name</code>的数数据项</li>\n<li><code>setItem(key, value)</code> 创建或更新值</li>\n<li><code>clear()</code> 清空域名对应的整个存储对象</li>\n<li><code>removeItem(key)</code> 移除指定项</li>\n<li><code>onstorage</code> 事件，当storage更新时触发  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'storage'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e.key);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e.oldValue);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e.newValue);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e.url);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e.storageArea);</div><div class=\"line\">\t<span class=\"comment\">// doing something</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"EventHandlers\"><a href=\"#EventHandlers\" class=\"headerlink\" title=\"EventHandlers\"></a>EventHandlers</h3><ul>\n<li><code>onload</code> 窗口加载事件触发时调用</li>\n<li><code>onblur</code> 元素失去焦点时触发</li>\n<li><code>onfocus</code></li>\n<li><code>onchange</code></li>\n<li><code>onclick</code></li>\n<li><code>ondblclick</code>  双击鼠标左键</li>\n<li><code>oncontextmenu</code>  右键菜单功能是否激活</li>\n<li><p><code>onerror</code></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.onerror = <span class=\"function\">(<span class=\"params\">message, source, lineno, colno, error</span>) =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 错误信息</span></div><div class=\"line\">\t<span class=\"comment\">// 发生错误的url</span></div><div class=\"line\">\t<span class=\"comment\">// 行号</span></div><div class=\"line\">\t<span class=\"comment\">// 列号</span></div><div class=\"line\">\t<span class=\"comment\">// 错误对象</span></div><div class=\"line\">&#125;</div><div class=\"line\">element.onerror = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>oninput</code> <code>&lt;input /&gt;</code>的value值由输入设备改变触发</p>\n</li>\n<li><code>onreset</code> 只有在用户点击表单中的reset按钮时才会被触发</li>\n<li><code>onselect</code> 只有在文本框和文本域内选择文本才会触发select事件</li>\n<li><code>onsubmit</code> 提交表单</li>\n<li><code>onkeypress</code> 按下键盘键触发</li>\n<li><code>onmousedown</code> 鼠标点击触发</li>\n<li><code>onmousemove</code> 在当前元素上移动鼠标触发</li>\n<li><code>onmouseout</code>  鼠标离开当前元素</li>\n<li><code>onmouseover</code> 鼠标移动到当前元素上</li>\n<li><code>onmouseup</code>   鼠标释放点击</li>\n<li><code>onwheel</code> 相应元素上滚动滑轮触发</li>\n<li><code>onscroll</code> 元素滚动时触发</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>翻阅MDN文档，打牢基础，记录一些实用的API。<br>","more":"</p>\n<h2 id=\"Window\"><a href=\"#Window\" class=\"headerlink\" title=\"Window\"></a>Window</h2><p><code>Window</code>是一个包含DOM文档的对象。</p>\n<h3 id=\"窗口状态\"><a href=\"#窗口状态\" class=\"headerlink\" title=\"窗口状态\"></a>窗口状态</h3><ul>\n<li><code>cloesd</code>：窗口是否关闭</li>\n<li><code>opener</code>： 保存打开当前窗口的另一窗口的引用，不存在返回<code>null</code></li>\n<li><code>fullScreen</code>：窗口是否处于全屏模式</li>\n<li><code>devicePixelRatio</code>：当前显示设备的物理像素分辨率与CSS像素分辨率的比值</li>\n<li><code>onresize</code> 窗口大小时改变触发resize事件</li>\n</ul>\n<h3 id=\"窗口视图\"><a href=\"#窗口视图\" class=\"headerlink\" title=\"窗口视图\"></a>窗口视图</h3><ul>\n<li><code>innerHegiht</code> 浏览器窗口的视口的高度</li>\n<li><code>innerWidth</code>  浏览器窗口的视口的宽度</li>\n<li><code>outerHeight</code> 浏览器外层窗口的视口的高度</li>\n<li><code>outerWidth</code>  浏览器外层窗口的视口的宽度</li>\n</ul>\n<h3 id=\"document\"><a href=\"#document\" class=\"headerlink\" title=\"document\"></a><code>document</code></h3><h3 id=\"窗口框架\"><a href=\"#窗口框架\" class=\"headerlink\" title=\"窗口框架\"></a>窗口框架</h3><ul>\n<li><code>frameElement</code> 返回嵌入当前<code>window</code>对象的元素</li>\n<li><code>frames</code> 返回一个类数组对象,返回当前窗口的所有子框架元素</li>\n<li><code>parent</code> 返回当前窗口的父窗口</li>\n<li><code>length</code> 返回该窗口中包含的框架(<code>frame&amp;iframe</code>)的数量</li>\n</ul>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><p>提供操作浏览器会话历史的接口</p>\n<ul>\n<li><code>history.back()</code>： 后退</li>\n<li><code>history.forward()</code>： 前进</li>\n<li><code>history.go(num)</code>：移动num个页面</li>\n<li><code>history.pushState(state, title, url)</code>  创建新的历史记录条目，更新state，title，url，但不会加载新url<ul>\n<li><code>state</code>  状态对象</li>\n<li><code>title</code>  标题</li>\n<li><code>URL</code>    新的历史URL记录</li>\n</ul>\n</li>\n<li><code>history.replaceState(state, title, url)</code> 修改当前历史记录，更新state，title，url，但不会加载新url</li>\n<li><code>window.onpopstate</code> 当处于激活状态的历史记录条目变化时触发，event包含state属性的拷贝</li>\n<li><code>history.state</code>：获取当前历史记录的state</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><p>包含有关文档当前位置的信息</p>\n<ul>\n<li><code>assign(url)</code> 加载新url</li>\n<li><code>reload()</code> 从服务器重新加载当前页面</li>\n<li><code>replace()</code> 重加载</li>\n<li><code>hash</code></li>\n<li><code>host</code></li>\n<li><code>hostname</code></li>\n<li><code>href</code></li>\n<li><code>origin</code></li>\n<li><code>pathname</code></li>\n<li><code>port</code></li>\n<li><code>protocol</code></li>\n<li><code>search</code></li>\n</ul>\n<h3 id=\"WebStorage\"><a href=\"#WebStorage\" class=\"headerlink\" title=\"WebStorage\"></a>WebStorage</h3><ul>\n<li><code>sessionStorage</code> 存在于浏览器打开时</li>\n<li><code>localStorage</code> 存在于定义的生命周期中，浏览器关闭后仍然存在</li>\n<li><code>getItem(name)</code>  从存储中获取键值为<code>name</code>的数数据项</li>\n<li><code>setItem(key, value)</code> 创建或更新值</li>\n<li><code>clear()</code> 清空域名对应的整个存储对象</li>\n<li><code>removeItem(key)</code> 移除指定项</li>\n<li><code>onstorage</code> 事件，当storage更新时触发  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'storage'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e.key);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e.oldValue);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e.newValue);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e.url);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e.storageArea);</div><div class=\"line\">\t<span class=\"comment\">// doing something</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"EventHandlers\"><a href=\"#EventHandlers\" class=\"headerlink\" title=\"EventHandlers\"></a>EventHandlers</h3><ul>\n<li><code>onload</code> 窗口加载事件触发时调用</li>\n<li><code>onblur</code> 元素失去焦点时触发</li>\n<li><code>onfocus</code></li>\n<li><code>onchange</code></li>\n<li><code>onclick</code></li>\n<li><code>ondblclick</code>  双击鼠标左键</li>\n<li><code>oncontextmenu</code>  右键菜单功能是否激活</li>\n<li><p><code>onerror</code></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.onerror = <span class=\"function\">(<span class=\"params\">message, source, lineno, colno, error</span>) =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 错误信息</span></div><div class=\"line\">\t<span class=\"comment\">// 发生错误的url</span></div><div class=\"line\">\t<span class=\"comment\">// 行号</span></div><div class=\"line\">\t<span class=\"comment\">// 列号</span></div><div class=\"line\">\t<span class=\"comment\">// 错误对象</span></div><div class=\"line\">&#125;</div><div class=\"line\">element.onerror = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>oninput</code> <code>&lt;input /&gt;</code>的value值由输入设备改变触发</p>\n</li>\n<li><code>onreset</code> 只有在用户点击表单中的reset按钮时才会被触发</li>\n<li><code>onselect</code> 只有在文本框和文本域内选择文本才会触发select事件</li>\n<li><code>onsubmit</code> 提交表单</li>\n<li><code>onkeypress</code> 按下键盘键触发</li>\n<li><code>onmousedown</code> 鼠标点击触发</li>\n<li><code>onmousemove</code> 在当前元素上移动鼠标触发</li>\n<li><code>onmouseout</code>  鼠标离开当前元素</li>\n<li><code>onmouseover</code> 鼠标移动到当前元素上</li>\n<li><code>onmouseup</code>   鼠标释放点击</li>\n<li><code>onwheel</code> 相应元素上滚动滑轮触发</li>\n<li><code>onscroll</code> 元素滚动时触发</li>\n</ul>"},{"title":"深入EventLoop与JavaScript线程","date":"2018-01-22T03:09:24.000Z","_content":"\n## 栈，队列，堆\n![](http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png)\n### 栈\n函数的调用会形成一个栈帧\n```js\nfunction foo(a) {\n  return a+1;\n}\nfunction bar(b) {\n  return foo(b+2);\n}\nconsole.log(bar(8));\n```\n1.当调用函数`bar`时创建了第一个帧, `bar帧`中含有`bar`函数的参数和变量  [bar帧] \n2.当在函数`bar`中调用函数`foo`时，会在当前栈中压入新的`foo帧`         [bar帧， foo帧]\n3.当函数`foo`执行完毕后，当前栈会自动弹出`foo帧`                     [bar帧]\n4.当函数`bar`执行完毕后，当前栈会自动弹出`bar帧`，此时函数执行完毕      [ ]\n\n### 堆\n对象被分配在一个堆中，即用以表示一个大部分非结构化的内存区域\n\n### 队列\n一个 `JavaScript` 运行时包含了一个待处理的消息队列\n每一个`消息`都与一个`函数`相关联\n当栈拥有足够内存时，从队列中取出一个`消息`进行处理\n这个处理过程包含了调用与这个消息相关联的函数（以及因而创建了一个初始堆栈帧)\n当栈再次为空的时候，也就意味着消息处理结束\n\n## 异步\n1. 主线程发起一个异步请求，相应的工作线程接收请求并开始执行。\n2. 此时主线程可以继续执行后面的代码，工作线程执行异步任务。\n3. 工作线程完成异步任务后，通知主线程并返回相应结果。\n4. 主线程收到通知后，执行异步请求的回调函数。\n\n## 事件循环\n\n### JavaScript的单线程\nH5中的`webWorker`标准中，允许`JavaScript`创建多个完全受主线程控制的子线程，且子线程不能操控`DOM`。\n主线程：负责解释和执行JavaScript代码\n工作线程：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程\n\n\n\n- MacroTasks: setTimeout, setInterval, setImmediate, I/O, UI渲染， 用户产生的事件(点击/滚动)\n- MicroTasks: Promise, process.nextTick, Object.observe, MutationObserver\n\n\n> 浏览器中， 一个事件循环(EventLoop)中会有一个正在执行的任务(Task)，而这个任务就是从 `MacroTask` 队列中来的\n> 当这个 `MacroTask` 执行结束后所有可用的 `MicroTask` 将会在同一个事件循环中执行\n> 当这些 `MicroTask` 执行结束后还能继续添加 `MicroTask` 一直到整个 `MicroTask` 队列执行结束\n\n> node中， V8引擎解析JavaScript脚本\n> 解析后的代码，调用Node API\n> libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎\n> V8引擎再将结果返回给用户\n\n\n简单地说, `MicroTasks`会在当前循环中完成，而`MacroTasks`会在下一个循环开始完成。\n\n\n### SetTimeout\n指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行\n它在任务队列的尾部添加一个`MacroTask`事件，因此要等到同步任务和任务队列现有的事件都处理完，才会得到执行\n也就是在下一个循环开始之前完成。\n```js\nconsole.log(0);\nsetTimeout(function() {\n  console.log(1);\n}, 0);\n... // 执行大量同步代码\n```\n此时, `setTimeout`会在大量同步代码执行完毕后执行。而这个等待时间是不确定的。\n\n### process.nextTick\n在当前的执行栈中添加一个`MicroTask`事件(下一个循环开始之前)\n也就是说，`process.nextTick`总发生在所有异步事件之前\n并且不论`process.nextTick`嵌套多少层，都会发生在异步之前\n\n### setImmediate\n在当前任务队列的尾部添加事件，也就是在下一次循环执行时执行\n\n> 然而？？？ setImmediate 和 setTimeout 的执行顺序是不确定的，有待商榷...\n","source":"_posts/深入EventLoop与JavaScript线程.md","raw":"---\ntitle: 深入EventLoop与JavaScript线程\ndate: 2018-01-22 11:09:24\ntags: \n  - JavaScript\n  - EventLoop\n---\n\n## 栈，队列，堆\n![](http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png)\n### 栈\n函数的调用会形成一个栈帧\n```js\nfunction foo(a) {\n  return a+1;\n}\nfunction bar(b) {\n  return foo(b+2);\n}\nconsole.log(bar(8));\n```\n1.当调用函数`bar`时创建了第一个帧, `bar帧`中含有`bar`函数的参数和变量  [bar帧] \n2.当在函数`bar`中调用函数`foo`时，会在当前栈中压入新的`foo帧`         [bar帧， foo帧]\n3.当函数`foo`执行完毕后，当前栈会自动弹出`foo帧`                     [bar帧]\n4.当函数`bar`执行完毕后，当前栈会自动弹出`bar帧`，此时函数执行完毕      [ ]\n\n### 堆\n对象被分配在一个堆中，即用以表示一个大部分非结构化的内存区域\n\n### 队列\n一个 `JavaScript` 运行时包含了一个待处理的消息队列\n每一个`消息`都与一个`函数`相关联\n当栈拥有足够内存时，从队列中取出一个`消息`进行处理\n这个处理过程包含了调用与这个消息相关联的函数（以及因而创建了一个初始堆栈帧)\n当栈再次为空的时候，也就意味着消息处理结束\n\n## 异步\n1. 主线程发起一个异步请求，相应的工作线程接收请求并开始执行。\n2. 此时主线程可以继续执行后面的代码，工作线程执行异步任务。\n3. 工作线程完成异步任务后，通知主线程并返回相应结果。\n4. 主线程收到通知后，执行异步请求的回调函数。\n\n## 事件循环\n\n### JavaScript的单线程\nH5中的`webWorker`标准中，允许`JavaScript`创建多个完全受主线程控制的子线程，且子线程不能操控`DOM`。\n主线程：负责解释和执行JavaScript代码\n工作线程：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程\n\n\n\n- MacroTasks: setTimeout, setInterval, setImmediate, I/O, UI渲染， 用户产生的事件(点击/滚动)\n- MicroTasks: Promise, process.nextTick, Object.observe, MutationObserver\n\n\n> 浏览器中， 一个事件循环(EventLoop)中会有一个正在执行的任务(Task)，而这个任务就是从 `MacroTask` 队列中来的\n> 当这个 `MacroTask` 执行结束后所有可用的 `MicroTask` 将会在同一个事件循环中执行\n> 当这些 `MicroTask` 执行结束后还能继续添加 `MicroTask` 一直到整个 `MicroTask` 队列执行结束\n\n> node中， V8引擎解析JavaScript脚本\n> 解析后的代码，调用Node API\n> libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎\n> V8引擎再将结果返回给用户\n\n\n简单地说, `MicroTasks`会在当前循环中完成，而`MacroTasks`会在下一个循环开始完成。\n\n\n### SetTimeout\n指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行\n它在任务队列的尾部添加一个`MacroTask`事件，因此要等到同步任务和任务队列现有的事件都处理完，才会得到执行\n也就是在下一个循环开始之前完成。\n```js\nconsole.log(0);\nsetTimeout(function() {\n  console.log(1);\n}, 0);\n... // 执行大量同步代码\n```\n此时, `setTimeout`会在大量同步代码执行完毕后执行。而这个等待时间是不确定的。\n\n### process.nextTick\n在当前的执行栈中添加一个`MicroTask`事件(下一个循环开始之前)\n也就是说，`process.nextTick`总发生在所有异步事件之前\n并且不论`process.nextTick`嵌套多少层，都会发生在异步之前\n\n### setImmediate\n在当前任务队列的尾部添加事件，也就是在下一次循环执行时执行\n\n> 然而？？？ setImmediate 和 setTimeout 的执行顺序是不确定的，有待商榷...\n","slug":"深入EventLoop与JavaScript线程","published":1,"updated":"2018-01-22T10:59:24.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulo001ejbzel0jkv7wu","content":"<h2 id=\"栈，队列，堆\"><a href=\"#栈，队列，堆\" class=\"headerlink\" title=\"栈，队列，堆\"></a>栈，队列，堆</h2><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png\" alt=\"\"></p>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>函数的调用会形成一个栈帧<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a+<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> foo(b+<span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar(<span class=\"number\">8</span>));</div></pre></td></tr></table></figure></p>\n<p>1.当调用函数<code>bar</code>时创建了第一个帧, <code>bar帧</code>中含有<code>bar</code>函数的参数和变量  [bar帧]<br>2.当在函数<code>bar</code>中调用函数<code>foo</code>时，会在当前栈中压入新的<code>foo帧</code>         [bar帧， foo帧]<br>3.当函数<code>foo</code>执行完毕后，当前栈会自动弹出<code>foo帧</code>                     [bar帧]<br>4.当函数<code>bar</code>执行完毕后，当前栈会自动弹出<code>bar帧</code>，此时函数执行完毕      [ ]</p>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><p>对象被分配在一个堆中，即用以表示一个大部分非结构化的内存区域</p>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>一个 <code>JavaScript</code> 运行时包含了一个待处理的消息队列<br>每一个<code>消息</code>都与一个<code>函数</code>相关联<br>当栈拥有足够内存时，从队列中取出一个<code>消息</code>进行处理<br>这个处理过程包含了调用与这个消息相关联的函数（以及因而创建了一个初始堆栈帧)<br>当栈再次为空的时候，也就意味着消息处理结束</p>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><ol>\n<li>主线程发起一个异步请求，相应的工作线程接收请求并开始执行。</li>\n<li>此时主线程可以继续执行后面的代码，工作线程执行异步任务。</li>\n<li>工作线程完成异步任务后，通知主线程并返回相应结果。</li>\n<li>主线程收到通知后，执行异步请求的回调函数。</li>\n</ol>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><h3 id=\"JavaScript的单线程\"><a href=\"#JavaScript的单线程\" class=\"headerlink\" title=\"JavaScript的单线程\"></a>JavaScript的单线程</h3><p>H5中的<code>webWorker</code>标准中，允许<code>JavaScript</code>创建多个完全受主线程控制的子线程，且子线程不能操控<code>DOM</code>。<br>主线程：负责解释和执行JavaScript代码<br>工作线程：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程</p>\n<ul>\n<li>MacroTasks: setTimeout, setInterval, setImmediate, I/O, UI渲染， 用户产生的事件(点击/滚动)</li>\n<li>MicroTasks: Promise, process.nextTick, Object.observe, MutationObserver</li>\n</ul>\n<blockquote>\n<p>浏览器中， 一个事件循环(EventLoop)中会有一个正在执行的任务(Task)，而这个任务就是从 <code>MacroTask</code> 队列中来的<br>当这个 <code>MacroTask</code> 执行结束后所有可用的 <code>MicroTask</code> 将会在同一个事件循环中执行<br>当这些 <code>MicroTask</code> 执行结束后还能继续添加 <code>MicroTask</code> 一直到整个 <code>MicroTask</code> 队列执行结束</p>\n<p>node中， V8引擎解析JavaScript脚本<br>解析后的代码，调用Node API<br>libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎<br>V8引擎再将结果返回给用户</p>\n</blockquote>\n<p>简单地说, <code>MicroTasks</code>会在当前循环中完成，而<code>MacroTasks</code>会在下一个循环开始完成。</p>\n<h3 id=\"SetTimeout\"><a href=\"#SetTimeout\" class=\"headerlink\" title=\"SetTimeout\"></a>SetTimeout</h3><p>指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行<br>它在任务队列的尾部添加一个<code>MacroTask</code>事件，因此要等到同步任务和任务队列现有的事件都处理完，才会得到执行<br>也就是在下一个循环开始之前完成。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span>);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;, <span class=\"number\">0</span>);</div><div class=\"line\">... <span class=\"comment\">// 执行大量同步代码</span></div></pre></td></tr></table></figure></p>\n<p>此时, <code>setTimeout</code>会在大量同步代码执行完毕后执行。而这个等待时间是不确定的。</p>\n<h3 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick\"></a>process.nextTick</h3><p>在当前的执行栈中添加一个<code>MicroTask</code>事件(下一个循环开始之前)<br>也就是说，<code>process.nextTick</code>总发生在所有异步事件之前<br>并且不论<code>process.nextTick</code>嵌套多少层，都会发生在异步之前</p>\n<h3 id=\"setImmediate\"><a href=\"#setImmediate\" class=\"headerlink\" title=\"setImmediate\"></a>setImmediate</h3><p>在当前任务队列的尾部添加事件，也就是在下一次循环执行时执行</p>\n<blockquote>\n<p>然而？？？ setImmediate 和 setTimeout 的执行顺序是不确定的，有待商榷…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"栈，队列，堆\"><a href=\"#栈，队列，堆\" class=\"headerlink\" title=\"栈，队列，堆\"></a>栈，队列，堆</h2><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png\" alt=\"\"></p>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>函数的调用会形成一个栈帧<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a+<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> foo(b+<span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar(<span class=\"number\">8</span>));</div></pre></td></tr></table></figure></p>\n<p>1.当调用函数<code>bar</code>时创建了第一个帧, <code>bar帧</code>中含有<code>bar</code>函数的参数和变量  [bar帧]<br>2.当在函数<code>bar</code>中调用函数<code>foo</code>时，会在当前栈中压入新的<code>foo帧</code>         [bar帧， foo帧]<br>3.当函数<code>foo</code>执行完毕后，当前栈会自动弹出<code>foo帧</code>                     [bar帧]<br>4.当函数<code>bar</code>执行完毕后，当前栈会自动弹出<code>bar帧</code>，此时函数执行完毕      [ ]</p>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><p>对象被分配在一个堆中，即用以表示一个大部分非结构化的内存区域</p>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>一个 <code>JavaScript</code> 运行时包含了一个待处理的消息队列<br>每一个<code>消息</code>都与一个<code>函数</code>相关联<br>当栈拥有足够内存时，从队列中取出一个<code>消息</code>进行处理<br>这个处理过程包含了调用与这个消息相关联的函数（以及因而创建了一个初始堆栈帧)<br>当栈再次为空的时候，也就意味着消息处理结束</p>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><ol>\n<li>主线程发起一个异步请求，相应的工作线程接收请求并开始执行。</li>\n<li>此时主线程可以继续执行后面的代码，工作线程执行异步任务。</li>\n<li>工作线程完成异步任务后，通知主线程并返回相应结果。</li>\n<li>主线程收到通知后，执行异步请求的回调函数。</li>\n</ol>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><h3 id=\"JavaScript的单线程\"><a href=\"#JavaScript的单线程\" class=\"headerlink\" title=\"JavaScript的单线程\"></a>JavaScript的单线程</h3><p>H5中的<code>webWorker</code>标准中，允许<code>JavaScript</code>创建多个完全受主线程控制的子线程，且子线程不能操控<code>DOM</code>。<br>主线程：负责解释和执行JavaScript代码<br>工作线程：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程</p>\n<ul>\n<li>MacroTasks: setTimeout, setInterval, setImmediate, I/O, UI渲染， 用户产生的事件(点击/滚动)</li>\n<li>MicroTasks: Promise, process.nextTick, Object.observe, MutationObserver</li>\n</ul>\n<blockquote>\n<p>浏览器中， 一个事件循环(EventLoop)中会有一个正在执行的任务(Task)，而这个任务就是从 <code>MacroTask</code> 队列中来的<br>当这个 <code>MacroTask</code> 执行结束后所有可用的 <code>MicroTask</code> 将会在同一个事件循环中执行<br>当这些 <code>MicroTask</code> 执行结束后还能继续添加 <code>MicroTask</code> 一直到整个 <code>MicroTask</code> 队列执行结束</p>\n<p>node中， V8引擎解析JavaScript脚本<br>解析后的代码，调用Node API<br>libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎<br>V8引擎再将结果返回给用户</p>\n</blockquote>\n<p>简单地说, <code>MicroTasks</code>会在当前循环中完成，而<code>MacroTasks</code>会在下一个循环开始完成。</p>\n<h3 id=\"SetTimeout\"><a href=\"#SetTimeout\" class=\"headerlink\" title=\"SetTimeout\"></a>SetTimeout</h3><p>指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行<br>它在任务队列的尾部添加一个<code>MacroTask</code>事件，因此要等到同步任务和任务队列现有的事件都处理完，才会得到执行<br>也就是在下一个循环开始之前完成。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span>);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;, <span class=\"number\">0</span>);</div><div class=\"line\">... <span class=\"comment\">// 执行大量同步代码</span></div></pre></td></tr></table></figure></p>\n<p>此时, <code>setTimeout</code>会在大量同步代码执行完毕后执行。而这个等待时间是不确定的。</p>\n<h3 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick\"></a>process.nextTick</h3><p>在当前的执行栈中添加一个<code>MicroTask</code>事件(下一个循环开始之前)<br>也就是说，<code>process.nextTick</code>总发生在所有异步事件之前<br>并且不论<code>process.nextTick</code>嵌套多少层，都会发生在异步之前</p>\n<h3 id=\"setImmediate\"><a href=\"#setImmediate\" class=\"headerlink\" title=\"setImmediate\"></a>setImmediate</h3><p>在当前任务队列的尾部添加事件，也就是在下一次循环执行时执行</p>\n<blockquote>\n<p>然而？？？ setImmediate 和 setTimeout 的执行顺序是不确定的，有待商榷…</p>\n</blockquote>\n"},{"title":"基于websocket实现服务器浏览器持续通信","date":"2016-12-10T13:14:18.000Z","_content":"\n为了网络程序设计大作业，了解了http,websocket,node及其框架...\n<!--more-->\n\n### http协议\n  * HTTP是超文本传输协议，是客户端浏览器或其他程序与Web服务器之间的应用层通信协议\n * HTTP使用TCP/IP建立连接\n![](http://upload-images.jianshu.io/upload_images/3767061-36776499e489d972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/3767061-25b34aab5fc17bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n * TCP客户端和服务器通过TCP套接字接口通信\n\n![](http://upload-images.jianshu.io/upload_images/3767061-ff829f1fafae57a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### Websocket\n - Websocket是一个持久化的协议\n  http1.0的生命周期很短，一个request一个response完成后就结束\n http1.1增加了一个keep-alive，在一个http连接中可以发送多个request，接收多个response\n\n![](http://upload-images.jianshu.io/upload_images/3767061-b512a13ed3c4cd9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/3767061-92194c7aa3f952d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这是一个 websocket的request和 response\n\n - websocket解决了http的部分难题\n  * **被动性** 服务端可以主动推送信息给客户端，不需要客户端不断请求\n  * **持久性** 只需要一次握手，整个通信建立在一次连接中，避免了中介反复解析\n\n### 基于express和socket.io构建聊天室\n\n - express\n  安装\n  ``` sh\n npm install express -g\n```\nserver.js引用模块\n``` js\nvar express = require('express'),\napp = express(),\nserver = require('http').createServer(app);  //创建服务\napp.use('/', express.static(__dirname + '/www')); //调用静态文件\n```\n\n- socket.IO\n  可以接受所有与服务器相连接的客户端发送的消息，也可向客户端主动发送消息。\n  安装\n``` sh\n npm install socket.io\n```\n引用\n``` js\nvar io = require('socket.io').listen(server);\nserver.listen(process.env.PORT || 3000);  //监听端口\n```\n\n- connect\n```js\nio.sockets.on('connection', function(socket) {   //建立连接\n    //新用户\n    socket.on('login', function(usrName,user) {\n        if (users.indexOf(usrName) > -1) {\n            socket.emit('usrExisted');\n        } else {\n            socket.userIndex = users.length;\n            socket.usrName = usrName;\n            socket.users = users;\n            users.push(usrName);\n            date = new Date().toTimeString().substr(0, 8);\n            console.log(date+\"/\"+usrName+'加入了聊天');\n            socket.emit('loginSuccess');\n            io.sockets.emit('system', usrName, users.length, 'login');\n            io.sockets.emit('cuList', users);\n        };\n    });\n    //用户离开\n    socket.on('disconnect', function(user) {\n        if (socket.usrName != null) {\n        \tsocket.users = users;\n            users.splice(socket.userIndex, 1);\n            date = new Date().toTimeString().substr(0, 8);\n            console.log(date+\"/\"+socket.usrName+'滚蛋了');\n            socket.broadcast.emit('system', socket.usrName, users.length, 'logout');\n\t\t\tio.sockets.emit('cuList', users);\n        }\n    });\n    //用户列表\n\t//新消息\n    socket.on('postMsg', function(msg, color) {\n    \tdate = new Date().toTimeString().substr(0, 8);\n    \tconsole.log(date+\"/\"+socket.usrName+'：'+msg);\n        socket.broadcast.emit('newMsg', socket.usrName, msg, color);\n    });\n    //新图片\n    socket.on('img', function(imgData, color) {\n    \tdate = new Date().toTimeString().substr(0, 8);\n    \tconsole.log(date+\"/\"+socket.usrName+'：'+imgData);\n        socket.broadcast.emit('newImg', socket.usrName, imgData, color);\n    });\n});\n```\n- 客户端js,html,css\n\n```js\nwindow.onload = function() {\n    var webchat = new WebChat();\n    webchat.init();\n};\nvar WebChat = function() {\n    this.socket = null;\n};\nWebChat.prototype = {\n    init: function() {\n        var that = this;\n        this.socket = io.connect();\n        //建立连接\n        this.socket.on('connect', function() {\n        \t$('#info').text('大爷儿，进来玩玩');\n        \t$('#inModal').css('display','block');\n        \t$('#usrName').focus();\n        });\n        //昵称占用\n        this.socket.on('usrExisted', function() {\n            $('#info').text('昵称已被使用，请换一个试试！');\n        });\n        //登陆成功\n        this.socket.on('loginSuccess', function() {\n        \tdocument.title ='webchat | ' + $('#usrName').val();\n        \t$('#loginArea').css('display','none');\n        \t$('#messageInput').focus();\n        });\n        //用户列表\n        this.socket.on('cuList',function(users){\n        \tvar cuList = $('#right');\n        \tvar addStr = \"\";\n        \tconsole.log(users);\n        \tusers.forEach(function(user){\n        \t\taddStr += user + '<br/>';\n        \t});\n        \tcuList.html('用户列表<br/>'+addStr);\n        })\n        //连接失败\n        this.socket.on('error', function(err) {\n            if ($('#loginArea').style.display == 'none') {\n                $('#onlineCount').text('连接失败！');\n            } else {\n                $('#info').text('连接失败！');\n            }\n        });\n        //系统通知用户加入或离开\n        this.socket.on('system', function(usrName, userCount, type) {\n            var msg = usrName + (type == 'login' ? '来了' : '滚了');\n            that._displayNewMsg('system ', msg, 'red');\n            $('#onlineCount').text(userCount + (userCount > 1 ? ' users' : ' user') + ' online');\n        });\n        //发送消息\n        this.socket.on('newMsg', function(user, msg, color) {\n            that._displayNewMsg(user, msg, color);\n        });\n        //发送图片\n        this.socket.on('newImg', function(user, img, color) {\n            that._displayImage(user, img, color);\n        });\n        \n        //底层监听事件\n        \n        //登陆按钮\n        $('#loginBtn').on('click tap', function() {\n            var usrName = $('#usrName').val();\n            if ($.trim(usrName).length != 0) {\n                that.socket.emit('login', usrName);\n                that.socket.emit('cuList', users);\n            } else {\n                $('#usrName').focus();\n            };\n        });\n        //登陆监听enter\n        $('#usrName').on('keyup', function(e) {\n            if (e.keyCode == 13) {\n                var usrName = $('#usrName').val();\n                if ($.trim(usrName).length != 0) {\n                    that.socket.emit('login', usrName);\n                    that.socket.emit('cuList', users);\n                };\n            };\n        });\n        //bind发送按钮\n        $('#sendBtn').on('click tap', function() {\n            var messageInput = $('#messageInput'),\n                msg = messageInput.val(),\n                color = $('#colorStyle').val();\n            messageInput.val(' ');\n            messageInput.focus();\n            if ($.trim(msg).length != 0) {\n                that.socket.emit('postMsg', msg, color);\n                that._displayNewMsg('me', msg, color);\n                return;\n            };\n        });\n        //bind发送\n        $('#messageInput').on('keyup', function(e) {\n            var messageInput = $('#messageInput'),\n                msg = messageInput.val(),\n                color = $('#colorStyle').val();\n            if (e.keyCode == 13 && $.trim(msg).length != 0) {\n                messageInput.val(' ');\n                that.socket.emit('postMsg', msg, color);\n                that._displayNewMsg('me', msg, color);\n            };\n        });\n        //清空\n        $('#clearBtn').on('click tap', function() {\n            $('#winChat').html(\" \");\n        });\n        //发送图片\n        $('#imgSend').on('change', function() {\n            if (this.files.length != 0) {\n                var file = this.files[0],\n                    reader = new FileReader(),\n                    color = $('#colorStyle').val();\n                if (!reader) {\n                    that._displayNewMsg('system', '辣鸡浏览器不支持上传文件', 'red');\n                    this.val(' ');\n                    return;\n                };\n                //接收图片\n                reader.onload = function(e) {\n                    that.socket.emit('img', e.target.result, color);\n                    that._displayImage('me', e.target.result, color);\n                };\n                reader.readAsDataURL(file);\n            };\n        });\n        //图片包\n        this._initialLxh();\n        //按钮\n        $('#lxh').on('click tap', function(e) {\n            var lxhwrapper = $('#lxhWrapper');\n            lxhwrapper.css('display','block');\n            e.stopPropagation();\n        });\n        //二级图片栏\n        $('body').on('click', function(e) {\n            var lxhwrapper = $('#lxhWrapper');\n            if (e.target != lxhwrapper) {\n                lxhwrapper.css('display','none');\n            };\n        });\n        $('#lxhWrapper').on('click tap', function(e) {\n            var target = e.target;\n            if (target.nodeName.toLowerCase() == 'img') {\n                var messageInput = $('#messageInput');\n                messageInput.focus();\n                messageInput.val(messageInput.val() + '[lxh:' + target.title + ']');\n            };\n        });\n    },\n    \t//发送图片\n    _initialLxh: function() {\n        var lxhContainer = $('#lxhWrapper'),\n            docFragment = document.createDocumentFragment();\n        for (var i = 100; i > 0; i--) {\n            var lxhItem = document.createElement('img');\n            lxhItem.src = '../content/lxh/' + i + '.gif';\n            lxhItem.title = i;\n            docFragment.appendChild(lxhItem);\n        };\n        lxhContainer.append(docFragment);\n    },\n    _displayNewMsg: function(user, msg, color) {\n        var container = $('#winChat'),\n            msgToDisplay = $('<p></p>'),\n            date = new Date().toTimeString().substr(0, 8),\n            msg = this._showLxh(msg);\n        msgToDisplay.css('color',color || '#000');\n        msgToDisplay.html(user + '<span class=\"timespan\">(' + date + '): </span>' + msg);\n        container.append(msgToDisplay);\n        container.scrollTop = container.scrollHeight;\n    },\n    _displayImage: function(user, imgData, color) {\n        var container = $('#winChat'),\n            msgToDisplay = $('<p></p>'),\n            date = new Date().toTimeString().substr(0, 8);\n        msgToDisplay.css('color',color || '#000');\n        msgToDisplay.html(user + '<span class=\"timespan\">(' + date + '): </span> <br/>' + '<a href=\"' + imgData + '\" target=\"_blank\"><img src=\"' + imgData + '\"/></a>');\n        container.append(msgToDisplay);\n        container.scrollTop = container.scrollHeight;\n    },\n    _showLxh: function(msg) {\n        var match, \n        \tresult = msg,\n            reg = /\\[lxh:\\d+\\]/g,\n            lxhIndex,\n            totalLxhNum = $('#lxhWrapper').children().length;\n        while (match = reg.exec(msg)) {\n            lxhIndex = match[0].slice(5, -1);\n            console.log(lxhIndex);\n            if (lxhIndex > totalLxhNum) {\n                result = result.replace(match[0], '[X]');\n            } else {\n                result = result.replace(match[0], '<img class=\"lxh\" src=\"../content/lxh/' + lxhIndex + '.gif\" />');\n            };\n        };\n        return result;\n    }\n};\n```\n\n```html\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"description\" content=\"webchat | a simple chat application built with node.js and websocket\">\n        <meta name=\"viewport\"content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>    \n       <title>webchat</title>\n        <link rel=\"stylesheet\" href=\"styles/main.css\">\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n        <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n    </head>\n    <body>\n        <div class=\"wrapper\">\n            <div class=\"banner\">\n                <div>WebChat</div>\n                <span id=\"onlineCount\"></span>\n            </div>\n            <div id=\"winChat\">\n            </div>\n            <div class=\"controls\" >\n                <div class=\"items\">\n                    <input id=\"colorStyle\" type=\"color\" placeHolder='#000' title=\"font color\" />\n                    <input id=\"lxh\" type=\"button\" value=\"lxh\" title=\"lxh\" />\n                    <label for=\"imgSend\" class=\"imgLabel\">\n                        <input type=\"button\" value=\"表情\" style=\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\" />\n                        <input id=\"imgSend\" type=\"file\" accept=\"image/gif\" value=\"表情\"  />\n                    </label>\n                    <input id=\"clearBtn\" type=\"button\" value=\"清空\" title=\"clear screen\" />\n                </div>\n                <input type=\"text\" id=\"messageInput\" placeHolder=\"enter to send\"/>\n                <input id=\"sendBtn\" type=\"button\" value=\"发送\">\n                <div id=\"lxhWrapper\">\n                </div>\n            </div>\n        </div>\n        <div class=\"right\" id=\"right\"></div>\n        <div id=\"loginArea\">\n            <p id=\"info\">正在连接服务器...</p>\n            <div id=\"inModal\">\n                <input type=\"text\" placeHolder=\"请输入昵称\" id=\"usrName\" />\n                <input type=\"button\" value=\"进入\" id=\"loginBtn\" />\n            </div>\n        </div>\n        <script src=\"scripts/jquery-2.1.0.js\"></script>\n        <script src=\"/socket.io/socket.io.js\"></script>\n        <script src=\"scripts/webchat.js\"></script>\n    </body>\n</html>\n```\n\n```html\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"description\" content=\"webchat | a simple chat application built with node.js and websocket\">\n        <meta name=\"viewport\"content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>    \n       <title>webchat</title>\n        <link rel=\"stylesheet\" href=\"styles/main.css\">\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n        <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n    </head>\n    <body>\n        <div class=\"wrapper\">\n            <div class=\"banner\">\n                <div>WebChat</div>\n                <span id=\"onlineCount\"></span>\n            </div>\n            <div id=\"winChat\">\n            </div>\n            <div class=\"controls\" >\n                <div class=\"items\">\n                    <input id=\"colorStyle\" type=\"color\" placeHolder='#000' title=\"font color\" />\n                    <input id=\"lxh\" type=\"button\" value=\"lxh\" title=\"lxh\" />\n                    <label for=\"imgSend\" class=\"imgLabel\">\n                        <input type=\"button\" value=\"表情\" style=\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\" />\n                        <input id=\"imgSend\" type=\"file\" accept=\"image/gif\" value=\"表情\"  />\n                    </label>\n                    <input id=\"clearBtn\" type=\"button\" value=\"清空\" title=\"clear screen\" />\n                </div>\n                <input type=\"text\" id=\"messageInput\" placeHolder=\"enter to send\"/>\n                <input id=\"sendBtn\" type=\"button\" value=\"发送\">\n                <div id=\"lxhWrapper\">\n                </div>\n            </div>\n        </div>\n        <div class=\"right\" id=\"right\"></div>\n        <div id=\"loginArea\">\n            <p id=\"info\">正在连接服务器...</p>\n            <div id=\"inModal\">\n                <input type=\"text\" placeHolder=\"请输入昵称\" id=\"usrName\" />\n                <input type=\"button\" value=\"进入\" id=\"loginBtn\" />\n            </div>\n        </div>\n        <script src=\"scripts/jquery-2.1.0.js\"></script>\n        <script src=\"/socket.io/socket.io.js\"></script>\n        <script src=\"scripts/webchat.js\"></script>\n    </body>\n</html>\n```","source":"_posts/基于websocket实现服务器浏览器持续通信.md","raw":"---\ntitle: 基于websocket实现服务器浏览器持续通信\ndate: 2016-12-10 21:14:18\ntags:\n  - node\n  - javascript\n---\n\n为了网络程序设计大作业，了解了http,websocket,node及其框架...\n<!--more-->\n\n### http协议\n  * HTTP是超文本传输协议，是客户端浏览器或其他程序与Web服务器之间的应用层通信协议\n * HTTP使用TCP/IP建立连接\n![](http://upload-images.jianshu.io/upload_images/3767061-36776499e489d972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/3767061-25b34aab5fc17bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n * TCP客户端和服务器通过TCP套接字接口通信\n\n![](http://upload-images.jianshu.io/upload_images/3767061-ff829f1fafae57a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### Websocket\n - Websocket是一个持久化的协议\n  http1.0的生命周期很短，一个request一个response完成后就结束\n http1.1增加了一个keep-alive，在一个http连接中可以发送多个request，接收多个response\n\n![](http://upload-images.jianshu.io/upload_images/3767061-b512a13ed3c4cd9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/3767061-92194c7aa3f952d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这是一个 websocket的request和 response\n\n - websocket解决了http的部分难题\n  * **被动性** 服务端可以主动推送信息给客户端，不需要客户端不断请求\n  * **持久性** 只需要一次握手，整个通信建立在一次连接中，避免了中介反复解析\n\n### 基于express和socket.io构建聊天室\n\n - express\n  安装\n  ``` sh\n npm install express -g\n```\nserver.js引用模块\n``` js\nvar express = require('express'),\napp = express(),\nserver = require('http').createServer(app);  //创建服务\napp.use('/', express.static(__dirname + '/www')); //调用静态文件\n```\n\n- socket.IO\n  可以接受所有与服务器相连接的客户端发送的消息，也可向客户端主动发送消息。\n  安装\n``` sh\n npm install socket.io\n```\n引用\n``` js\nvar io = require('socket.io').listen(server);\nserver.listen(process.env.PORT || 3000);  //监听端口\n```\n\n- connect\n```js\nio.sockets.on('connection', function(socket) {   //建立连接\n    //新用户\n    socket.on('login', function(usrName,user) {\n        if (users.indexOf(usrName) > -1) {\n            socket.emit('usrExisted');\n        } else {\n            socket.userIndex = users.length;\n            socket.usrName = usrName;\n            socket.users = users;\n            users.push(usrName);\n            date = new Date().toTimeString().substr(0, 8);\n            console.log(date+\"/\"+usrName+'加入了聊天');\n            socket.emit('loginSuccess');\n            io.sockets.emit('system', usrName, users.length, 'login');\n            io.sockets.emit('cuList', users);\n        };\n    });\n    //用户离开\n    socket.on('disconnect', function(user) {\n        if (socket.usrName != null) {\n        \tsocket.users = users;\n            users.splice(socket.userIndex, 1);\n            date = new Date().toTimeString().substr(0, 8);\n            console.log(date+\"/\"+socket.usrName+'滚蛋了');\n            socket.broadcast.emit('system', socket.usrName, users.length, 'logout');\n\t\t\tio.sockets.emit('cuList', users);\n        }\n    });\n    //用户列表\n\t//新消息\n    socket.on('postMsg', function(msg, color) {\n    \tdate = new Date().toTimeString().substr(0, 8);\n    \tconsole.log(date+\"/\"+socket.usrName+'：'+msg);\n        socket.broadcast.emit('newMsg', socket.usrName, msg, color);\n    });\n    //新图片\n    socket.on('img', function(imgData, color) {\n    \tdate = new Date().toTimeString().substr(0, 8);\n    \tconsole.log(date+\"/\"+socket.usrName+'：'+imgData);\n        socket.broadcast.emit('newImg', socket.usrName, imgData, color);\n    });\n});\n```\n- 客户端js,html,css\n\n```js\nwindow.onload = function() {\n    var webchat = new WebChat();\n    webchat.init();\n};\nvar WebChat = function() {\n    this.socket = null;\n};\nWebChat.prototype = {\n    init: function() {\n        var that = this;\n        this.socket = io.connect();\n        //建立连接\n        this.socket.on('connect', function() {\n        \t$('#info').text('大爷儿，进来玩玩');\n        \t$('#inModal').css('display','block');\n        \t$('#usrName').focus();\n        });\n        //昵称占用\n        this.socket.on('usrExisted', function() {\n            $('#info').text('昵称已被使用，请换一个试试！');\n        });\n        //登陆成功\n        this.socket.on('loginSuccess', function() {\n        \tdocument.title ='webchat | ' + $('#usrName').val();\n        \t$('#loginArea').css('display','none');\n        \t$('#messageInput').focus();\n        });\n        //用户列表\n        this.socket.on('cuList',function(users){\n        \tvar cuList = $('#right');\n        \tvar addStr = \"\";\n        \tconsole.log(users);\n        \tusers.forEach(function(user){\n        \t\taddStr += user + '<br/>';\n        \t});\n        \tcuList.html('用户列表<br/>'+addStr);\n        })\n        //连接失败\n        this.socket.on('error', function(err) {\n            if ($('#loginArea').style.display == 'none') {\n                $('#onlineCount').text('连接失败！');\n            } else {\n                $('#info').text('连接失败！');\n            }\n        });\n        //系统通知用户加入或离开\n        this.socket.on('system', function(usrName, userCount, type) {\n            var msg = usrName + (type == 'login' ? '来了' : '滚了');\n            that._displayNewMsg('system ', msg, 'red');\n            $('#onlineCount').text(userCount + (userCount > 1 ? ' users' : ' user') + ' online');\n        });\n        //发送消息\n        this.socket.on('newMsg', function(user, msg, color) {\n            that._displayNewMsg(user, msg, color);\n        });\n        //发送图片\n        this.socket.on('newImg', function(user, img, color) {\n            that._displayImage(user, img, color);\n        });\n        \n        //底层监听事件\n        \n        //登陆按钮\n        $('#loginBtn').on('click tap', function() {\n            var usrName = $('#usrName').val();\n            if ($.trim(usrName).length != 0) {\n                that.socket.emit('login', usrName);\n                that.socket.emit('cuList', users);\n            } else {\n                $('#usrName').focus();\n            };\n        });\n        //登陆监听enter\n        $('#usrName').on('keyup', function(e) {\n            if (e.keyCode == 13) {\n                var usrName = $('#usrName').val();\n                if ($.trim(usrName).length != 0) {\n                    that.socket.emit('login', usrName);\n                    that.socket.emit('cuList', users);\n                };\n            };\n        });\n        //bind发送按钮\n        $('#sendBtn').on('click tap', function() {\n            var messageInput = $('#messageInput'),\n                msg = messageInput.val(),\n                color = $('#colorStyle').val();\n            messageInput.val(' ');\n            messageInput.focus();\n            if ($.trim(msg).length != 0) {\n                that.socket.emit('postMsg', msg, color);\n                that._displayNewMsg('me', msg, color);\n                return;\n            };\n        });\n        //bind发送\n        $('#messageInput').on('keyup', function(e) {\n            var messageInput = $('#messageInput'),\n                msg = messageInput.val(),\n                color = $('#colorStyle').val();\n            if (e.keyCode == 13 && $.trim(msg).length != 0) {\n                messageInput.val(' ');\n                that.socket.emit('postMsg', msg, color);\n                that._displayNewMsg('me', msg, color);\n            };\n        });\n        //清空\n        $('#clearBtn').on('click tap', function() {\n            $('#winChat').html(\" \");\n        });\n        //发送图片\n        $('#imgSend').on('change', function() {\n            if (this.files.length != 0) {\n                var file = this.files[0],\n                    reader = new FileReader(),\n                    color = $('#colorStyle').val();\n                if (!reader) {\n                    that._displayNewMsg('system', '辣鸡浏览器不支持上传文件', 'red');\n                    this.val(' ');\n                    return;\n                };\n                //接收图片\n                reader.onload = function(e) {\n                    that.socket.emit('img', e.target.result, color);\n                    that._displayImage('me', e.target.result, color);\n                };\n                reader.readAsDataURL(file);\n            };\n        });\n        //图片包\n        this._initialLxh();\n        //按钮\n        $('#lxh').on('click tap', function(e) {\n            var lxhwrapper = $('#lxhWrapper');\n            lxhwrapper.css('display','block');\n            e.stopPropagation();\n        });\n        //二级图片栏\n        $('body').on('click', function(e) {\n            var lxhwrapper = $('#lxhWrapper');\n            if (e.target != lxhwrapper) {\n                lxhwrapper.css('display','none');\n            };\n        });\n        $('#lxhWrapper').on('click tap', function(e) {\n            var target = e.target;\n            if (target.nodeName.toLowerCase() == 'img') {\n                var messageInput = $('#messageInput');\n                messageInput.focus();\n                messageInput.val(messageInput.val() + '[lxh:' + target.title + ']');\n            };\n        });\n    },\n    \t//发送图片\n    _initialLxh: function() {\n        var lxhContainer = $('#lxhWrapper'),\n            docFragment = document.createDocumentFragment();\n        for (var i = 100; i > 0; i--) {\n            var lxhItem = document.createElement('img');\n            lxhItem.src = '../content/lxh/' + i + '.gif';\n            lxhItem.title = i;\n            docFragment.appendChild(lxhItem);\n        };\n        lxhContainer.append(docFragment);\n    },\n    _displayNewMsg: function(user, msg, color) {\n        var container = $('#winChat'),\n            msgToDisplay = $('<p></p>'),\n            date = new Date().toTimeString().substr(0, 8),\n            msg = this._showLxh(msg);\n        msgToDisplay.css('color',color || '#000');\n        msgToDisplay.html(user + '<span class=\"timespan\">(' + date + '): </span>' + msg);\n        container.append(msgToDisplay);\n        container.scrollTop = container.scrollHeight;\n    },\n    _displayImage: function(user, imgData, color) {\n        var container = $('#winChat'),\n            msgToDisplay = $('<p></p>'),\n            date = new Date().toTimeString().substr(0, 8);\n        msgToDisplay.css('color',color || '#000');\n        msgToDisplay.html(user + '<span class=\"timespan\">(' + date + '): </span> <br/>' + '<a href=\"' + imgData + '\" target=\"_blank\"><img src=\"' + imgData + '\"/></a>');\n        container.append(msgToDisplay);\n        container.scrollTop = container.scrollHeight;\n    },\n    _showLxh: function(msg) {\n        var match, \n        \tresult = msg,\n            reg = /\\[lxh:\\d+\\]/g,\n            lxhIndex,\n            totalLxhNum = $('#lxhWrapper').children().length;\n        while (match = reg.exec(msg)) {\n            lxhIndex = match[0].slice(5, -1);\n            console.log(lxhIndex);\n            if (lxhIndex > totalLxhNum) {\n                result = result.replace(match[0], '[X]');\n            } else {\n                result = result.replace(match[0], '<img class=\"lxh\" src=\"../content/lxh/' + lxhIndex + '.gif\" />');\n            };\n        };\n        return result;\n    }\n};\n```\n\n```html\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"description\" content=\"webchat | a simple chat application built with node.js and websocket\">\n        <meta name=\"viewport\"content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>    \n       <title>webchat</title>\n        <link rel=\"stylesheet\" href=\"styles/main.css\">\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n        <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n    </head>\n    <body>\n        <div class=\"wrapper\">\n            <div class=\"banner\">\n                <div>WebChat</div>\n                <span id=\"onlineCount\"></span>\n            </div>\n            <div id=\"winChat\">\n            </div>\n            <div class=\"controls\" >\n                <div class=\"items\">\n                    <input id=\"colorStyle\" type=\"color\" placeHolder='#000' title=\"font color\" />\n                    <input id=\"lxh\" type=\"button\" value=\"lxh\" title=\"lxh\" />\n                    <label for=\"imgSend\" class=\"imgLabel\">\n                        <input type=\"button\" value=\"表情\" style=\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\" />\n                        <input id=\"imgSend\" type=\"file\" accept=\"image/gif\" value=\"表情\"  />\n                    </label>\n                    <input id=\"clearBtn\" type=\"button\" value=\"清空\" title=\"clear screen\" />\n                </div>\n                <input type=\"text\" id=\"messageInput\" placeHolder=\"enter to send\"/>\n                <input id=\"sendBtn\" type=\"button\" value=\"发送\">\n                <div id=\"lxhWrapper\">\n                </div>\n            </div>\n        </div>\n        <div class=\"right\" id=\"right\"></div>\n        <div id=\"loginArea\">\n            <p id=\"info\">正在连接服务器...</p>\n            <div id=\"inModal\">\n                <input type=\"text\" placeHolder=\"请输入昵称\" id=\"usrName\" />\n                <input type=\"button\" value=\"进入\" id=\"loginBtn\" />\n            </div>\n        </div>\n        <script src=\"scripts/jquery-2.1.0.js\"></script>\n        <script src=\"/socket.io/socket.io.js\"></script>\n        <script src=\"scripts/webchat.js\"></script>\n    </body>\n</html>\n```\n\n```html\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"description\" content=\"webchat | a simple chat application built with node.js and websocket\">\n        <meta name=\"viewport\"content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>    \n       <title>webchat</title>\n        <link rel=\"stylesheet\" href=\"styles/main.css\">\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n        <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n    </head>\n    <body>\n        <div class=\"wrapper\">\n            <div class=\"banner\">\n                <div>WebChat</div>\n                <span id=\"onlineCount\"></span>\n            </div>\n            <div id=\"winChat\">\n            </div>\n            <div class=\"controls\" >\n                <div class=\"items\">\n                    <input id=\"colorStyle\" type=\"color\" placeHolder='#000' title=\"font color\" />\n                    <input id=\"lxh\" type=\"button\" value=\"lxh\" title=\"lxh\" />\n                    <label for=\"imgSend\" class=\"imgLabel\">\n                        <input type=\"button\" value=\"表情\" style=\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\" />\n                        <input id=\"imgSend\" type=\"file\" accept=\"image/gif\" value=\"表情\"  />\n                    </label>\n                    <input id=\"clearBtn\" type=\"button\" value=\"清空\" title=\"clear screen\" />\n                </div>\n                <input type=\"text\" id=\"messageInput\" placeHolder=\"enter to send\"/>\n                <input id=\"sendBtn\" type=\"button\" value=\"发送\">\n                <div id=\"lxhWrapper\">\n                </div>\n            </div>\n        </div>\n        <div class=\"right\" id=\"right\"></div>\n        <div id=\"loginArea\">\n            <p id=\"info\">正在连接服务器...</p>\n            <div id=\"inModal\">\n                <input type=\"text\" placeHolder=\"请输入昵称\" id=\"usrName\" />\n                <input type=\"button\" value=\"进入\" id=\"loginBtn\" />\n            </div>\n        </div>\n        <script src=\"scripts/jquery-2.1.0.js\"></script>\n        <script src=\"/socket.io/socket.io.js\"></script>\n        <script src=\"scripts/webchat.js\"></script>\n    </body>\n</html>\n```","slug":"基于websocket实现服务器浏览器持续通信","published":1,"updated":"2017-12-03T13:30:23.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulq001gjbze0cs4h5ht","content":"<p>为了网络程序设计大作业，了解了http,websocket,node及其框架…<br><a id=\"more\"></a></p>\n<h3 id=\"http协议\"><a href=\"#http协议\" class=\"headerlink\" title=\"http协议\"></a>http协议</h3><ul>\n<li>HTTP是超文本传输协议，是客户端浏览器或其他程序与Web服务器之间的应用层通信协议<ul>\n<li>HTTP使用TCP/IP建立连接<br><img src=\"http://upload-images.jianshu.io/upload_images/3767061-36776499e489d972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-25b34aab5fc17bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ul>\n<li>TCP客户端和服务器通过TCP套接字接口通信</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-ff829f1fafae57a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h3><ul>\n<li>Websocket是一个持久化的协议<br>http1.0的生命周期很短，一个request一个response完成后就结束<br>http1.1增加了一个keep-alive，在一个http连接中可以发送多个request，接收多个response</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-b512a13ed3c4cd9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-92194c7aa3f952d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>这是一个 websocket的request和 response</p>\n<ul>\n<li>websocket解决了http的部分难题<ul>\n<li><strong>被动性</strong> 服务端可以主动推送信息给客户端，不需要客户端不断请求</li>\n<li><strong>持久性</strong> 只需要一次握手，整个通信建立在一次连接中，避免了中介反复解析</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于express和socket-io构建聊天室\"><a href=\"#基于express和socket-io构建聊天室\" class=\"headerlink\" title=\"基于express和socket.io构建聊天室\"></a>基于express和socket.io构建聊天室</h3><ul>\n<li>express<br>安装<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express -g</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>server.js引用模块<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>),</div><div class=\"line\">app = express(),</div><div class=\"line\">server = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer(app);  <span class=\"comment\">//创建服务</span></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, express.static(__dirname + <span class=\"string\">'/www'</span>)); <span class=\"comment\">//调用静态文件</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>socket.IO<br>可以接受所有与服务器相连接的客户端发送的消息，也可向客户端主动发送消息。<br>安装<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install socket.io</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>引用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>).listen(server);</div><div class=\"line\">server.listen(process.env.PORT || <span class=\"number\">3000</span>);  <span class=\"comment\">//监听端口</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>connect</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">io.sockets.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>) </span>&#123;   <span class=\"comment\">//建立连接</span></div><div class=\"line\">    <span class=\"comment\">//新用户</span></div><div class=\"line\">    socket.on(<span class=\"string\">'login'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">usrName,user</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (users.indexOf(usrName) &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            socket.emit(<span class=\"string\">'usrExisted'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            socket.userIndex = users.length;</div><div class=\"line\">            socket.usrName = usrName;</div><div class=\"line\">            socket.users = users;</div><div class=\"line\">            users.push(usrName);</div><div class=\"line\">            date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(date+<span class=\"string\">\"/\"</span>+usrName+<span class=\"string\">'加入了聊天'</span>);</div><div class=\"line\">            socket.emit(<span class=\"string\">'loginSuccess'</span>);</div><div class=\"line\">            io.sockets.emit(<span class=\"string\">'system'</span>, usrName, users.length, <span class=\"string\">'login'</span>);</div><div class=\"line\">            io.sockets.emit(<span class=\"string\">'cuList'</span>, users);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//用户离开</span></div><div class=\"line\">    socket.on(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (socket.usrName != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        \tsocket.users = users;</div><div class=\"line\">            users.splice(socket.userIndex, <span class=\"number\">1</span>);</div><div class=\"line\">            date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(date+<span class=\"string\">\"/\"</span>+socket.usrName+<span class=\"string\">'滚蛋了'</span>);</div><div class=\"line\">            socket.broadcast.emit(<span class=\"string\">'system'</span>, socket.usrName, users.length, <span class=\"string\">'logout'</span>);</div><div class=\"line\">\t\t\tio.sockets.emit(<span class=\"string\">'cuList'</span>, users);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//用户列表</span></div><div class=\"line\">\t<span class=\"comment\">//新消息</span></div><div class=\"line\">    socket.on(<span class=\"string\">'postMsg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg, color</span>) </span>&#123;</div><div class=\"line\">    \tdate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(date+<span class=\"string\">\"/\"</span>+socket.usrName+<span class=\"string\">'：'</span>+msg);</div><div class=\"line\">        socket.broadcast.emit(<span class=\"string\">'newMsg'</span>, socket.usrName, msg, color);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//新图片</span></div><div class=\"line\">    socket.on(<span class=\"string\">'img'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">imgData, color</span>) </span>&#123;</div><div class=\"line\">    \tdate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(date+<span class=\"string\">\"/\"</span>+socket.usrName+<span class=\"string\">'：'</span>+imgData);</div><div class=\"line\">        socket.broadcast.emit(<span class=\"string\">'newImg'</span>, socket.usrName, imgData, color);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>客户端js,html,css</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> webchat = <span class=\"keyword\">new</span> WebChat();</div><div class=\"line\">    webchat.init();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> WebChat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.socket = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">WebChat.prototype = &#123;</div><div class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.socket = io.connect();</div><div class=\"line\">        <span class=\"comment\">//建立连接</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        \t$(<span class=\"string\">'#info'</span>).text(<span class=\"string\">'大爷儿，进来玩玩'</span>);</div><div class=\"line\">        \t$(<span class=\"string\">'#inModal'</span>).css(<span class=\"string\">'display'</span>,<span class=\"string\">'block'</span>);</div><div class=\"line\">        \t$(<span class=\"string\">'#usrName'</span>).focus();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//昵称占用</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'usrExisted'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'#info'</span>).text(<span class=\"string\">'昵称已被使用，请换一个试试！'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//登陆成功</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'loginSuccess'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        \t<span class=\"built_in\">document</span>.title =<span class=\"string\">'webchat | '</span> + $(<span class=\"string\">'#usrName'</span>).val();</div><div class=\"line\">        \t$(<span class=\"string\">'#loginArea'</span>).css(<span class=\"string\">'display'</span>,<span class=\"string\">'none'</span>);</div><div class=\"line\">        \t$(<span class=\"string\">'#messageInput'</span>).focus();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//用户列表</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'cuList'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">users</span>)</span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">var</span> cuList = $(<span class=\"string\">'#right'</span>);</div><div class=\"line\">        \t<span class=\"keyword\">var</span> addStr = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        \t<span class=\"built_in\">console</span>.log(users);</div><div class=\"line\">        \tusers.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</div><div class=\"line\">        \t\taddStr += user + <span class=\"string\">'&lt;br/&gt;'</span>;</div><div class=\"line\">        \t&#125;);</div><div class=\"line\">        \tcuList.html(<span class=\"string\">'用户列表&lt;br/&gt;'</span>+addStr);</div><div class=\"line\">        &#125;)</div><div class=\"line\">        <span class=\"comment\">//连接失败</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($(<span class=\"string\">'#loginArea'</span>).style.display == <span class=\"string\">'none'</span>) &#123;</div><div class=\"line\">                $(<span class=\"string\">'#onlineCount'</span>).text(<span class=\"string\">'连接失败！'</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                $(<span class=\"string\">'#info'</span>).text(<span class=\"string\">'连接失败！'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//系统通知用户加入或离开</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'system'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">usrName, userCount, type</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> msg = usrName + (type == <span class=\"string\">'login'</span> ? <span class=\"string\">'来了'</span> : <span class=\"string\">'滚了'</span>);</div><div class=\"line\">            that._displayNewMsg(<span class=\"string\">'system '</span>, msg, <span class=\"string\">'red'</span>);</div><div class=\"line\">            $(<span class=\"string\">'#onlineCount'</span>).text(userCount + (userCount &gt; <span class=\"number\">1</span> ? <span class=\"string\">' users'</span> : <span class=\"string\">' user'</span>) + <span class=\"string\">' online'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//发送消息</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'newMsg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user, msg, color</span>) </span>&#123;</div><div class=\"line\">            that._displayNewMsg(user, msg, color);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//发送图片</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'newImg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user, img, color</span>) </span>&#123;</div><div class=\"line\">            that._displayImage(user, img, color);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//底层监听事件</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//登陆按钮</span></div><div class=\"line\">        $(<span class=\"string\">'#loginBtn'</span>).on(<span class=\"string\">'click tap'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> usrName = $(<span class=\"string\">'#usrName'</span>).val();</div><div class=\"line\">            <span class=\"keyword\">if</span> ($.trim(usrName).length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                that.socket.emit(<span class=\"string\">'login'</span>, usrName);</div><div class=\"line\">                that.socket.emit(<span class=\"string\">'cuList'</span>, users);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                $(<span class=\"string\">'#usrName'</span>).focus();</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//登陆监听enter</span></div><div class=\"line\">        $(<span class=\"string\">'#usrName'</span>).on(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (e.keyCode == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> usrName = $(<span class=\"string\">'#usrName'</span>).val();</div><div class=\"line\">                <span class=\"keyword\">if</span> ($.trim(usrName).length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    that.socket.emit(<span class=\"string\">'login'</span>, usrName);</div><div class=\"line\">                    that.socket.emit(<span class=\"string\">'cuList'</span>, users);</div><div class=\"line\">                &#125;;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//bind发送按钮</span></div><div class=\"line\">        $(<span class=\"string\">'#sendBtn'</span>).on(<span class=\"string\">'click tap'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> messageInput = $(<span class=\"string\">'#messageInput'</span>),</div><div class=\"line\">                msg = messageInput.val(),</div><div class=\"line\">                color = $(<span class=\"string\">'#colorStyle'</span>).val();</div><div class=\"line\">            messageInput.val(<span class=\"string\">' '</span>);</div><div class=\"line\">            messageInput.focus();</div><div class=\"line\">            <span class=\"keyword\">if</span> ($.trim(msg).length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                that.socket.emit(<span class=\"string\">'postMsg'</span>, msg, color);</div><div class=\"line\">                that._displayNewMsg(<span class=\"string\">'me'</span>, msg, color);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//bind发送</span></div><div class=\"line\">        $(<span class=\"string\">'#messageInput'</span>).on(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> messageInput = $(<span class=\"string\">'#messageInput'</span>),</div><div class=\"line\">                msg = messageInput.val(),</div><div class=\"line\">                color = $(<span class=\"string\">'#colorStyle'</span>).val();</div><div class=\"line\">            <span class=\"keyword\">if</span> (e.keyCode == <span class=\"number\">13</span> &amp;&amp; $.trim(msg).length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                messageInput.val(<span class=\"string\">' '</span>);</div><div class=\"line\">                that.socket.emit(<span class=\"string\">'postMsg'</span>, msg, color);</div><div class=\"line\">                that._displayNewMsg(<span class=\"string\">'me'</span>, msg, color);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//清空</span></div><div class=\"line\">        $(<span class=\"string\">'#clearBtn'</span>).on(<span class=\"string\">'click tap'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'#winChat'</span>).html(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//发送图片</span></div><div class=\"line\">        $(<span class=\"string\">'#imgSend'</span>).on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.files.length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> file = <span class=\"keyword\">this</span>.files[<span class=\"number\">0</span>],</div><div class=\"line\">                    reader = <span class=\"keyword\">new</span> FileReader(),</div><div class=\"line\">                    color = $(<span class=\"string\">'#colorStyle'</span>).val();</div><div class=\"line\">                <span class=\"keyword\">if</span> (!reader) &#123;</div><div class=\"line\">                    that._displayNewMsg(<span class=\"string\">'system'</span>, <span class=\"string\">'辣鸡浏览器不支持上传文件'</span>, <span class=\"string\">'red'</span>);</div><div class=\"line\">                    <span class=\"keyword\">this</span>.val(<span class=\"string\">' '</span>);</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;;</div><div class=\"line\">                <span class=\"comment\">//接收图片</span></div><div class=\"line\">                reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">                    that.socket.emit(<span class=\"string\">'img'</span>, e.target.result, color);</div><div class=\"line\">                    that._displayImage(<span class=\"string\">'me'</span>, e.target.result, color);</div><div class=\"line\">                &#125;;</div><div class=\"line\">                reader.readAsDataURL(file);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//图片包</span></div><div class=\"line\">        <span class=\"keyword\">this</span>._initialLxh();</div><div class=\"line\">        <span class=\"comment\">//按钮</span></div><div class=\"line\">        $(<span class=\"string\">'#lxh'</span>).on(<span class=\"string\">'click tap'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> lxhwrapper = $(<span class=\"string\">'#lxhWrapper'</span>);</div><div class=\"line\">            lxhwrapper.css(<span class=\"string\">'display'</span>,<span class=\"string\">'block'</span>);</div><div class=\"line\">            e.stopPropagation();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//二级图片栏</span></div><div class=\"line\">        $(<span class=\"string\">'body'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> lxhwrapper = $(<span class=\"string\">'#lxhWrapper'</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (e.target != lxhwrapper) &#123;</div><div class=\"line\">                lxhwrapper.css(<span class=\"string\">'display'</span>,<span class=\"string\">'none'</span>);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        $(<span class=\"string\">'#lxhWrapper'</span>).on(<span class=\"string\">'click tap'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> target = e.target;</div><div class=\"line\">            <span class=\"keyword\">if</span> (target.nodeName.toLowerCase() == <span class=\"string\">'img'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> messageInput = $(<span class=\"string\">'#messageInput'</span>);</div><div class=\"line\">                messageInput.focus();</div><div class=\"line\">                messageInput.val(messageInput.val() + <span class=\"string\">'[lxh:'</span> + target.title + <span class=\"string\">']'</span>);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \t<span class=\"comment\">//发送图片</span></div><div class=\"line\">    _initialLxh: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lxhContainer = $(<span class=\"string\">'#lxhWrapper'</span>),</div><div class=\"line\">            docFragment = <span class=\"built_in\">document</span>.createDocumentFragment();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">100</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> lxhItem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">            lxhItem.src = <span class=\"string\">'../content/lxh/'</span> + i + <span class=\"string\">'.gif'</span>;</div><div class=\"line\">            lxhItem.title = i;</div><div class=\"line\">            docFragment.appendChild(lxhItem);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        lxhContainer.append(docFragment);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    _displayNewMsg: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user, msg, color</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> container = $(<span class=\"string\">'#winChat'</span>),</div><div class=\"line\">            msgToDisplay = $(<span class=\"string\">'&lt;p&gt;&lt;/p&gt;'</span>),</div><div class=\"line\">            date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>),</div><div class=\"line\">            msg = <span class=\"keyword\">this</span>._showLxh(msg);</div><div class=\"line\">        msgToDisplay.css(<span class=\"string\">'color'</span>,color || <span class=\"string\">'#000'</span>);</div><div class=\"line\">        msgToDisplay.html(user + <span class=\"string\">'&lt;span class=\"timespan\"&gt;('</span> + date + <span class=\"string\">'): &lt;/span&gt;'</span> + msg);</div><div class=\"line\">        container.append(msgToDisplay);</div><div class=\"line\">        container.scrollTop = container.scrollHeight;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    _displayImage: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user, imgData, color</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> container = $(<span class=\"string\">'#winChat'</span>),</div><div class=\"line\">            msgToDisplay = $(<span class=\"string\">'&lt;p&gt;&lt;/p&gt;'</span>),</div><div class=\"line\">            date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">        msgToDisplay.css(<span class=\"string\">'color'</span>,color || <span class=\"string\">'#000'</span>);</div><div class=\"line\">        msgToDisplay.html(user + <span class=\"string\">'&lt;span class=\"timespan\"&gt;('</span> + date + <span class=\"string\">'): &lt;/span&gt; &lt;br/&gt;'</span> + <span class=\"string\">'&lt;a href=\"'</span> + imgData + <span class=\"string\">'\" target=\"_blank\"&gt;&lt;img src=\"'</span> + imgData + <span class=\"string\">'\"/&gt;&lt;/a&gt;'</span>);</div><div class=\"line\">        container.append(msgToDisplay);</div><div class=\"line\">        container.scrollTop = container.scrollHeight;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    _showLxh: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> match, </div><div class=\"line\">        \tresult = msg,</div><div class=\"line\">            reg = <span class=\"regexp\">/\\[lxh:\\d+\\]/g</span>,</div><div class=\"line\">            lxhIndex,</div><div class=\"line\">            totalLxhNum = $(<span class=\"string\">'#lxhWrapper'</span>).children().length;</div><div class=\"line\">        <span class=\"keyword\">while</span> (match = reg.exec(msg)) &#123;</div><div class=\"line\">            lxhIndex = match[<span class=\"number\">0</span>].slice(<span class=\"number\">5</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(lxhIndex);</div><div class=\"line\">            <span class=\"keyword\">if</span> (lxhIndex &gt; totalLxhNum) &#123;</div><div class=\"line\">                result = result.replace(match[<span class=\"number\">0</span>], <span class=\"string\">'[X]'</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                result = result.replace(match[<span class=\"number\">0</span>], <span class=\"string\">'&lt;img class=\"lxh\" src=\"../content/lxh/'</span> + lxhIndex + <span class=\"string\">'.gif\" /&gt;'</span>);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webchat | a simple chat application built with node.js and websocket\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span><span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>/&gt;</span>    </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webchat<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles/main.css\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"banner\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>WebChat<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"onlineCount\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"winChat\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"controls\"</span> &gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"items\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorStyle\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"color\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">'#000'</span> <span class=\"attr\">title</span>=<span class=\"string\">\"font color\"</span> /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lxh\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"lxh\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"lxh\"</span> /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"imgSend\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"imgLabel\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"表情\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\"</span> /&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imgSend\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/gif\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"表情\"</span>  /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clearBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"清空\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"clear screen\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"messageInput\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">\"enter to send\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"发送\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lxhWrapper\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginArea\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"info\"</span>&gt;</span>正在连接服务器...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inModal\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">\"请输入昵称\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"usrName\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"进入\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginBtn\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scripts/jquery-2.1.0.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/socket.io/socket.io.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scripts/webchat.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webchat | a simple chat application built with node.js and websocket\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span><span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>/&gt;</span>    </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webchat<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles/main.css\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"banner\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>WebChat<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"onlineCount\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"winChat\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"controls\"</span> &gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"items\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorStyle\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"color\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">'#000'</span> <span class=\"attr\">title</span>=<span class=\"string\">\"font color\"</span> /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lxh\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"lxh\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"lxh\"</span> /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"imgSend\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"imgLabel\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"表情\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\"</span> /&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imgSend\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/gif\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"表情\"</span>  /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clearBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"清空\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"clear screen\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"messageInput\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">\"enter to send\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"发送\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lxhWrapper\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginArea\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"info\"</span>&gt;</span>正在连接服务器...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inModal\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">\"请输入昵称\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"usrName\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"进入\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginBtn\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scripts/jquery-2.1.0.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/socket.io/socket.io.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scripts/webchat.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>为了网络程序设计大作业，了解了http,websocket,node及其框架…<br>","more":"</p>\n<h3 id=\"http协议\"><a href=\"#http协议\" class=\"headerlink\" title=\"http协议\"></a>http协议</h3><ul>\n<li>HTTP是超文本传输协议，是客户端浏览器或其他程序与Web服务器之间的应用层通信协议<ul>\n<li>HTTP使用TCP/IP建立连接<br><img src=\"http://upload-images.jianshu.io/upload_images/3767061-36776499e489d972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-25b34aab5fc17bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ul>\n<li>TCP客户端和服务器通过TCP套接字接口通信</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-ff829f1fafae57a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h3><ul>\n<li>Websocket是一个持久化的协议<br>http1.0的生命周期很短，一个request一个response完成后就结束<br>http1.1增加了一个keep-alive，在一个http连接中可以发送多个request，接收多个response</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-b512a13ed3c4cd9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3767061-92194c7aa3f952d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>这是一个 websocket的request和 response</p>\n<ul>\n<li>websocket解决了http的部分难题<ul>\n<li><strong>被动性</strong> 服务端可以主动推送信息给客户端，不需要客户端不断请求</li>\n<li><strong>持久性</strong> 只需要一次握手，整个通信建立在一次连接中，避免了中介反复解析</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于express和socket-io构建聊天室\"><a href=\"#基于express和socket-io构建聊天室\" class=\"headerlink\" title=\"基于express和socket.io构建聊天室\"></a>基于express和socket.io构建聊天室</h3><ul>\n<li>express<br>安装<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express -g</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>server.js引用模块<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>),</div><div class=\"line\">app = express(),</div><div class=\"line\">server = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer(app);  <span class=\"comment\">//创建服务</span></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, express.static(__dirname + <span class=\"string\">'/www'</span>)); <span class=\"comment\">//调用静态文件</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>socket.IO<br>可以接受所有与服务器相连接的客户端发送的消息，也可向客户端主动发送消息。<br>安装<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install socket.io</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>引用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>).listen(server);</div><div class=\"line\">server.listen(process.env.PORT || <span class=\"number\">3000</span>);  <span class=\"comment\">//监听端口</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>connect</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">io.sockets.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>) </span>&#123;   <span class=\"comment\">//建立连接</span></div><div class=\"line\">    <span class=\"comment\">//新用户</span></div><div class=\"line\">    socket.on(<span class=\"string\">'login'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">usrName,user</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (users.indexOf(usrName) &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            socket.emit(<span class=\"string\">'usrExisted'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            socket.userIndex = users.length;</div><div class=\"line\">            socket.usrName = usrName;</div><div class=\"line\">            socket.users = users;</div><div class=\"line\">            users.push(usrName);</div><div class=\"line\">            date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(date+<span class=\"string\">\"/\"</span>+usrName+<span class=\"string\">'加入了聊天'</span>);</div><div class=\"line\">            socket.emit(<span class=\"string\">'loginSuccess'</span>);</div><div class=\"line\">            io.sockets.emit(<span class=\"string\">'system'</span>, usrName, users.length, <span class=\"string\">'login'</span>);</div><div class=\"line\">            io.sockets.emit(<span class=\"string\">'cuList'</span>, users);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//用户离开</span></div><div class=\"line\">    socket.on(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (socket.usrName != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        \tsocket.users = users;</div><div class=\"line\">            users.splice(socket.userIndex, <span class=\"number\">1</span>);</div><div class=\"line\">            date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(date+<span class=\"string\">\"/\"</span>+socket.usrName+<span class=\"string\">'滚蛋了'</span>);</div><div class=\"line\">            socket.broadcast.emit(<span class=\"string\">'system'</span>, socket.usrName, users.length, <span class=\"string\">'logout'</span>);</div><div class=\"line\">\t\t\tio.sockets.emit(<span class=\"string\">'cuList'</span>, users);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//用户列表</span></div><div class=\"line\">\t<span class=\"comment\">//新消息</span></div><div class=\"line\">    socket.on(<span class=\"string\">'postMsg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg, color</span>) </span>&#123;</div><div class=\"line\">    \tdate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(date+<span class=\"string\">\"/\"</span>+socket.usrName+<span class=\"string\">'：'</span>+msg);</div><div class=\"line\">        socket.broadcast.emit(<span class=\"string\">'newMsg'</span>, socket.usrName, msg, color);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//新图片</span></div><div class=\"line\">    socket.on(<span class=\"string\">'img'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">imgData, color</span>) </span>&#123;</div><div class=\"line\">    \tdate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(date+<span class=\"string\">\"/\"</span>+socket.usrName+<span class=\"string\">'：'</span>+imgData);</div><div class=\"line\">        socket.broadcast.emit(<span class=\"string\">'newImg'</span>, socket.usrName, imgData, color);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>客户端js,html,css</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> webchat = <span class=\"keyword\">new</span> WebChat();</div><div class=\"line\">    webchat.init();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> WebChat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.socket = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">WebChat.prototype = &#123;</div><div class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.socket = io.connect();</div><div class=\"line\">        <span class=\"comment\">//建立连接</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        \t$(<span class=\"string\">'#info'</span>).text(<span class=\"string\">'大爷儿，进来玩玩'</span>);</div><div class=\"line\">        \t$(<span class=\"string\">'#inModal'</span>).css(<span class=\"string\">'display'</span>,<span class=\"string\">'block'</span>);</div><div class=\"line\">        \t$(<span class=\"string\">'#usrName'</span>).focus();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//昵称占用</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'usrExisted'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'#info'</span>).text(<span class=\"string\">'昵称已被使用，请换一个试试！'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//登陆成功</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'loginSuccess'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        \t<span class=\"built_in\">document</span>.title =<span class=\"string\">'webchat | '</span> + $(<span class=\"string\">'#usrName'</span>).val();</div><div class=\"line\">        \t$(<span class=\"string\">'#loginArea'</span>).css(<span class=\"string\">'display'</span>,<span class=\"string\">'none'</span>);</div><div class=\"line\">        \t$(<span class=\"string\">'#messageInput'</span>).focus();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//用户列表</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'cuList'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">users</span>)</span>&#123;</div><div class=\"line\">        \t<span class=\"keyword\">var</span> cuList = $(<span class=\"string\">'#right'</span>);</div><div class=\"line\">        \t<span class=\"keyword\">var</span> addStr = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        \t<span class=\"built_in\">console</span>.log(users);</div><div class=\"line\">        \tusers.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</div><div class=\"line\">        \t\taddStr += user + <span class=\"string\">'&lt;br/&gt;'</span>;</div><div class=\"line\">        \t&#125;);</div><div class=\"line\">        \tcuList.html(<span class=\"string\">'用户列表&lt;br/&gt;'</span>+addStr);</div><div class=\"line\">        &#125;)</div><div class=\"line\">        <span class=\"comment\">//连接失败</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($(<span class=\"string\">'#loginArea'</span>).style.display == <span class=\"string\">'none'</span>) &#123;</div><div class=\"line\">                $(<span class=\"string\">'#onlineCount'</span>).text(<span class=\"string\">'连接失败！'</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                $(<span class=\"string\">'#info'</span>).text(<span class=\"string\">'连接失败！'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//系统通知用户加入或离开</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'system'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">usrName, userCount, type</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> msg = usrName + (type == <span class=\"string\">'login'</span> ? <span class=\"string\">'来了'</span> : <span class=\"string\">'滚了'</span>);</div><div class=\"line\">            that._displayNewMsg(<span class=\"string\">'system '</span>, msg, <span class=\"string\">'red'</span>);</div><div class=\"line\">            $(<span class=\"string\">'#onlineCount'</span>).text(userCount + (userCount &gt; <span class=\"number\">1</span> ? <span class=\"string\">' users'</span> : <span class=\"string\">' user'</span>) + <span class=\"string\">' online'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//发送消息</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'newMsg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user, msg, color</span>) </span>&#123;</div><div class=\"line\">            that._displayNewMsg(user, msg, color);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//发送图片</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.socket.on(<span class=\"string\">'newImg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user, img, color</span>) </span>&#123;</div><div class=\"line\">            that._displayImage(user, img, color);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//底层监听事件</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//登陆按钮</span></div><div class=\"line\">        $(<span class=\"string\">'#loginBtn'</span>).on(<span class=\"string\">'click tap'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> usrName = $(<span class=\"string\">'#usrName'</span>).val();</div><div class=\"line\">            <span class=\"keyword\">if</span> ($.trim(usrName).length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                that.socket.emit(<span class=\"string\">'login'</span>, usrName);</div><div class=\"line\">                that.socket.emit(<span class=\"string\">'cuList'</span>, users);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                $(<span class=\"string\">'#usrName'</span>).focus();</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//登陆监听enter</span></div><div class=\"line\">        $(<span class=\"string\">'#usrName'</span>).on(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (e.keyCode == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> usrName = $(<span class=\"string\">'#usrName'</span>).val();</div><div class=\"line\">                <span class=\"keyword\">if</span> ($.trim(usrName).length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    that.socket.emit(<span class=\"string\">'login'</span>, usrName);</div><div class=\"line\">                    that.socket.emit(<span class=\"string\">'cuList'</span>, users);</div><div class=\"line\">                &#125;;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//bind发送按钮</span></div><div class=\"line\">        $(<span class=\"string\">'#sendBtn'</span>).on(<span class=\"string\">'click tap'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> messageInput = $(<span class=\"string\">'#messageInput'</span>),</div><div class=\"line\">                msg = messageInput.val(),</div><div class=\"line\">                color = $(<span class=\"string\">'#colorStyle'</span>).val();</div><div class=\"line\">            messageInput.val(<span class=\"string\">' '</span>);</div><div class=\"line\">            messageInput.focus();</div><div class=\"line\">            <span class=\"keyword\">if</span> ($.trim(msg).length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                that.socket.emit(<span class=\"string\">'postMsg'</span>, msg, color);</div><div class=\"line\">                that._displayNewMsg(<span class=\"string\">'me'</span>, msg, color);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//bind发送</span></div><div class=\"line\">        $(<span class=\"string\">'#messageInput'</span>).on(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> messageInput = $(<span class=\"string\">'#messageInput'</span>),</div><div class=\"line\">                msg = messageInput.val(),</div><div class=\"line\">                color = $(<span class=\"string\">'#colorStyle'</span>).val();</div><div class=\"line\">            <span class=\"keyword\">if</span> (e.keyCode == <span class=\"number\">13</span> &amp;&amp; $.trim(msg).length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                messageInput.val(<span class=\"string\">' '</span>);</div><div class=\"line\">                that.socket.emit(<span class=\"string\">'postMsg'</span>, msg, color);</div><div class=\"line\">                that._displayNewMsg(<span class=\"string\">'me'</span>, msg, color);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//清空</span></div><div class=\"line\">        $(<span class=\"string\">'#clearBtn'</span>).on(<span class=\"string\">'click tap'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'#winChat'</span>).html(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//发送图片</span></div><div class=\"line\">        $(<span class=\"string\">'#imgSend'</span>).on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.files.length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> file = <span class=\"keyword\">this</span>.files[<span class=\"number\">0</span>],</div><div class=\"line\">                    reader = <span class=\"keyword\">new</span> FileReader(),</div><div class=\"line\">                    color = $(<span class=\"string\">'#colorStyle'</span>).val();</div><div class=\"line\">                <span class=\"keyword\">if</span> (!reader) &#123;</div><div class=\"line\">                    that._displayNewMsg(<span class=\"string\">'system'</span>, <span class=\"string\">'辣鸡浏览器不支持上传文件'</span>, <span class=\"string\">'red'</span>);</div><div class=\"line\">                    <span class=\"keyword\">this</span>.val(<span class=\"string\">' '</span>);</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;;</div><div class=\"line\">                <span class=\"comment\">//接收图片</span></div><div class=\"line\">                reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">                    that.socket.emit(<span class=\"string\">'img'</span>, e.target.result, color);</div><div class=\"line\">                    that._displayImage(<span class=\"string\">'me'</span>, e.target.result, color);</div><div class=\"line\">                &#125;;</div><div class=\"line\">                reader.readAsDataURL(file);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//图片包</span></div><div class=\"line\">        <span class=\"keyword\">this</span>._initialLxh();</div><div class=\"line\">        <span class=\"comment\">//按钮</span></div><div class=\"line\">        $(<span class=\"string\">'#lxh'</span>).on(<span class=\"string\">'click tap'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> lxhwrapper = $(<span class=\"string\">'#lxhWrapper'</span>);</div><div class=\"line\">            lxhwrapper.css(<span class=\"string\">'display'</span>,<span class=\"string\">'block'</span>);</div><div class=\"line\">            e.stopPropagation();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//二级图片栏</span></div><div class=\"line\">        $(<span class=\"string\">'body'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> lxhwrapper = $(<span class=\"string\">'#lxhWrapper'</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (e.target != lxhwrapper) &#123;</div><div class=\"line\">                lxhwrapper.css(<span class=\"string\">'display'</span>,<span class=\"string\">'none'</span>);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        $(<span class=\"string\">'#lxhWrapper'</span>).on(<span class=\"string\">'click tap'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> target = e.target;</div><div class=\"line\">            <span class=\"keyword\">if</span> (target.nodeName.toLowerCase() == <span class=\"string\">'img'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> messageInput = $(<span class=\"string\">'#messageInput'</span>);</div><div class=\"line\">                messageInput.focus();</div><div class=\"line\">                messageInput.val(messageInput.val() + <span class=\"string\">'[lxh:'</span> + target.title + <span class=\"string\">']'</span>);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \t<span class=\"comment\">//发送图片</span></div><div class=\"line\">    _initialLxh: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lxhContainer = $(<span class=\"string\">'#lxhWrapper'</span>),</div><div class=\"line\">            docFragment = <span class=\"built_in\">document</span>.createDocumentFragment();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">100</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> lxhItem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">            lxhItem.src = <span class=\"string\">'../content/lxh/'</span> + i + <span class=\"string\">'.gif'</span>;</div><div class=\"line\">            lxhItem.title = i;</div><div class=\"line\">            docFragment.appendChild(lxhItem);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        lxhContainer.append(docFragment);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    _displayNewMsg: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user, msg, color</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> container = $(<span class=\"string\">'#winChat'</span>),</div><div class=\"line\">            msgToDisplay = $(<span class=\"string\">'&lt;p&gt;&lt;/p&gt;'</span>),</div><div class=\"line\">            date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>),</div><div class=\"line\">            msg = <span class=\"keyword\">this</span>._showLxh(msg);</div><div class=\"line\">        msgToDisplay.css(<span class=\"string\">'color'</span>,color || <span class=\"string\">'#000'</span>);</div><div class=\"line\">        msgToDisplay.html(user + <span class=\"string\">'&lt;span class=\"timespan\"&gt;('</span> + date + <span class=\"string\">'): &lt;/span&gt;'</span> + msg);</div><div class=\"line\">        container.append(msgToDisplay);</div><div class=\"line\">        container.scrollTop = container.scrollHeight;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    _displayImage: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user, imgData, color</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> container = $(<span class=\"string\">'#winChat'</span>),</div><div class=\"line\">            msgToDisplay = $(<span class=\"string\">'&lt;p&gt;&lt;/p&gt;'</span>),</div><div class=\"line\">            date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString().substr(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">        msgToDisplay.css(<span class=\"string\">'color'</span>,color || <span class=\"string\">'#000'</span>);</div><div class=\"line\">        msgToDisplay.html(user + <span class=\"string\">'&lt;span class=\"timespan\"&gt;('</span> + date + <span class=\"string\">'): &lt;/span&gt; &lt;br/&gt;'</span> + <span class=\"string\">'&lt;a href=\"'</span> + imgData + <span class=\"string\">'\" target=\"_blank\"&gt;&lt;img src=\"'</span> + imgData + <span class=\"string\">'\"/&gt;&lt;/a&gt;'</span>);</div><div class=\"line\">        container.append(msgToDisplay);</div><div class=\"line\">        container.scrollTop = container.scrollHeight;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    _showLxh: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> match, </div><div class=\"line\">        \tresult = msg,</div><div class=\"line\">            reg = <span class=\"regexp\">/\\[lxh:\\d+\\]/g</span>,</div><div class=\"line\">            lxhIndex,</div><div class=\"line\">            totalLxhNum = $(<span class=\"string\">'#lxhWrapper'</span>).children().length;</div><div class=\"line\">        <span class=\"keyword\">while</span> (match = reg.exec(msg)) &#123;</div><div class=\"line\">            lxhIndex = match[<span class=\"number\">0</span>].slice(<span class=\"number\">5</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(lxhIndex);</div><div class=\"line\">            <span class=\"keyword\">if</span> (lxhIndex &gt; totalLxhNum) &#123;</div><div class=\"line\">                result = result.replace(match[<span class=\"number\">0</span>], <span class=\"string\">'[X]'</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                result = result.replace(match[<span class=\"number\">0</span>], <span class=\"string\">'&lt;img class=\"lxh\" src=\"../content/lxh/'</span> + lxhIndex + <span class=\"string\">'.gif\" /&gt;'</span>);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webchat | a simple chat application built with node.js and websocket\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span><span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>/&gt;</span>    </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webchat<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles/main.css\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"banner\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>WebChat<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"onlineCount\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"winChat\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"controls\"</span> &gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"items\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorStyle\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"color\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">'#000'</span> <span class=\"attr\">title</span>=<span class=\"string\">\"font color\"</span> /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lxh\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"lxh\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"lxh\"</span> /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"imgSend\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"imgLabel\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"表情\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\"</span> /&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imgSend\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/gif\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"表情\"</span>  /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clearBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"清空\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"clear screen\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"messageInput\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">\"enter to send\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"发送\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lxhWrapper\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginArea\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"info\"</span>&gt;</span>正在连接服务器...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inModal\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">\"请输入昵称\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"usrName\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"进入\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginBtn\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scripts/jquery-2.1.0.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/socket.io/socket.io.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scripts/webchat.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webchat | a simple chat application built with node.js and websocket\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span><span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>/&gt;</span>    </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webchat<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles/main.css\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"banner\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>WebChat<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"onlineCount\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"winChat\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"controls\"</span> &gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"items\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorStyle\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"color\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">'#000'</span> <span class=\"attr\">title</span>=<span class=\"string\">\"font color\"</span> /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lxh\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"lxh\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"lxh\"</span> /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"imgSend\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"imgLabel\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"表情\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 60px;height: 30px;border: 0;margin: 0;padding: 0;\"</span> /&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imgSend\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/gif\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"表情\"</span>  /&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clearBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"清空\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"clear screen\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"messageInput\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">\"enter to send\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"发送\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lxhWrapper\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginArea\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"info\"</span>&gt;</span>正在连接服务器...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inModal\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeHolder</span>=<span class=\"string\">\"请输入昵称\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"usrName\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"进入\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginBtn\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scripts/jquery-2.1.0.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/socket.io/socket.io.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scripts/webchat.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"观察者模式与订阅发布模式","date":"2017-12-28T02:21:44.000Z","_content":"<!--more-->\n\n## 观察者模式\n通过一个对象管理依赖于它的多个对象，同时当该对象的状态发生改变时会主动通知依赖于它的对象。\n观察者和主体有各自的基类\n```js\nclass Subject {\n  constructor() {\n    this._ObserverList = []\n  }\n  add(observer) {\n    this._ObserverList.push(observer)\n  }\n  remove(observer) {\n    let b = this._ObserverList.indexOf(observer)\n    this._ObserverList.splice(b, 1)\n  }\n  notify(message) {\n    for (let i = 0; i < this._ObserverList.length; i++) {\n      this._ObserverList[i].update(message)\n    }\n  }\n}\n\nclass Observer {\n  update(){ }\n}\n\nconst testObser = new Observer()\ntestObser.update = function (mes) {\n  console.log('mes: ' + mes)\n}\nconst testSub = new Subject()\ntestSub.add(testObser)\ntestSub.notify(\"test\")    // mes: test\ntestSub.remove(testObser)\n```\n\n## 发布订阅模式\n只需要注册订阅器上的一个事件，而订阅器发生某些事件，则会触发事件通道里面的函数，触发器并不会关心其他任何对象和任何接口\n发布/订阅模式中有一个`_events`事件处理中心，用户可以将需要订阅的类的函数直接添加进来而不需要管二者之间的关系，在主体对象满足要求后调用emit函数从而触发订阅过的函数\n```js\nclass PubSub {\n  constructor() {\n    this._events = new Map()\n  }\n\n  emit(eventName, ...args) {\n    if (this._events.get(eventName) === undefined) return false;\n    for (const fn of this._events.get(eventName)) {\n      fn(...args)\n    }\n  }\n\n  add(eventName, listener) {\n    let existing = this._events.get(eventName)\n    if (existing === undefined) {\n      existing = this._events.set(eventName, [listener]).get(eventName)\n    } else {\n      existing.push(listener)\n    }\n    return this\n  }\n\n  remove(eventName, listener) {\n    if (!this._events.size) return this;\n    const listenters = this._events.get(eventName)\n    if (listenters === undefined) return this;\n    if (listenters.length > 1) {\n      for (let i = listenters.length; i >= 0; i--) {\n        if (listenters[i] === listener) {\n          listenters.splice(i, 1);\n          break;\n        }\n      }\n    } else {\n      this._events.delete(eventName);\n    }\n  }\n}\n\nfunction a(b) {\n  console.log('b', b)\n}\nconst testP = new PubSub()\ntestP.add('ttt', a)\ntestP.emit('ttt', 'ccc')  // b ccc\ntestP.remove('ttt',a)\ntestP.emit('ttt', 'ccc') // \n```\n","source":"_posts/观察者模式与订阅发布模式.md","raw":"---\ntitle: 观察者模式与订阅发布模式\ndate: 2017-12-28 10:21:44\ntags:\n---\n<!--more-->\n\n## 观察者模式\n通过一个对象管理依赖于它的多个对象，同时当该对象的状态发生改变时会主动通知依赖于它的对象。\n观察者和主体有各自的基类\n```js\nclass Subject {\n  constructor() {\n    this._ObserverList = []\n  }\n  add(observer) {\n    this._ObserverList.push(observer)\n  }\n  remove(observer) {\n    let b = this._ObserverList.indexOf(observer)\n    this._ObserverList.splice(b, 1)\n  }\n  notify(message) {\n    for (let i = 0; i < this._ObserverList.length; i++) {\n      this._ObserverList[i].update(message)\n    }\n  }\n}\n\nclass Observer {\n  update(){ }\n}\n\nconst testObser = new Observer()\ntestObser.update = function (mes) {\n  console.log('mes: ' + mes)\n}\nconst testSub = new Subject()\ntestSub.add(testObser)\ntestSub.notify(\"test\")    // mes: test\ntestSub.remove(testObser)\n```\n\n## 发布订阅模式\n只需要注册订阅器上的一个事件，而订阅器发生某些事件，则会触发事件通道里面的函数，触发器并不会关心其他任何对象和任何接口\n发布/订阅模式中有一个`_events`事件处理中心，用户可以将需要订阅的类的函数直接添加进来而不需要管二者之间的关系，在主体对象满足要求后调用emit函数从而触发订阅过的函数\n```js\nclass PubSub {\n  constructor() {\n    this._events = new Map()\n  }\n\n  emit(eventName, ...args) {\n    if (this._events.get(eventName) === undefined) return false;\n    for (const fn of this._events.get(eventName)) {\n      fn(...args)\n    }\n  }\n\n  add(eventName, listener) {\n    let existing = this._events.get(eventName)\n    if (existing === undefined) {\n      existing = this._events.set(eventName, [listener]).get(eventName)\n    } else {\n      existing.push(listener)\n    }\n    return this\n  }\n\n  remove(eventName, listener) {\n    if (!this._events.size) return this;\n    const listenters = this._events.get(eventName)\n    if (listenters === undefined) return this;\n    if (listenters.length > 1) {\n      for (let i = listenters.length; i >= 0; i--) {\n        if (listenters[i] === listener) {\n          listenters.splice(i, 1);\n          break;\n        }\n      }\n    } else {\n      this._events.delete(eventName);\n    }\n  }\n}\n\nfunction a(b) {\n  console.log('b', b)\n}\nconst testP = new PubSub()\ntestP.add('ttt', a)\ntestP.emit('ttt', 'ccc')  // b ccc\ntestP.remove('ttt',a)\ntestP.emit('ttt', 'ccc') // \n```\n","slug":"观察者模式与订阅发布模式","published":1,"updated":"2017-12-28T09:25:01.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulr001ijbzemf48w4ok","content":"<a id=\"more\"></a>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>通过一个对象管理依赖于它的多个对象，同时当该对象的状态发生改变时会主动通知依赖于它的对象。<br>观察者和主体有各自的基类<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._ObserverList = []</div><div class=\"line\">  &#125;</div><div class=\"line\">  add(observer) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._ObserverList.push(observer)</div><div class=\"line\">  &#125;</div><div class=\"line\">  remove(observer) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"keyword\">this</span>._ObserverList.indexOf(observer)</div><div class=\"line\">    <span class=\"keyword\">this</span>._ObserverList.splice(b, <span class=\"number\">1</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  notify(message) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._ObserverList.length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._ObserverList[i].update(message)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">  update()&#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> testObser = <span class=\"keyword\">new</span> Observer()</div><div class=\"line\">testObser.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mes</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'mes: '</span> + mes)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> testSub = <span class=\"keyword\">new</span> Subject()</div><div class=\"line\">testSub.add(testObser)</div><div class=\"line\">testSub.notify(<span class=\"string\">\"test\"</span>)    <span class=\"comment\">// mes: test</span></div><div class=\"line\">testSub.remove(testObser)</div></pre></td></tr></table></figure></p>\n<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><p>只需要注册订阅器上的一个事件，而订阅器发生某些事件，则会触发事件通道里面的函数，触发器并不会关心其他任何对象和任何接口<br>发布/订阅模式中有一个<code>_events</code>事件处理中心，用户可以将需要订阅的类的函数直接添加进来而不需要管二者之间的关系，在主体对象满足要求后调用emit函数从而触发订阅过的函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PubSub</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._events = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  emit(eventName, ...args) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._events.get(eventName) === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._events.get(eventName)) &#123;</div><div class=\"line\">      fn(...args)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  add(eventName, listener) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> existing = <span class=\"keyword\">this</span>._events.get(eventName)</div><div class=\"line\">    <span class=\"keyword\">if</span> (existing === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      existing = <span class=\"keyword\">this</span>._events.set(eventName, [listener]).get(eventName)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      existing.push(listener)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  remove(eventName, listener) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._events.size) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> listenters = <span class=\"keyword\">this</span>._events.get(eventName)</div><div class=\"line\">    <span class=\"keyword\">if</span> (listenters === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (listenters.length &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = listenters.length; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (listenters[i] === listener) &#123;</div><div class=\"line\">          listenters.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._events.delete(eventName);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>, b)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> testP = <span class=\"keyword\">new</span> PubSub()</div><div class=\"line\">testP.add(<span class=\"string\">'ttt'</span>, a)</div><div class=\"line\">testP.emit(<span class=\"string\">'ttt'</span>, <span class=\"string\">'ccc'</span>)  <span class=\"comment\">// b ccc</span></div><div class=\"line\">testP.remove(<span class=\"string\">'ttt'</span>,a)</div><div class=\"line\">testP.emit(<span class=\"string\">'ttt'</span>, <span class=\"string\">'ccc'</span>) <span class=\"comment\">//</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>通过一个对象管理依赖于它的多个对象，同时当该对象的状态发生改变时会主动通知依赖于它的对象。<br>观察者和主体有各自的基类<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._ObserverList = []</div><div class=\"line\">  &#125;</div><div class=\"line\">  add(observer) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._ObserverList.push(observer)</div><div class=\"line\">  &#125;</div><div class=\"line\">  remove(observer) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"keyword\">this</span>._ObserverList.indexOf(observer)</div><div class=\"line\">    <span class=\"keyword\">this</span>._ObserverList.splice(b, <span class=\"number\">1</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  notify(message) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._ObserverList.length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._ObserverList[i].update(message)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">  update()&#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> testObser = <span class=\"keyword\">new</span> Observer()</div><div class=\"line\">testObser.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mes</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'mes: '</span> + mes)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> testSub = <span class=\"keyword\">new</span> Subject()</div><div class=\"line\">testSub.add(testObser)</div><div class=\"line\">testSub.notify(<span class=\"string\">\"test\"</span>)    <span class=\"comment\">// mes: test</span></div><div class=\"line\">testSub.remove(testObser)</div></pre></td></tr></table></figure></p>\n<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><p>只需要注册订阅器上的一个事件，而订阅器发生某些事件，则会触发事件通道里面的函数，触发器并不会关心其他任何对象和任何接口<br>发布/订阅模式中有一个<code>_events</code>事件处理中心，用户可以将需要订阅的类的函数直接添加进来而不需要管二者之间的关系，在主体对象满足要求后调用emit函数从而触发订阅过的函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PubSub</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._events = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  emit(eventName, ...args) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._events.get(eventName) === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._events.get(eventName)) &#123;</div><div class=\"line\">      fn(...args)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  add(eventName, listener) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> existing = <span class=\"keyword\">this</span>._events.get(eventName)</div><div class=\"line\">    <span class=\"keyword\">if</span> (existing === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      existing = <span class=\"keyword\">this</span>._events.set(eventName, [listener]).get(eventName)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      existing.push(listener)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  remove(eventName, listener) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._events.size) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> listenters = <span class=\"keyword\">this</span>._events.get(eventName)</div><div class=\"line\">    <span class=\"keyword\">if</span> (listenters === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (listenters.length &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = listenters.length; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (listenters[i] === listener) &#123;</div><div class=\"line\">          listenters.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._events.delete(eventName);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>, b)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> testP = <span class=\"keyword\">new</span> PubSub()</div><div class=\"line\">testP.add(<span class=\"string\">'ttt'</span>, a)</div><div class=\"line\">testP.emit(<span class=\"string\">'ttt'</span>, <span class=\"string\">'ccc'</span>)  <span class=\"comment\">// b ccc</span></div><div class=\"line\">testP.remove(<span class=\"string\">'ttt'</span>,a)</div><div class=\"line\">testP.emit(<span class=\"string\">'ttt'</span>, <span class=\"string\">'ccc'</span>) <span class=\"comment\">//</span></div></pre></td></tr></table></figure></p>"},{"title":"记录第一次搭建hexo","date":"2016-11-22T06:57:37.000Z","type":"hexo","_content":"即使扒了很多大佬的搭建教程，还是踩了很多坑，所以打算记录下来自己的搭建过程。本文主要介绍win10下hexo3.1.1搭建，并发布到GitHub上。\n\n<!--more-->\n\n## 环境搭建\n &ensp;安装nodejs（必须）\n- 作用：用来生成静态页面的\n- 方法：到[node.js](http://nodejs.cn/)官网下载并安装。我是用的是win10下v6.9.1版本。\n\n &ensp;安装git（必须）\n- 作用：把本地的hexo内容提交到github上去。\n- 方法：进入git官方下载即可，速度较慢。\n\n &ensp;申请GitHub账号（必须）\n- 作用：是用来做博客的远程创库、域名、服务器之类的。\n- 方法：到[github](https://github.com/)官网自行注册，如果想深入学习请看[pro git](http://iissnan.com/progit/)教程\n\n\n## 安装并搭建hexo\n &ensp;安装hexo\n- 进入git或cmd执行以下命令\n\n\n```\nnpm install -g hexo\n```\n\n- hexo必备插件，建议一起安装\n\n```\n$ npm install hexo-generator-index --save #索引生成器\n$ npm install hexo-generator-archive --save #归档生成器\n$ npm install hexo-generator-category --save #分类生成器\n$ npm install hexo-generator-tag --save #标签生成器\n$ npm install hexo-server --save #本地服务\n$ npm install hexo-deployer-git --save #hexo通过git发布（必装）\n$ npm install hexo-renderer-marked@0.2.7--save #渲染器\n$ npm install hexo-renderer-stylus@0.3.0 --save #渲染器\n```\n\n- 安装过程中不知道为毛我多了两个蜜汁报错，但到最后也没太大影响\n\n```\nnpm WARN deprecated swig@1.4.2: This package is no longer maintained\n```\n```\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevent@^1.0.0(node_modules\\hexo\\node_modules|chokidar\\node_mdules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.0.15: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})\n```\n\n- 初始化\n 选择本地磁盘某个位置创建本地hexo文件夹，进入后右键 git bash\n\n```\n$ hexo init\n```\n\n- 生成静态页面\n\n```\n$ hexo p\n```\n\n- 本地服务\n必须安装 hexo server，否则无用\n\n```\nhexo s\n```\n\n至此本地hexo已建立成功，测试网址：[http://localhost:4000](http://localhost:4000/)\n\n## 配置GitHub\n- 建立Repository\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】\n\n现在我们需要编辑_config.yml文件：\n翻到最下面，改成我这样子的\n```\ndeploy: \n      type: git  //有的版本是github也是个小坑，注意\n      repo: https://github.com/xunfeng911/xunfeng911.github.com.git // 换成你本人的\n      branch: master\n```\n\n然后保存后执行命令：\n\n```\nhexo d\n```\n注意yml格式文件冒号后面必须加一个空格\n执行完毕后访问your_user_name.github.io\n即可看到部署在github上的默认博客,第一次发布可能会有10分钟的延迟。\n\n到这里，一个全新的hexo博客就建成了。\n\n\n\n## 附录\n\n- 常用命令：\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help # 查看帮助\nhexo version #查看Hexo的版本\n```\n- 简写\n\n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n## 参考资料\n\n[卢睿韬学长的自留地](https://xdlrt.github.io/2016/02/16/2016-02-16/)\n[潘柏信,搭建个人博客](http://baixin.io/2015/08/HEXO搭建个人博客/)","source":"_posts/记录第一次搭建hexo.md","raw":"---\ntitle: 记录第一次搭建hexo\ndate: 2016-11-22 14:57:37\ntype: \"hexo\"\ntags:\n  - 搭建hexo\n  - git\n---\n即使扒了很多大佬的搭建教程，还是踩了很多坑，所以打算记录下来自己的搭建过程。本文主要介绍win10下hexo3.1.1搭建，并发布到GitHub上。\n\n<!--more-->\n\n## 环境搭建\n &ensp;安装nodejs（必须）\n- 作用：用来生成静态页面的\n- 方法：到[node.js](http://nodejs.cn/)官网下载并安装。我是用的是win10下v6.9.1版本。\n\n &ensp;安装git（必须）\n- 作用：把本地的hexo内容提交到github上去。\n- 方法：进入git官方下载即可，速度较慢。\n\n &ensp;申请GitHub账号（必须）\n- 作用：是用来做博客的远程创库、域名、服务器之类的。\n- 方法：到[github](https://github.com/)官网自行注册，如果想深入学习请看[pro git](http://iissnan.com/progit/)教程\n\n\n## 安装并搭建hexo\n &ensp;安装hexo\n- 进入git或cmd执行以下命令\n\n\n```\nnpm install -g hexo\n```\n\n- hexo必备插件，建议一起安装\n\n```\n$ npm install hexo-generator-index --save #索引生成器\n$ npm install hexo-generator-archive --save #归档生成器\n$ npm install hexo-generator-category --save #分类生成器\n$ npm install hexo-generator-tag --save #标签生成器\n$ npm install hexo-server --save #本地服务\n$ npm install hexo-deployer-git --save #hexo通过git发布（必装）\n$ npm install hexo-renderer-marked@0.2.7--save #渲染器\n$ npm install hexo-renderer-stylus@0.3.0 --save #渲染器\n```\n\n- 安装过程中不知道为毛我多了两个蜜汁报错，但到最后也没太大影响\n\n```\nnpm WARN deprecated swig@1.4.2: This package is no longer maintained\n```\n```\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevent@^1.0.0(node_modules\\hexo\\node_modules|chokidar\\node_mdules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.0.15: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})\n```\n\n- 初始化\n 选择本地磁盘某个位置创建本地hexo文件夹，进入后右键 git bash\n\n```\n$ hexo init\n```\n\n- 生成静态页面\n\n```\n$ hexo p\n```\n\n- 本地服务\n必须安装 hexo server，否则无用\n\n```\nhexo s\n```\n\n至此本地hexo已建立成功，测试网址：[http://localhost:4000](http://localhost:4000/)\n\n## 配置GitHub\n- 建立Repository\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】\n\n现在我们需要编辑_config.yml文件：\n翻到最下面，改成我这样子的\n```\ndeploy: \n      type: git  //有的版本是github也是个小坑，注意\n      repo: https://github.com/xunfeng911/xunfeng911.github.com.git // 换成你本人的\n      branch: master\n```\n\n然后保存后执行命令：\n\n```\nhexo d\n```\n注意yml格式文件冒号后面必须加一个空格\n执行完毕后访问your_user_name.github.io\n即可看到部署在github上的默认博客,第一次发布可能会有10分钟的延迟。\n\n到这里，一个全新的hexo博客就建成了。\n\n\n\n## 附录\n\n- 常用命令：\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help # 查看帮助\nhexo version #查看Hexo的版本\n```\n- 简写\n\n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n## 参考资料\n\n[卢睿韬学长的自留地](https://xdlrt.github.io/2016/02/16/2016-02-16/)\n[潘柏信,搭建个人博客](http://baixin.io/2015/08/HEXO搭建个人博客/)","slug":"记录第一次搭建hexo","published":1,"updated":"2017-10-15T02:54:29.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55uls001kjbzeex0yl2jm","content":"<p>即使扒了很多大佬的搭建教程，还是踩了很多坑，所以打算记录下来自己的搭建过程。本文主要介绍win10下hexo3.1.1搭建，并发布到GitHub上。</p>\n<a id=\"more\"></a>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p> &ensp;安装nodejs（必须）</p>\n<ul>\n<li>作用：用来生成静态页面的</li>\n<li><p>方法：到<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"external\">node.js</a>官网下载并安装。我是用的是win10下v6.9.1版本。</p>\n<p>&ensp;安装git（必须）</p>\n</li>\n<li>作用：把本地的hexo内容提交到github上去。</li>\n<li><p>方法：进入git官方下载即可，速度较慢。</p>\n<p>&ensp;申请GitHub账号（必须）</p>\n</li>\n<li>作用：是用来做博客的远程创库、域名、服务器之类的。</li>\n<li>方法：到<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>官网自行注册，如果想深入学习请看<a href=\"http://iissnan.com/progit/\" target=\"_blank\" rel=\"external\">pro git</a>教程</li>\n</ul>\n<h2 id=\"安装并搭建hexo\"><a href=\"#安装并搭建hexo\" class=\"headerlink\" title=\"安装并搭建hexo\"></a>安装并搭建hexo</h2><p> &ensp;安装hexo</p>\n<ul>\n<li>进入git或cmd执行以下命令</li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> -g hexo</div></pre></td></tr></table></figure>\n<ul>\n<li>hexo必备插件，建议一起安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-generator-index --save <span class=\"comment\">#索引生成器</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-generator-archive --save <span class=\"comment\">#归档生成器</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-generator-category --save <span class=\"comment\">#分类生成器</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-generator-tag --save <span class=\"comment\">#标签生成器</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-server --save <span class=\"comment\">#本地服务</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-deployer-git --save <span class=\"comment\">#hexo通过git发布（必装）</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-renderer-marked@0.2.7--save <span class=\"comment\">#渲染器</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-renderer-stylus@0.3.0 --save <span class=\"comment\">#渲染器</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>安装过程中不知道为毛我多了两个蜜汁报错，但到最后也没太大影响</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm WARN deprecated swig@<span class=\"number\">1.4</span>.<span class=\"number\">2</span>: This <span class=\"keyword\">package</span> <span class=\"title\"></span><span class=\"keyword\">is</span> no longer maintained</div></pre></td></tr></table></figure>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm WARN optional SKIPPING OPTIONAL <span class=\"string\">DEPENDENCY:</span> fsevent@^<span class=\"number\">1.0</span><span class=\"number\">.0</span>(node_modules\\hexo\\node_modules|chokidar\\node_mdules\\fsevents):</div><div class=\"line\">npm WARN notsup SKIPPING OPTIONAL <span class=\"string\">DEPENDENCY:</span> Unsupported platform <span class=\"keyword\">for</span> fsevents@<span class=\"number\">1.0</span><span class=\"number\">.15</span>: wanted &#123;<span class=\"string\">\"os\"</span>:<span class=\"string\">\"darwin\"</span>,<span class=\"string\">\"arch\"</span>:<span class=\"string\">\"any\"</span>&#125; (<span class=\"string\">current:</span> &#123;<span class=\"string\">\"os\"</span>:<span class=\"string\">\"win32\"</span>,<span class=\"string\">\"arch\"</span>:<span class=\"string\">\"x64\"</span>&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>初始化<br>选择本地磁盘某个位置创建本地hexo文件夹，进入后右键 git bash</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init</span></div></pre></td></tr></table></figure>\n<ul>\n<li>生成静态页面</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo p</span></div></pre></td></tr></table></figure>\n<ul>\n<li>本地服务<br>必须安装 hexo server，否则无用</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo s</span></div></pre></td></tr></table></figure>\n<p>至此本地hexo已建立成功，测试网址：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></p>\n<h2 id=\"配置GitHub\"><a href=\"#配置GitHub\" class=\"headerlink\" title=\"配置GitHub\"></a>配置GitHub</h2><ul>\n<li>建立Repository<br>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】</li>\n</ul>\n<p>现在我们需要编辑_config.yml文件：<br>翻到最下面，改成我这样子的<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>: </div><div class=\"line\">      <span class=\"attribute\">type</span>: git  <span class=\"comment\">//有的版本是github也是个小坑，注意</span></div><div class=\"line\">      <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/xunfeng911/xunfeng911.github.com.git // 换成你本人的</span></div><div class=\"line\">      <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>然后保存后执行命令：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo d</span></div></pre></td></tr></table></figure>\n<p>注意yml格式文件冒号后面必须加一个空格<br>执行完毕后访问your_user_name.github.io<br>即可看到部署在github上的默认博客,第一次发布可能会有10分钟的延迟。</p>\n<p>到这里，一个全新的hexo博客就建成了。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>常用命令：</li>\n</ul>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"postName\"</span> <span class=\"meta\">#新建文章</span></div><div class=\"line\">hexo <span class=\"keyword\">new</span> page <span class=\"string\">\"pageName\"</span> <span class=\"meta\">#新建页面</span></div><div class=\"line\">hexo generate <span class=\"meta\">#生成静态页面至public目录</span></div><div class=\"line\">hexo <span class=\"keyword\">server</span> <span class=\"meta\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class=\"line\">hexo deploy <span class=\"meta\">#将.deploy目录部署到GitHub</span></div><div class=\"line\">hexo help <span class=\"meta\"># 查看帮助</span></div><div class=\"line\">hexo version <span class=\"meta\">#查看Hexo的版本</span></div></pre></td></tr></table></figure>\n<ul>\n<li>简写</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://xdlrt.github.io/2016/02/16/2016-02-16/\" target=\"_blank\" rel=\"external\">卢睿韬学长的自留地</a><br><a href=\"http://baixin.io/2015/08/HEXO搭建个人博客/\" target=\"_blank\" rel=\"external\">潘柏信,搭建个人博客</a></p>\n","site":{"data":{}},"excerpt":"<p>即使扒了很多大佬的搭建教程，还是踩了很多坑，所以打算记录下来自己的搭建过程。本文主要介绍win10下hexo3.1.1搭建，并发布到GitHub上。</p>","more":"<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p> &ensp;安装nodejs（必须）</p>\n<ul>\n<li>作用：用来生成静态页面的</li>\n<li><p>方法：到<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"external\">node.js</a>官网下载并安装。我是用的是win10下v6.9.1版本。</p>\n<p>&ensp;安装git（必须）</p>\n</li>\n<li>作用：把本地的hexo内容提交到github上去。</li>\n<li><p>方法：进入git官方下载即可，速度较慢。</p>\n<p>&ensp;申请GitHub账号（必须）</p>\n</li>\n<li>作用：是用来做博客的远程创库、域名、服务器之类的。</li>\n<li>方法：到<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>官网自行注册，如果想深入学习请看<a href=\"http://iissnan.com/progit/\" target=\"_blank\" rel=\"external\">pro git</a>教程</li>\n</ul>\n<h2 id=\"安装并搭建hexo\"><a href=\"#安装并搭建hexo\" class=\"headerlink\" title=\"安装并搭建hexo\"></a>安装并搭建hexo</h2><p> &ensp;安装hexo</p>\n<ul>\n<li>进入git或cmd执行以下命令</li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> -g hexo</div></pre></td></tr></table></figure>\n<ul>\n<li>hexo必备插件，建议一起安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-generator-index --save <span class=\"comment\">#索引生成器</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-generator-archive --save <span class=\"comment\">#归档生成器</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-generator-category --save <span class=\"comment\">#分类生成器</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-generator-tag --save <span class=\"comment\">#标签生成器</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-server --save <span class=\"comment\">#本地服务</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-deployer-git --save <span class=\"comment\">#hexo通过git发布（必装）</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-renderer-marked@0.2.7--save <span class=\"comment\">#渲染器</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-renderer-stylus@0.3.0 --save <span class=\"comment\">#渲染器</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>安装过程中不知道为毛我多了两个蜜汁报错，但到最后也没太大影响</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm WARN deprecated swig@<span class=\"number\">1.4</span>.<span class=\"number\">2</span>: This <span class=\"keyword\">package</span> <span class=\"title\"></span><span class=\"keyword\">is</span> no longer maintained</div></pre></td></tr></table></figure>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm WARN optional SKIPPING OPTIONAL <span class=\"string\">DEPENDENCY:</span> fsevent@^<span class=\"number\">1.0</span><span class=\"number\">.0</span>(node_modules\\hexo\\node_modules|chokidar\\node_mdules\\fsevents):</div><div class=\"line\">npm WARN notsup SKIPPING OPTIONAL <span class=\"string\">DEPENDENCY:</span> Unsupported platform <span class=\"keyword\">for</span> fsevents@<span class=\"number\">1.0</span><span class=\"number\">.15</span>: wanted &#123;<span class=\"string\">\"os\"</span>:<span class=\"string\">\"darwin\"</span>,<span class=\"string\">\"arch\"</span>:<span class=\"string\">\"any\"</span>&#125; (<span class=\"string\">current:</span> &#123;<span class=\"string\">\"os\"</span>:<span class=\"string\">\"win32\"</span>,<span class=\"string\">\"arch\"</span>:<span class=\"string\">\"x64\"</span>&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>初始化<br>选择本地磁盘某个位置创建本地hexo文件夹，进入后右键 git bash</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init</span></div></pre></td></tr></table></figure>\n<ul>\n<li>生成静态页面</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo p</span></div></pre></td></tr></table></figure>\n<ul>\n<li>本地服务<br>必须安装 hexo server，否则无用</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo s</span></div></pre></td></tr></table></figure>\n<p>至此本地hexo已建立成功，测试网址：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></p>\n<h2 id=\"配置GitHub\"><a href=\"#配置GitHub\" class=\"headerlink\" title=\"配置GitHub\"></a>配置GitHub</h2><ul>\n<li>建立Repository<br>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】</li>\n</ul>\n<p>现在我们需要编辑_config.yml文件：<br>翻到最下面，改成我这样子的<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>: </div><div class=\"line\">      <span class=\"attribute\">type</span>: git  <span class=\"comment\">//有的版本是github也是个小坑，注意</span></div><div class=\"line\">      <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/xunfeng911/xunfeng911.github.com.git // 换成你本人的</span></div><div class=\"line\">      <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>然后保存后执行命令：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo d</span></div></pre></td></tr></table></figure>\n<p>注意yml格式文件冒号后面必须加一个空格<br>执行完毕后访问your_user_name.github.io<br>即可看到部署在github上的默认博客,第一次发布可能会有10分钟的延迟。</p>\n<p>到这里，一个全新的hexo博客就建成了。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>常用命令：</li>\n</ul>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"postName\"</span> <span class=\"meta\">#新建文章</span></div><div class=\"line\">hexo <span class=\"keyword\">new</span> page <span class=\"string\">\"pageName\"</span> <span class=\"meta\">#新建页面</span></div><div class=\"line\">hexo generate <span class=\"meta\">#生成静态页面至public目录</span></div><div class=\"line\">hexo <span class=\"keyword\">server</span> <span class=\"meta\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class=\"line\">hexo deploy <span class=\"meta\">#将.deploy目录部署到GitHub</span></div><div class=\"line\">hexo help <span class=\"meta\"># 查看帮助</span></div><div class=\"line\">hexo version <span class=\"meta\">#查看Hexo的版本</span></div></pre></td></tr></table></figure>\n<ul>\n<li>简写</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://xdlrt.github.io/2016/02/16/2016-02-16/\" target=\"_blank\" rel=\"external\">卢睿韬学长的自留地</a><br><a href=\"http://baixin.io/2015/08/HEXO搭建个人博客/\" target=\"_blank\" rel=\"external\">潘柏信,搭建个人博客</a></p>"},{"title":"node events","date":"2017-12-13T13:17:02.000Z","_content":"自己用ts写一个events模块试试看...\n<!--more-->\n<img src=\"http://xuncs.cn:5001/event.jpeg\">\n## Events\n`Events`模块是基于发布/订阅模式设计的，node中所有能触发事件的对象都是`EventEmitter`类的实例, `EventEmitter`的核心就是事件触发与事件监听器功能的封装。\n\n### Constructor\n通过分析`EventEmitter`的源码发现构造函数内含有\n- 存储`key-value`的`_events`对象\n- 记录事件数量的`_eventsCount`\n- 记录事件最大订阅函数数目的`_maxListeners`\n\n使用ES6的`Map`代替`object`，`Map.prototyps.size`属性代替了`_eventsCount`，同时不需要自己计数了~\n\n```ts\nclass EventEmitter {\n  _Events: Map<string, Array<Function>>;\n  _maxListeners: number | undefined;\n  static defaultMaxListeners = 10\n  constructor() {\n    this._Events = new Map();\n    this._maxListeners = undefined;\n  };\n}\n```\n### MaxListeners\n`MaxListeners`用来设置事件的最大订阅函数数量，当超过这个数目时会打印警告，并不会报错\n```ts\nclass EventEmitter {\n  /**\n   * @description 用来设置事件的最大订阅函数数量\n   * @param n 最大值\n   */\n  setMaxListeners(n:number) {\n    this._maxListeners = n;\n    return this;\n  };\n  /**\n   * @description 返回事件的最大订阅函数数量\n   */\n  getMaxListeners(): number {\n    if (this._maxListeners === undefined) {\n      return EventEmitter.defaultMaxListeners;\n    } else {\n      return this._maxListeners;\n    }\n  };\n}\n```\n\n### newListener&&removeListener\n`newListener`和`removeListener`作为内置事件，默认是`undefined`\n前者在事件订阅新函数时发布\n后者在移除事件的订阅函数时发布\n\n### AddListener\n`AddListener`承担着订阅功能，通过`Map.set(key, value)`将需要监听的事件函数添加到事件列表里。\n```ts\nclass EventEmitter {\n  /**\n   * \n   * @param eventName 事件名\n   * @param listener  事件函数\n   * @param prepend   是否添加到队列首部\n   */\n  private _addListener(eventName: string, listener: Function, prepend: boolean) {\n    let existing: Array<Function>;\n    let Events = this._Events;\n\n    // 判断是否有newListener事件\n    if (Events.get('newListener') !== undefined) {\n      this.emit('newListener', eventName, listener);\n    }\n\n    existing = Events.get(eventName);\n    if (existing === undefined) {\n      existing = Events.set(eventName, [listener]).get(eventName);\n    } else {\n      if (prepend) existing.unshift(listener);\n      else existing.push(listener);\n      // 超过限制监听函数则打印警告\n      let m = this.getMaxListeners();\n      if (m && m > 0 && existing.length > m) {\n        const err = new Error(\n          `${eventName}'s listeners should be small than ${m} `\n        )\n        console.warn(err);\n      }\n    }\n\n    return this;\n  };\n  // 对外暴露的高阶函数\n  addListener(eventName: string, listener: Function) {\n    return this._addListener(eventName, listener, false);\n  };\n  on(eventName: string, listener: Function) {\n    return this._addListener(eventName, listener, false);\n  };\n  perpendListener(eventName: string, listener: Function) {\n    return this._addListener(eventName, listener, true);\n  };\n}\n```\n\n### emit\n按参数的顺序执行每个订阅函数，如果事件有订阅函数返回 true，否则返回 false\n```ts\nclass EventEmitter {\n  /**\n   * @description 用来发布事件，依次执行该事件上订阅的所有函数\n   * @param {string} eventName \n   * @param {any} args \n   */\n  emit(eventName: string, ...args) {\n    const Events = this._Events;\n    const listeners = Events.get(eventName);\n    if (listeners === undefined) return false;\n      for (const fn of listeners) {\n        fn(...args)\n      }\n    return true;\n  };\n}\n```\n\n### removeListener\n```ts\nclass EventEmitter {\n  /**\n   * @description 删除事件上的某个订阅函数\n   * 如果事件上没有订阅函数了则移除订阅函数\n   * @param {string} eventName \n   * @param {Function} listener \n   */\n  removeListener(eventName: string, listener: Function) {\n    // info 1 删除一个， 2 删除整个event，0 没有该函数\n    let listeners, info = 0;\n    let Events = this._Events;\n    if (!Events.size) return this;\n    listeners = Events.get(eventName);\n    if (listeners === undefined) return this;\n\n    if (listeners.length > 1) {\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        if (listeners[i] === listener) {\n          listeners.splice(i, 1);\n          info = 1;\n          break;\n        }\n      }\n    } else {\n      Events.delete(eventName);\n      info = 2;\n    }\n\n    switch (info) {\n      case 0:\n        console.warn(`${eventName} don't have ${listener}`);\n        break;\n      case 1:\n        if (Events.get('removeListener'))\n          this.emit('removeListener', eventName, listener);\n        break;\n      case 2:\n        if (Events.get('removeListener'))\n          this.emit('removeListener', eventName, listener);\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * @description 移除所有事件，如果指定事件则移除指定事件\n   * @param {string} [eventName] \n   */\n  removeAllListeners(eventName?: string) {\n    let Events = this._Events;\n    if (!Events.size) return this;\n    // 没有 removeListener事件\n    if (Events.get('removeListener') === undefined) {\n      if (arguments.length === 0) {\n        Events.clear();\n      } else if (Events.get(eventName) !== undefined) {\n        if (Events.size === 1) {\n          Events.clear();\n        }\n        else {\n          Events.delete(eventName);\n        }\n      }\n      return this;\n    }\n    // emit removelistener before remove all events\n    if (arguments.length === 0) {\n      const keys = Events.keys();\n      for (let key of keys) {\n        if (key === 'removeListener') continue;\n        this.removeAllListeners(key);\n      }\n      this.removeAllListeners('removeListener');\n      return this;\n    }\n\n    let listeners = Events.get(eventName);\n    for (let i = listeners.length - 1; i >= 0; i--) {\n      this.removeListener(eventName, listeners[i]);\n    }\n    return this;\n  };\n}\n```\n\n### once\n为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器\n```ts\ninterface OnceState {\n  fired: boolean;\n  wrapFn: Function;\n  eventName: string;\n  listener: Function;\n}\nclass EventEmitter {\n  private _onceWrapper(state: OnceState, ...args) {\n    if (!state.fired) {\n      this.removeListener(state.eventName, state.wrapFn);\n      state.fired = true;\n      state.listener(...args);\n    }\n  };\n\n  private _onceWrap(eventName: string, listener: Function): Function {\n    let state = {\n      fired: false,\n      wrapFn: undefined,\n      eventName,\n      listener\n    }\n    let wrapped = this._onceWrapper.bind(this, state);\n    wrapped.listener = listener;\n    return wrapped;\n  };\n\n  once(eventName: string, listener: Function) {\n    this.on(eventName, this._onceWrap(eventName, listener));\n    return this;\n  };\n\n  prependOnceListener(eventName: string, listener: Function) {\n    this.perpendListener(eventName, this._onceWrap(eventName, listener));\n    return this;\n  };\n}\n```\n\n### others\n\n```ts\nclass EventEmitter {\n  /**\n   * @description 返回事件的所有订阅函数\n   * @param {string} eventName \n   */\n  listeners(eventName: string) {\n    const Events = this._Events;\n    if (Events.size === 0) return [];\n    const listeners = Events.get(eventName);\n    if (listeners === undefined) return [];\n\n    return listeners;\n  };\n\n  /**\n   * @description 返回事件的订阅函数的数两\n   * @param {string} eventName \n   */\n  listenerCount(eventName: string) {\n    const Events = this._Events;\n    if (Events.get(eventName)) {\n      return Events.get(eventName).length;\n    } else {\n      return 0;\n    }\n  };\n\n  /**\n   * @description 返回所有事件的键值\n   */\n  eventNames() {\n    return this._Events.keys();\n  };\n}\n```","source":"_posts/node-events.md","raw":"---\ntitle: node events\ndate: 2017-12-13 21:17:02\ntags:\n  - TypeScript\n  - Node\n---\n自己用ts写一个events模块试试看...\n<!--more-->\n<img src=\"http://xuncs.cn:5001/event.jpeg\">\n## Events\n`Events`模块是基于发布/订阅模式设计的，node中所有能触发事件的对象都是`EventEmitter`类的实例, `EventEmitter`的核心就是事件触发与事件监听器功能的封装。\n\n### Constructor\n通过分析`EventEmitter`的源码发现构造函数内含有\n- 存储`key-value`的`_events`对象\n- 记录事件数量的`_eventsCount`\n- 记录事件最大订阅函数数目的`_maxListeners`\n\n使用ES6的`Map`代替`object`，`Map.prototyps.size`属性代替了`_eventsCount`，同时不需要自己计数了~\n\n```ts\nclass EventEmitter {\n  _Events: Map<string, Array<Function>>;\n  _maxListeners: number | undefined;\n  static defaultMaxListeners = 10\n  constructor() {\n    this._Events = new Map();\n    this._maxListeners = undefined;\n  };\n}\n```\n### MaxListeners\n`MaxListeners`用来设置事件的最大订阅函数数量，当超过这个数目时会打印警告，并不会报错\n```ts\nclass EventEmitter {\n  /**\n   * @description 用来设置事件的最大订阅函数数量\n   * @param n 最大值\n   */\n  setMaxListeners(n:number) {\n    this._maxListeners = n;\n    return this;\n  };\n  /**\n   * @description 返回事件的最大订阅函数数量\n   */\n  getMaxListeners(): number {\n    if (this._maxListeners === undefined) {\n      return EventEmitter.defaultMaxListeners;\n    } else {\n      return this._maxListeners;\n    }\n  };\n}\n```\n\n### newListener&&removeListener\n`newListener`和`removeListener`作为内置事件，默认是`undefined`\n前者在事件订阅新函数时发布\n后者在移除事件的订阅函数时发布\n\n### AddListener\n`AddListener`承担着订阅功能，通过`Map.set(key, value)`将需要监听的事件函数添加到事件列表里。\n```ts\nclass EventEmitter {\n  /**\n   * \n   * @param eventName 事件名\n   * @param listener  事件函数\n   * @param prepend   是否添加到队列首部\n   */\n  private _addListener(eventName: string, listener: Function, prepend: boolean) {\n    let existing: Array<Function>;\n    let Events = this._Events;\n\n    // 判断是否有newListener事件\n    if (Events.get('newListener') !== undefined) {\n      this.emit('newListener', eventName, listener);\n    }\n\n    existing = Events.get(eventName);\n    if (existing === undefined) {\n      existing = Events.set(eventName, [listener]).get(eventName);\n    } else {\n      if (prepend) existing.unshift(listener);\n      else existing.push(listener);\n      // 超过限制监听函数则打印警告\n      let m = this.getMaxListeners();\n      if (m && m > 0 && existing.length > m) {\n        const err = new Error(\n          `${eventName}'s listeners should be small than ${m} `\n        )\n        console.warn(err);\n      }\n    }\n\n    return this;\n  };\n  // 对外暴露的高阶函数\n  addListener(eventName: string, listener: Function) {\n    return this._addListener(eventName, listener, false);\n  };\n  on(eventName: string, listener: Function) {\n    return this._addListener(eventName, listener, false);\n  };\n  perpendListener(eventName: string, listener: Function) {\n    return this._addListener(eventName, listener, true);\n  };\n}\n```\n\n### emit\n按参数的顺序执行每个订阅函数，如果事件有订阅函数返回 true，否则返回 false\n```ts\nclass EventEmitter {\n  /**\n   * @description 用来发布事件，依次执行该事件上订阅的所有函数\n   * @param {string} eventName \n   * @param {any} args \n   */\n  emit(eventName: string, ...args) {\n    const Events = this._Events;\n    const listeners = Events.get(eventName);\n    if (listeners === undefined) return false;\n      for (const fn of listeners) {\n        fn(...args)\n      }\n    return true;\n  };\n}\n```\n\n### removeListener\n```ts\nclass EventEmitter {\n  /**\n   * @description 删除事件上的某个订阅函数\n   * 如果事件上没有订阅函数了则移除订阅函数\n   * @param {string} eventName \n   * @param {Function} listener \n   */\n  removeListener(eventName: string, listener: Function) {\n    // info 1 删除一个， 2 删除整个event，0 没有该函数\n    let listeners, info = 0;\n    let Events = this._Events;\n    if (!Events.size) return this;\n    listeners = Events.get(eventName);\n    if (listeners === undefined) return this;\n\n    if (listeners.length > 1) {\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        if (listeners[i] === listener) {\n          listeners.splice(i, 1);\n          info = 1;\n          break;\n        }\n      }\n    } else {\n      Events.delete(eventName);\n      info = 2;\n    }\n\n    switch (info) {\n      case 0:\n        console.warn(`${eventName} don't have ${listener}`);\n        break;\n      case 1:\n        if (Events.get('removeListener'))\n          this.emit('removeListener', eventName, listener);\n        break;\n      case 2:\n        if (Events.get('removeListener'))\n          this.emit('removeListener', eventName, listener);\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * @description 移除所有事件，如果指定事件则移除指定事件\n   * @param {string} [eventName] \n   */\n  removeAllListeners(eventName?: string) {\n    let Events = this._Events;\n    if (!Events.size) return this;\n    // 没有 removeListener事件\n    if (Events.get('removeListener') === undefined) {\n      if (arguments.length === 0) {\n        Events.clear();\n      } else if (Events.get(eventName) !== undefined) {\n        if (Events.size === 1) {\n          Events.clear();\n        }\n        else {\n          Events.delete(eventName);\n        }\n      }\n      return this;\n    }\n    // emit removelistener before remove all events\n    if (arguments.length === 0) {\n      const keys = Events.keys();\n      for (let key of keys) {\n        if (key === 'removeListener') continue;\n        this.removeAllListeners(key);\n      }\n      this.removeAllListeners('removeListener');\n      return this;\n    }\n\n    let listeners = Events.get(eventName);\n    for (let i = listeners.length - 1; i >= 0; i--) {\n      this.removeListener(eventName, listeners[i]);\n    }\n    return this;\n  };\n}\n```\n\n### once\n为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器\n```ts\ninterface OnceState {\n  fired: boolean;\n  wrapFn: Function;\n  eventName: string;\n  listener: Function;\n}\nclass EventEmitter {\n  private _onceWrapper(state: OnceState, ...args) {\n    if (!state.fired) {\n      this.removeListener(state.eventName, state.wrapFn);\n      state.fired = true;\n      state.listener(...args);\n    }\n  };\n\n  private _onceWrap(eventName: string, listener: Function): Function {\n    let state = {\n      fired: false,\n      wrapFn: undefined,\n      eventName,\n      listener\n    }\n    let wrapped = this._onceWrapper.bind(this, state);\n    wrapped.listener = listener;\n    return wrapped;\n  };\n\n  once(eventName: string, listener: Function) {\n    this.on(eventName, this._onceWrap(eventName, listener));\n    return this;\n  };\n\n  prependOnceListener(eventName: string, listener: Function) {\n    this.perpendListener(eventName, this._onceWrap(eventName, listener));\n    return this;\n  };\n}\n```\n\n### others\n\n```ts\nclass EventEmitter {\n  /**\n   * @description 返回事件的所有订阅函数\n   * @param {string} eventName \n   */\n  listeners(eventName: string) {\n    const Events = this._Events;\n    if (Events.size === 0) return [];\n    const listeners = Events.get(eventName);\n    if (listeners === undefined) return [];\n\n    return listeners;\n  };\n\n  /**\n   * @description 返回事件的订阅函数的数两\n   * @param {string} eventName \n   */\n  listenerCount(eventName: string) {\n    const Events = this._Events;\n    if (Events.get(eventName)) {\n      return Events.get(eventName).length;\n    } else {\n      return 0;\n    }\n  };\n\n  /**\n   * @description 返回所有事件的键值\n   */\n  eventNames() {\n    return this._Events.keys();\n  };\n}\n```","slug":"node-events","published":1,"updated":"2017-12-16T14:57:44.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulu001njbze0n4sso6d","content":"<p>自己用ts写一个events模块试试看…<br><a id=\"more\"></a><br><img src=\"http://xuncs.cn:5001/event.jpeg\"></p>\n<h2 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h2><p><code>Events</code>模块是基于发布/订阅模式设计的，node中所有能触发事件的对象都是<code>EventEmitter</code>类的实例, <code>EventEmitter</code>的核心就是事件触发与事件监听器功能的封装。</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h3><p>通过分析<code>EventEmitter</code>的源码发现构造函数内含有</p>\n<ul>\n<li>存储<code>key-value</code>的<code>_events</code>对象</li>\n<li>记录事件数量的<code>_eventsCount</code></li>\n<li>记录事件最大订阅函数数目的<code>_maxListeners</code></li>\n</ul>\n<p>使用ES6的<code>Map</code>代替<code>object</code>，<code>Map.prototyps.size</code>属性代替了<code>_eventsCount</code>，同时不需要自己计数了~</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  _Events: Map&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Function</span>&gt;&gt;;</div><div class=\"line\">  _maxListeners: <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>;</div><div class=\"line\">  <span class=\"keyword\">static</span> defaultMaxListeners = <span class=\"number\">10</span></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._Events = <span class=\"keyword\">new</span> Map();</div><div class=\"line\">    <span class=\"keyword\">this</span>._maxListeners = <span class=\"literal\">undefined</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"MaxListeners\"><a href=\"#MaxListeners\" class=\"headerlink\" title=\"MaxListeners\"></a>MaxListeners</h3><p><code>MaxListeners</code>用来设置事件的最大订阅函数数量，当超过这个数目时会打印警告，并不会报错<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 用来设置事件的最大订阅函数数量</span></div><div class=\"line\"><span class=\"comment\">   * @param n 最大值</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  setMaxListeners(n:<span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._maxListeners = n;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 返回事件的最大订阅函数数量</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  getMaxListeners(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._maxListeners === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> EventEmitter.defaultMaxListeners;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._maxListeners;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"newListener-amp-amp-removeListener\"><a href=\"#newListener-amp-amp-removeListener\" class=\"headerlink\" title=\"newListener&amp;&amp;removeListener\"></a>newListener&amp;&amp;removeListener</h3><p><code>newListener</code>和<code>removeListener</code>作为内置事件，默认是<code>undefined</code><br>前者在事件订阅新函数时发布<br>后者在移除事件的订阅函数时发布</p>\n<h3 id=\"AddListener\"><a href=\"#AddListener\" class=\"headerlink\" title=\"AddListener\"></a>AddListener</h3><p><code>AddListener</code>承担着订阅功能，通过<code>Map.set(key, value)</code>将需要监听的事件函数添加到事件列表里。<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * </span></div><div class=\"line\"><span class=\"comment\">   * @param eventName 事件名</span></div><div class=\"line\"><span class=\"comment\">   * @param listener  事件函数</span></div><div class=\"line\"><span class=\"comment\">   * @param prepend   是否添加到队列首部</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> _addListener(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>, prepend: <span class=\"built_in\">boolean</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> existing: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Function</span>&gt;;</div><div class=\"line\">    <span class=\"keyword\">let</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 判断是否有newListener事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (Events.get(<span class=\"string\">'newListener'</span>) !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.emit(<span class=\"string\">'newListener'</span>, eventName, listener);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    existing = Events.get(eventName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (existing === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      existing = Events.set(eventName, [listener]).get(eventName);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (prepend) existing.unshift(listener);</div><div class=\"line\">      <span class=\"keyword\">else</span> existing.push(listener);</div><div class=\"line\">      <span class=\"comment\">// 超过限制监听函数则打印警告</span></div><div class=\"line\">      <span class=\"keyword\">let</span> m = <span class=\"keyword\">this</span>.getMaxListeners();</div><div class=\"line\">      <span class=\"keyword\">if</span> (m &amp;&amp; m &gt; <span class=\"number\">0</span> &amp;&amp; existing.length &gt; m) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</div><div class=\"line\">          <span class=\"string\">`<span class=\"subst\">$&#123;eventName&#125;</span>'s listeners should be small than <span class=\"subst\">$&#123;m&#125;</span> `</span></div><div class=\"line\">        )</div><div class=\"line\">        <span class=\"built_in\">console</span>.warn(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">// 对外暴露的高阶函数</span></div><div class=\"line\">  addListener(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._addListener(eventName, listener, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  on(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._addListener(eventName, listener, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  perpendListener(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._addListener(eventName, listener, <span class=\"literal\">true</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"emit\"><a href=\"#emit\" class=\"headerlink\" title=\"emit\"></a>emit</h3><p>按参数的顺序执行每个订阅函数，如果事件有订阅函数返回 true，否则返回 false<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 用来发布事件，依次执行该事件上订阅的所有函数</span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;string&#125; eventName </span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;any&#125; args </span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  emit(eventName: <span class=\"built_in\">string</span>, ...args) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\">    <span class=\"keyword\">const</span> listeners = Events.get(eventName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (listeners === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn of listeners) &#123;</div><div class=\"line\">        fn(...args)</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"removeListener\"><a href=\"#removeListener\" class=\"headerlink\" title=\"removeListener\"></a>removeListener</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 删除事件上的某个订阅函数</span></div><div class=\"line\"><span class=\"comment\">   * 如果事件上没有订阅函数了则移除订阅函数</span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;string&#125; eventName </span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; listener </span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  removeListener(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// info 1 删除一个， 2 删除整个event，0 没有该函数</span></div><div class=\"line\">    <span class=\"keyword\">let</span> listeners, info = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Events.size) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    listeners = Events.get(eventName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (listeners === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (listeners.length &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = listeners.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (listeners[i] === listener) &#123;</div><div class=\"line\">          listeners.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">          info = <span class=\"number\">1</span>;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      Events.delete(eventName);</div><div class=\"line\">      info = <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span> (info) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"built_in\">console</span>.warn(<span class=\"string\">`<span class=\"subst\">$&#123;eventName&#125;</span> don't have <span class=\"subst\">$&#123;listener&#125;</span>`</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> (Events.get(<span class=\"string\">'removeListener'</span>))</div><div class=\"line\">          <span class=\"keyword\">this</span>.emit(<span class=\"string\">'removeListener'</span>, eventName, listener);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> (Events.get(<span class=\"string\">'removeListener'</span>))</div><div class=\"line\">          <span class=\"keyword\">this</span>.emit(<span class=\"string\">'removeListener'</span>, eventName, listener);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 移除所有事件，如果指定事件则移除指定事件</span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;string&#125; [eventName] </span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  removeAllListeners(eventName?: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Events.size) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"comment\">// 没有 removeListener事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (Events.get(<span class=\"string\">'removeListener'</span>) === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        Events.clear();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Events.get(eventName) !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Events.size === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          Events.clear();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          Events.delete(eventName);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// emit removelistener before remove all events</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> keys = Events.keys();</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key of keys) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (key === <span class=\"string\">'removeListener'</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.removeAllListeners(key);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">this</span>.removeAllListeners(<span class=\"string\">'removeListener'</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> listeners = Events.get(eventName);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = listeners.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.removeListener(eventName, listeners[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"once\"></a>once</h3><p>为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> OnceState &#123;</div><div class=\"line\">  fired: <span class=\"built_in\">boolean</span>;</div><div class=\"line\">  wrapFn: <span class=\"built_in\">Function</span>;</div><div class=\"line\">  eventName: <span class=\"built_in\">string</span>;</div><div class=\"line\">  listener: <span class=\"built_in\">Function</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> _onceWrapper(state: OnceState, ...args) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!state.fired) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.removeListener(state.eventName, state.wrapFn);</div><div class=\"line\">      state.fired = <span class=\"literal\">true</span>;</div><div class=\"line\">      state.listener(...args);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> _onceWrap(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>): <span class=\"built_in\">Function</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> state = &#123;</div><div class=\"line\">      fired: <span class=\"literal\">false</span>,</div><div class=\"line\">      wrapFn: <span class=\"literal\">undefined</span>,</div><div class=\"line\">      eventName,</div><div class=\"line\">      listener</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">let</span> wrapped = <span class=\"keyword\">this</span>._onceWrapper.bind(<span class=\"keyword\">this</span>, state);</div><div class=\"line\">    wrapped.listener = listener;</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapped;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  once(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.on(eventName, <span class=\"keyword\">this</span>._onceWrap(eventName, listener));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  prependOnceListener(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.perpendListener(eventName, <span class=\"keyword\">this</span>._onceWrap(eventName, listener));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others\"></a>others</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 返回事件的所有订阅函数</span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;string&#125; eventName </span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  listeners(eventName: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Events.size === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> [];</div><div class=\"line\">    <span class=\"keyword\">const</span> listeners = Events.get(eventName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (listeners === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> listeners;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 返回事件的订阅函数的数两</span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;string&#125; eventName </span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  listenerCount(eventName: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Events.get(eventName)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> Events.get(eventName).length;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 返回所有事件的键值</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  eventNames() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._Events.keys();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>自己用ts写一个events模块试试看…<br>","more":"<br><img src=\"http://xuncs.cn:5001/event.jpeg\"></p>\n<h2 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h2><p><code>Events</code>模块是基于发布/订阅模式设计的，node中所有能触发事件的对象都是<code>EventEmitter</code>类的实例, <code>EventEmitter</code>的核心就是事件触发与事件监听器功能的封装。</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h3><p>通过分析<code>EventEmitter</code>的源码发现构造函数内含有</p>\n<ul>\n<li>存储<code>key-value</code>的<code>_events</code>对象</li>\n<li>记录事件数量的<code>_eventsCount</code></li>\n<li>记录事件最大订阅函数数目的<code>_maxListeners</code></li>\n</ul>\n<p>使用ES6的<code>Map</code>代替<code>object</code>，<code>Map.prototyps.size</code>属性代替了<code>_eventsCount</code>，同时不需要自己计数了~</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  _Events: Map&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Function</span>&gt;&gt;;</div><div class=\"line\">  _maxListeners: <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>;</div><div class=\"line\">  <span class=\"keyword\">static</span> defaultMaxListeners = <span class=\"number\">10</span></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._Events = <span class=\"keyword\">new</span> Map();</div><div class=\"line\">    <span class=\"keyword\">this</span>._maxListeners = <span class=\"literal\">undefined</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"MaxListeners\"><a href=\"#MaxListeners\" class=\"headerlink\" title=\"MaxListeners\"></a>MaxListeners</h3><p><code>MaxListeners</code>用来设置事件的最大订阅函数数量，当超过这个数目时会打印警告，并不会报错<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 用来设置事件的最大订阅函数数量</span></div><div class=\"line\"><span class=\"comment\">   * @param n 最大值</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  setMaxListeners(n:<span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._maxListeners = n;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 返回事件的最大订阅函数数量</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  getMaxListeners(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._maxListeners === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> EventEmitter.defaultMaxListeners;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._maxListeners;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"newListener-amp-amp-removeListener\"><a href=\"#newListener-amp-amp-removeListener\" class=\"headerlink\" title=\"newListener&amp;&amp;removeListener\"></a>newListener&amp;&amp;removeListener</h3><p><code>newListener</code>和<code>removeListener</code>作为内置事件，默认是<code>undefined</code><br>前者在事件订阅新函数时发布<br>后者在移除事件的订阅函数时发布</p>\n<h3 id=\"AddListener\"><a href=\"#AddListener\" class=\"headerlink\" title=\"AddListener\"></a>AddListener</h3><p><code>AddListener</code>承担着订阅功能，通过<code>Map.set(key, value)</code>将需要监听的事件函数添加到事件列表里。<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * </span></div><div class=\"line\"><span class=\"comment\">   * @param eventName 事件名</span></div><div class=\"line\"><span class=\"comment\">   * @param listener  事件函数</span></div><div class=\"line\"><span class=\"comment\">   * @param prepend   是否添加到队列首部</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> _addListener(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>, prepend: <span class=\"built_in\">boolean</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> existing: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Function</span>&gt;;</div><div class=\"line\">    <span class=\"keyword\">let</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 判断是否有newListener事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (Events.get(<span class=\"string\">'newListener'</span>) !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.emit(<span class=\"string\">'newListener'</span>, eventName, listener);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    existing = Events.get(eventName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (existing === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      existing = Events.set(eventName, [listener]).get(eventName);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (prepend) existing.unshift(listener);</div><div class=\"line\">      <span class=\"keyword\">else</span> existing.push(listener);</div><div class=\"line\">      <span class=\"comment\">// 超过限制监听函数则打印警告</span></div><div class=\"line\">      <span class=\"keyword\">let</span> m = <span class=\"keyword\">this</span>.getMaxListeners();</div><div class=\"line\">      <span class=\"keyword\">if</span> (m &amp;&amp; m &gt; <span class=\"number\">0</span> &amp;&amp; existing.length &gt; m) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</div><div class=\"line\">          <span class=\"string\">`<span class=\"subst\">$&#123;eventName&#125;</span>'s listeners should be small than <span class=\"subst\">$&#123;m&#125;</span> `</span></div><div class=\"line\">        )</div><div class=\"line\">        <span class=\"built_in\">console</span>.warn(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">// 对外暴露的高阶函数</span></div><div class=\"line\">  addListener(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._addListener(eventName, listener, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  on(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._addListener(eventName, listener, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  perpendListener(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._addListener(eventName, listener, <span class=\"literal\">true</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"emit\"><a href=\"#emit\" class=\"headerlink\" title=\"emit\"></a>emit</h3><p>按参数的顺序执行每个订阅函数，如果事件有订阅函数返回 true，否则返回 false<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 用来发布事件，依次执行该事件上订阅的所有函数</span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;string&#125; eventName </span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;any&#125; args </span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  emit(eventName: <span class=\"built_in\">string</span>, ...args) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\">    <span class=\"keyword\">const</span> listeners = Events.get(eventName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (listeners === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn of listeners) &#123;</div><div class=\"line\">        fn(...args)</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"removeListener\"><a href=\"#removeListener\" class=\"headerlink\" title=\"removeListener\"></a>removeListener</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 删除事件上的某个订阅函数</span></div><div class=\"line\"><span class=\"comment\">   * 如果事件上没有订阅函数了则移除订阅函数</span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;string&#125; eventName </span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;Function&#125; listener </span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  removeListener(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// info 1 删除一个， 2 删除整个event，0 没有该函数</span></div><div class=\"line\">    <span class=\"keyword\">let</span> listeners, info = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Events.size) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    listeners = Events.get(eventName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (listeners === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (listeners.length &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = listeners.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (listeners[i] === listener) &#123;</div><div class=\"line\">          listeners.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">          info = <span class=\"number\">1</span>;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      Events.delete(eventName);</div><div class=\"line\">      info = <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span> (info) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"built_in\">console</span>.warn(<span class=\"string\">`<span class=\"subst\">$&#123;eventName&#125;</span> don't have <span class=\"subst\">$&#123;listener&#125;</span>`</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> (Events.get(<span class=\"string\">'removeListener'</span>))</div><div class=\"line\">          <span class=\"keyword\">this</span>.emit(<span class=\"string\">'removeListener'</span>, eventName, listener);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> (Events.get(<span class=\"string\">'removeListener'</span>))</div><div class=\"line\">          <span class=\"keyword\">this</span>.emit(<span class=\"string\">'removeListener'</span>, eventName, listener);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 移除所有事件，如果指定事件则移除指定事件</span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;string&#125; [eventName] </span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  removeAllListeners(eventName?: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Events.size) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"comment\">// 没有 removeListener事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (Events.get(<span class=\"string\">'removeListener'</span>) === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        Events.clear();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Events.get(eventName) !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Events.size === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          Events.clear();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          Events.delete(eventName);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// emit removelistener before remove all events</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> keys = Events.keys();</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key of keys) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (key === <span class=\"string\">'removeListener'</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.removeAllListeners(key);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">this</span>.removeAllListeners(<span class=\"string\">'removeListener'</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> listeners = Events.get(eventName);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = listeners.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.removeListener(eventName, listeners[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"once\"></a>once</h3><p>为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> OnceState &#123;</div><div class=\"line\">  fired: <span class=\"built_in\">boolean</span>;</div><div class=\"line\">  wrapFn: <span class=\"built_in\">Function</span>;</div><div class=\"line\">  eventName: <span class=\"built_in\">string</span>;</div><div class=\"line\">  listener: <span class=\"built_in\">Function</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> _onceWrapper(state: OnceState, ...args) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!state.fired) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.removeListener(state.eventName, state.wrapFn);</div><div class=\"line\">      state.fired = <span class=\"literal\">true</span>;</div><div class=\"line\">      state.listener(...args);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> _onceWrap(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>): <span class=\"built_in\">Function</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> state = &#123;</div><div class=\"line\">      fired: <span class=\"literal\">false</span>,</div><div class=\"line\">      wrapFn: <span class=\"literal\">undefined</span>,</div><div class=\"line\">      eventName,</div><div class=\"line\">      listener</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">let</span> wrapped = <span class=\"keyword\">this</span>._onceWrapper.bind(<span class=\"keyword\">this</span>, state);</div><div class=\"line\">    wrapped.listener = listener;</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapped;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  once(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.on(eventName, <span class=\"keyword\">this</span>._onceWrap(eventName, listener));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  prependOnceListener(eventName: <span class=\"built_in\">string</span>, listener: <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.perpendListener(eventName, <span class=\"keyword\">this</span>._onceWrap(eventName, listener));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others\"></a>others</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventEmitter &#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 返回事件的所有订阅函数</span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;string&#125; eventName </span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  listeners(eventName: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Events.size === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> [];</div><div class=\"line\">    <span class=\"keyword\">const</span> listeners = Events.get(eventName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (listeners === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> listeners;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 返回事件的订阅函数的数两</span></div><div class=\"line\"><span class=\"comment\">   * @param &#123;string&#125; eventName </span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  listenerCount(eventName: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> Events = <span class=\"keyword\">this</span>._Events;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Events.get(eventName)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> Events.get(eventName).length;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * @description 返回所有事件的键值</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  eventNames() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._Events.keys();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"一些方法","date":"2017-05-23T13:23:26.000Z","_content":"再不努力就完蛋惹。\n<!--more-->\n\n### JavaScript\n#### 数组去重\n  ```js\n  // 有数组\n  var arr = ['a', 'b', 'c', '1', 0, 'c', 1, '', 1, 0];\n  let unique = function(){};\n  unique(arr);\n  // ['a', 'b', 'c', '1', 0, 1, '']\n  ```\n\n方法一 将原数组中的元素和结果数组中的元素一一比较。\n```js\nfunction unique(arr){\n  let isUnique = [];\n  arr.map(val => {\n    if (isUnique.indexOf(val) === -1) {\n      isUnique.push(val);\n    }\n  })\n  return isUnique;\n}; \n// filter\nfunction unique(arr) {\n  var res = arr.filter( (item, index, array) => {\n    return array.indexOf(item) === index;   \n  })\n  return res;\n}\n```\n\n然而 `indexOf` 不支持 IE6-8.\n\n```js\n// 多用一层循环兼容\nvar indexOf = [].indexOf ?\n  function (arr, item) {\n    return arr.indexOf(item);\n  } :\n  function (arr, item) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === item) {\n        return i;\n      }\n      else {\n        return -1;\n      }\n    };\n  };\nfunction unique(arr) {\n  var isUnique = [];\n  arr.map(function (val) {\n    if (indexOf(isUnique, val) === -1) {\n      isUnique.push(val);\n    }\n  });\n  return isUnique;\n}\n```\n\n方法二 将原数组中重复元素的最后一个元素放入结果数组中。\n```js\nfunction unique(arr) {\n  var res = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = i + 1; j < arr.length; j++) {\n      // 如果发现相同元素 则i自身进入下一个循环比较\n      if (arr[i] === arr[j]) {\n        j = ++i;\n      }\n    }\n    res.push(arr[i]);\n  }\n  return res;\n}\n```\n\n方法三 ES6\n```js\nvar unique = arr => [...new Set(arr)];\n```\n\n#### 类继承与原型继承\n[类继承与原型继承原文](http://www.zcfy.cc/article/master-the-javascript-interview-what-s-the-difference-between-class-amp-prototypal-inheritance-2185.html)\nes6中的`class`是建立在构造函数之上的一种封装，本质依旧是函数。\n\n类继承：使用原型链连接子类与父类的`Prototype`,形成层级划分的代理模式。会产生父—子对象分类的副作用。\n- 紧耦合，脆弱基类\n- 层级僵化 （新用例的出现，最终会使所有涉及到的继承层次上都出现问题）\n- 必然重复性\n原型继承：原型是工作对象的实例，对象直接从其他对象继承属性，因此，对象实例可以由多个对象源所组成。\n\n\n#### new出一个实例  [原文](https://rockjins.js.org/2017/01/18/2017-01-18-new-object/)\n\n```js\nvar createObject = function () {\n  // 创建一个空对象\n  console.log(arguments);\n  var obj = new Object(),\n  // 取到构造函数，赋值给Constructor\n    Constructor = [].shift.call(arguments);\n  console.log(Constructor);\n  // 把引用的Constructor的prototype 赋值给obj原型链\n  obj.__proto__ = Constructor.prototype;\n  console.log(obj);\n  // 用apply改变this的指向，用obj代替Constructor构造函数内部的this，并把arguments作为参数传入\n  var ret = Constructor.apply(obj, arguments);\n  \n  return typeof ret === 'object' ? ret : obj;\n};\n\nfunction People(name) {\n  this.name = name;\n};\nPeople.prototype.getName = function() {\n  return this.name;\n};\n\n// 生成实例\nvar Sam = createObject(People, 'Sam');\nvar Lary = new People('Lary');\nconsole.log(Lary);\n```\n\n### 深拷贝&浅拷贝\n仅针对`Object`/`Array`这样的复杂对象\n- 浅拷贝\n  浅拷贝只会将对象的各个属性依次复制，而不进行递归复制，\n  又因为Js存储对象存储地址，\n  因此浅拷贝仅拷贝了地址，原对象与浅拷贝对象的属性还是指向同一块内存地址\n  结果就造成了修改原对象或拷贝对象都会修改内存地址的数据\n```js\n  var info = {usr: {name: 'name'}, arr: [1, 2, 3]};\n  function shallowCopy(obj) {\n    let _newObj = {};\n    for (let prop in obj) {\n      if(obj.hasOwnProperty(prop)) {\n        _newObj[prop] = obj[prop];\n      }\n    }\n    return _newObj;\n  }\n  let shallowObj = shallowCopy(info);\n```\n- 深拷贝\n  深拷贝将原对象的所有属性递归复制\n  因此不会出现指向同一地址的问题\n```js\nfunction deepCopy(p,c){\n    var i;\n    c = c||{};\n    for(i in p){\n        if(p.hasOwnProperty(i)){\n            if(typeof(p[i])===\"object\"){\n                c[i] = Array.isArray(p[i])?[]:{};\n                deepCopy(p[i],c[i]);\n            }else{\n                c[i] = p[i];\n           }\n        }\n    }\n    return c;\n}\n```\n\n#### XMLHttpRequest&AJAX\n为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户\n| 继承`XMLHttpRequestEventTarget`&`EventTarget`\n\n- `readyState`\n  - 0 `UNSENT`\n    XMLHttpRequest 代理已被创建， 但尚未调用 open() 方法\n  - 1 `OPENED` \n    open() 方法已经被触发。\n    可以通过  setRequestHeader() 方法来设置请求的头部\n    可以调用 send() 方法来发起请求\n  - 2 `HEADERS_RECEIVED` \n    send() 方法已经被调用，响应头也已经被接收\n  - 3 `LOADING` \n    应体部分正在被接收。\n    如果 responseType 属性是“text”或空字符串， responseText 将会在载入的过程中拥有部分响应数据。\n  - 4 `DONE`\n    请求操作已经完成。这意味着数据传输已经彻底完成或失败\n- `status` 响应状态\n- `statusText` 响应说明\n- `onreadystatechange`\n当 `readyState` 的值改变的时候，`callback` 函数会被调用\n- `timeout`\n  超时时间，单位为毫秒，超时后触发`ontimeout`事件\n- `withCredentials` \n默认false，跨域请求不能设置cookie\n为true时可以跨域设置cookie\n- `abort()` 终止\n- `getAllResponseHeaders()`\n返回所有响应头信息(响应头名和值), 如果响应头还没接受,则返回null\n- `getResponseHeader(DOMString header)`\n返回指定的响应头的值, 如果响应头还没被接受,或该响应头不存在,则返回null.\n- `open(method, url, async, user, password)`\n  - `method` 请求方法 (GET, POST, PUT, DELETE)\n  - `url` 请求的url\n  - `async` 默认为true\n    如果值为false,则send()方法不会返回任何东西，直到接受到了服务器的返回数据\n    如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者\n- `send()`\n  发送请求.\n  如果该请求是异步模式(默认),该方法会立刻返回.\n  如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回.\n- `setRequestHeader(headerName, value)`\n给指定的HTTP请求头赋值.在这之前,你必须确认已经调用 open() 方法打开了一个url.\n\n```js\nvar xmlHttp;  \n  \nfunction AjaxFunction(){  \n        createXMLHttpRequest();  \n        if(xmlHttp!=null){  \n    xmlHttp.onreadystatechange = callBack;  \n    xmlHttp.open(\"get/Post\",\"URL\",true/false);  \n    xmlHttp.send(null);  \n        }     \n}     \n  \n//实例化XMLHttpRequest对象  \nfunction createXMLHttpRequest(){  \n        if(window.XMLHttpRequest){  \n    xmlHttp = new XMLHttpRequest();   \n        }else if(window.ActiveXObject){  \n    xmlHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");  \n        }  \n}  \n  \n//指定响应函数  \nfunction callBack(){  \n        if(xmlHttp.readyState==4){  \n                if(xmlHttp.status==200){  \n            //do something with xmlHttp.responseText;  \n            xmlHttp.responseText;  \n                }     \n        }  \n}  \n```\n#### 并发模型\n\n#### 跨域问题\n- `JSONP`\n原理：动态插入`script`标签，通过script标签引入一个js文件，这个文件载入成功后会执行我们在url参数中指定的函数，并把我们需要的就送数据作为参数传入。\n```js\nfunction Jsonp(src) {\n  function getData(data) {\n    return data;\n  }\n  _src = src + '?callback=getData';\n  var _script = document.createElement(\"script\");\n  _script.src = _src;\n  document.body.appendChild(script);\n}\n```\n- CORS\n服务端设置`Access-Control-Allow-Origin`\n- document.domain跨子域\n- window.name\n- window.postMessage\n\n#### web安全\n### CSS\n\n#### 优先级\n- 通用选择器，组合子，否定伪类对特异性没有影响 (*, +/>/~, :not())\n- 0级 类型选择器，伪元素 (a, h1, ::be  fore)\n- 1级 类选择器，属性选择器, 伪类3 (.example, [type=\"radio\"], :hover)\n- 2级 ID选择器 (#example)\n- 内联样式\n- !important\n\n#### 外边距合并\n块的顶部外边距和底部外边距又是被折叠为单个外边距\n其大小事组合到其中的最大外边距\n只有普通文档流中块框的垂直外边距才会发生外边距合并\n- 相邻的兄弟姐妹元素\n- 块级父元素与其第一个/最后一个子元素\n- 空块元素\n解决方法：padding，overflow，clear\n#### position 指定一个元素在文档中的定位方式\n- `static`\n  正常布局行为，top，right，bottom，left，z-index无效\n- `relative`\n  元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置\n- `absolute`\n  不为元素预留空间\n  通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置\n  可以设置外边距，且不会与其他边距合并\n- `fixed`\n  不为元素预留空间\n  过指定元素相对于屏幕视口（viewport）的位置来指定元素位置\n- `sticky`\n粘性定位是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位\n\n#### BFC 块格式化上下文\n- 一个BFC：创建的元素 + 内部的所有子元素 - BFC子元素的内部元素\n- 作用：对定位，清除浮动有影响\n- 创建方法\n  - 根元素或其它包含它的元素\n  - 浮动元素 (元素的 `float` 不是 `none`)\n  - 绝对定位元素 (元素的 `position` 为 `absolute` 或 `fixed`)\n  - 内联块 (元素具有 d`isplay: inline-block`)\n  - 表格单元格 (元素具有 `display: table-cell`，HTML表格单元格默认属性)\n  - 表格标题 (元素具有 `display: table-caption`, HTML表格标题默认属性)\n  - `具有overflow` 且值不是 `visible` 的块元素，\n  - `display: flow-root`\n  - `column-span: all` 应当总是会创建一个新的格式化上下文，即便具有`column-span: all` 的元素并不被包裹在一个多列容器中","source":"_posts/基础题收集.md","raw":"---\ntitle: 一些方法\ndate: 2017-05-23 21:23:26\ntags:\n  - javaScript\n---\n再不努力就完蛋惹。\n<!--more-->\n\n### JavaScript\n#### 数组去重\n  ```js\n  // 有数组\n  var arr = ['a', 'b', 'c', '1', 0, 'c', 1, '', 1, 0];\n  let unique = function(){};\n  unique(arr);\n  // ['a', 'b', 'c', '1', 0, 1, '']\n  ```\n\n方法一 将原数组中的元素和结果数组中的元素一一比较。\n```js\nfunction unique(arr){\n  let isUnique = [];\n  arr.map(val => {\n    if (isUnique.indexOf(val) === -1) {\n      isUnique.push(val);\n    }\n  })\n  return isUnique;\n}; \n// filter\nfunction unique(arr) {\n  var res = arr.filter( (item, index, array) => {\n    return array.indexOf(item) === index;   \n  })\n  return res;\n}\n```\n\n然而 `indexOf` 不支持 IE6-8.\n\n```js\n// 多用一层循环兼容\nvar indexOf = [].indexOf ?\n  function (arr, item) {\n    return arr.indexOf(item);\n  } :\n  function (arr, item) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === item) {\n        return i;\n      }\n      else {\n        return -1;\n      }\n    };\n  };\nfunction unique(arr) {\n  var isUnique = [];\n  arr.map(function (val) {\n    if (indexOf(isUnique, val) === -1) {\n      isUnique.push(val);\n    }\n  });\n  return isUnique;\n}\n```\n\n方法二 将原数组中重复元素的最后一个元素放入结果数组中。\n```js\nfunction unique(arr) {\n  var res = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = i + 1; j < arr.length; j++) {\n      // 如果发现相同元素 则i自身进入下一个循环比较\n      if (arr[i] === arr[j]) {\n        j = ++i;\n      }\n    }\n    res.push(arr[i]);\n  }\n  return res;\n}\n```\n\n方法三 ES6\n```js\nvar unique = arr => [...new Set(arr)];\n```\n\n#### 类继承与原型继承\n[类继承与原型继承原文](http://www.zcfy.cc/article/master-the-javascript-interview-what-s-the-difference-between-class-amp-prototypal-inheritance-2185.html)\nes6中的`class`是建立在构造函数之上的一种封装，本质依旧是函数。\n\n类继承：使用原型链连接子类与父类的`Prototype`,形成层级划分的代理模式。会产生父—子对象分类的副作用。\n- 紧耦合，脆弱基类\n- 层级僵化 （新用例的出现，最终会使所有涉及到的继承层次上都出现问题）\n- 必然重复性\n原型继承：原型是工作对象的实例，对象直接从其他对象继承属性，因此，对象实例可以由多个对象源所组成。\n\n\n#### new出一个实例  [原文](https://rockjins.js.org/2017/01/18/2017-01-18-new-object/)\n\n```js\nvar createObject = function () {\n  // 创建一个空对象\n  console.log(arguments);\n  var obj = new Object(),\n  // 取到构造函数，赋值给Constructor\n    Constructor = [].shift.call(arguments);\n  console.log(Constructor);\n  // 把引用的Constructor的prototype 赋值给obj原型链\n  obj.__proto__ = Constructor.prototype;\n  console.log(obj);\n  // 用apply改变this的指向，用obj代替Constructor构造函数内部的this，并把arguments作为参数传入\n  var ret = Constructor.apply(obj, arguments);\n  \n  return typeof ret === 'object' ? ret : obj;\n};\n\nfunction People(name) {\n  this.name = name;\n};\nPeople.prototype.getName = function() {\n  return this.name;\n};\n\n// 生成实例\nvar Sam = createObject(People, 'Sam');\nvar Lary = new People('Lary');\nconsole.log(Lary);\n```\n\n### 深拷贝&浅拷贝\n仅针对`Object`/`Array`这样的复杂对象\n- 浅拷贝\n  浅拷贝只会将对象的各个属性依次复制，而不进行递归复制，\n  又因为Js存储对象存储地址，\n  因此浅拷贝仅拷贝了地址，原对象与浅拷贝对象的属性还是指向同一块内存地址\n  结果就造成了修改原对象或拷贝对象都会修改内存地址的数据\n```js\n  var info = {usr: {name: 'name'}, arr: [1, 2, 3]};\n  function shallowCopy(obj) {\n    let _newObj = {};\n    for (let prop in obj) {\n      if(obj.hasOwnProperty(prop)) {\n        _newObj[prop] = obj[prop];\n      }\n    }\n    return _newObj;\n  }\n  let shallowObj = shallowCopy(info);\n```\n- 深拷贝\n  深拷贝将原对象的所有属性递归复制\n  因此不会出现指向同一地址的问题\n```js\nfunction deepCopy(p,c){\n    var i;\n    c = c||{};\n    for(i in p){\n        if(p.hasOwnProperty(i)){\n            if(typeof(p[i])===\"object\"){\n                c[i] = Array.isArray(p[i])?[]:{};\n                deepCopy(p[i],c[i]);\n            }else{\n                c[i] = p[i];\n           }\n        }\n    }\n    return c;\n}\n```\n\n#### XMLHttpRequest&AJAX\n为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户\n| 继承`XMLHttpRequestEventTarget`&`EventTarget`\n\n- `readyState`\n  - 0 `UNSENT`\n    XMLHttpRequest 代理已被创建， 但尚未调用 open() 方法\n  - 1 `OPENED` \n    open() 方法已经被触发。\n    可以通过  setRequestHeader() 方法来设置请求的头部\n    可以调用 send() 方法来发起请求\n  - 2 `HEADERS_RECEIVED` \n    send() 方法已经被调用，响应头也已经被接收\n  - 3 `LOADING` \n    应体部分正在被接收。\n    如果 responseType 属性是“text”或空字符串， responseText 将会在载入的过程中拥有部分响应数据。\n  - 4 `DONE`\n    请求操作已经完成。这意味着数据传输已经彻底完成或失败\n- `status` 响应状态\n- `statusText` 响应说明\n- `onreadystatechange`\n当 `readyState` 的值改变的时候，`callback` 函数会被调用\n- `timeout`\n  超时时间，单位为毫秒，超时后触发`ontimeout`事件\n- `withCredentials` \n默认false，跨域请求不能设置cookie\n为true时可以跨域设置cookie\n- `abort()` 终止\n- `getAllResponseHeaders()`\n返回所有响应头信息(响应头名和值), 如果响应头还没接受,则返回null\n- `getResponseHeader(DOMString header)`\n返回指定的响应头的值, 如果响应头还没被接受,或该响应头不存在,则返回null.\n- `open(method, url, async, user, password)`\n  - `method` 请求方法 (GET, POST, PUT, DELETE)\n  - `url` 请求的url\n  - `async` 默认为true\n    如果值为false,则send()方法不会返回任何东西，直到接受到了服务器的返回数据\n    如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者\n- `send()`\n  发送请求.\n  如果该请求是异步模式(默认),该方法会立刻返回.\n  如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回.\n- `setRequestHeader(headerName, value)`\n给指定的HTTP请求头赋值.在这之前,你必须确认已经调用 open() 方法打开了一个url.\n\n```js\nvar xmlHttp;  \n  \nfunction AjaxFunction(){  \n        createXMLHttpRequest();  \n        if(xmlHttp!=null){  \n    xmlHttp.onreadystatechange = callBack;  \n    xmlHttp.open(\"get/Post\",\"URL\",true/false);  \n    xmlHttp.send(null);  \n        }     \n}     \n  \n//实例化XMLHttpRequest对象  \nfunction createXMLHttpRequest(){  \n        if(window.XMLHttpRequest){  \n    xmlHttp = new XMLHttpRequest();   \n        }else if(window.ActiveXObject){  \n    xmlHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");  \n        }  \n}  \n  \n//指定响应函数  \nfunction callBack(){  \n        if(xmlHttp.readyState==4){  \n                if(xmlHttp.status==200){  \n            //do something with xmlHttp.responseText;  \n            xmlHttp.responseText;  \n                }     \n        }  \n}  \n```\n#### 并发模型\n\n#### 跨域问题\n- `JSONP`\n原理：动态插入`script`标签，通过script标签引入一个js文件，这个文件载入成功后会执行我们在url参数中指定的函数，并把我们需要的就送数据作为参数传入。\n```js\nfunction Jsonp(src) {\n  function getData(data) {\n    return data;\n  }\n  _src = src + '?callback=getData';\n  var _script = document.createElement(\"script\");\n  _script.src = _src;\n  document.body.appendChild(script);\n}\n```\n- CORS\n服务端设置`Access-Control-Allow-Origin`\n- document.domain跨子域\n- window.name\n- window.postMessage\n\n#### web安全\n### CSS\n\n#### 优先级\n- 通用选择器，组合子，否定伪类对特异性没有影响 (*, +/>/~, :not())\n- 0级 类型选择器，伪元素 (a, h1, ::be  fore)\n- 1级 类选择器，属性选择器, 伪类3 (.example, [type=\"radio\"], :hover)\n- 2级 ID选择器 (#example)\n- 内联样式\n- !important\n\n#### 外边距合并\n块的顶部外边距和底部外边距又是被折叠为单个外边距\n其大小事组合到其中的最大外边距\n只有普通文档流中块框的垂直外边距才会发生外边距合并\n- 相邻的兄弟姐妹元素\n- 块级父元素与其第一个/最后一个子元素\n- 空块元素\n解决方法：padding，overflow，clear\n#### position 指定一个元素在文档中的定位方式\n- `static`\n  正常布局行为，top，right，bottom，left，z-index无效\n- `relative`\n  元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置\n- `absolute`\n  不为元素预留空间\n  通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置\n  可以设置外边距，且不会与其他边距合并\n- `fixed`\n  不为元素预留空间\n  过指定元素相对于屏幕视口（viewport）的位置来指定元素位置\n- `sticky`\n粘性定位是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位\n\n#### BFC 块格式化上下文\n- 一个BFC：创建的元素 + 内部的所有子元素 - BFC子元素的内部元素\n- 作用：对定位，清除浮动有影响\n- 创建方法\n  - 根元素或其它包含它的元素\n  - 浮动元素 (元素的 `float` 不是 `none`)\n  - 绝对定位元素 (元素的 `position` 为 `absolute` 或 `fixed`)\n  - 内联块 (元素具有 d`isplay: inline-block`)\n  - 表格单元格 (元素具有 `display: table-cell`，HTML表格单元格默认属性)\n  - 表格标题 (元素具有 `display: table-caption`, HTML表格标题默认属性)\n  - `具有overflow` 且值不是 `visible` 的块元素，\n  - `display: flow-root`\n  - `column-span: all` 应当总是会创建一个新的格式化上下文，即便具有`column-span: all` 的元素并不被包裹在一个多列容器中","slug":"基础题收集","published":1,"updated":"2017-12-09T01:56:53.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcr55ulv001pjbzey7ra21q9","content":"<p>再不努力就完蛋惹。<br><a id=\"more\"></a></p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><h4 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h4>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 有数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'1'</span>, <span class=\"number\">0</span>, <span class=\"string\">'c'</span>, <span class=\"number\">1</span>, <span class=\"string\">''</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">unique(arr);</div><div class=\"line\"><span class=\"comment\">// ['a', 'b', 'c', '1', 0, 1, '']</span></div></pre></td></tr></table></figure>\n<p>方法一 将原数组中的元素和结果数组中的元素一一比较。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> isUnique = [];</div><div class=\"line\">  arr.map(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isUnique.indexOf(val) === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">      isUnique.push(val);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> isUnique;</div><div class=\"line\">&#125;; </div><div class=\"line\"><span class=\"comment\">// filter</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> res = arr.filter( <span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> array.indexOf(item) === index;   </div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然而 <code>indexOf</code> 不支持 IE6-8.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 多用一层循环兼容</span></div><div class=\"line\"><span class=\"keyword\">var</span> indexOf = [].indexOf ?</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr.indexOf(item);</div><div class=\"line\">  &#125; :</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (arr[i] === item) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> i;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> isUnique = [];</div><div class=\"line\">  arr.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (indexOf(isUnique, val) === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">      isUnique.push(val);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> isUnique;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>方法二 将原数组中重复元素的最后一个元素放入结果数组中。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> res = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果发现相同元素 则i自身进入下一个循环比较</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (arr[i] === arr[j]) &#123;</div><div class=\"line\">        j = ++i;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    res.push(arr[i]);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>方法三 ES6<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> unique = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> [...new <span class=\"built_in\">Set</span>(arr)];</div></pre></td></tr></table></figure></p>\n<h4 id=\"类继承与原型继承\"><a href=\"#类继承与原型继承\" class=\"headerlink\" title=\"类继承与原型继承\"></a>类继承与原型继承</h4><p><a href=\"http://www.zcfy.cc/article/master-the-javascript-interview-what-s-the-difference-between-class-amp-prototypal-inheritance-2185.html\" target=\"_blank\" rel=\"external\">类继承与原型继承原文</a><br>es6中的<code>class</code>是建立在构造函数之上的一种封装，本质依旧是函数。</p>\n<p>类继承：使用原型链连接子类与父类的<code>Prototype</code>,形成层级划分的代理模式。会产生父—子对象分类的副作用。</p>\n<ul>\n<li>紧耦合，脆弱基类</li>\n<li>层级僵化 （新用例的出现，最终会使所有涉及到的继承层次上都出现问题）</li>\n<li>必然重复性<br>原型继承：原型是工作对象的实例，对象直接从其他对象继承属性，因此，对象实例可以由多个对象源所组成。</li>\n</ul>\n<h4 id=\"new出一个实例-原文\"><a href=\"#new出一个实例-原文\" class=\"headerlink\" title=\"new出一个实例  原文\"></a>new出一个实例  <a href=\"https://rockjins.js.org/2017/01/18/2017-01-18-new-object/\" target=\"_blank\" rel=\"external\">原文</a></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> createObject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 创建一个空对象</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(),</div><div class=\"line\">  <span class=\"comment\">// 取到构造函数，赋值给Constructor</span></div><div class=\"line\">    Constructor = [].shift.call(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(Constructor);</div><div class=\"line\">  <span class=\"comment\">// 把引用的Constructor的prototype 赋值给obj原型链</span></div><div class=\"line\">  obj.__proto__ = Constructor.prototype;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(obj);</div><div class=\"line\">  <span class=\"comment\">// 用apply改变this的指向，用obj代替Constructor构造函数内部的this，并把arguments作为参数传入</span></div><div class=\"line\">  <span class=\"keyword\">var</span> ret = Constructor.apply(obj, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> ret === <span class=\"string\">'object'</span> ? ret : obj;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">People</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;;</div><div class=\"line\">People.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 生成实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> Sam = createObject(People, <span class=\"string\">'Sam'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Lary = <span class=\"keyword\">new</span> People(<span class=\"string\">'Lary'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Lary);</div></pre></td></tr></table></figure>\n<h3 id=\"深拷贝-amp-浅拷贝\"><a href=\"#深拷贝-amp-浅拷贝\" class=\"headerlink\" title=\"深拷贝&amp;浅拷贝\"></a>深拷贝&amp;浅拷贝</h3><p>仅针对<code>Object</code>/<code>Array</code>这样的复杂对象</p>\n<ul>\n<li><p>浅拷贝<br>浅拷贝只会将对象的各个属性依次复制，而不进行递归复制，<br>又因为Js存储对象存储地址，<br>因此浅拷贝仅拷贝了地址，原对象与浅拷贝对象的属性还是指向同一块内存地址<br>结果就造成了修改原对象或拷贝对象都会修改内存地址的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> info = &#123;<span class=\"attr\">usr</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'name'</span>&#125;, <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> _newObj = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prop <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(obj.hasOwnProperty(prop)) &#123;</div><div class=\"line\">      _newObj[prop] = obj[prop];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> _newObj;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> shallowObj = shallowCopy(info);</div></pre></td></tr></table></figure>\n</li>\n<li><p>深拷贝<br>深拷贝将原对象的所有属性递归复制<br>因此不会出现指向同一地址的问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">p,c</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i;</div><div class=\"line\">    c = c||&#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> p)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(p.hasOwnProperty(i))&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(p[i])===<span class=\"string\">\"object\"</span>)&#123;</div><div class=\"line\">                c[i] = <span class=\"built_in\">Array</span>.isArray(p[i])?[]:&#123;&#125;;</div><div class=\"line\">                deepCopy(p[i],c[i]);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                c[i] = p[i];</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"XMLHttpRequest-amp-AJAX\"><a href=\"#XMLHttpRequest-amp-AJAX\" class=\"headerlink\" title=\"XMLHttpRequest&amp;AJAX\"></a>XMLHttpRequest&amp;AJAX</h4><p>为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户<br>| 继承<code>XMLHttpRequestEventTarget</code>&amp;<code>EventTarget</code></p>\n<ul>\n<li><code>readyState</code><ul>\n<li>0 <code>UNSENT</code><br>XMLHttpRequest 代理已被创建， 但尚未调用 open() 方法</li>\n<li>1 <code>OPENED</code><br>open() 方法已经被触发。<br>可以通过  setRequestHeader() 方法来设置请求的头部<br>可以调用 send() 方法来发起请求</li>\n<li>2 <code>HEADERS_RECEIVED</code><br>send() 方法已经被调用，响应头也已经被接收</li>\n<li>3 <code>LOADING</code><br>应体部分正在被接收。<br>如果 responseType 属性是“text”或空字符串， responseText 将会在载入的过程中拥有部分响应数据。</li>\n<li>4 <code>DONE</code><br>请求操作已经完成。这意味着数据传输已经彻底完成或失败</li>\n</ul>\n</li>\n<li><code>status</code> 响应状态</li>\n<li><code>statusText</code> 响应说明</li>\n<li><code>onreadystatechange</code><br>当 <code>readyState</code> 的值改变的时候，<code>callback</code> 函数会被调用</li>\n<li><code>timeout</code><br>超时时间，单位为毫秒，超时后触发<code>ontimeout</code>事件</li>\n<li><code>withCredentials</code><br>默认false，跨域请求不能设置cookie<br>为true时可以跨域设置cookie</li>\n<li><code>abort()</code> 终止</li>\n<li><code>getAllResponseHeaders()</code><br>返回所有响应头信息(响应头名和值), 如果响应头还没接受,则返回null</li>\n<li><code>getResponseHeader(DOMString header)</code><br>返回指定的响应头的值, 如果响应头还没被接受,或该响应头不存在,则返回null.</li>\n<li><code>open(method, url, async, user, password)</code><ul>\n<li><code>method</code> 请求方法 (GET, POST, PUT, DELETE)</li>\n<li><code>url</code> 请求的url</li>\n<li><code>async</code> 默认为true<br>如果值为false,则send()方法不会返回任何东西，直到接受到了服务器的返回数据<br>如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者</li>\n</ul>\n</li>\n<li><code>send()</code><br>发送请求.<br>如果该请求是异步模式(默认),该方法会立刻返回.<br>如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回.</li>\n<li><code>setRequestHeader(headerName, value)</code><br>给指定的HTTP请求头赋值.在这之前,你必须确认已经调用 open() 方法打开了一个url.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xmlHttp;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AjaxFunction</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">        createXMLHttpRequest();  </div><div class=\"line\">        <span class=\"keyword\">if</span>(xmlHttp!=<span class=\"literal\">null</span>)&#123;  </div><div class=\"line\">    xmlHttp.onreadystatechange = callBack;  </div><div class=\"line\">    xmlHttp.open(<span class=\"string\">\"get/Post\"</span>,<span class=\"string\">\"URL\"</span>,<span class=\"literal\">true</span>/<span class=\"literal\">false</span>);  </div><div class=\"line\">    xmlHttp.send(<span class=\"literal\">null</span>);  </div><div class=\"line\">        &#125;     </div><div class=\"line\">&#125;     </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//实例化XMLHttpRequest对象  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createXMLHttpRequest</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;  </div><div class=\"line\">    xmlHttp = <span class=\"keyword\">new</span> XMLHttpRequest();   </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.ActiveXObject)&#123;  </div><div class=\"line\">    xmlHttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//指定响应函数  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callBack</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(xmlHttp.readyState==<span class=\"number\">4</span>)&#123;  </div><div class=\"line\">                <span class=\"keyword\">if</span>(xmlHttp.status==<span class=\"number\">200</span>)&#123;  </div><div class=\"line\">            <span class=\"comment\">//do something with xmlHttp.responseText;  </span></div><div class=\"line\">            xmlHttp.responseText;  </div><div class=\"line\">                &#125;     </div><div class=\"line\">        &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"并发模型\"><a href=\"#并发模型\" class=\"headerlink\" title=\"并发模型\"></a>并发模型</h4><h4 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h4><ul>\n<li><p><code>JSONP</code><br>原理：动态插入<code>script</code>标签，通过script标签引入一个js文件，这个文件载入成功后会执行我们在url参数中指定的函数，并把我们需要的就送数据作为参数传入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Jsonp</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;</div><div class=\"line\">  _src = src + <span class=\"string\">'?callback=getData'</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> _script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">  _script.src = _src;</div><div class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>CORS<br>服务端设置<code>Access-Control-Allow-Origin</code></p>\n</li>\n<li>document.domain跨子域</li>\n<li>window.name</li>\n<li>window.postMessage</li>\n</ul>\n<h4 id=\"web安全\"><a href=\"#web安全\" class=\"headerlink\" title=\"web安全\"></a>web安全</h4><h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h4><ul>\n<li>通用选择器，组合子，否定伪类对特异性没有影响 (*, +/&gt;/~, :not())</li>\n<li>0级 类型选择器，伪元素 (a, h1, ::be  fore)</li>\n<li>1级 类选择器，属性选择器, 伪类3 (.example, [type=”radio”], :hover)</li>\n<li>2级 ID选择器 (#example)</li>\n<li>内联样式</li>\n<li>!important</li>\n</ul>\n<h4 id=\"外边距合并\"><a href=\"#外边距合并\" class=\"headerlink\" title=\"外边距合并\"></a>外边距合并</h4><p>块的顶部外边距和底部外边距又是被折叠为单个外边距<br>其大小事组合到其中的最大外边距<br>只有普通文档流中块框的垂直外边距才会发生外边距合并</p>\n<ul>\n<li>相邻的兄弟姐妹元素</li>\n<li>块级父元素与其第一个/最后一个子元素</li>\n<li>空块元素<br>解决方法：padding，overflow，clear<h4 id=\"position-指定一个元素在文档中的定位方式\"><a href=\"#position-指定一个元素在文档中的定位方式\" class=\"headerlink\" title=\"position 指定一个元素在文档中的定位方式\"></a>position 指定一个元素在文档中的定位方式</h4></li>\n<li><code>static</code><br>正常布局行为，top，right，bottom，left，z-index无效</li>\n<li><code>relative</code><br>元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置</li>\n<li><code>absolute</code><br>不为元素预留空间<br>通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置<br>可以设置外边距，且不会与其他边距合并</li>\n<li><code>fixed</code><br>不为元素预留空间<br>过指定元素相对于屏幕视口（viewport）的位置来指定元素位置</li>\n<li><code>sticky</code><br>粘性定位是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位</li>\n</ul>\n<h4 id=\"BFC-块格式化上下文\"><a href=\"#BFC-块格式化上下文\" class=\"headerlink\" title=\"BFC 块格式化上下文\"></a>BFC 块格式化上下文</h4><ul>\n<li>一个BFC：创建的元素 + 内部的所有子元素 - BFC子元素的内部元素</li>\n<li>作用：对定位，清除浮动有影响</li>\n<li>创建方法<ul>\n<li>根元素或其它包含它的元素</li>\n<li>浮动元素 (元素的 <code>float</code> 不是 <code>none</code>)</li>\n<li>绝对定位元素 (元素的 <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>)</li>\n<li>内联块 (元素具有 d<code>isplay: inline-block</code>)</li>\n<li>表格单元格 (元素具有 <code>display: table-cell</code>，HTML表格单元格默认属性)</li>\n<li>表格标题 (元素具有 <code>display: table-caption</code>, HTML表格标题默认属性)</li>\n<li><code>具有overflow</code> 且值不是 <code>visible</code> 的块元素，</li>\n<li><code>display: flow-root</code></li>\n<li><code>column-span: all</code> 应当总是会创建一个新的格式化上下文，即便具有<code>column-span: all</code> 的元素并不被包裹在一个多列容器中</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>再不努力就完蛋惹。<br>","more":"</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><h4 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h4>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 有数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'1'</span>, <span class=\"number\">0</span>, <span class=\"string\">'c'</span>, <span class=\"number\">1</span>, <span class=\"string\">''</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">unique(arr);</div><div class=\"line\"><span class=\"comment\">// ['a', 'b', 'c', '1', 0, 1, '']</span></div></pre></td></tr></table></figure>\n<p>方法一 将原数组中的元素和结果数组中的元素一一比较。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> isUnique = [];</div><div class=\"line\">  arr.map(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isUnique.indexOf(val) === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">      isUnique.push(val);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> isUnique;</div><div class=\"line\">&#125;; </div><div class=\"line\"><span class=\"comment\">// filter</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> res = arr.filter( <span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> array.indexOf(item) === index;   </div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然而 <code>indexOf</code> 不支持 IE6-8.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 多用一层循环兼容</span></div><div class=\"line\"><span class=\"keyword\">var</span> indexOf = [].indexOf ?</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr.indexOf(item);</div><div class=\"line\">  &#125; :</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (arr[i] === item) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> i;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> isUnique = [];</div><div class=\"line\">  arr.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (indexOf(isUnique, val) === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">      isUnique.push(val);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> isUnique;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>方法二 将原数组中重复元素的最后一个元素放入结果数组中。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> res = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果发现相同元素 则i自身进入下一个循环比较</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (arr[i] === arr[j]) &#123;</div><div class=\"line\">        j = ++i;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    res.push(arr[i]);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>方法三 ES6<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> unique = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> [...new <span class=\"built_in\">Set</span>(arr)];</div></pre></td></tr></table></figure></p>\n<h4 id=\"类继承与原型继承\"><a href=\"#类继承与原型继承\" class=\"headerlink\" title=\"类继承与原型继承\"></a>类继承与原型继承</h4><p><a href=\"http://www.zcfy.cc/article/master-the-javascript-interview-what-s-the-difference-between-class-amp-prototypal-inheritance-2185.html\" target=\"_blank\" rel=\"external\">类继承与原型继承原文</a><br>es6中的<code>class</code>是建立在构造函数之上的一种封装，本质依旧是函数。</p>\n<p>类继承：使用原型链连接子类与父类的<code>Prototype</code>,形成层级划分的代理模式。会产生父—子对象分类的副作用。</p>\n<ul>\n<li>紧耦合，脆弱基类</li>\n<li>层级僵化 （新用例的出现，最终会使所有涉及到的继承层次上都出现问题）</li>\n<li>必然重复性<br>原型继承：原型是工作对象的实例，对象直接从其他对象继承属性，因此，对象实例可以由多个对象源所组成。</li>\n</ul>\n<h4 id=\"new出一个实例-原文\"><a href=\"#new出一个实例-原文\" class=\"headerlink\" title=\"new出一个实例  原文\"></a>new出一个实例  <a href=\"https://rockjins.js.org/2017/01/18/2017-01-18-new-object/\" target=\"_blank\" rel=\"external\">原文</a></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> createObject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 创建一个空对象</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(),</div><div class=\"line\">  <span class=\"comment\">// 取到构造函数，赋值给Constructor</span></div><div class=\"line\">    Constructor = [].shift.call(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(Constructor);</div><div class=\"line\">  <span class=\"comment\">// 把引用的Constructor的prototype 赋值给obj原型链</span></div><div class=\"line\">  obj.__proto__ = Constructor.prototype;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(obj);</div><div class=\"line\">  <span class=\"comment\">// 用apply改变this的指向，用obj代替Constructor构造函数内部的this，并把arguments作为参数传入</span></div><div class=\"line\">  <span class=\"keyword\">var</span> ret = Constructor.apply(obj, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> ret === <span class=\"string\">'object'</span> ? ret : obj;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">People</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;;</div><div class=\"line\">People.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 生成实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> Sam = createObject(People, <span class=\"string\">'Sam'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Lary = <span class=\"keyword\">new</span> People(<span class=\"string\">'Lary'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Lary);</div></pre></td></tr></table></figure>\n<h3 id=\"深拷贝-amp-浅拷贝\"><a href=\"#深拷贝-amp-浅拷贝\" class=\"headerlink\" title=\"深拷贝&amp;浅拷贝\"></a>深拷贝&amp;浅拷贝</h3><p>仅针对<code>Object</code>/<code>Array</code>这样的复杂对象</p>\n<ul>\n<li><p>浅拷贝<br>浅拷贝只会将对象的各个属性依次复制，而不进行递归复制，<br>又因为Js存储对象存储地址，<br>因此浅拷贝仅拷贝了地址，原对象与浅拷贝对象的属性还是指向同一块内存地址<br>结果就造成了修改原对象或拷贝对象都会修改内存地址的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> info = &#123;<span class=\"attr\">usr</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'name'</span>&#125;, <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> _newObj = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prop <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(obj.hasOwnProperty(prop)) &#123;</div><div class=\"line\">      _newObj[prop] = obj[prop];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> _newObj;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> shallowObj = shallowCopy(info);</div></pre></td></tr></table></figure>\n</li>\n<li><p>深拷贝<br>深拷贝将原对象的所有属性递归复制<br>因此不会出现指向同一地址的问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">p,c</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i;</div><div class=\"line\">    c = c||&#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> p)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(p.hasOwnProperty(i))&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(p[i])===<span class=\"string\">\"object\"</span>)&#123;</div><div class=\"line\">                c[i] = <span class=\"built_in\">Array</span>.isArray(p[i])?[]:&#123;&#125;;</div><div class=\"line\">                deepCopy(p[i],c[i]);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                c[i] = p[i];</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"XMLHttpRequest-amp-AJAX\"><a href=\"#XMLHttpRequest-amp-AJAX\" class=\"headerlink\" title=\"XMLHttpRequest&amp;AJAX\"></a>XMLHttpRequest&amp;AJAX</h4><p>为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户<br>| 继承<code>XMLHttpRequestEventTarget</code>&amp;<code>EventTarget</code></p>\n<ul>\n<li><code>readyState</code><ul>\n<li>0 <code>UNSENT</code><br>XMLHttpRequest 代理已被创建， 但尚未调用 open() 方法</li>\n<li>1 <code>OPENED</code><br>open() 方法已经被触发。<br>可以通过  setRequestHeader() 方法来设置请求的头部<br>可以调用 send() 方法来发起请求</li>\n<li>2 <code>HEADERS_RECEIVED</code><br>send() 方法已经被调用，响应头也已经被接收</li>\n<li>3 <code>LOADING</code><br>应体部分正在被接收。<br>如果 responseType 属性是“text”或空字符串， responseText 将会在载入的过程中拥有部分响应数据。</li>\n<li>4 <code>DONE</code><br>请求操作已经完成。这意味着数据传输已经彻底完成或失败</li>\n</ul>\n</li>\n<li><code>status</code> 响应状态</li>\n<li><code>statusText</code> 响应说明</li>\n<li><code>onreadystatechange</code><br>当 <code>readyState</code> 的值改变的时候，<code>callback</code> 函数会被调用</li>\n<li><code>timeout</code><br>超时时间，单位为毫秒，超时后触发<code>ontimeout</code>事件</li>\n<li><code>withCredentials</code><br>默认false，跨域请求不能设置cookie<br>为true时可以跨域设置cookie</li>\n<li><code>abort()</code> 终止</li>\n<li><code>getAllResponseHeaders()</code><br>返回所有响应头信息(响应头名和值), 如果响应头还没接受,则返回null</li>\n<li><code>getResponseHeader(DOMString header)</code><br>返回指定的响应头的值, 如果响应头还没被接受,或该响应头不存在,则返回null.</li>\n<li><code>open(method, url, async, user, password)</code><ul>\n<li><code>method</code> 请求方法 (GET, POST, PUT, DELETE)</li>\n<li><code>url</code> 请求的url</li>\n<li><code>async</code> 默认为true<br>如果值为false,则send()方法不会返回任何东西，直到接受到了服务器的返回数据<br>如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者</li>\n</ul>\n</li>\n<li><code>send()</code><br>发送请求.<br>如果该请求是异步模式(默认),该方法会立刻返回.<br>如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回.</li>\n<li><code>setRequestHeader(headerName, value)</code><br>给指定的HTTP请求头赋值.在这之前,你必须确认已经调用 open() 方法打开了一个url.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xmlHttp;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AjaxFunction</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">        createXMLHttpRequest();  </div><div class=\"line\">        <span class=\"keyword\">if</span>(xmlHttp!=<span class=\"literal\">null</span>)&#123;  </div><div class=\"line\">    xmlHttp.onreadystatechange = callBack;  </div><div class=\"line\">    xmlHttp.open(<span class=\"string\">\"get/Post\"</span>,<span class=\"string\">\"URL\"</span>,<span class=\"literal\">true</span>/<span class=\"literal\">false</span>);  </div><div class=\"line\">    xmlHttp.send(<span class=\"literal\">null</span>);  </div><div class=\"line\">        &#125;     </div><div class=\"line\">&#125;     </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//实例化XMLHttpRequest对象  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createXMLHttpRequest</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;  </div><div class=\"line\">    xmlHttp = <span class=\"keyword\">new</span> XMLHttpRequest();   </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.ActiveXObject)&#123;  </div><div class=\"line\">    xmlHttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//指定响应函数  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callBack</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(xmlHttp.readyState==<span class=\"number\">4</span>)&#123;  </div><div class=\"line\">                <span class=\"keyword\">if</span>(xmlHttp.status==<span class=\"number\">200</span>)&#123;  </div><div class=\"line\">            <span class=\"comment\">//do something with xmlHttp.responseText;  </span></div><div class=\"line\">            xmlHttp.responseText;  </div><div class=\"line\">                &#125;     </div><div class=\"line\">        &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"并发模型\"><a href=\"#并发模型\" class=\"headerlink\" title=\"并发模型\"></a>并发模型</h4><h4 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h4><ul>\n<li><p><code>JSONP</code><br>原理：动态插入<code>script</code>标签，通过script标签引入一个js文件，这个文件载入成功后会执行我们在url参数中指定的函数，并把我们需要的就送数据作为参数传入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Jsonp</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;</div><div class=\"line\">  _src = src + <span class=\"string\">'?callback=getData'</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> _script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">  _script.src = _src;</div><div class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>CORS<br>服务端设置<code>Access-Control-Allow-Origin</code></p>\n</li>\n<li>document.domain跨子域</li>\n<li>window.name</li>\n<li>window.postMessage</li>\n</ul>\n<h4 id=\"web安全\"><a href=\"#web安全\" class=\"headerlink\" title=\"web安全\"></a>web安全</h4><h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h4><ul>\n<li>通用选择器，组合子，否定伪类对特异性没有影响 (*, +/&gt;/~, :not())</li>\n<li>0级 类型选择器，伪元素 (a, h1, ::be  fore)</li>\n<li>1级 类选择器，属性选择器, 伪类3 (.example, [type=”radio”], :hover)</li>\n<li>2级 ID选择器 (#example)</li>\n<li>内联样式</li>\n<li>!important</li>\n</ul>\n<h4 id=\"外边距合并\"><a href=\"#外边距合并\" class=\"headerlink\" title=\"外边距合并\"></a>外边距合并</h4><p>块的顶部外边距和底部外边距又是被折叠为单个外边距<br>其大小事组合到其中的最大外边距<br>只有普通文档流中块框的垂直外边距才会发生外边距合并</p>\n<ul>\n<li>相邻的兄弟姐妹元素</li>\n<li>块级父元素与其第一个/最后一个子元素</li>\n<li>空块元素<br>解决方法：padding，overflow，clear<h4 id=\"position-指定一个元素在文档中的定位方式\"><a href=\"#position-指定一个元素在文档中的定位方式\" class=\"headerlink\" title=\"position 指定一个元素在文档中的定位方式\"></a>position 指定一个元素在文档中的定位方式</h4></li>\n<li><code>static</code><br>正常布局行为，top，right，bottom，left，z-index无效</li>\n<li><code>relative</code><br>元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置</li>\n<li><code>absolute</code><br>不为元素预留空间<br>通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置<br>可以设置外边距，且不会与其他边距合并</li>\n<li><code>fixed</code><br>不为元素预留空间<br>过指定元素相对于屏幕视口（viewport）的位置来指定元素位置</li>\n<li><code>sticky</code><br>粘性定位是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位</li>\n</ul>\n<h4 id=\"BFC-块格式化上下文\"><a href=\"#BFC-块格式化上下文\" class=\"headerlink\" title=\"BFC 块格式化上下文\"></a>BFC 块格式化上下文</h4><ul>\n<li>一个BFC：创建的元素 + 内部的所有子元素 - BFC子元素的内部元素</li>\n<li>作用：对定位，清除浮动有影响</li>\n<li>创建方法<ul>\n<li>根元素或其它包含它的元素</li>\n<li>浮动元素 (元素的 <code>float</code> 不是 <code>none</code>)</li>\n<li>绝对定位元素 (元素的 <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>)</li>\n<li>内联块 (元素具有 d<code>isplay: inline-block</code>)</li>\n<li>表格单元格 (元素具有 <code>display: table-cell</code>，HTML表格单元格默认属性)</li>\n<li>表格标题 (元素具有 <code>display: table-caption</code>, HTML表格标题默认属性)</li>\n<li><code>具有overflow</code> 且值不是 <code>visible</code> 的块元素，</li>\n<li><code>display: flow-root</code></li>\n<li><code>column-span: all</code> 应当总是会创建一个新的格式化上下文，即便具有<code>column-span: all</code> 的元素并不被包裹在一个多列容器中</li>\n</ul>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjcr55ukl0002jbzezs0l90x6","tag_id":"cjcr55uko0004jbze1z91vobz","_id":"cjcr55ukz000djbzeegmtyvdp"},{"post_id":"cjcr55ul6000ijbze9t1f017o","tag_id":"cjcr55ukz000cjbze8aenr8bv","_id":"cjcr55ul9000ljbzeyuts5ve9"},{"post_id":"cjcr55ukq0005jbzeswxbx2to","tag_id":"cjcr55ukz000cjbze8aenr8bv","_id":"cjcr55ulb000pjbze71jxvl1f"},{"post_id":"cjcr55ukq0005jbzeswxbx2to","tag_id":"cjcr55ul4000gjbzep4i1wlbc","_id":"cjcr55ulc000rjbze4w8f5e0t"},{"post_id":"cjcr55ukq0005jbzeswxbx2to","tag_id":"cjcr55ul7000jjbze3yjdkhb5","_id":"cjcr55uld000ujbzeltw05bqn"},{"post_id":"cjcr55ukt0007jbze7w5iok0c","tag_id":"cjcr55uko0004jbze1z91vobz","_id":"cjcr55ule000wjbzedzoe15ce"},{"post_id":"cjcr55ukt0007jbze7w5iok0c","tag_id":"cjcr55ula000njbze9h1btxgn","_id":"cjcr55ulg000zjbzeyss1xgq7"},{"post_id":"cjcr55ul2000fjbzeou6vdrip","tag_id":"cjcr55uld000tjbzempnkotog","_id":"cjcr55ulh0011jbze6tk9tqby"},{"post_id":"cjcr55ula000ojbze0a33qthd","tag_id":"cjcr55ulf000yjbzes9wknru6","_id":"cjcr55ulj0015jbzedtee554v"},{"post_id":"cjcr55ulb000qjbze4nge345b","tag_id":"cjcr55uli0013jbze3o57lx5t","_id":"cjcr55ulm0019jbze93jh6uqs"},{"post_id":"cjcr55uld000vjbzen500bac3","tag_id":"cjcr55ulk0017jbze7muciv74","_id":"cjcr55ulo001djbzexw0vxwqf"},{"post_id":"cjcr55uld000vjbzen500bac3","tag_id":"cjcr55ukz000cjbze8aenr8bv","_id":"cjcr55ulp001fjbzepn3ir49s"},{"post_id":"cjcr55ulq001gjbze0cs4h5ht","tag_id":"cjcr55ulo001cjbze7och183s","_id":"cjcr55uls001jjbzefdgxt7mb"},{"post_id":"cjcr55ulq001gjbze0cs4h5ht","tag_id":"cjcr55ukz000cjbze8aenr8bv","_id":"cjcr55ulu001mjbzep0spf17h"},{"post_id":"cjcr55ulk0018jbzes4s2m9x3","tag_id":"cjcr55ukz000cjbze8aenr8bv","_id":"cjcr55ulv001ojbzectsfk1zo"},{"post_id":"cjcr55ulk0018jbzes4s2m9x3","tag_id":"cjcr55ulo001cjbze7och183s","_id":"cjcr55ulw001qjbzer5amvetb"},{"post_id":"cjcr55ulk0018jbzes4s2m9x3","tag_id":"cjcr55ulq001hjbzeldpf1zy1","_id":"cjcr55ulx001sjbzefvphvunq"},{"post_id":"cjcr55ulm001ajbze1nfv3gc0","tag_id":"cjcr55ulu001ljbzeek9h0y24","_id":"cjcr55ulx001ujbzeqanami1w"},{"post_id":"cjcr55ulm001ajbze1nfv3gc0","tag_id":"cjcr55ulw001rjbzeo8vihg6f","_id":"cjcr55ulx001vjbzeiebhdrly"},{"post_id":"cjcr55uln001bjbzeq7wz09s2","tag_id":"cjcr55ulx001tjbzezgnhu87n","_id":"cjcr55uly001xjbzemd1mjvk7"},{"post_id":"cjcr55ulo001ejbzel0jkv7wu","tag_id":"cjcr55uko0004jbze1z91vobz","_id":"cjcr55ulz001zjbzeg86r3kuk"},{"post_id":"cjcr55ulo001ejbzel0jkv7wu","tag_id":"cjcr55ulx001wjbze1kv6nztr","_id":"cjcr55ulz0020jbzeucl70yf7"},{"post_id":"cjcr55uls001kjbzeex0yl2jm","tag_id":"cjcr55ulz001yjbzex65g5r3g","_id":"cjcr55um00023jbzemg0k9ud5"},{"post_id":"cjcr55uls001kjbzeex0yl2jm","tag_id":"cjcr55ulz0021jbzes6lz96qx","_id":"cjcr55um00024jbzeiab2w2s7"},{"post_id":"cjcr55ulu001njbze0n4sso6d","tag_id":"cjcr55ulz0022jbze1pbd04x1","_id":"cjcr55um10027jbzed95iimjl"},{"post_id":"cjcr55ulu001njbze0n4sso6d","tag_id":"cjcr55um00025jbze7dwxnacu","_id":"cjcr55um10028jbzeljbbvy4k"},{"post_id":"cjcr55ulv001pjbzey7ra21q9","tag_id":"cjcr55um00026jbzek40s1xtl","_id":"cjcr55um10029jbze6i9015i6"}],"Tag":[{"name":"JavaScript","_id":"cjcr55uko0004jbze1z91vobz"},{"name":"javascript","_id":"cjcr55ukz000cjbze8aenr8bv"},{"name":"ES6","_id":"cjcr55ul4000gjbzep4i1wlbc"},{"name":"ES5","_id":"cjcr55ul7000jjbze3yjdkhb5"},{"name":"Angular4","_id":"cjcr55ula000njbze9h1btxgn"},{"name":"Angular","_id":"cjcr55uld000tjbzempnkotog"},{"name":"MobX","_id":"cjcr55ulf000yjbzes9wknru6"},{"name":"mongodb","_id":"cjcr55uli0013jbze3o57lx5t"},{"name":"react","_id":"cjcr55ulk0017jbze7muciv74"},{"name":"node","_id":"cjcr55ulo001cjbze7och183s"},{"name":"koa2","_id":"cjcr55ulq001hjbzeldpf1zy1"},{"name":"Xunfeng","_id":"cjcr55ulu001ljbzeek9h0y24"},{"name":"黑天很黑","_id":"cjcr55ulw001rjbzeo8vihg6f"},{"name":"前端","_id":"cjcr55ulx001tjbzezgnhu87n"},{"name":"EventLoop","_id":"cjcr55ulx001wjbze1kv6nztr"},{"name":"搭建hexo","_id":"cjcr55ulz001yjbzex65g5r3g"},{"name":"git","_id":"cjcr55ulz0021jbzes6lz96qx"},{"name":"TypeScript","_id":"cjcr55ulz0022jbze1pbd04x1"},{"name":"Node","_id":"cjcr55um00025jbze7dwxnacu"},{"name":"javaScript","_id":"cjcr55um00026jbzek40s1xtl"}]}}